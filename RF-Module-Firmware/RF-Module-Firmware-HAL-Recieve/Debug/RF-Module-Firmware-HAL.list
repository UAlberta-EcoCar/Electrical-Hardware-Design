
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  0800c130  0800c130  0000d130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd10  0800cd10  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd10  0800cd10  0000dd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd18  0800cd18  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd18  0800cd18  0000dd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd1c  0800cd1c  0000dd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cd20  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  200001d8  0800cef8  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ef4  0800cef8  0000eef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002264d  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ac6  00000000  00000000  00030855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00035320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001589  00000000  00000000  00036ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025617  00000000  00000000  00038481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021455  00000000  00000000  0005da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd728  00000000  00000000  0007eeed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c0  00000000  00000000  0015c658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  00164b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c118 	.word	0x0800c118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c118 	.word	0x0800c118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <MX_CAN1_Init+0x6c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ec0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ec4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eec:	f001 fb7a 	bl	80025e4 <HAL_CAN_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ef6:	f000 fa69 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f4 	.word	0x200001f4
 8000f04:	40006400 	.word	0x40006400

08000f08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d13b      	bne.n	8000fa2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f001 fd11 	bl	80029a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f90:	2309      	movs	r3, #9
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f001 fcff 	bl	80029a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40006400 	.word	0x40006400
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <MX_FREERTOS_Init+0x18>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_FREERTOS_Init+0x1c>)
 8000fbe:	f005 fdff 	bl	8006bc0 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a03      	ldr	r2, [pc, #12]	@ (8000fd4 <MX_FREERTOS_Init+0x20>)
 8000fc6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0800c930 	.word	0x0800c930
 8000fd0:	08000fd9 	.word	0x08000fd9
 8000fd4:	2000021c 	.word	0x2000021c

08000fd8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09c      	sub	sp, #112	@ 0x70
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	//	rfm95_init();
	//	uint8_t version = 0, temp = 0;
	rf_handle_t rfm95 = { .rf_nreset_port = RF_NRST_GPIO_Port, .rf_nreset_pin =
 8000fe0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe4:	222c      	movs	r2, #44	@ 0x2c
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f009 f9af 	bl	800a34c <memset>
 8000fee:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <StartDefaultTask+0x150>)
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ffe:	2310      	movs	r3, #16
 8001000:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001002:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <StartDefaultTask+0x154>)
 8001004:	643b      	str	r3, [r7, #64]	@ 0x40
 8001006:	2320      	movs	r3, #32
 8001008:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800100c:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <StartDefaultTask+0x158>)
 800100e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001010:	4b48      	ldr	r3, [pc, #288]	@ (8001134 <StartDefaultTask+0x15c>)
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
	RF_NRST_Pin, .rf_nss_port = SPI1_NSS_GPIO_Port, .rf_nss_pin =
	SPI1_NSS_Pin, .rf_spi_handle = &hspi1, .rf_delay_func = osDelay,
			.rf_spi_timeout = HAL_MAX_DELAY, .rf_carrier_frequency = 868000000 };

	rf_initialize_radio(&rfm95);
 8001014:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fa69 	bl	80014f0 <rf_initialize_radio>
	rf_set_tx_power(&rfm95, 5);
 800101e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fba1 	bl	800176c <rf_set_tx_power>

	rf_set_frequency(&rfm95, 868000000);
 800102a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800102e:	4941      	ldr	r1, [pc, #260]	@ (8001134 <StartDefaultTask+0x15c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fb49 	bl	80016c8 <rf_set_frequency>
	uint8_t testdata = 347u;
 8001036:	235b      	movs	r3, #91	@ 0x5b
 8001038:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	//	rf_set_op_mode(&rfm95, RF_OP_MODE_RX_SINGLE);

	//	rf_listen_implicit(&rfm95, 1);
	//	rf_listen(&rfm95);

	const char test[] = "Hello.7890";
 800103c:	4a3e      	ldr	r2, [pc, #248]	@ (8001138 <StartDefaultTask+0x160>)
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	ca07      	ldmia	r2, {r0, r1, r2}
 8001044:	c303      	stmia	r3!, {r0, r1}
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	3302      	adds	r3, #2
 800104a:	0c12      	lsrs	r2, r2, #16
 800104c:	701a      	strb	r2, [r3, #0]

	uint8_t rec_legth = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f001 fe09 	bl	8002c74 <HAL_GPIO_WritePin>
//		osDelay(100);

		testdata = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		rec_legth = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		rf_recieve_single(&rfm95, &rec_legth);
 800106e:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8001072:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fca7 	bl	80019cc <rf_recieve_single>
		if (rec_legth > 0) {
 800107e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001082:	2b00      	cmp	r3, #0
 8001084:	d044      	beq.n	8001110 <StartDefaultTask+0x138>
			char rec_data[20] = { 0 };
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
			rf_read_packet(&rfm95, rec_legth, &test_packet.packet_raw);
 8001098:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800109c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a0:	4a26      	ldr	r2, [pc, #152]	@ (800113c <StartDefaultTask+0x164>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fdba 	bl	8001c1c <rf_read_packet>

			log_info("%u %u %u %u", (uint32_t)(test_packet.packet_fc.fc_voltage * 1000), (uint32_t)(test_packet.packet_fc.fc_current * 1000),
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <StartDefaultTask+0x164>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001140 <StartDefaultTask+0x168>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <StartDefaultTask+0x164>)
 80010bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80010c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001140 <StartDefaultTask+0x168>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	ee17 2a90 	vmov	r2, s15
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <StartDefaultTask+0x164>)
 80010d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001140 <StartDefaultTask+0x168>
 80010da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e2:	ee17 1a90 	vmov	r1, s15
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <StartDefaultTask+0x164>)
 80010e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ec:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001140 <StartDefaultTask+0x168>
 80010f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 3a90 	vmov	r3, s15
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	9101      	str	r1, [sp, #4]
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	ee16 3a90 	vmov	r3, s13
 8001106:	22d7      	movs	r2, #215	@ 0xd7
 8001108:	490e      	ldr	r1, [pc, #56]	@ (8001144 <StartDefaultTask+0x16c>)
 800110a:	480f      	ldr	r0, [pc, #60]	@ (8001148 <StartDefaultTask+0x170>)
 800110c:	f008 ffd6 	bl	800a0bc <iprintf>
					(uint32_t)(test_packet.packet_mtr.mtr_voltage * 1000), (uint32_t)(test_packet.packet_mtr.mtr_current * 1000));
		}
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f001 fdab 	bl	8002c74 <HAL_GPIO_WritePin>
		osDelay(100);
 800111e:	2064      	movs	r0, #100	@ 0x64
 8001120:	f005 fde0 	bl	8006ce4 <osDelay>
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8001124:	e796      	b.n	8001054 <StartDefaultTask+0x7c>
 8001126:	bf00      	nop
 8001128:	20000230 	.word	0x20000230
 800112c:	48000400 	.word	0x48000400
 8001130:	08006ce5 	.word	0x08006ce5
 8001134:	33bca100 	.word	0x33bca100
 8001138:	0800c1ac 	.word	0x0800c1ac
 800113c:	20000220 	.word	0x20000220
 8001140:	447a0000 	.word	0x447a0000
 8001144:	0800c174 	.word	0x0800c174
 8001148:	0800c18c 	.word	0x0800c18c

0800114c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b4a      	ldr	r3, [pc, #296]	@ (800128c <MX_GPIO_Init+0x140>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a49      	ldr	r2, [pc, #292]	@ (800128c <MX_GPIO_Init+0x140>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <MX_GPIO_Init+0x140>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b44      	ldr	r3, [pc, #272]	@ (800128c <MX_GPIO_Init+0x140>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a43      	ldr	r2, [pc, #268]	@ (800128c <MX_GPIO_Init+0x140>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b41      	ldr	r3, [pc, #260]	@ (800128c <MX_GPIO_Init+0x140>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <MX_GPIO_Init+0x140>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <MX_GPIO_Init+0x140>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <MX_GPIO_Init+0x140>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b0:	4837      	ldr	r0, [pc, #220]	@ (8001290 <MX_GPIO_Init+0x144>)
 80011b2:	f001 fd5f 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|LED_D1_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c0:	f001 fd58 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2120      	movs	r1, #32
 80011c8:	4832      	ldr	r0, [pc, #200]	@ (8001294 <MX_GPIO_Init+0x148>)
 80011ca:	f001 fd53 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 80011ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	482a      	ldr	r0, [pc, #168]	@ (8001290 <MX_GPIO_Init+0x144>)
 80011e8:	f001 fbda 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NSS_Pin LED_D1_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LED_D1_Pin;
 80011ec:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f001 fbca 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 800120c:	23c3      	movs	r3, #195	@ 0xc3
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <MX_GPIO_Init+0x148>)
 8001222:	f001 fbbd 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001246:	f001 fbab 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO4_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 800124a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001250:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001264:	f001 fb9c 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NRST_Pin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 8001268:	2320      	movs	r3, #32
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_GPIO_Init+0x148>)
 8001280:	f001 fb8e 	bl	80029a0 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	48000800 	.word	0x48000800
 8001294:	48000400 	.word	0x48000400

08001298 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <_write+0x28>)
 80012b0:	f004 ff26 	bl	8006100 <HAL_UART_Transmit>
	return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000037c 	.word	0x2000037c

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f001 f953 	bl	8002572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f814 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f7ff ff3c 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012d4:	f001 f89c 	bl	8002410 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80012d8:	f7ff fdde 	bl	8000e98 <MX_CAN1_Init>
  MX_TIM1_Init();
 80012dc:	f000 fee4 	bl	80020a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012e0:	f000 ff8e 	bl	8002200 <MX_TIM2_Init>
  MX_SPI1_Init();
 80012e4:	f000 fcda 	bl	8001c9c <MX_SPI1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012e8:	f005 fc20 	bl	8006b2c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012ec:	f7ff fe62 	bl	8000fb4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012f0:	f005 fc40 	bl	8006b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <main+0x30>

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b096      	sub	sp, #88	@ 0x58
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2244      	movs	r2, #68	@ 0x44
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f820 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800131e:	f001 fccf 	bl	8002cc0 <HAL_PWREx_ControlVoltageScaling>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001328:	f000 f850 	bl	80013cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001330:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133a:	2303      	movs	r3, #3
 800133c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001342:	2314      	movs	r3, #20
 8001344:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001346:	2307      	movs	r3, #7
 8001348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd08 	bl	8002d6c <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001362:	f000 f833 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2303      	movs	r3, #3
 800136c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2104      	movs	r1, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f002 f908 	bl	8003594 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800138a:	f000 f81f 	bl	80013cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800138e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001392:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001396:	2000      	movs	r0, #0
 8001398:	f002 f9fc 	bl	8003794 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800139c:	f002 fb24 	bl	80039e8 <HAL_RCC_EnableCSS>
}
 80013a0:	bf00      	nop
 80013a2:	3758      	adds	r7, #88	@ 0x58
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ba:	f001 f8f3 	bl	80025a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40014400 	.word	0x40014400

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
}
 80013d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e002      	b.n	80013e2 <Error_Handler+0x16>
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001450 <Error_Handler+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	ddf8      	ble.n	80013dc <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	e002      	b.n	80013f6 <Error_Handler+0x2a>
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <Error_Handler+0x84>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	ddf8      	ble.n	80013f0 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e002      	b.n	800140a <Error_Handler+0x3e>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <Error_Handler+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	ddf8      	ble.n	8001404 <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	e002      	b.n	800141e <Error_Handler+0x52>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <Error_Handler+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	ddf8      	ble.n	8001418 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e002      	b.n	8001432 <Error_Handler+0x66>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <Error_Handler+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	ddf8      	ble.n	800142c <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	e002      	b.n	8001446 <Error_Handler+0x7a>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4a01      	ldr	r2, [pc, #4]	@ (8001450 <Error_Handler+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	ddf8      	ble.n	8001440 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800144e:	e7c2      	b.n	80013d6 <Error_Handler+0xa>
 8001450:	000c34ff 	.word	0x000c34ff

08001454 <rf_set_op_mode>:

#define LOG_WARN(M, ...) printf("[Abi's RFlib]" SETFG_YELLOW "[WARN] " M GR_RESET "\r\n", ##__VA_ARGS__)

#define LOG_INFO(M, ...) printf("[Abi's RFlib][INFO] " M "\r\n", ##__VA_ARGS__)

int rf_set_op_mode(rf_handle_t *rf_handle, rf_op_mode_t rf_op_mode) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]

	rf_register_op_mode_config_t opmode = { 0 };
 8001460:	2300      	movs	r3, #0
 8001462:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	461a      	mov	r2, r3
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f9f9 	bl	8001864 <rf_spi_read_register>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <rf_set_op_mode+0x32>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001478:	2216      	movs	r2, #22
 800147a:	491b      	ldr	r1, [pc, #108]	@ (80014e8 <rf_set_op_mode+0x94>)
 800147c:	481b      	ldr	r0, [pc, #108]	@ (80014ec <rf_set_op_mode+0x98>)
 800147e:	f008 fe1d 	bl	800a0bc <iprintf>
		return 0;
 8001482:	2300      	movs	r3, #0
 8001484:	e02b      	b.n	80014de <rf_set_op_mode+0x8a>

//	opmode.access_shared_reg = 0;

//	opmode.long_range_mode = 1; // just assume we are long range mode only.

	opmode.mode = rf_op_mode;
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	b2da      	uxtb	r2, r3
 800148e:	7b3b      	ldrb	r3, [r7, #12]
 8001490:	f362 0302 	bfi	r3, r2, #0, #3
 8001494:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode)) {
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	461a      	mov	r2, r3
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fa2f 	bl	8001900 <rf_spi_write_register>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <rf_set_op_mode+0x62>
		LOG_ERROR("SPI ERROR Setting op mode");
 80014a8:	2223      	movs	r2, #35	@ 0x23
 80014aa:	490f      	ldr	r1, [pc, #60]	@ (80014e8 <rf_set_op_mode+0x94>)
 80014ac:	480f      	ldr	r0, [pc, #60]	@ (80014ec <rf_set_op_mode+0x98>)
 80014ae:	f008 fe05 	bl	800a0bc <iprintf>
		return 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e013      	b.n	80014de <rf_set_op_mode+0x8a>
	}

	opmode.op_mode = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	461a      	mov	r2, r3
 80014c0:	2101      	movs	r1, #1
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f9ce 	bl	8001864 <rf_spi_read_register>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <rf_set_op_mode+0x88>
		LOG_ERROR("SPI ERROR Setting op mode");
 80014ce:	222a      	movs	r2, #42	@ 0x2a
 80014d0:	4905      	ldr	r1, [pc, #20]	@ (80014e8 <rf_set_op_mode+0x94>)
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <rf_set_op_mode+0x98>)
 80014d4:	f008 fdf2 	bl	800a0bc <iprintf>
		return 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <rf_set_op_mode+0x8a>
	}

	return 1;
 80014dc:	2301      	movs	r3, #1

}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0800c1b8 	.word	0x0800c1b8
 80014ec:	0800c1d0 	.word	0x0800c1d0

080014f0 <rf_initialize_radio>:

int rf_initialize_radio(rf_handle_t *rf_handle) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if (rf_handle == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <rf_initialize_radio+0x12>
		return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e0cd      	b.n	800169e <rf_initialize_radio+0x1ae>

	if (rf_handle->rf_spi_timeout == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <rf_initialize_radio+0x20>
		rf_handle->rf_spi_timeout = 100;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2264      	movs	r2, #100	@ 0x64
 800150e:	605a      	str	r2, [r3, #4]

	if (rf_handle->rf_module_identifier == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <rf_initialize_radio+0x32>
		rf_handle->rf_module_identifier = -1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	22ff      	movs	r2, #255	@ 0xff
 800151e:	f883 2020 	strb.w	r2, [r3, #32]

	if (rf_handle->rf_carrier_frequency == NULL) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <rf_initialize_radio+0x48>
		LOG_ERROR("Carrier Frequency not defined.");
 800152a:	223d      	movs	r2, #61	@ 0x3d
 800152c:	495e      	ldr	r1, [pc, #376]	@ (80016a8 <rf_initialize_radio+0x1b8>)
 800152e:	485f      	ldr	r0, [pc, #380]	@ (80016ac <rf_initialize_radio+0x1bc>)
 8001530:	f008 fdc4 	bl	800a0bc <iprintf>
		return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e0b2      	b.n	800169e <rf_initialize_radio+0x1ae>
	}

	printf("\r\n");
 8001538:	485d      	ldr	r0, [pc, #372]	@ (80016b0 <rf_initialize_radio+0x1c0>)
 800153a:	f008 fe27 	bl	800a18c <puts>

	LOG_INFO(SETFG_GREEN "Initializing module" GR_RESET,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	4619      	mov	r1, r3
 8001546:	485b      	ldr	r0, [pc, #364]	@ (80016b4 <rf_initialize_radio+0x1c4>)
 8001548:	f008 fdb8 	bl	800a0bc <iprintf>
			rf_handle->rf_module_identifier);

	rf_reset(rf_handle);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa17 	bl	8001980 <rf_reset>

// check version
	uint8_t version;
	if (!rf_spi_read_register(rf_handle, RegVersion, &version)) {
 8001552:	f107 0317 	add.w	r3, r7, #23
 8001556:	461a      	mov	r2, r3
 8001558:	2142      	movs	r1, #66	@ 0x42
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f982 	bl	8001864 <rf_spi_read_register>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <rf_initialize_radio+0x84>
		LOG_ERROR("Module did not return a version; SPI Error");
 8001566:	224b      	movs	r2, #75	@ 0x4b
 8001568:	494f      	ldr	r1, [pc, #316]	@ (80016a8 <rf_initialize_radio+0x1b8>)
 800156a:	4853      	ldr	r0, [pc, #332]	@ (80016b8 <rf_initialize_radio+0x1c8>)
 800156c:	f008 fda6 	bl	800a0bc <iprintf>
		return 0;
 8001570:	2300      	movs	r3, #0
 8001572:	e094      	b.n	800169e <rf_initialize_radio+0x1ae>
	}

	if (RFM9x_VER != version) {
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d006      	beq.n	8001588 <rf_initialize_radio+0x98>
		LOG_ERROR("Module did not return the correct version");
 800157a:	2250      	movs	r2, #80	@ 0x50
 800157c:	494a      	ldr	r1, [pc, #296]	@ (80016a8 <rf_initialize_radio+0x1b8>)
 800157e:	484f      	ldr	r0, [pc, #316]	@ (80016bc <rf_initialize_radio+0x1cc>)
 8001580:	f008 fd9c 	bl	800a0bc <iprintf>
		return 0;
 8001584:	2300      	movs	r3, #0
 8001586:	e08a      	b.n	800169e <rf_initialize_radio+0x1ae>
	}

	LOG_INFO("Module Available; \x1b[34;1;4mVersion: 0x%x\x1b[0m", version);
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	4619      	mov	r1, r3
 800158c:	484c      	ldr	r0, [pc, #304]	@ (80016c0 <rf_initialize_radio+0x1d0>)
 800158e:	f008 fd95 	bl	800a0bc <iprintf>

// Module must be placed in sleep mode before switching to lora.
	rf_register_op_mode_config_t opmode = { 0 };
 8001592:	2300      	movs	r3, #0
 8001594:	753b      	strb	r3, [r7, #20]
	opmode.long_range_mode = 1;
 8001596:	7d3b      	ldrb	r3, [r7, #20]
 8001598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800159c:	753b      	strb	r3, [r7, #20]
	opmode.mode = RF_OP_MODE_SLEEP;
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	f36f 0302 	bfc	r3, #0, #3
 80015a4:	753b      	strb	r3, [r7, #20]
	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode))
 80015a6:	7d3b      	ldrb	r3, [r7, #20]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2101      	movs	r1, #1
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f9a7 	bl	8001900 <rf_spi_write_register>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <rf_initialize_radio+0xcc>
		return 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e070      	b.n	800169e <rf_initialize_radio+0x1ae>
//	rf_register_dio_mapping_2_config_t diomapping2 = { 0 };
//	if (!rf_spi_write_register(rf_handle, RegDioMapping2,
//			diomapping2.dio_mapping_2))
//		return 0;

	if (rf_handle->rf_post_init_clbk != NULL) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <rf_initialize_radio+0xda>
		rf_handle->rf_post_init_clbk();
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4798      	blx	r3
	}

// Set up TX and RX FIFO base addresses.
	if (!rf_spi_write_register(rf_handle, RegFifoTxBaseAddr, 0x00)) // previously 0x80
 80015ca:	2200      	movs	r2, #0
 80015cc:	210e      	movs	r1, #14
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f996 	bl	8001900 <rf_spi_write_register>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <rf_initialize_radio+0xee>
		return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	e05f      	b.n	800169e <rf_initialize_radio+0x1ae>
	if (!rf_spi_write_register(rf_handle, RegFifoRxBaseAddr, 0x00))
 80015de:	2200      	movs	r2, #0
 80015e0:	210f      	movs	r1, #15
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f98c 	bl	8001900 <rf_spi_write_register>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <rf_initialize_radio+0x102>
		return 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e055      	b.n	800169e <rf_initialize_radio+0x1ae>

// Maximum payload length of the RFM95 is 64.
	if (!rf_spi_write_register(rf_handle, RegMaxPayloadLength, 64))
 80015f2:	2240      	movs	r2, #64	@ 0x40
 80015f4:	2123      	movs	r1, #35	@ 0x23
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f982 	bl	8001900 <rf_spi_write_register>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <rf_initialize_radio+0x116>
		return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e04b      	b.n	800169e <rf_initialize_radio+0x1ae>

// make sure this is defined
	rf_set_frequency(rf_handle, rf_handle->rf_carrier_frequency);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f85b 	bl	80016c8 <rf_set_frequency>

// Set LNA to the highest gain with 150% boost.
	rf_register_lna_config_t lnaboost = { 0 };
 8001612:	2300      	movs	r3, #0
 8001614:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegLna, &lnaboost.lna_config))
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	461a      	mov	r2, r3
 800161c:	210c      	movs	r1, #12
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f920 	bl	8001864 <rf_spi_read_register>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <rf_initialize_radio+0x13e>
		return 0;
 800162a:	2300      	movs	r3, #0
 800162c:	e037      	b.n	800169e <rf_initialize_radio+0x1ae>
	lnaboost.LnaBoostHf = 0b11;
 800162e:	7c3b      	ldrb	r3, [r7, #16]
 8001630:	f043 0303 	orr.w	r3, r3, #3
 8001634:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_write_register(rf_handle, RegLna, lnaboost.lna_config))
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	461a      	mov	r2, r3
 800163a:	210c      	movs	r1, #12
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f95f 	bl	8001900 <rf_spi_write_register>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <rf_initialize_radio+0x15c>
		return 0;
 8001648:	2300      	movs	r3, #0
 800164a:	e028      	b.n	800169e <rf_initialize_radio+0x1ae>

// Set auto AGC
	rf_register_modem_config_3_t autoagc = { 0 };
 800164c:	2300      	movs	r3, #0
 800164e:	733b      	strb	r3, [r7, #12]
	autoagc.agc_auto_on = 1;
 8001650:	7b3b      	ldrb	r3, [r7, #12]
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	733b      	strb	r3, [r7, #12]
	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	461a      	mov	r2, r3
 800165c:	2126      	movs	r1, #38	@ 0x26
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f94e 	bl	8001900 <rf_spi_write_register>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <rf_initialize_radio+0x17e>
			autoagc.modem_config_3))
		return 0;
 800166a:	2300      	movs	r3, #0
 800166c:	e017      	b.n	800169e <rf_initialize_radio+0x1ae>

// Set module power to 17dbm.
	if (!rf_set_tx_power(rf_handle, 10))
 800166e:	210a      	movs	r1, #10
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f87b 	bl	800176c <rf_set_tx_power>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <rf_initialize_radio+0x190>
		return 0;
 800167c:	2300      	movs	r3, #0
 800167e:	e00e      	b.n	800169e <rf_initialize_radio+0x1ae>
//	idle.long_range_mode = 1;
//	idle.mode = RF_OP_MODE_STDBY;
//	if (!rf_spi_write_register(rf_handle, RegOpMode, idle.op_mode))
//		return 0;

	if (!rf_set_op_mode(rf_handle, RF_OP_MODE_STDBY)) {
 8001680:	2101      	movs	r1, #1
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fee6 	bl	8001454 <rf_set_op_mode>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <rf_initialize_radio+0x1ac>
		LOG_ERROR("OP Mode Init error");
 800168e:	2295      	movs	r2, #149	@ 0x95
 8001690:	4905      	ldr	r1, [pc, #20]	@ (80016a8 <rf_initialize_radio+0x1b8>)
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <rf_initialize_radio+0x1d4>)
 8001694:	f008 fd12 	bl	800a0bc <iprintf>
		return 0;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <rf_initialize_radio+0x1ae>
	}

	return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800c1b8 	.word	0x0800c1b8
 80016ac:	0800c214 	.word	0x0800c214
 80016b0:	0800c25c 	.word	0x0800c25c
 80016b4:	0800c260 	.word	0x0800c260
 80016b8:	0800c294 	.word	0x0800c294
 80016bc:	0800c2e8 	.word	0x0800c2e8
 80016c0:	0800c33c 	.word	0x0800c33c
 80016c4:	0800c380 	.word	0x0800c380

080016c8 <rf_set_frequency>:
		return 0;

	return 1;
}

int rf_set_frequency(rf_handle_t *rf_handle, uint32_t rf_carrier_frequency) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t) rf_carrier_frequency << 19) / 32000000;
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	2000      	movs	r0, #0
 80016d6:	460a      	mov	r2, r1
 80016d8:	4603      	mov	r3, r0
 80016da:	0b55      	lsrs	r5, r2, #13
 80016dc:	04d4      	lsls	r4, r2, #19
 80016de:	4a22      	ldr	r2, [pc, #136]	@ (8001768 <rf_set_frequency+0xa0>)
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7ff fa5e 	bl	8000ba8 <__aeabi_uldivmod>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!rf_spi_write_register(rf_handle, RegFrfMsb, (uint8_t) (frf >> 16)))
 80016f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	0c02      	lsrs	r2, r0, #16
 8001702:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001706:	0c0b      	lsrs	r3, r1, #16
 8001708:	b2d3      	uxtb	r3, r2
 800170a:	461a      	mov	r2, r3
 800170c:	2106      	movs	r1, #6
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8f6 	bl	8001900 <rf_spi_write_register>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <rf_set_frequency+0x56>
		return 0;
 800171a:	2300      	movs	r3, #0
 800171c:	e020      	b.n	8001760 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfMid, (uint8_t) (frf >> 8)))
 800171e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	0a02      	lsrs	r2, r0, #8
 800172c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001730:	0a0b      	lsrs	r3, r1, #8
 8001732:	b2d3      	uxtb	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	2107      	movs	r1, #7
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8e1 	bl	8001900 <rf_spi_write_register>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <rf_set_frequency+0x80>
		return 0;
 8001744:	2300      	movs	r3, #0
 8001746:	e00b      	b.n	8001760 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfLsb, (uint8_t) (frf >> 0)))
 8001748:	7a3b      	ldrb	r3, [r7, #8]
 800174a:	461a      	mov	r2, r3
 800174c:	2108      	movs	r1, #8
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8d6 	bl	8001900 <rf_spi_write_register>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <rf_set_frequency+0x96>
		return 0;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <rf_set_frequency+0x98>

	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	01e84800 	.word	0x01e84800

0800176c <rf_set_tx_power>:

int rf_set_tx_power(rf_handle_t *rf_handle, uint8_t rf_power_dbm) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]

	if (!((rf_power_dbm >= 2 && rf_power_dbm <= 17) || (rf_power_dbm == 20))) {
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d902      	bls.n	8001784 <rf_set_tx_power+0x18>
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	2b11      	cmp	r3, #17
 8001782:	d90b      	bls.n	800179c <rf_set_tx_power+0x30>
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2b14      	cmp	r3, #20
 8001788:	d008      	beq.n	800179c <rf_set_tx_power+0x30>

		LOG_ERROR("Unable to set power to %d out of range.", rf_power_dbm);
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8001790:	4930      	ldr	r1, [pc, #192]	@ (8001854 <rf_set_tx_power+0xe8>)
 8001792:	4831      	ldr	r0, [pc, #196]	@ (8001858 <rf_set_tx_power+0xec>)
 8001794:	f008 fc92 	bl	800a0bc <iprintf>
		return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e057      	b.n	800184c <rf_set_tx_power+0xe0>
	}

	rf_register_pa_config_t reg_pa_config;
	uint8_t reg_pa_dac_config = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	if (rf_power_dbm >= 2 || rf_power_dbm <= 17) {
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d802      	bhi.n	80017ac <rf_set_tx_power+0x40>
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	2b11      	cmp	r3, #17
 80017aa:	d814      	bhi.n	80017d6 <rf_set_tx_power+0x6a>
		reg_pa_config.max_power = 7;
 80017ac:	7b3b      	ldrb	r3, [r7, #12]
 80017ae:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80017b2:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ba:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = (rf_power_dbm - 2);
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	3b02      	subs	r3, #2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	7b3b      	ldrb	r3, [r7, #12]
 80017ca:	f362 0303 	bfi	r3, r2, #0, #4
 80017ce:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80017d0:	2384      	movs	r3, #132	@ 0x84
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e010      	b.n	80017f8 <rf_set_tx_power+0x8c>
	} else if (rf_power_dbm == 20) {
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	2b14      	cmp	r3, #20
 80017da:	d10d      	bne.n	80017f8 <rf_set_tx_power+0x8c>
		reg_pa_config.max_power = 7;
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80017e2:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ea:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = 15;
 80017ec:	7b3b      	ldrb	r3, [r7, #12]
 80017ee:	f043 030f 	orr.w	r3, r3, #15
 80017f2:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80017f4:	2387      	movs	r3, #135	@ 0x87
 80017f6:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegPaConfig,
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	461a      	mov	r2, r3
 80017fc:	2109      	movs	r1, #9
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f87e 	bl	8001900 <rf_spi_write_register>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d108      	bne.n	800181c <rf_set_tx_power+0xb0>
			reg_pa_config.pa_config)) {

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001810:	4910      	ldr	r1, [pc, #64]	@ (8001854 <rf_set_tx_power+0xe8>)
 8001812:	4812      	ldr	r0, [pc, #72]	@ (800185c <rf_set_tx_power+0xf0>)
 8001814:	f008 fc52 	bl	800a0bc <iprintf>
		return 0;
 8001818:	2300      	movs	r3, #0
 800181a:	e017      	b.n	800184c <rf_set_tx_power+0xe0>
	}
	if (!rf_spi_write_register(rf_handle, RegPaDac, reg_pa_dac_config)) {
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	461a      	mov	r2, r3
 8001820:	214d      	movs	r1, #77	@ 0x4d
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f86c 	bl	8001900 <rf_spi_write_register>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d108      	bne.n	8001840 <rf_set_tx_power+0xd4>

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f240 124d 	movw	r2, #333	@ 0x14d
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <rf_set_tx_power+0xe8>)
 8001836:	4809      	ldr	r0, [pc, #36]	@ (800185c <rf_set_tx_power+0xf0>)
 8001838:	f008 fc40 	bl	800a0bc <iprintf>
		return 0;
 800183c:	2300      	movs	r3, #0
 800183e:	e005      	b.n	800184c <rf_set_tx_power+0xe0>
	}

	LOG_INFO("Set power to %d.", rf_power_dbm);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	4619      	mov	r1, r3
 8001844:	4806      	ldr	r0, [pc, #24]	@ (8001860 <rf_set_tx_power+0xf4>)
 8001846:	f008 fc39 	bl	800a0bc <iprintf>

	return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800c1b8 	.word	0x0800c1b8
 8001858:	0800c514 	.word	0x0800c514
 800185c:	0800c568 	.word	0x0800c568
 8001860:	0800c5bc 	.word	0x0800c5bc

08001864 <rf_spi_read_register>:

	return 1;
}

int rf_spi_read_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t *rf_register_result) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	460b      	mov	r3, r1
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	72fb      	strb	r3, [r7, #11]

// 0 the MSB since that is the wnr bit. we are reading so it must be 0.
	uint8_t prep_register = rf_register_address & 0x7f;
 8001872:	7afb      	ldrb	r3, [r7, #11]
 8001874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001878:	b2db      	uxtb	r3, r3
 800187a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6898      	ldr	r0, [r3, #8]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	899b      	ldrh	r3, [r3, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f001 f9f4 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register, 1,
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f107 0117 	add.w	r1, r7, #23
 8001898:	2201      	movs	r2, #1
 800189a:	f002 fcbc 	bl	8004216 <HAL_SPI_Transmit>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <rf_spi_read_register+0x52>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 80018aa:	4913      	ldr	r1, [pc, #76]	@ (80018f8 <rf_spi_read_register+0x94>)
 80018ac:	4813      	ldr	r0, [pc, #76]	@ (80018fc <rf_spi_read_register+0x98>)
 80018ae:	f008 fc05 	bl	800a0bc <iprintf>
		return 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e01c      	b.n	80018f0 <rf_spi_read_register+0x8c>
	}

	if (HAL_SPI_Receive(rf_handle->rf_spi_handle, rf_register_result, 1,
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	f002 fe1e 	bl	8004502 <HAL_SPI_Receive>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <rf_spi_read_register+0x7a>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80018d2:	4909      	ldr	r1, [pc, #36]	@ (80018f8 <rf_spi_read_register+0x94>)
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <rf_spi_read_register+0x98>)
 80018d6:	f008 fbf1 	bl	800a0bc <iprintf>
		return 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	e008      	b.n	80018f0 <rf_spi_read_register+0x8c>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6898      	ldr	r0, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	899b      	ldrh	r3, [r3, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4619      	mov	r1, r3
 80018ea:	f001 f9c3 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800c1b8 	.word	0x0800c1b8
 80018fc:	0800c5e4 	.word	0x0800c5e4

08001900 <rf_spi_write_register>:

int rf_spi_write_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t rf_register_value) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
 800190c:	4613      	mov	r3, r2
 800190e:	70bb      	strb	r3, [r7, #2]
// 1 the MSB since that is the wnr bit. we are writing so it must be 1.
	uint8_t prep_register_buffer[2] = { ((uint8_t) rf_register_address | 0x80u),
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001916:	b2db      	uxtb	r3, r3
 8001918:	733b      	strb	r3, [r7, #12]
 800191a:	78bb      	ldrb	r3, [r7, #2]
 800191c:	737b      	strb	r3, [r7, #13]
			rf_register_value };

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6898      	ldr	r0, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	899b      	ldrh	r3, [r3, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	f001 f9a3 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, prep_register_buffer, 2,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f107 010c 	add.w	r1, r7, #12
 800193a:	2202      	movs	r2, #2
 800193c:	f002 fc6b 	bl	8004216 <HAL_SPI_Transmit>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <rf_spi_write_register+0x5e>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to set register 0x%x : 0x%x", rf_register_address,
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001952:	4909      	ldr	r1, [pc, #36]	@ (8001978 <rf_spi_write_register+0x78>)
 8001954:	4809      	ldr	r0, [pc, #36]	@ (800197c <rf_spi_write_register+0x7c>)
 8001956:	f008 fbb1 	bl	800a0bc <iprintf>
				rf_register_value);
		return 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e008      	b.n	8001970 <rf_spi_write_register+0x70>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6898      	ldr	r0, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	899b      	ldrh	r3, [r3, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	4619      	mov	r1, r3
 800196a:	f001 f983 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	0800c1b8 	.word	0x0800c1b8
 800197c:	0800c62c 	.word	0x0800c62c

08001980 <rf_reset>:

int rf_reset(rf_handle_t *rf_handle) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

//	printf(
//			"\x1b[33;1;3;4m[Abi's RFlib] [%d] [WARN] : Reseting module\x1b[0m\r\n",
//			rf_handle->rf_module_identifier);

	LOG_WARN("Reseting module");
 8001988:	480f      	ldr	r0, [pc, #60]	@ (80019c8 <rf_reset+0x48>)
 800198a:	f008 fbff 	bl	800a18c <puts>

	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6918      	ldr	r0, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8a9b      	ldrh	r3, [r3, #20]
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	f001 f96b 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	rf_handle->rf_delay_func(100);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2064      	movs	r0, #100	@ 0x64
 80019a4:	4798      	blx	r3
	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6918      	ldr	r0, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	8a9b      	ldrh	r3, [r3, #20]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	f001 f95f 	bl	8002c74 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	rf_handle->rf_delay_func(100);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2064      	movs	r0, #100	@ 0x64
 80019bc:	4798      	blx	r3

	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0800c678 	.word	0x0800c678

080019cc <rf_recieve_single>:

	return 1;
}

int rf_recieve_single(rf_handle_t *rf_handle,
		uint8_t *rf_recieved_packet_length) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]

	uint8_t packet_length = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
	rf_register_irq_flags_t irq_flags = { 0 };
 80019da:	2300      	movs	r3, #0
 80019dc:	753b      	strb	r3, [r7, #20]

	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &irq_flags.irq_flags)) {
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	461a      	mov	r2, r3
 80019e4:	2112      	movs	r1, #18
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff3c 	bl	8001864 <rf_spi_read_register>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <rf_recieve_single+0x36>
		LOG_ERROR("SPI ERROR");
 80019f2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80019f6:	4977      	ldr	r1, [pc, #476]	@ (8001bd4 <rf_recieve_single+0x208>)
 80019f8:	4877      	ldr	r0, [pc, #476]	@ (8001bd8 <rf_recieve_single+0x20c>)
 80019fa:	f008 fb5f 	bl	800a0bc <iprintf>
		return 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e0e3      	b.n	8001bca <rf_recieve_single+0x1fe>
	}

	// TODO: add implicit mode
	rf_register_modem_config_1_t explicit_mode = { 0 };
 8001a02:	2300      	movs	r3, #0
 8001a04:	743b      	strb	r3, [r7, #16]

	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	211d      	movs	r1, #29
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff28 	bl	8001864 <rf_spi_read_register>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <rf_recieve_single+0x5e>
			&explicit_mode.modem_config_1)) {
		LOG_ERROR("SPI ERROR");
 8001a1a:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8001a1e:	496d      	ldr	r1, [pc, #436]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001a20:	486d      	ldr	r0, [pc, #436]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001a22:	f008 fb4b 	bl	800a0bc <iprintf>
		return 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e0cf      	b.n	8001bca <rf_recieve_single+0x1fe>
	}

	explicit_mode.implicit_header_mode_on = 0;
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	f36f 0300 	bfc	r3, #0, #1
 8001a30:	743b      	strb	r3, [r7, #16]

	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	461a      	mov	r2, r3
 8001a36:	211d      	movs	r1, #29
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff61 	bl	8001900 <rf_spi_write_register>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <rf_recieve_single+0x88>
			explicit_mode.modem_config_1)) {
		LOG_ERROR("SPI ERROR");
 8001a44:	f240 3202 	movw	r2, #770	@ 0x302
 8001a48:	4962      	ldr	r1, [pc, #392]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001a4a:	4863      	ldr	r0, [pc, #396]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001a4c:	f008 fb36 	bl	800a0bc <iprintf>
		return 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e0ba      	b.n	8001bca <rf_recieve_single+0x1fe>
	}

	if ((irq_flags.rx_done && !irq_flags.payload_crc_error)) { // check if there is no error and rx is done.
 8001a54:	7d3b      	ldrb	r3, [r7, #20]
 8001a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05c      	beq.n	8001b1a <rf_recieve_single+0x14e>
 8001a60:	7d3b      	ldrb	r3, [r7, #20]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d156      	bne.n	8001b1a <rf_recieve_single+0x14e>
		// clear irq flags. here we can just write the read irq register back to reset
		// any flags that have been raised since its a read reset register.
		if (!rf_spi_write_register(rf_handle, RegIrqFlags,
 8001a6c:	7d3b      	ldrb	r3, [r7, #20]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2112      	movs	r1, #18
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff44 	bl	8001900 <rf_spi_write_register>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <rf_recieve_single+0xc2>
				irq_flags.irq_flags)) {
			LOG_ERROR("SPI ERROR");
 8001a7e:	f240 320b 	movw	r2, #779	@ 0x30b
 8001a82:	4954      	ldr	r1, [pc, #336]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001a84:	4854      	ldr	r0, [pc, #336]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001a86:	f008 fb19 	bl	800a0bc <iprintf>
			return 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e09d      	b.n	8001bca <rf_recieve_single+0x1fe>
		}
		// Since we only support Explicit header mode currently
		// TODO: add check for implicit header mode.
		if (!rf_spi_read_register(rf_handle, RegRxNbBytes, &packet_length)) {
 8001a8e:	f107 0317 	add.w	r3, r7, #23
 8001a92:	461a      	mov	r2, r3
 8001a94:	2113      	movs	r1, #19
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fee4 	bl	8001864 <rf_spi_read_register>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <rf_recieve_single+0xe6>
			LOG_ERROR("SPI ERROR");
 8001aa2:	f240 3211 	movw	r2, #785	@ 0x311
 8001aa6:	494b      	ldr	r1, [pc, #300]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001aa8:	484b      	ldr	r0, [pc, #300]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001aaa:	f008 fb07 	bl	800a0bc <iprintf>
			return 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e08b      	b.n	8001bca <rf_recieve_single+0x1fe>
		}

		//*rf_recieved_packet_length = packet_length; // more verbose than just throwing pointer into read.
		// set fifo address to current rx address.

		uint8_t current_rx_address = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	72fb      	strb	r3, [r7, #11]
		if (!rf_spi_read_register(rf_handle, RegFifoRxCurrentAddr,
 8001ab6:	f107 030b 	add.w	r3, r7, #11
 8001aba:	461a      	mov	r2, r3
 8001abc:	2110      	movs	r1, #16
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fed0 	bl	8001864 <rf_spi_read_register>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <rf_recieve_single+0x10e>
				&current_rx_address)) {
			LOG_ERROR("SPI ERROR");
 8001aca:	f240 321b 	movw	r2, #795	@ 0x31b
 8001ace:	4941      	ldr	r1, [pc, #260]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001ad0:	4841      	ldr	r0, [pc, #260]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001ad2:	f008 faf3 	bl	800a0bc <iprintf>
			return 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e077      	b.n	8001bca <rf_recieve_single+0x1fe>
		}

		if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr,
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	461a      	mov	r2, r3
 8001ade:	210d      	movs	r1, #13
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff0d 	bl	8001900 <rf_spi_write_register>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <rf_recieve_single+0x130>
				current_rx_address)) {
			LOG_ERROR("SPI ERROR");
 8001aec:	f240 3221 	movw	r2, #801	@ 0x321
 8001af0:	4938      	ldr	r1, [pc, #224]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001af2:	4839      	ldr	r0, [pc, #228]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001af4:	f008 fae2 	bl	800a0bc <iprintf>
			return 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e066      	b.n	8001bca <rf_recieve_single+0x1fe>
		}

		// stdby

		if (!rf_set_op_mode(rf_handle, RF_OP_MODE_STDBY)) {
 8001afc:	2101      	movs	r1, #1
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fca8 	bl	8001454 <rf_set_op_mode>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d146      	bne.n	8001b98 <rf_recieve_single+0x1cc>
			LOG_ERROR("OP MODE ERROR");
 8001b0a:	f44f 724a 	mov.w	r2, #808	@ 0x328
 8001b0e:	4931      	ldr	r1, [pc, #196]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001b10:	4832      	ldr	r0, [pc, #200]	@ (8001bdc <rf_recieve_single+0x210>)
 8001b12:	f008 fad3 	bl	800a0bc <iprintf>
			return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e057      	b.n	8001bca <rf_recieve_single+0x1fe>

		// put the packet length in return paramenter and the caller will read out the data.

	} else {

		rf_register_op_mode_config_t checkopmode = { 0 };
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	723b      	strb	r3, [r7, #8]
		if (!rf_spi_read_register(rf_handle, RegOpMode, &checkopmode.op_mode)) {
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	461a      	mov	r2, r3
 8001b24:	2101      	movs	r1, #1
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fe9c 	bl	8001864 <rf_spi_read_register>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <rf_recieve_single+0x176>
			LOG_ERROR("SPI ERROR");
 8001b32:	f240 3232 	movw	r2, #818	@ 0x332
 8001b36:	4927      	ldr	r1, [pc, #156]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001b38:	4827      	ldr	r0, [pc, #156]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001b3a:	f008 fabf 	bl	800a0bc <iprintf>
			return 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e043      	b.n	8001bca <rf_recieve_single+0x1fe>
		}

		if (!checkopmode.long_range_mode
 8001b42:	7a3b      	ldrb	r3, [r7, #8]
 8001b44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <rf_recieve_single+0x18e>
				|| checkopmode.mode != RF_OP_MODE_RX_SINGLE) { // means we are not listening so listen
 8001b4e:	7a3b      	ldrb	r3, [r7, #8]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d01f      	beq.n	8001b9a <rf_recieve_single+0x1ce>

				// reset the fifo to the bottom
			if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr, 0)) {
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210d      	movs	r1, #13
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fece 	bl	8001900 <rf_spi_write_register>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <rf_recieve_single+0x1ae>
				LOG_ERROR("SPI ERROR");
 8001b6a:	f240 323b 	movw	r2, #827	@ 0x33b
 8001b6e:	4919      	ldr	r1, [pc, #100]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001b70:	4819      	ldr	r0, [pc, #100]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001b72:	f008 faa3 	bl	800a0bc <iprintf>
				return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e027      	b.n	8001bca <rf_recieve_single+0x1fe>
			}
			// put in single rx mode.
			if (!rf_set_op_mode(rf_handle, RF_OP_MODE_RX_SINGLE)) {
 8001b7a:	2106      	movs	r1, #6
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fc69 	bl	8001454 <rf_set_op_mode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d108      	bne.n	8001b9a <rf_recieve_single+0x1ce>
				LOG_ERROR("OP MODE ERROR");
 8001b88:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8001b8c:	4911      	ldr	r1, [pc, #68]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001b8e:	4813      	ldr	r0, [pc, #76]	@ (8001bdc <rf_recieve_single+0x210>)
 8001b90:	f008 fa94 	bl	800a0bc <iprintf>
				return 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e018      	b.n	8001bca <rf_recieve_single+0x1fe>
	if ((irq_flags.rx_done && !irq_flags.payload_crc_error)) { // check if there is no error and rx is done.
 8001b98:	bf00      	nop
			// set to 0 to tell the caller we havent recieved anything
			//*rf_recieved_packet_length = 0;
		}
	}

	rf_register_op_mode_config_t checkopmode = { 0 };
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	733b      	strb	r3, [r7, #12]
	if (!rf_spi_read_register(rf_handle, RegOpMode, &checkopmode.op_mode)) {
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fe5c 	bl	8001864 <rf_spi_read_register>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <rf_recieve_single+0x1f6>
		LOG_ERROR("SPI ERROR");
 8001bb2:	f240 324a 	movw	r2, #842	@ 0x34a
 8001bb6:	4907      	ldr	r1, [pc, #28]	@ (8001bd4 <rf_recieve_single+0x208>)
 8001bb8:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <rf_recieve_single+0x20c>)
 8001bba:	f008 fa7f 	bl	800a0bc <iprintf>
		return 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e003      	b.n	8001bca <rf_recieve_single+0x1fe>
	}
	// better to do it down here since packet length local is persistant throughout.
	*rf_recieved_packet_length = packet_length;
 8001bc2:	7dfa      	ldrb	r2, [r7, #23]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	701a      	strb	r2, [r3, #0]
	return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	0800c1b8 	.word	0x0800c1b8
 8001bd8:	0800c6a8 	.word	0x0800c6a8
 8001bdc:	0800c818 	.word	0x0800c818

08001be0 <rf_read>:

int rf_read(rf_handle_t *rf_handle, uint8_t *rf_recieved_byte) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]

	// TODO: Implement rf_available check to see if we have enough bytes.
	// right now the only check is in the rf_read_packet.

	if (!rf_spi_read_register(rf_handle, RegFifo, rf_recieved_byte)) {
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe38 	bl	8001864 <rf_spi_read_register>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <rf_read+0x2a>
		LOG_ERROR("rf_read ERROR");
 8001bfa:	f44f 7256 	mov.w	r2, #856	@ 0x358
 8001bfe:	4905      	ldr	r1, [pc, #20]	@ (8001c14 <rf_read+0x34>)
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <rf_read+0x38>)
 8001c02:	f008 fa5b 	bl	800a0bc <iprintf>
		return 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <rf_read+0x2c>
	}

	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0800c1b8 	.word	0x0800c1b8
 8001c18:	0800c850 	.word	0x0800c850

08001c1c <rf_read_packet>:

int rf_read_packet(rf_handle_t *rf_handle, uint8_t rf_recieved_packet_length,
		uint8_t *rf_recieved_buffer) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	460b      	mov	r3, r1
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	72fb      	strb	r3, [r7, #11]

	if (rf_recieved_packet_length == 0) {
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <rf_read_packet+0x24>
		LOG_ERROR("Read packet called with packet length 0");
 8001c30:	f240 3263 	movw	r2, #867	@ 0x363
 8001c34:	4916      	ldr	r1, [pc, #88]	@ (8001c90 <rf_read_packet+0x74>)
 8001c36:	4817      	ldr	r0, [pc, #92]	@ (8001c94 <rf_read_packet+0x78>)
 8001c38:	f008 fa40 	bl	800a0bc <iprintf>
		return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e022      	b.n	8001c86 <rf_read_packet+0x6a>
	}

	uint8_t rec_byte = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	74fb      	strb	r3, [r7, #19]

	for (int i = 0; i < rf_recieved_packet_length; i++) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e018      	b.n	8001c7c <rf_read_packet+0x60>
		if (!rf_read(rf_handle, &rec_byte)) {
 8001c4a:	f107 0313 	add.w	r3, r7, #19
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff ffc5 	bl	8001be0 <rf_read>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <rf_read_packet+0x50>
			LOG_ERROR("FIFO READ ERROR");
 8001c5c:	f240 326b 	movw	r2, #875	@ 0x36b
 8001c60:	490b      	ldr	r1, [pc, #44]	@ (8001c90 <rf_read_packet+0x74>)
 8001c62:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <rf_read_packet+0x7c>)
 8001c64:	f008 fa2a 	bl	800a0bc <iprintf>
			return 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e00c      	b.n	8001c86 <rf_read_packet+0x6a>
		}
		rf_recieved_buffer[i] = rec_byte;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	7cfa      	ldrb	r2, [r7, #19]
 8001c74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < rf_recieved_packet_length; i++) {
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbe2      	blt.n	8001c4a <rf_read_packet+0x2e>
	}

	return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	0800c1b8 	.word	0x0800c1b8
 8001c94:	0800c888 	.word	0x0800c888
 8001c98:	0800c8dc 	.word	0x0800c8dc

08001c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <MX_SPI1_Init+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001ca8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cb6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cd2:	2228      	movs	r2, #40	@ 0x28
 8001cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cea:	2207      	movs	r2, #7
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_SPI1_Init+0x74>)
 8001cfc:	f002 f9e8 	bl	80040d0 <HAL_SPI_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d06:	f7ff fb61 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000230 	.word	0x20000230
 8001d14:	40013000 	.word	0x40013000

08001d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_SPI_MspInit+0x7c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d128      	bne.n	8001d8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d6a:	23e0      	movs	r3, #224	@ 0xe0
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d88:	f000 fe0a 	bl	80029a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40013000 	.word	0x40013000
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	f06f 0001 	mvn.w	r0, #1
 8001dda:	f000 fdb7 	bl	800294c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <HAL_InitTick+0xc8>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb4 <HAL_InitTick+0xc8>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e06:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <HAL_InitTick+0xc8>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 fdb1 	bl	8003984 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e22:	f001 fd99 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8001e26:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <HAL_InitTick+0xcc>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	3b01      	subs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001e36:	4b21      	ldr	r3, [pc, #132]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e38:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <HAL_InitTick+0xd4>)
 8001e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e42:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001e44:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001e5c:	4817      	ldr	r0, [pc, #92]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e5e:	f003 f863 	bl	8004f28 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001e70:	4812      	ldr	r0, [pc, #72]	@ (8001ebc <HAL_InitTick+0xd0>)
 8001e72:	f003 f8b1 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e84:	2019      	movs	r0, #25
 8001e86:	f000 fd7d 	bl	8002984 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d808      	bhi.n	8001ea2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	2019      	movs	r0, #25
 8001e96:	f000 fd59 	bl	800294c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_InitTick+0xd8>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e002      	b.n	8001ea8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3730      	adds	r7, #48	@ 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	20000294 	.word	0x20000294
 8001ec0:	40014400 	.word	0x40014400
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ecc:	f001 fd9c 	bl	8003a08 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <NMI_Handler+0x8>

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001f12:	f003 f916 	bl	8005142 <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 8001f1e:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001f20:	f003 f90f 	bl	8005142 <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200002e4 	.word	0x200002e4
 8001f2c:	20000294 	.word	0x20000294

08001f30 <_getpid>:
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	2301      	movs	r3, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	f008 faa7 	bl	800a49c <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <_exit+0x12>

08001f76 <_read>:
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e00a      	b.n	8001f9e <_read+0x28>
 8001f88:	f3af 8000 	nop.w
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbf0      	blt.n	8001f88 <_read+0x12>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_close>:
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_fstat>:
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_isatty>:
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_lseek>:
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	2300      	movs	r3, #0
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_sbrk>:
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
 8002048:	f008 fa28 	bl	800a49c <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20010000 	.word	0x20010000
 8002078:	00000400 	.word	0x00000400
 800207c:	200002e0 	.word	0x200002e0
 8002080:	20001ef8 	.word	0x20001ef8

08002084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09a      	sub	sp, #104	@ 0x68
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	222c      	movs	r2, #44	@ 0x2c
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f008 f932 	bl	800a34c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020e8:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80020ea:	4a44      	ldr	r2, [pc, #272]	@ (80021fc <MX_TIM1_Init+0x154>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80020ee:	4b42      	ldr	r3, [pc, #264]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80020f0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80020fc:	4b3e      	ldr	r3, [pc, #248]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80020fe:	2263      	movs	r2, #99	@ 0x63
 8002100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002108:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <MX_TIM1_Init+0x150>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210e:	4b3a      	ldr	r3, [pc, #232]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002110:	2280      	movs	r2, #128	@ 0x80
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002114:	4838      	ldr	r0, [pc, #224]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002116:	f002 ff07 	bl	8004f28 <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002120:	f7ff f954 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002128:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800212a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800212e:	4619      	mov	r1, r3
 8002130:	4831      	ldr	r0, [pc, #196]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002132:	f003 fa21 	bl	8005578 <HAL_TIM_ConfigClockSource>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800213c:	f7ff f946 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002140:	482d      	ldr	r0, [pc, #180]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002142:	f002 ff9d 	bl	8005080 <HAL_TIM_PWM_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800214c:	f7ff f93e 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002160:	4619      	mov	r1, r3
 8002162:	4825      	ldr	r0, [pc, #148]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002164:	f003 fe82 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800216e:	f7ff f92d 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002172:	2360      	movs	r3, #96	@ 0x60
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217a:	2300      	movs	r3, #0
 800217c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002192:	2204      	movs	r2, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <MX_TIM1_Init+0x150>)
 8002198:	f003 f8da 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80021a2:	f7ff f913 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80021dc:	f003 feac 	bl	8005f38 <HAL_TIMEx_ConfigBreakDeadTime>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80021e6:	f7ff f8f1 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021ea:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <MX_TIM1_Init+0x150>)
 80021ec:	f000 f8b6 	bl	800235c <HAL_TIM_MspPostInit>

}
 80021f0:	bf00      	nop
 80021f2:	3768      	adds	r7, #104	@ 0x68
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200002e4 	.word	0x200002e4
 80021fc:	40012c00 	.word	0x40012c00

08002200 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	@ 0x38
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002220:	463b      	mov	r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	615a      	str	r2, [r3, #20]
 8002230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800223a:	4b2b      	ldr	r3, [pc, #172]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 800223c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002242:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002248:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 800224a:	2263      	movs	r2, #99	@ 0x63
 800224c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800225a:	4823      	ldr	r0, [pc, #140]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 800225c:	f002 fe64 	bl	8004f28 <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002266:	f7ff f8b1 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002274:	4619      	mov	r1, r3
 8002276:	481c      	ldr	r0, [pc, #112]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002278:	f003 f97e 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002282:	f7ff f8a3 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002286:	4818      	ldr	r0, [pc, #96]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 8002288:	f002 fefa 	bl	8005080 <HAL_TIM_PWM_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002292:	f7ff f89b 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4810      	ldr	r0, [pc, #64]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 80022a6:	f003 fde1 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80022b0:	f7ff f88c 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b4:	2360      	movs	r3, #96	@ 0x60
 80022b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c4:	463b      	mov	r3, r7
 80022c6:	2204      	movs	r2, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 80022cc:	f003 f840 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80022d6:	f7ff f879 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022da:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <MX_TIM2_Init+0xe8>)
 80022dc:	f000 f83e 	bl	800235c <HAL_TIM_MspPostInit>

}
 80022e0:	bf00      	nop
 80022e2:	3738      	adds	r7, #56	@ 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000330 	.word	0x20000330

080022ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	@ (8002354 <HAL_TIM_Base_MspInit+0x68>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d114      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 8002304:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002308:	6613      	str	r3, [r2, #96]	@ 0x60
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	2019      	movs	r0, #25
 800231c:	f000 fb16 	bl	800294c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002320:	2019      	movs	r0, #25
 8002322:	f000 fb2f 	bl	8002984 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002326:	e010      	b.n	800234a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002330:	d10b      	bne.n	800234a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6593      	str	r3, [r2, #88]	@ 0x58
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_TIM_Base_MspInit+0x6c>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <HAL_TIM_MspPostInit+0xac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11e      	bne.n	80023bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	4a22      	ldr	r2, [pc, #136]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8002396:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b6:	f000 faf3 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ba:	e021      	b.n	8002400 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d11c      	bne.n	8002400 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	4a10      	ldr	r2, [pc, #64]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_TIM_MspPostInit+0xb0>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 80023de:	2302      	movs	r3, #2
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fc:	f000 fad0 	bl	80029a0 <HAL_GPIO_Init>
}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	@ 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40021000 	.word	0x40021000

08002410 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002416:	4a15      	ldr	r2, [pc, #84]	@ (800246c <MX_USART2_UART_Init+0x5c>)
 8002418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <MX_USART2_UART_Init+0x58>)
 8002454:	f003 fe06 	bl	8006064 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800245e:	f7fe ffb5 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000037c 	.word	0x2000037c
 800246c:	40004400 	.word	0x40004400

08002470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b09e      	sub	sp, #120	@ 0x78
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	2254      	movs	r2, #84	@ 0x54
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f007 ff5b 	bl	800a34c <memset>
  if(uartHandle->Instance==USART2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <HAL_UART_MspInit+0xa8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d136      	bne.n	800250e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fb27 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024b8:	f7fe ff88 	bl	80013cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	4a16      	ldr	r2, [pc, #88]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d8:	4a10      	ldr	r2, [pc, #64]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e0:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_UART_MspInit+0xac>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ec:	230c      	movs	r3, #12
 80024ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fc:	2307      	movs	r3, #7
 80024fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250a:	f000 fa49 	bl	80029a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800250e:	bf00      	nop
 8002510:	3778      	adds	r7, #120	@ 0x78
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40004400 	.word	0x40004400
 800251c:	40021000 	.word	0x40021000

08002520 <Reset_Handler>:
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002558 <LoopForever+0x2>
 8002524:	f7ff fdae 	bl	8002084 <SystemInit>
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <LoopForever+0x6>)
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <LoopForever+0xa>)
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <LoopForever+0xe>)
 800252e:	2300      	movs	r3, #0
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:
 8002532:	58d4      	ldr	r4, [r2, r3]
 8002534:	50c4      	str	r4, [r0, r3]
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:
 8002538:	18c4      	adds	r4, r0, r3
 800253a:	428c      	cmp	r4, r1
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <LoopForever+0x12>)
 8002540:	4c0a      	ldr	r4, [pc, #40]	@ (800256c <LoopForever+0x16>)
 8002542:	2300      	movs	r3, #0
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:
 800254a:	42a2      	cmp	r2, r4
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>
 800254e:	f007 ffab 	bl	800a4a8 <__libc_init_array>
 8002552:	f7fe feb7 	bl	80012c4 <main>

08002556 <LoopForever>:
 8002556:	e7fe      	b.n	8002556 <LoopForever>
 8002558:	20010000 	.word	0x20010000
 800255c:	20000000 	.word	0x20000000
 8002560:	200001d8 	.word	0x200001d8
 8002564:	0800cd20 	.word	0x0800cd20
 8002568:	200001d8 	.word	0x200001d8
 800256c:	20001ef4 	.word	0x20001ef4

08002570 <ADC1_IRQHandler>:
 8002570:	e7fe      	b.n	8002570 <ADC1_IRQHandler>

08002572 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f9da 	bl	8002936 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002582:	200f      	movs	r0, #15
 8002584:	f7ff fc32 	bl	8001dec <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	e001      	b.n	8002598 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002594:	f7ff fc02 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002598:	79fb      	ldrb	r3, [r7, #7]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000404 	.word	0x20000404

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000404 	.word	0x20000404

080025e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0ed      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fc80 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7ff ffd8 	bl	80025cc <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800261e:	e012      	b.n	8002646 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002620:	f7ff ffd4 	bl	80025cc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b0a      	cmp	r3, #10
 800262c:	d90b      	bls.n	8002646 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2205      	movs	r2, #5
 800263e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0c5      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0e5      	beq.n	8002620 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0202 	bic.w	r2, r2, #2
 8002662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002664:	f7ff ffb2 	bl	80025cc <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266a:	e012      	b.n	8002692 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800266c:	f7ff ffae 	bl	80025cc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d90b      	bls.n	8002692 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e09f      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e5      	bne.n	800266c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e1b      	ldrb	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7e5b      	ldrb	r3, [r3, #25]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7e9b      	ldrb	r3, [r3, #26]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0220 	bic.w	r2, r2, #32
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7edb      	ldrb	r3, [r3, #27]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0210 	bic.w	r2, r2, #16
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0210 	orr.w	r2, r2, #16
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7f1b      	ldrb	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7f5b      	ldrb	r3, [r3, #29]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0204 	orr.w	r2, r2, #4
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e007      	b.n	800279c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	ea42 0103 	orr.w	r1, r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	@ (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	@ (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	@ (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	@ 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff4c 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800295e:	f7ff ff61 	bl	8002824 <__NVIC_GetPriorityGrouping>
 8002962:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f7ff ffb1 	bl	80028d0 <NVIC_EncodePriority>
 800296e:	4602      	mov	r2, r0
 8002970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff80 	bl	800287c <__NVIC_SetPriority>
}
 800297c:	bf00      	nop
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff54 	bl	8002840 <__NVIC_EnableIRQ>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ae:	e148      	b.n	8002c42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 813a 	beq.w	8002c3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d005      	beq.n	80029e0 <HAL_GPIO_Init+0x40>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d130      	bne.n	8002a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a16:	2201      	movs	r2, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0201 	and.w	r2, r3, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d017      	beq.n	8002a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d123      	bne.n	8002ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	08da      	lsrs	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3208      	adds	r2, #8
 8002a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	6939      	ldr	r1, [r7, #16]
 8002ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8094 	beq.w	8002c3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b14:	4b52      	ldr	r3, [pc, #328]	@ (8002c60 <HAL_GPIO_Init+0x2c0>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	4a51      	ldr	r2, [pc, #324]	@ (8002c60 <HAL_GPIO_Init+0x2c0>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b20:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <HAL_GPIO_Init+0x2c0>)
 8002b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c64 <HAL_GPIO_Init+0x2c4>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b56:	d00d      	beq.n	8002b74 <HAL_GPIO_Init+0x1d4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a43      	ldr	r2, [pc, #268]	@ (8002c68 <HAL_GPIO_Init+0x2c8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <HAL_GPIO_Init+0x1d0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a42      	ldr	r2, [pc, #264]	@ (8002c6c <HAL_GPIO_Init+0x2cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_GPIO_Init+0x1cc>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e004      	b.n	8002b76 <HAL_GPIO_Init+0x1d6>
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_Init+0x1d6>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_GPIO_Init+0x1d6>
 8002b74:	2300      	movs	r3, #0
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	f002 0203 	and.w	r2, r2, #3
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	4093      	lsls	r3, r2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b86:	4937      	ldr	r1, [pc, #220]	@ (8002c64 <HAL_GPIO_Init+0x2c4>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b94:	4b36      	ldr	r3, [pc, #216]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002be2:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002be8:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c0c:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c12:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c36:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f aeaf 	bne.w	80029b0 <HAL_GPIO_Init+0x10>
  }
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010000 	.word	0x40010000
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	48000800 	.word	0x48000800
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40007000 	.word	0x40007000

08002cc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cce:	d130      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd0:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cdc:	d038      	beq.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2232      	movs	r2, #50	@ 0x32
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	3301      	adds	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d04:	e002      	b.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d18:	d102      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f2      	bne.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2c:	d110      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e00f      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d32:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d007      	beq.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d40:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40007000 	.word	0x40007000
 8002d64:	20000000 	.word	0x20000000
 8002d68:	431bde83 	.word	0x431bde83

08002d6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f000 bc02 	b.w	8003584 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d80:	4b96      	ldr	r3, [pc, #600]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8a:	4b94      	ldr	r3, [pc, #592]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80e4 	beq.w	8002f6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4c>
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	f040 808b 	bne.w	8002ec6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	f040 8087 	bne.w	8002ec6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db8:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x64>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e3d9      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	4b81      	ldr	r3, [pc, #516]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_RCC_OscConfig+0x7e>
 8002de0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de8:	e005      	b.n	8002df6 <HAL_RCC_OscConfig+0x8a>
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d223      	bcs.n	8002e42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fe1e 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e3ba      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a72      	ldr	r2, [pc, #456]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b70      	ldr	r3, [pc, #448]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	496d      	ldr	r1, [pc, #436]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	4968      	ldr	r1, [pc, #416]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
 8002e40:	e025      	b.n	8002e8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e42:	4b66      	ldr	r3, [pc, #408]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a65      	ldr	r2, [pc, #404]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e48:	f043 0308 	orr.w	r3, r3, #8
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b63      	ldr	r3, [pc, #396]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4960      	ldr	r1, [pc, #384]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e60:	4b5e      	ldr	r3, [pc, #376]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	495b      	ldr	r1, [pc, #364]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fdde 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e37a      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8e:	f000 fcb5 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b51      	ldr	r3, [pc, #324]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4950      	ldr	r1, [pc, #320]	@ (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe4 <HAL_RCC_OscConfig+0x278>)
 8002eac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eae:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ff9a 	bl	8001dec <HAL_InitTick>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d052      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	e35e      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d032      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a42      	ldr	r2, [pc, #264]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eda:	f7ff fb77 	bl	80025cc <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee2:	f7ff fb73 	bl	80025cc <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e347      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f00:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a35      	ldr	r2, [pc, #212]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4930      	ldr	r1, [pc, #192]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	492b      	ldr	r1, [pc, #172]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
 8002f32:	e01a      	b.n	8002f6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a28      	ldr	r2, [pc, #160]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f40:	f7ff fb44 	bl	80025cc <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f48:	f7ff fb40 	bl	80025cc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e314      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1dc>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d073      	beq.n	800305e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x21c>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d10e      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d063      	beq.n	800305c <HAL_RCC_OscConfig+0x2f0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15f      	bne.n	800305c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e2f1      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
 8002faa:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a0b      	ldr	r2, [pc, #44]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e025      	b.n	8003004 <HAL_RCC_OscConfig+0x298>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fc0:	d114      	bne.n	8002fec <HAL_RCC_OscConfig+0x280>
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a02      	ldr	r2, [pc, #8]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e013      	b.n	8003004 <HAL_RCC_OscConfig+0x298>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	0800c954 	.word	0x0800c954
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	20000004 	.word	0x20000004
 8002fec:	4ba0      	ldr	r3, [pc, #640]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9f      	ldr	r2, [pc, #636]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b9d      	ldr	r3, [pc, #628]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a9c      	ldr	r2, [pc, #624]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7ff fade 	bl	80025cc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7ff fada 	bl	80025cc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	@ 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e2ae      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b92      	ldr	r3, [pc, #584]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x2a8>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff faca 	bl	80025cc <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7ff fac6 	bl	80025cc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e29a      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x2d0>
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d060      	beq.n	800312c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x310>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d119      	bne.n	80030aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d116      	bne.n	80030aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307c:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_OscConfig+0x328>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e277      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b76      	ldr	r3, [pc, #472]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	4973      	ldr	r1, [pc, #460]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	e040      	b.n	800312c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d023      	beq.n	80030fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7ff fa85 	bl	80025cc <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7ff fa81 	bl	80025cc <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e255      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	495f      	ldr	r1, [pc, #380]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e018      	b.n	800312c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7ff fa61 	bl	80025cc <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7ff fa5d 	bl	80025cc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e231      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003140:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003146:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7ff fa3c 	bl	80025cc <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7ff fa38 	bl	80025cc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e20c      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <HAL_RCC_OscConfig+0x3ec>
 8003178:	e01b      	b.n	80031b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317a:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003180:	4a3b      	ldr	r2, [pc, #236]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7ff fa1f 	bl	80025cc <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7ff fa1b 	bl	80025cc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1ef      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a4:	4b32      	ldr	r3, [pc, #200]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ef      	bne.n	8003192 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10d      	bne.n	80031ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	4a26      	ldr	r2, [pc, #152]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031da:	6593      	str	r3, [r2, #88]	@ 0x58
 80031dc:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ec:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d118      	bne.n	800322a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003204:	f7ff f9e2 	bl	80025cc <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7ff f9de 	bl	80025cc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1b2      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x4d8>
 8003232:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003242:	e029      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d115      	bne.n	8003278 <HAL_RCC_OscConfig+0x50c>
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	4a03      	ldr	r2, [pc, #12]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
 8003278:	4b9a      	ldr	r3, [pc, #616]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	4a99      	ldr	r2, [pc, #612]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328e:	4a95      	ldr	r2, [pc, #596]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7ff f994 	bl	80025cc <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7ff f990 	bl	80025cc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e162      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b89      	ldr	r3, [pc, #548]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ed      	beq.n	80032a8 <HAL_RCC_OscConfig+0x53c>
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7ff f97d 	bl	80025cc <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7ff f979 	bl	80025cc <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e14b      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ec:	4b7d      	ldr	r3, [pc, #500]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ed      	bne.n	80032d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	4a77      	ldr	r2, [pc, #476]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03c      	beq.n	8003392 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003320:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003326:	4a6f      	ldr	r2, [pc, #444]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7ff f94c 	bl	80025cc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003338:	f7ff f948 	bl	80025cc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e11c      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800334a:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800334c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ef      	beq.n	8003338 <HAL_RCC_OscConfig+0x5cc>
 8003358:	e01b      	b.n	8003392 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800335a:	4b62      	ldr	r3, [pc, #392]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003360:	4a60      	ldr	r2, [pc, #384]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7ff f92f 	bl	80025cc <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003372:	f7ff f92b 	bl	80025cc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0ff      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b57      	ldr	r3, [pc, #348]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ef      	bne.n	8003372 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80f3 	beq.w	8003582 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f040 80c9 	bne.w	8003538 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033a6:	4b4f      	ldr	r3, [pc, #316]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d12c      	bne.n	8003414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	3b01      	subs	r3, #1
 80033c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d123      	bne.n	8003414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d11b      	bne.n	8003414 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d113      	bne.n	8003414 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d109      	bne.n	8003414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	3b01      	subs	r3, #1
 800340e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d06b      	beq.n	80034ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d062      	beq.n	80034e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800341a:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0ac      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800342a:	4b2e      	ldr	r3, [pc, #184]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003436:	f7ff f8c9 	bl	80025cc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7ff f8c5 	bl	80025cc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e099      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	4b21      	ldr	r3, [pc, #132]	@ (80034e8 <HAL_RCC_OscConfig+0x77c>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800346c:	3a01      	subs	r2, #1
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003476:	0212      	lsls	r2, r2, #8
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0552      	lsls	r2, r2, #21
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800348a:	0852      	lsrs	r2, r2, #1
 800348c:	3a01      	subs	r2, #1
 800348e:	0652      	lsls	r2, r2, #25
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003496:	06d2      	lsls	r2, r2, #27
 8003498:	430a      	orrs	r2, r1
 800349a:	4912      	ldr	r1, [pc, #72]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034a0:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ac:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a0c      	ldr	r2, [pc, #48]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034b8:	f7ff f888 	bl	80025cc <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7ff f884 	bl	80025cc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e058      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <HAL_RCC_OscConfig+0x778>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034de:	e050      	b.n	8003582 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04f      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ec:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d144      	bne.n	8003582 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034f8:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a23      	ldr	r2, [pc, #140]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 80034fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a20      	ldr	r2, [pc, #128]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003510:	f7ff f85c 	bl	80025cc <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff f858 	bl	80025cc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e02c      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352a:	4b18      	ldr	r3, [pc, #96]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x7ac>
 8003536:	e024      	b.n	8003582 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d01f      	beq.n	800357e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a12      	ldr	r2, [pc, #72]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003544:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7ff f83f 	bl	80025cc <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7ff f83b 	bl	80025cc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e00f      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4905      	ldr	r1, [pc, #20]	@ (800358c <HAL_RCC_OscConfig+0x820>)
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCC_OscConfig+0x824>)
 8003578:	4013      	ands	r3, r2
 800357a:	60cb      	str	r3, [r1, #12]
 800357c:	e001      	b.n	8003582 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	feeefffc 	.word	0xfeeefffc

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0e7      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b75      	ldr	r3, [pc, #468]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b72      	ldr	r3, [pc, #456]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4970      	ldr	r1, [pc, #448]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0cf      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4960      	ldr	r1, [pc, #384]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04c      	beq.n	80036ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	4b5a      	ldr	r3, [pc, #360]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d121      	bne.n	800366a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0a6      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003632:	4b54      	ldr	r3, [pc, #336]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d115      	bne.n	800366a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e09a      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800364a:	4b4e      	ldr	r3, [pc, #312]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e08e      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365a:	4b4a      	ldr	r3, [pc, #296]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e086      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b46      	ldr	r3, [pc, #280]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4943      	ldr	r1, [pc, #268]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fe ffa6 	bl	80025cc <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fe ffa2 	bl	80025cc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e06e      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b31      	ldr	r3, [pc, #196]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d208      	bcs.n	80036da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	492b      	ldr	r1, [pc, #172]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036da:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d210      	bcs.n	800370a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 0207 	bic.w	r2, r3, #7
 80036f0:	4923      	ldr	r1, [pc, #140]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <HAL_RCC_ClockConfig+0x1ec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e036      	b.n	8003778 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003716:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4918      	ldr	r1, [pc, #96]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4910      	ldr	r1, [pc, #64]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003748:	f000 f858 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	490b      	ldr	r1, [pc, #44]	@ (8003788 <HAL_RCC_ClockConfig+0x1f4>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	4a09      	ldr	r2, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1f8>)
 8003766:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003768:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1fc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fb3d 	bl	8001dec <HAL_InitTick>
 8003772:	4603      	mov	r3, r0
 8003774:	72fb      	strb	r3, [r7, #11]

  return status;
 8003776:	7afb      	ldrb	r3, [r7, #11]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40022000 	.word	0x40022000
 8003784:	40021000 	.word	0x40021000
 8003788:	0800c954 	.word	0x0800c954
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80037a0:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_RCC_MCOConfig+0x64>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <HAL_RCC_MCOConfig+0x64>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <HAL_RCC_MCOConfig+0x64>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80037b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037c2:	2302      	movs	r3, #2
 80037c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037ce:	f107 0314 	add.w	r3, r7, #20
 80037d2:	4619      	mov	r1, r3
 80037d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037d8:	f7ff f8e2 	bl	80029a0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_RCC_MCOConfig+0x64>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_MCOConfig+0x64>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
}
 80037f0:	bf00      	nop
 80037f2:	3728      	adds	r7, #40	@ 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380a:	4b3e      	ldr	r3, [pc, #248]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003814:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d121      	bne.n	800386e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d11e      	bne.n	800386e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003830:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d107      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800383c:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e005      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800384c:	4b2d      	ldr	r3, [pc, #180]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003858:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d102      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <HAL_RCC_GetSysClockFreq+0x110>)
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e004      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d101      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003880:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x114>)
 8003882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d134      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d003      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0xac>
 80038a0:	e005      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <HAL_RCC_GetSysClockFreq+0x110>)
 80038a4:	617b      	str	r3, [r7, #20]
      break;
 80038a6:	e005      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038a8:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x114>)
 80038aa:	617b      	str	r3, [r7, #20]
      break;
 80038ac:	e002      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	3301      	adds	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	fb03 f202 	mul.w	r2, r3, r2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038da:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x108>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	0e5b      	lsrs	r3, r3, #25
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	3301      	adds	r3, #1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038f4:	69bb      	ldr	r3, [r7, #24]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	0800c96c 	.word	0x0800c96c
 800390c:	00f42400 	.word	0x00f42400
 8003910:	007a1200 	.word	0x007a1200

08003914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003930:	f7ff fff0 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800c964 	.word	0x0800c964

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800395c:	f7ff ffda 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4904      	ldr	r1, [pc, #16]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	0800c964 	.word	0x0800c964

08003984 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	220f      	movs	r2, #15
 8003992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0203 	and.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80039a0:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80039b8:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	08db      	lsrs	r3, r3, #3
 80039be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80039c6:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <HAL_RCC_GetClockConfig+0x60>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0207 	and.w	r2, r3, #7
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40022000 	.word	0x40022000

080039e8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <HAL_RCC_EnableCSS+0x1c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a04      	ldr	r2, [pc, #16]	@ (8003a04 <HAL_RCC_EnableCSS+0x1c>)
 80039f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003a1a:	f000 f809 	bl	8003a30 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003a1e:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a24:	621a      	str	r2, [r3, #32]
  }
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a58:	f7ff f924 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 8003a5c:	6178      	str	r0, [r7, #20]
 8003a5e:	e014      	b.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4a24      	ldr	r2, [pc, #144]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6c:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a78:	f7ff f914 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 8003a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d10b      	bne.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d919      	bls.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a9c:	d902      	bls.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e013      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e010      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d902      	bls.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e00a      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d102      	bne.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e004      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d101      	bne.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4909      	ldr	r1, [pc, #36]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003adc:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d031      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b24:	d01a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b2a:	d814      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b34:	d10f      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b36:	4b5d      	ldr	r3, [pc, #372]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b42:	e00c      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f9ce 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	74fb      	strb	r3, [r7, #19]
      break;
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b64:	4b51      	ldr	r3, [pc, #324]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	494e      	ldr	r1, [pc, #312]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b7a:	e001      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 809e 	beq.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b92:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	4a3f      	ldr	r2, [pc, #252]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a39      	ldr	r2, [pc, #228]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd0:	f7fe fcfc 	bl	80025cc <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fe fcf8 	bl	80025cc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bea:	e005      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bec:	4b30      	ldr	r3, [pc, #192]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d15a      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01e      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d019      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c26:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c46:	4a19      	ldr	r2, [pc, #100]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d016      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fcb8 	bl	80025cc <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe fcb4 	bl	80025cc <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d902      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	74fb      	strb	r3, [r7, #19]
            break;
 8003c76:	e006      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ec      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8c:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	4904      	ldr	r1, [pc, #16]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb8:	7c7b      	ldrb	r3, [r7, #17]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	4a89      	ldr	r2, [pc, #548]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd6:	4b84      	ldr	r3, [pc, #528]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4980      	ldr	r1, [pc, #512]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f023 020c 	bic.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	4978      	ldr	r1, [pc, #480]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1a:	4b73      	ldr	r3, [pc, #460]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	496f      	ldr	r1, [pc, #444]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	4967      	ldr	r1, [pc, #412]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d5e:	4b62      	ldr	r3, [pc, #392]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	495e      	ldr	r1, [pc, #376]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	4956      	ldr	r1, [pc, #344]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da2:	4b51      	ldr	r3, [pc, #324]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	494d      	ldr	r1, [pc, #308]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d028      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc4:	4b48      	ldr	r3, [pc, #288]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4945      	ldr	r1, [pc, #276]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de2:	d106      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b40      	ldr	r3, [pc, #256]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
 8003df0:	e011      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2101      	movs	r1, #1
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f872 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e22:	4b31      	ldr	r3, [pc, #196]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	492d      	ldr	r1, [pc, #180]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e42:	4b29      	ldr	r3, [pc, #164]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a28      	ldr	r2, [pc, #160]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4c:	60d3      	str	r3, [r2, #12]
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f843 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01c      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8e:	4916      	ldr	r1, [pc, #88]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f820 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed4:	4904      	ldr	r1, [pc, #16]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003edc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003efa:	4b74      	ldr	r3, [pc, #464]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f06:	4b71      	ldr	r3, [pc, #452]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0203 	and.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10d      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
       ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f1e:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d047      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e044      	b.n	8003fc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d018      	beq.n	8003f72 <RCCEx_PLLSAI1_Config+0x86>
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d825      	bhi.n	8003f90 <RCCEx_PLLSAI1_Config+0xa4>
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d002      	beq.n	8003f4e <RCCEx_PLLSAI1_Config+0x62>
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d009      	beq.n	8003f60 <RCCEx_PLLSAI1_Config+0x74>
 8003f4c:	e020      	b.n	8003f90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11d      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5e:	e01a      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f60:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f70:	e013      	b.n	8003f9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f72:	4b56      	ldr	r3, [pc, #344]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f8e:	e006      	b.n	8003f9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e004      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	4943      	ldr	r1, [pc, #268]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d17c      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fc8:	4b40      	ldr	r3, [pc, #256]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fe fafa 	bl	80025cc <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fda:	e009      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fdc:	f7fe faf6 	bl	80025cc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d902      	bls.n	8003ff0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	73fb      	strb	r3, [r7, #15]
        break;
 8003fee:	e005      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ff0:	4b36      	ldr	r3, [pc, #216]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ef      	bne.n	8003fdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d15f      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d110      	bne.n	800402a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004008:	4b30      	ldr	r3, [pc, #192]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004010:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6892      	ldr	r2, [r2, #8]
 8004018:	0211      	lsls	r1, r2, #8
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68d2      	ldr	r2, [r2, #12]
 800401e:	06d2      	lsls	r2, r2, #27
 8004020:	430a      	orrs	r2, r1
 8004022:	492a      	ldr	r1, [pc, #168]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	610b      	str	r3, [r1, #16]
 8004028:	e027      	b.n	800407a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d112      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004030:	4b26      	ldr	r3, [pc, #152]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004038:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	0211      	lsls	r1, r2, #8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6912      	ldr	r2, [r2, #16]
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	3a01      	subs	r2, #1
 800404a:	0552      	lsls	r2, r2, #21
 800404c:	430a      	orrs	r2, r1
 800404e:	491f      	ldr	r1, [pc, #124]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
 8004054:	e011      	b.n	800407a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800405e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6892      	ldr	r2, [r2, #8]
 8004066:	0211      	lsls	r1, r2, #8
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6952      	ldr	r2, [r2, #20]
 800406c:	0852      	lsrs	r2, r2, #1
 800406e:	3a01      	subs	r2, #1
 8004070:	0652      	lsls	r2, r2, #25
 8004072:	430a      	orrs	r2, r1
 8004074:	4915      	ldr	r1, [pc, #84]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800407a:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004084:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe faa1 	bl	80025cc <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800408c:	e009      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800408e:	f7fe fa9d 	bl	80025cc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d902      	bls.n	80040a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	73fb      	strb	r3, [r7, #15]
          break;
 80040a0:	e005      	b.n	80040ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ef      	beq.n	800408e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e095      	b.n	800420e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f2:	d009      	beq.n	8004108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
 80040fa:	e005      	b.n	8004108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fdf8 	bl	8001d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800413e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004148:	d902      	bls.n	8004150 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e002      	b.n	8004156 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004154:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800415e:	d007      	beq.n	8004170 <HAL_SPI_Init+0xa0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004168:	d002      	beq.n	8004170 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	ea42 0103 	orr.w	r1, r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f003 0204 	and.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041ec:	ea42 0103 	orr.w	r1, r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b088      	sub	sp, #32
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004226:	f7fe f9d1 	bl	80025cc <HAL_GetTick>
 800422a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	e15c      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_SPI_Transmit+0x36>
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e154      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_SPI_Transmit+0x48>
 800425a:	2302      	movs	r3, #2
 800425c:	e14d      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2203      	movs	r2, #3
 800426a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	88fa      	ldrh	r2, [r7, #6]
 800427e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b0:	d10f      	bne.n	80042d2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d007      	beq.n	80042f0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f8:	d952      	bls.n	80043a0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_SPI_Transmit+0xf2>
 8004302:	8b7b      	ldrh	r3, [r7, #26]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d145      	bne.n	8004394 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	881a      	ldrh	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	1c9a      	adds	r2, r3, #2
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800432c:	e032      	b.n	8004394 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d112      	bne.n	8004362 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004360:	e018      	b.n	8004394 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004362:	f7fe f933 	bl	80025cc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d803      	bhi.n	800437a <HAL_SPI_Transmit+0x164>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d102      	bne.n	8004380 <HAL_SPI_Transmit+0x16a>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0b2      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1c7      	bne.n	800432e <HAL_SPI_Transmit+0x118>
 800439e:	e083      	b.n	80044a8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_Transmit+0x198>
 80043a8:	8b7b      	ldrh	r3, [r7, #26]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d177      	bne.n	800449e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d912      	bls.n	80043de <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b02      	subs	r3, #2
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043dc:	e05f      	b.n	800449e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004404:	e04b      	b.n	800449e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d12b      	bne.n	800446c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d912      	bls.n	8004444 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	1c9a      	adds	r2, r3, #2
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b02      	subs	r3, #2
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004442:	e02c      	b.n	800449e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800446a:	e018      	b.n	800449e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446c:	f7fe f8ae 	bl	80025cc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d803      	bhi.n	8004484 <HAL_SPI_Transmit+0x26e>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x274>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e02d      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ae      	bne.n	8004406 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fcf5 	bl	8004e9c <SPI_EndRxTxTransaction>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b088      	sub	sp, #32
 8004506:	af02      	add	r7, sp, #8
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d001      	beq.n	8004522 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	e123      	b.n	800476a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800452a:	d112      	bne.n	8004552 <HAL_SPI_Receive+0x50>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10e      	bne.n	8004552 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2204      	movs	r2, #4
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f912 	bl	8004772 <HAL_SPI_TransmitReceive>
 800454e:	4603      	mov	r3, r0
 8004550:	e10b      	b.n	800476a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004552:	f7fe f83b 	bl	80025cc <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_Receive+0x62>
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e100      	b.n	800476a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_SPI_Receive+0x74>
 8004572:	2302      	movs	r3, #2
 8004574:	e0f9      	b.n	800476a <HAL_SPI_Receive+0x268>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2204      	movs	r2, #4
 8004582:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045c8:	d908      	bls.n	80045dc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	e007      	b.n	80045ec <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f4:	d10f      	bne.n	8004616 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d007      	beq.n	8004634 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800463c:	d875      	bhi.n	800472a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800463e:	e037      	b.n	80046b0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d117      	bne.n	800467e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f103 020c 	add.w	r2, r3, #12
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	7812      	ldrb	r2, [r2, #0]
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800467c:	e018      	b.n	80046b0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd ffa5 	bl	80025cc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Receive+0x194>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d102      	bne.n	800469c <HAL_SPI_Receive+0x19a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e05c      	b.n	800476a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1c1      	bne.n	8004640 <HAL_SPI_Receive+0x13e>
 80046bc:	e03b      	b.n	8004736 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d115      	bne.n	80046f8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	b292      	uxth	r2, r2
 80046d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	1c9a      	adds	r2, r3, #2
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80046f6:	e018      	b.n	800472a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f8:	f7fd ff68 	bl	80025cc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d803      	bhi.n	8004710 <HAL_SPI_Receive+0x20e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d102      	bne.n	8004716 <HAL_SPI_Receive+0x214>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e01f      	b.n	800476a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1c3      	bne.n	80046be <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fb56 	bl	8004dec <SPI_EndRxTransaction>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08a      	sub	sp, #40	@ 0x28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004784:	f7fd ff22 	bl	80025cc <HAL_GetTick>
 8004788:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004790:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d00c      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x4e>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x4a>
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d001      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
 80047be:	e1f3      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x60>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x60>
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e1e8      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x72>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e1e1      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d003      	beq.n	8004800 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2205      	movs	r2, #5
 80047fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	887a      	ldrh	r2, [r7, #2]
 8004826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004842:	d802      	bhi.n	800484a <HAL_SPI_TransmitReceive+0xd8>
 8004844:	8abb      	ldrh	r3, [r7, #20]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d908      	bls.n	800485c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	e007      	b.n	800486c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b40      	cmp	r3, #64	@ 0x40
 8004878:	d007      	beq.n	800488a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004892:	f240 8083 	bls.w	800499c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x132>
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d16f      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c8:	e05c      	b.n	8004984 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d11b      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x19e>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x19e>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d113      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11c      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x1e6>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	b292      	uxth	r2, r2
 8004936:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004954:	2301      	movs	r3, #1
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004958:	f7fd fe38 	bl	80025cc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004964:	429a      	cmp	r2, r3
 8004966:	d80d      	bhi.n	8004984 <HAL_SPI_TransmitReceive+0x212>
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d009      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e111      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d19d      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x158>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d197      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x158>
 800499a:	e0e5      	b.n	8004b68 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x23a>
 80049a4:	8afb      	ldrh	r3, [r7, #22]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f040 80d1 	bne.w	8004b4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d912      	bls.n	80049dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	1c9a      	adds	r2, r3, #2
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b02      	subs	r3, #2
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049da:	e0b8      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	7812      	ldrb	r2, [r2, #0]
 80049e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a02:	e0a4      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d134      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x30a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02f      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0x30a>
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d12c      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d912      	bls.n	8004a52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b02      	subs	r3, #2
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a50:	e012      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d148      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x3aa>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d042      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d923      	bls.n	8004aea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b02      	subs	r3, #2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d81f      	bhi.n	8004b18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ae6:	605a      	str	r2, [r3, #4]
 8004ae8:	e016      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f103 020c 	add.w	r2, r3, #12
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b1c:	f7fd fd56 	bl	80025cc <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d803      	bhi.n	8004b34 <HAL_SPI_TransmitReceive+0x3c2>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x3c8>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e02c      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af55 	bne.w	8004a04 <HAL_SPI_TransmitReceive+0x292>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f af4e 	bne.w	8004a04 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f995 	bl	8004e9c <SPI_EndRxTxTransaction>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00e      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bc0:	f7fd fd04 	bl	80025cc <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bd0:	f7fd fcfc 	bl	80025cc <HAL_GetTick>
 8004bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bd6:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	015b      	lsls	r3, r3, #5
 8004bdc:	0d1b      	lsrs	r3, r3, #20
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be6:	e054      	b.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d050      	beq.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bf0:	f7fd fcec 	bl	80025cc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d902      	bls.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d13d      	bne.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c1e:	d111      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c28:	d004      	beq.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c32:	d107      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4c:	d10f      	bne.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e017      	b.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d19b      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cd2:	f7fd fc7b 	bl	80025cc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	4413      	add	r3, r2
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ce2:	f7fd fc73 	bl	80025cc <HAL_GetTick>
 8004ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00da      	lsls	r2, r3, #3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	0d1b      	lsrs	r3, r3, #20
 8004d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d08:	e060      	b.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d10:	d107      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d050      	beq.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d2a:	f7fd fc4f 	bl	80025cc <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d902      	bls.n	8004d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d13d      	bne.n	8004dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d58:	d111      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d62:	d004      	beq.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6c:	d107      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d86:	d10f      	bne.n	8004da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e010      	b.n	8004dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d196      	bne.n	8004d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3728      	adds	r7, #40	@ 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000000 	.word	0x20000000

08004dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e00:	d111      	bne.n	8004e26 <SPI_EndRxTransaction+0x3a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d004      	beq.n	8004e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e14:	d107      	bne.n	8004e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	@ 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff febd 	bl	8004bb0 <SPI_WaitFlagStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e023      	b.n	8004e94 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e54:	d11d      	bne.n	8004e92 <SPI_EndRxTransaction+0xa6>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5e:	d004      	beq.n	8004e6a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e68:	d113      	bne.n	8004e92 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff ff22 	bl	8004cc0 <SPI_WaitFifoStateUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e000      	b.n	8004e94 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff03 	bl	8004cc0 <SPI_WaitFifoStateUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e027      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	@ 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fe68 	bl	8004bb0 <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e014      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff fedc 	bl	8004cc0 <SPI_WaitFifoStateUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e000      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e049      	b.n	8004fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd f9cc 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fbf8 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e03b      	b.n	8005068 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a19      	ldr	r2, [pc, #100]	@ (8005074 <HAL_TIM_Base_Start_IT+0x9c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_TIM_Base_Start_IT+0x4e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d004      	beq.n	8005026 <HAL_TIM_Base_Start_IT+0x4e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <HAL_TIM_Base_Start_IT+0xa0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d115      	bne.n	8005052 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b13      	ldr	r3, [pc, #76]	@ (800507c <HAL_TIM_Base_Start_IT+0xa4>)
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d015      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x8c>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503e:	d011      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005050:	e008      	b.n	8005064 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e000      	b.n	8005066 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40014000 	.word	0x40014000
 800507c:	00010007 	.word	0x00010007

08005080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e049      	b.n	8005126 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f841 	bl	800512e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 fb4c 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01b      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0202 	mvn.w	r2, #2
 8005176:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fac6 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005192:	e005      	b.n	80051a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fab8 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fac9 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d020      	beq.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f06f 0204 	mvn.w	r2, #4
 80051c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 faa0 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 80051de:	e005      	b.n	80051ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa92 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 faa3 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01b      	beq.n	800523e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0208 	mvn.w	r2, #8
 800520e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa7a 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa6c 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa7d 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01b      	beq.n	800528a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0210 	mvn.w	r2, #16
 800525a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2208      	movs	r2, #8
 8005260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa54 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005276:	e005      	b.n	8005284 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa46 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa57 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0201 	mvn.w	r2, #1
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fc f87d 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 feb0 	bl	800603c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fea8 	bl	8006050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa11 	bl	8005746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0220 	mvn.w	r2, #32
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fe70 	bl	8006028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800536a:	2302      	movs	r3, #2
 800536c:	e0ff      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b14      	cmp	r3, #20
 800537a:	f200 80f0 	bhi.w	800555e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053d9 	.word	0x080053d9
 8005388:	0800555f 	.word	0x0800555f
 800538c:	0800555f 	.word	0x0800555f
 8005390:	0800555f 	.word	0x0800555f
 8005394:	08005419 	.word	0x08005419
 8005398:	0800555f 	.word	0x0800555f
 800539c:	0800555f 	.word	0x0800555f
 80053a0:	0800555f 	.word	0x0800555f
 80053a4:	0800545b 	.word	0x0800545b
 80053a8:	0800555f 	.word	0x0800555f
 80053ac:	0800555f 	.word	0x0800555f
 80053b0:	0800555f 	.word	0x0800555f
 80053b4:	0800549b 	.word	0x0800549b
 80053b8:	0800555f 	.word	0x0800555f
 80053bc:	0800555f 	.word	0x0800555f
 80053c0:	0800555f 	.word	0x0800555f
 80053c4:	080054dd 	.word	0x080054dd
 80053c8:	0800555f 	.word	0x0800555f
 80053cc:	0800555f 	.word	0x0800555f
 80053d0:	0800555f 	.word	0x0800555f
 80053d4:	0800551d 	.word	0x0800551d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa2c 	bl	800583c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0208 	orr.w	r2, r2, #8
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0204 	bic.w	r2, r2, #4
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	619a      	str	r2, [r3, #24]
      break;
 8005416:	e0a5      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fa88 	bl	8005934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6999      	ldr	r1, [r3, #24]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	619a      	str	r2, [r3, #24]
      break;
 8005458:	e084      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fae1 	bl	8005a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0208 	orr.w	r2, r2, #8
 8005474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0204 	bic.w	r2, r2, #4
 8005484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	61da      	str	r2, [r3, #28]
      break;
 8005498:	e064      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fb39 	bl	8005b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	021a      	lsls	r2, r3, #8
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	61da      	str	r2, [r3, #28]
      break;
 80054da:	e043      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fb76 	bl	8005bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0208 	orr.w	r2, r2, #8
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800551a:	e023      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fbae 	bl	8005c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800555c:	e002      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIM_ConfigClockSource+0x1c>
 8005590:	2302      	movs	r3, #2
 8005592:	e0b6      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x18a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d0:	d03e      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xd8>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d6:	f200 8087 	bhi.w	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	f000 8086 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x176>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d87f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 80055e8:	2b70      	cmp	r3, #112	@ 0x70
 80055ea:	d01a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xaa>
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d87b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 80055f0:	2b60      	cmp	r3, #96	@ 0x60
 80055f2:	d050      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x11e>
 80055f4:	2b60      	cmp	r3, #96	@ 0x60
 80055f6:	d877      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 80055f8:	2b50      	cmp	r3, #80	@ 0x50
 80055fa:	d03c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xfe>
 80055fc:	2b50      	cmp	r3, #80	@ 0x50
 80055fe:	d873      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d058      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x13e>
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d86f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 8005608:	2b30      	cmp	r3, #48	@ 0x30
 800560a:	d064      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15e>
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d86b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d060      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d867      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15e>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d05a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005620:	e062      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	f000 fbfb 	bl	8005e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
      break;
 800564e:	e04f      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	f000 fbe4 	bl	8005e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005672:	609a      	str	r2, [r3, #8]
      break;
 8005674:	e03c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fb58 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2150      	movs	r1, #80	@ 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fbb1 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005694:	e02c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fb77 	bl	8005d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2160      	movs	r1, #96	@ 0x60
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fba1 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 80056b4:	e01c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fb38 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	@ 0x40
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb91 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 fb88 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <TIM_Base_SetConfig+0xd4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0x20>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577a:	d108      	bne.n	800578e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a27      	ldr	r2, [pc, #156]	@ (8005830 <TIM_Base_SetConfig+0xd4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_Base_SetConfig+0x52>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579c:	d007      	beq.n	80057ae <TIM_Base_SetConfig+0x52>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a24      	ldr	r2, [pc, #144]	@ (8005834 <TIM_Base_SetConfig+0xd8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x52>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a23      	ldr	r2, [pc, #140]	@ (8005838 <TIM_Base_SetConfig+0xdc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <TIM_Base_SetConfig+0xd4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_Base_SetConfig+0xa0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a11      	ldr	r2, [pc, #68]	@ (8005834 <TIM_Base_SetConfig+0xd8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_Base_SetConfig+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a10      	ldr	r2, [pc, #64]	@ (8005838 <TIM_Base_SetConfig+0xdc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d103      	bne.n	8005804 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d105      	bne.n	8005822 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f023 0201 	bic.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]
  }
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400

0800583c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0201 	bic.w	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 0302 	bic.w	r3, r3, #2
 8005888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a24      	ldr	r2, [pc, #144]	@ (8005928 <TIM_OC1_SetConfig+0xec>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_OC1_SetConfig+0x70>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a23      	ldr	r2, [pc, #140]	@ (800592c <TIM_OC1_SetConfig+0xf0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC1_SetConfig+0x70>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a22      	ldr	r2, [pc, #136]	@ (8005930 <TIM_OC1_SetConfig+0xf4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10c      	bne.n	80058c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0308 	bic.w	r3, r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <TIM_OC1_SetConfig+0xec>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <TIM_OC1_SetConfig+0xa2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <TIM_OC1_SetConfig+0xf0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC1_SetConfig+0xa2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <TIM_OC1_SetConfig+0xf4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d111      	bne.n	8005902 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400

08005934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f023 0210 	bic.w	r2, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0320 	bic.w	r3, r3, #32
 8005982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a22      	ldr	r2, [pc, #136]	@ (8005a1c <TIM_OC2_SetConfig+0xe8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10d      	bne.n	80059b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a19      	ldr	r2, [pc, #100]	@ (8005a1c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_OC2_SetConfig+0x98>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a18      	ldr	r2, [pc, #96]	@ (8005a20 <TIM_OC2_SetConfig+0xec>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC2_SetConfig+0x98>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a17      	ldr	r2, [pc, #92]	@ (8005a24 <TIM_OC2_SetConfig+0xf0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d113      	bne.n	80059f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400

08005a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a21      	ldr	r2, [pc, #132]	@ (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10d      	bne.n	8005aa6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC3_SetConfig+0x96>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <TIM_OC3_SetConfig+0xe8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC3_SetConfig+0x96>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <TIM_OC3_SetConfig+0xec>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d113      	bne.n	8005ae6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400

08005b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	031b      	lsls	r3, r3, #12
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <TIM_OC4_SetConfig+0xb0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC4_SetConfig+0x74>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <TIM_OC4_SetConfig+0xb4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC4_SetConfig+0x74>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <TIM_OC4_SetConfig+0xb8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400

08005bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <TIM_OC5_SetConfig+0xa4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <TIM_OC5_SetConfig+0x6a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a12      	ldr	r2, [pc, #72]	@ (8005c7c <TIM_OC5_SetConfig+0xa8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC5_SetConfig+0x6a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <TIM_OC5_SetConfig+0xac>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d109      	bne.n	8005c52 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400

08005c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	051b      	lsls	r3, r3, #20
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <TIM_OC6_SetConfig+0xa8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <TIM_OC6_SetConfig+0x6c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a13      	ldr	r2, [pc, #76]	@ (8005d30 <TIM_OC6_SetConfig+0xac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_OC6_SetConfig+0x6c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <TIM_OC6_SetConfig+0xb0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d109      	bne.n	8005d04 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	029b      	lsls	r3, r3, #10
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400

08005d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f023 0210 	bic.w	r2, r3, #16
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f043 0307 	orr.w	r3, r3, #7
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e04f      	b.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005eb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a14      	ldr	r2, [pc, #80]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a10      	ldr	r2, [pc, #64]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40014000 	.word	0x40014000

08005f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e060      	b.n	8006016 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a14      	ldr	r2, [pc, #80]	@ (8006024 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d115      	bne.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	051b      	lsls	r3, r3, #20
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40012c00 	.word	0x40012c00

08006028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e040      	b.n	80060f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc f9f2 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	@ 0x24
 8006090:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fade 	bl	800666c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8af 	bl	8006214 <UART_SetConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e01b      	b.n	80060f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fb5d 	bl	80067b0 <UART_CheckIdleState>
 80060f6:	4603      	mov	r3, r0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006114:	2b20      	cmp	r3, #32
 8006116:	d177      	bne.n	8006208 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Transmit+0x24>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e070      	b.n	800620a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2221      	movs	r2, #33	@ 0x21
 8006134:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006136:	f7fc fa49 	bl	80025cc <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006154:	d108      	bne.n	8006168 <HAL_UART_Transmit+0x68>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e003      	b.n	8006170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006170:	e02f      	b.n	80061d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	2180      	movs	r1, #128	@ 0x80
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fbbf 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e03b      	b.n	800620a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a4:	b292      	uxth	r2, r2
 80061a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3302      	adds	r3, #2
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e007      	b.n	80061c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	3301      	adds	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1c9      	bne.n	8006172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2140      	movs	r1, #64	@ 0x40
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fb89 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e005      	b.n	800620a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b08a      	sub	sp, #40	@ 0x28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4bb4      	ldr	r3, [pc, #720]	@ (8006514 <UART_SetConfig+0x300>)
 8006244:	4013      	ands	r3, r2
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4aa9      	ldr	r2, [pc, #676]	@ (8006518 <UART_SetConfig+0x304>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	4313      	orrs	r3, r2
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	430a      	orrs	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4aa0      	ldr	r2, [pc, #640]	@ (800651c <UART_SetConfig+0x308>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d126      	bne.n	80062ec <UART_SetConfig+0xd8>
 800629e:	4ba0      	ldr	r3, [pc, #640]	@ (8006520 <UART_SetConfig+0x30c>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d81b      	bhi.n	80062e4 <UART_SetConfig+0xd0>
 80062ac:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <UART_SetConfig+0xa0>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e080      	b.n	80063ce <UART_SetConfig+0x1ba>
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d2:	e07c      	b.n	80063ce <UART_SetConfig+0x1ba>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e078      	b.n	80063ce <UART_SetConfig+0x1ba>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e074      	b.n	80063ce <UART_SetConfig+0x1ba>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ea:	e070      	b.n	80063ce <UART_SetConfig+0x1ba>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a8c      	ldr	r2, [pc, #560]	@ (8006524 <UART_SetConfig+0x310>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d138      	bne.n	8006368 <UART_SetConfig+0x154>
 80062f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006520 <UART_SetConfig+0x30c>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	f003 030c 	and.w	r3, r3, #12
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d82d      	bhi.n	8006360 <UART_SetConfig+0x14c>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0xf8>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006341 	.word	0x08006341
 8006310:	08006361 	.word	0x08006361
 8006314:	08006361 	.word	0x08006361
 8006318:	08006361 	.word	0x08006361
 800631c:	08006351 	.word	0x08006351
 8006320:	08006361 	.word	0x08006361
 8006324:	08006361 	.word	0x08006361
 8006328:	08006361 	.word	0x08006361
 800632c:	08006349 	.word	0x08006349
 8006330:	08006361 	.word	0x08006361
 8006334:	08006361 	.word	0x08006361
 8006338:	08006361 	.word	0x08006361
 800633c:	08006359 	.word	0x08006359
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006346:	e042      	b.n	80063ce <UART_SetConfig+0x1ba>
 8006348:	2302      	movs	r3, #2
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e03e      	b.n	80063ce <UART_SetConfig+0x1ba>
 8006350:	2304      	movs	r3, #4
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e03a      	b.n	80063ce <UART_SetConfig+0x1ba>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e036      	b.n	80063ce <UART_SetConfig+0x1ba>
 8006360:	2310      	movs	r3, #16
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e032      	b.n	80063ce <UART_SetConfig+0x1ba>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a6a      	ldr	r2, [pc, #424]	@ (8006518 <UART_SetConfig+0x304>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d12a      	bne.n	80063c8 <UART_SetConfig+0x1b4>
 8006372:	4b6b      	ldr	r3, [pc, #428]	@ (8006520 <UART_SetConfig+0x30c>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800637c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006380:	d01a      	beq.n	80063b8 <UART_SetConfig+0x1a4>
 8006382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006386:	d81b      	bhi.n	80063c0 <UART_SetConfig+0x1ac>
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800638c:	d00c      	beq.n	80063a8 <UART_SetConfig+0x194>
 800638e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006392:	d815      	bhi.n	80063c0 <UART_SetConfig+0x1ac>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <UART_SetConfig+0x18c>
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800639c:	d008      	beq.n	80063b0 <UART_SetConfig+0x19c>
 800639e:	e00f      	b.n	80063c0 <UART_SetConfig+0x1ac>
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a6:	e012      	b.n	80063ce <UART_SetConfig+0x1ba>
 80063a8:	2302      	movs	r3, #2
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ae:	e00e      	b.n	80063ce <UART_SetConfig+0x1ba>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b6:	e00a      	b.n	80063ce <UART_SetConfig+0x1ba>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063be:	e006      	b.n	80063ce <UART_SetConfig+0x1ba>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c6:	e002      	b.n	80063ce <UART_SetConfig+0x1ba>
 80063c8:	2310      	movs	r3, #16
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a51      	ldr	r2, [pc, #324]	@ (8006518 <UART_SetConfig+0x304>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d17a      	bne.n	80064ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d824      	bhi.n	800642a <UART_SetConfig+0x216>
 80063e0:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <UART_SetConfig+0x1d4>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	0800642b 	.word	0x0800642b
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	0800641b 	.word	0x0800641b
 80063fc:	0800642b 	.word	0x0800642b
 8006400:	0800642b 	.word	0x0800642b
 8006404:	0800642b 	.word	0x0800642b
 8006408:	08006423 	.word	0x08006423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fd fa8e 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8006410:	61f8      	str	r0, [r7, #28]
        break;
 8006412:	e010      	b.n	8006436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006414:	4b44      	ldr	r3, [pc, #272]	@ (8006528 <UART_SetConfig+0x314>)
 8006416:	61fb      	str	r3, [r7, #28]
        break;
 8006418:	e00d      	b.n	8006436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641a:	f7fd f9ef 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 800641e:	61f8      	str	r0, [r7, #28]
        break;
 8006420:	e009      	b.n	8006436 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006426:	61fb      	str	r3, [r7, #28]
        break;
 8006428:	e005      	b.n	8006436 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006434:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8107 	beq.w	800664c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d305      	bcc.n	800645a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	429a      	cmp	r2, r3
 8006458:	d903      	bls.n	8006462 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006460:	e0f4      	b.n	800664c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2200      	movs	r2, #0
 8006466:	461c      	mov	r4, r3
 8006468:	4615      	mov	r5, r2
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	022b      	lsls	r3, r5, #8
 8006474:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006478:	0222      	lsls	r2, r4, #8
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	6849      	ldr	r1, [r1, #4]
 800647e:	0849      	lsrs	r1, r1, #1
 8006480:	2000      	movs	r0, #0
 8006482:	4688      	mov	r8, r1
 8006484:	4681      	mov	r9, r0
 8006486:	eb12 0a08 	adds.w	sl, r2, r8
 800648a:	eb43 0b09 	adc.w	fp, r3, r9
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	4650      	mov	r0, sl
 800649e:	4659      	mov	r1, fp
 80064a0:	f7fa fb82 	bl	8000ba8 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4613      	mov	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b2:	d308      	bcc.n	80064c6 <UART_SetConfig+0x2b2>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ba:	d204      	bcs.n	80064c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e0c2      	b.n	800664c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064cc:	e0be      	b.n	800664c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d6:	d16a      	bne.n	80065ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80064d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d834      	bhi.n	800654a <UART_SetConfig+0x336>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0x2d4>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	0800652d 	.word	0x0800652d
 80064f0:	08006535 	.word	0x08006535
 80064f4:	0800654b 	.word	0x0800654b
 80064f8:	0800653b 	.word	0x0800653b
 80064fc:	0800654b 	.word	0x0800654b
 8006500:	0800654b 	.word	0x0800654b
 8006504:	0800654b 	.word	0x0800654b
 8006508:	08006543 	.word	0x08006543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fd fa0e 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8006510:	61f8      	str	r0, [r7, #28]
        break;
 8006512:	e020      	b.n	8006556 <UART_SetConfig+0x342>
 8006514:	efff69f3 	.word	0xefff69f3
 8006518:	40008000 	.word	0x40008000
 800651c:	40013800 	.word	0x40013800
 8006520:	40021000 	.word	0x40021000
 8006524:	40004400 	.word	0x40004400
 8006528:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fd fa14 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8006530:	61f8      	str	r0, [r7, #28]
        break;
 8006532:	e010      	b.n	8006556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006534:	4b4c      	ldr	r3, [pc, #304]	@ (8006668 <UART_SetConfig+0x454>)
 8006536:	61fb      	str	r3, [r7, #28]
        break;
 8006538:	e00d      	b.n	8006556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fd f95f 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 800653e:	61f8      	str	r0, [r7, #28]
        break;
 8006540:	e009      	b.n	8006556 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006546:	61fb      	str	r3, [r7, #28]
        break;
 8006548:	e005      	b.n	8006556 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d077      	beq.n	800664c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	005a      	lsls	r2, r3, #1
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006570:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b0f      	cmp	r3, #15
 8006576:	d916      	bls.n	80065a6 <UART_SetConfig+0x392>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657e:	d212      	bcs.n	80065a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f023 030f 	bic.w	r3, r3, #15
 8006588:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	b29b      	uxth	r3, r3
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	b29a      	uxth	r2, r3
 8006596:	8afb      	ldrh	r3, [r7, #22]
 8006598:	4313      	orrs	r3, r2
 800659a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	8afa      	ldrh	r2, [r7, #22]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	e052      	b.n	800664c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065ac:	e04e      	b.n	800664c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	d827      	bhi.n	8006606 <UART_SetConfig+0x3f2>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <UART_SetConfig+0x3a8>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	08006607 	.word	0x08006607
 80065cc:	080065f7 	.word	0x080065f7
 80065d0:	08006607 	.word	0x08006607
 80065d4:	08006607 	.word	0x08006607
 80065d8:	08006607 	.word	0x08006607
 80065dc:	080065ff 	.word	0x080065ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e0:	f7fd f9a4 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80065e4:	61f8      	str	r0, [r7, #28]
        break;
 80065e6:	e014      	b.n	8006612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e8:	f7fd f9b6 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e010      	b.n	8006612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <UART_SetConfig+0x454>)
 80065f2:	61fb      	str	r3, [r7, #28]
        break;
 80065f4:	e00d      	b.n	8006612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f6:	f7fd f901 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80065fa:	61f8      	str	r0, [r7, #28]
        break;
 80065fc:	e009      	b.n	8006612 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006602:	61fb      	str	r3, [r7, #28]
        break;
 8006604:	e005      	b.n	8006612 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006610:	bf00      	nop
    }

    if (pclk != 0U)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d019      	beq.n	800664c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	085a      	lsrs	r2, r3, #1
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	441a      	add	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	fbb2 f3f3 	udiv	r3, r2, r3
 800662a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	d909      	bls.n	8006646 <UART_SetConfig+0x432>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006638:	d205      	bcs.n	8006646 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e002      	b.n	800664c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006658:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	@ 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006666:	bf00      	nop
 8006668:	00f42400 	.word	0x00f42400

0800666c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01a      	beq.n	8006782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800676a:	d10a      	bne.n	8006782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b098      	sub	sp, #96	@ 0x60
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c0:	f7fb ff04 	bl	80025cc <HAL_GetTick>
 80067c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d12e      	bne.n	8006832 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f88c 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d021      	beq.n	8006832 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006802:	653b      	str	r3, [r7, #80]	@ 0x50
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800680c:	647b      	str	r3, [r7, #68]	@ 0x44
 800680e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800681a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e062      	b.n	80068f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d149      	bne.n	80068d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006848:	2200      	movs	r2, #0
 800684a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f856 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03c      	beq.n	80068d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	623b      	str	r3, [r7, #32]
   return(result);
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800686e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
 800687a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800687e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60fb      	str	r3, [r7, #12]
   return(result);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ac:	61fa      	str	r2, [r7, #28]
 80068ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	617b      	str	r3, [r7, #20]
   return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e5      	bne.n	800688c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e011      	b.n	80068f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3758      	adds	r7, #88	@ 0x58
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	e04f      	b.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d04b      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fb fe57 	bl	80025cc <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <UART_WaitOnFlagUntilTimeout+0x30>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e04e      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d037      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b80      	cmp	r3, #128	@ 0x80
 8006946:	d034      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b40      	cmp	r3, #64	@ 0x40
 800694c:	d031      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b08      	cmp	r3, #8
 800695a:	d110      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2208      	movs	r2, #8
 8006962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f838 	bl	80069da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2208      	movs	r2, #8
 800696e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e029      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800698c:	d111      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f81e 	bl	80069da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e00f      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4013      	ands	r3, r2
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	bf0c      	ite	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	2300      	movne	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d0a0      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069da:	b480      	push	{r7}
 80069dc:	b095      	sub	sp, #84	@ 0x54
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d118      	bne.n	8006a82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f023 0310 	bic.w	r3, r3, #16
 8006a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6979      	ldr	r1, [r7, #20]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a96:	bf00      	nop
 8006a98:	3754      	adds	r7, #84	@ 0x54
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <__NVIC_SetPriority>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	db0a      	blt.n	8006ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	490c      	ldr	r1, [pc, #48]	@ (8006af0 <__NVIC_SetPriority+0x4c>)
 8006abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006acc:	e00a      	b.n	8006ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	4908      	ldr	r1, [pc, #32]	@ (8006af4 <__NVIC_SetPriority+0x50>)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	3b04      	subs	r3, #4
 8006adc:	0112      	lsls	r2, r2, #4
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	761a      	strb	r2, [r3, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	e000e100 	.word	0xe000e100
 8006af4:	e000ed00 	.word	0xe000ed00

08006af8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <SysTick_Handler+0x1c>)
 8006afe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b00:	f001 fd46 	bl	8008590 <xTaskGetSchedulerState>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d001      	beq.n	8006b0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b0a:	f002 fb3d 	bl	8009188 <xPortSysTickHandler>
  }
}
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	e000e010 	.word	0xe000e010

08006b18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f06f 0004 	mvn.w	r0, #4
 8006b22:	f7ff ffbf 	bl	8006aa4 <__NVIC_SetPriority>
#endif
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b32:	f3ef 8305 	mrs	r3, IPSR
 8006b36:	603b      	str	r3, [r7, #0]
  return(result);
 8006b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b3e:	f06f 0305 	mvn.w	r3, #5
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	e00c      	b.n	8006b60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b46:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <osKernelInitialize+0x44>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b4e:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <osKernelInitialize+0x44>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	e002      	b.n	8006b60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b60:	687b      	ldr	r3, [r7, #4]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000408 	.word	0x20000408

08006b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7a:	f3ef 8305 	mrs	r3, IPSR
 8006b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b86:	f06f 0305 	mvn.w	r3, #5
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e010      	b.n	8006bb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bbc <osKernelStart+0x48>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d109      	bne.n	8006baa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b96:	f7ff ffbf 	bl	8006b18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b9a:	4b08      	ldr	r3, [pc, #32]	@ (8006bbc <osKernelStart+0x48>)
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ba0:	f001 f892 	bl	8007cc8 <vTaskStartScheduler>
      stat = osOK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	607b      	str	r3, [r7, #4]
 8006ba8:	e002      	b.n	8006bb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bb0:	687b      	ldr	r3, [r7, #4]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000408 	.word	0x20000408

08006bc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	@ 0x38
 8006bc4:	af04      	add	r7, sp, #16
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd0:	f3ef 8305 	mrs	r3, IPSR
 8006bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d17e      	bne.n	8006cda <osThreadNew+0x11a>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d07b      	beq.n	8006cda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006be2:	2380      	movs	r3, #128	@ 0x80
 8006be4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006be6:	2318      	movs	r3, #24
 8006be8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006bee:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d045      	beq.n	8006c86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <osThreadNew+0x48>
        name = attr->name;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <osThreadNew+0x6e>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b38      	cmp	r3, #56	@ 0x38
 8006c20:	d805      	bhi.n	8006c2e <osThreadNew+0x6e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <osThreadNew+0x72>
        return (NULL);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e054      	b.n	8006cdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <osThreadNew+0xa8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006c50:	d90a      	bls.n	8006c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <osThreadNew+0xa8>
        mem = 1;
 8006c62:	2301      	movs	r3, #1
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e010      	b.n	8006c8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10c      	bne.n	8006c8a <osThreadNew+0xca>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <osThreadNew+0xca>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <osThreadNew+0xca>
          mem = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e001      	b.n	8006c8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d110      	bne.n	8006cb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c98:	9202      	str	r2, [sp, #8]
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6a3a      	ldr	r2, [r7, #32]
 8006ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fe1a 	bl	80078e0 <xTaskCreateStatic>
 8006cac:	4603      	mov	r3, r0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e013      	b.n	8006cda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f107 0310 	add.w	r3, r7, #16
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fe68 	bl	80079a0 <xTaskCreate>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d001      	beq.n	8006cda <osThreadNew+0x11a>
            hTask = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cda:	693b      	ldr	r3, [r7, #16]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	@ 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cec:	f3ef 8305 	mrs	r3, IPSR
 8006cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <osDelay+0x1c>
    stat = osErrorISR;
 8006cf8:	f06f 0305 	mvn.w	r3, #5
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e007      	b.n	8006d10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 ffa6 	bl	8007c5c <vTaskDelay>
    }
  }

  return (stat);
 8006d10:	68fb      	ldr	r3, [r7, #12]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a07      	ldr	r2, [pc, #28]	@ (8006d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a06      	ldr	r2, [pc, #24]	@ (8006d4c <vApplicationGetIdleTaskMemory+0x30>)
 8006d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	601a      	str	r2, [r3, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000040c 	.word	0x2000040c
 8006d4c:	200004b4 	.word	0x200004b4

08006d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a07      	ldr	r2, [pc, #28]	@ (8006d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4a06      	ldr	r2, [pc, #24]	@ (8006d80 <vApplicationGetTimerTaskMemory+0x30>)
 8006d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d6e:	601a      	str	r2, [r3, #0]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	200006b4 	.word	0x200006b4
 8006d80:	2000075c 	.word	0x2000075c

08006d84 <vListInitialise>:
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0208 	add.w	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 0208 	add.w	r2, r3, #8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60da      	str	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <vListInitialiseItem>:
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <vListInsertEnd>:
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	605a      	str	r2, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	609a      	str	r2, [r3, #8]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	611a      	str	r2, [r3, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <vListInsert>:
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d103      	bne.n	8006e46 <vListInsert+0x20>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e00c      	b.n	8006e60 <vListInsert+0x3a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e002      	b.n	8006e54 <vListInsert+0x2e>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d2f6      	bcs.n	8006e4e <vListInsert+0x28>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	605a      	str	r2, [r3, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	609a      	str	r2, [r3, #8]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <uxListRemove>:
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6892      	ldr	r2, [r2, #8]
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6852      	ldr	r2, [r2, #4]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d103      	bne.n	8006ecc <uxListRemove+0x34>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	611a      	str	r2, [r3, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	1e5a      	subs	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <xQueueGenericReset>:
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericReset+0x2c>
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericReset+0x28>
 8006f18:	f002 f8a6 	bl	8009068 <vPortEnterCritical>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	68f9      	ldr	r1, [r7, #12]
 8006f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	609a      	str	r2, [r3, #8]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	441a      	add	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	22ff      	movs	r2, #255	@ 0xff
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	22ff      	movs	r2, #255	@ 0xff
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d114      	bne.n	8006f98 <xQueueGenericReset+0xac>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01a      	beq.n	8006fac <xQueueGenericReset+0xc0>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f942 	bl	8008204 <xTaskRemoveFromEventList>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <xQueueGenericReset+0xc0>
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <xQueueGenericReset+0xd0>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e009      	b.n	8006fac <xQueueGenericReset+0xc0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3310      	adds	r3, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fef1 	bl	8006d84 <vListInitialise>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3324      	adds	r3, #36	@ 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff feec 	bl	8006d84 <vListInitialise>
 8006fac:	f002 f88e 	bl	80090cc <vPortExitCritical>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueGenericCreateStatic>:
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	@ 0x38
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <xQueueGenericCreateStatic+0x2c>
 8006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <xQueueGenericCreateStatic+0x28>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <xQueueGenericCreateStatic+0x4a>
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	e7fd      	b.n	8007006 <xQueueGenericCreateStatic+0x46>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <xQueueGenericCreateStatic+0x56>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <xQueueGenericCreateStatic+0x5a>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <xQueueGenericCreateStatic+0x5c>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <xQueueGenericCreateStatic+0x78>
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	623b      	str	r3, [r7, #32]
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <xQueueGenericCreateStatic+0x74>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <xQueueGenericCreateStatic+0x84>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <xQueueGenericCreateStatic+0x88>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <xQueueGenericCreateStatic+0x8a>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <xQueueGenericCreateStatic+0xa6>
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <xQueueGenericCreateStatic+0xa2>
 8007066:	2350      	movs	r3, #80	@ 0x50
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b50      	cmp	r3, #80	@ 0x50
 800706e:	d00b      	beq.n	8007088 <xQueueGenericCreateStatic+0xc8>
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <xQueueGenericCreateStatic+0xc4>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <xQueueGenericCreateStatic+0xf0>
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f805 	bl	80070ba <prvInitialiseNewQueue>
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	4618      	mov	r0, r3
 80070b4:	3730      	adds	r7, #48	@ 0x30
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <prvInitialiseNewQueue>:
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	70fb      	strb	r3, [r7, #3]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <prvInitialiseNewQueue+0x1c>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e002      	b.n	80070dc <prvInitialiseNewQueue+0x22>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80070e8:	2101      	movs	r1, #1
 80070ea:	69b8      	ldr	r0, [r7, #24]
 80070ec:	f7ff fefe 	bl	8006eec <xQueueGenericReset>
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <xQueueGenericSend>:
 8007100:	b580      	push	{r7, lr}
 8007102:	b08e      	sub	sp, #56	@ 0x38
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	633b      	str	r3, [r7, #48]	@ 0x30
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <xQueueGenericSend+0x34>
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xQueueGenericSend+0x30>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <xQueueGenericSend+0x42>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueGenericSend+0x46>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueGenericSend+0x48>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <xQueueGenericSend+0x64>
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueGenericSend+0x60>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <xQueueGenericSend+0x72>
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <xQueueGenericSend+0x76>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGenericSend+0x78>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <xQueueGenericSend+0x94>
 800717c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	e7fd      	b.n	8007190 <xQueueGenericSend+0x90>
 8007194:	f001 f9fc 	bl	8008590 <xTaskGetSchedulerState>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <xQueueGenericSend+0xa4>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueGenericSend+0xa8>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueGenericSend+0xaa>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <xQueueGenericSend+0xc6>
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <xQueueGenericSend+0xc2>
 80071c6:	f001 ff4f 	bl	8009068 <vPortEnterCritical>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <xQueueGenericSend+0xdc>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d129      	bne.n	8007230 <xQueueGenericSend+0x130>
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071e2:	f000 fa0f 	bl	8007604 <prvCopyDataToQueue>
 80071e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <xQueueGenericSend+0x112>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	3324      	adds	r3, #36	@ 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f805 	bl	8008204 <xTaskRemoveFromEventList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d013      	beq.n	8007228 <xQueueGenericSend+0x128>
 8007200:	4b3f      	ldr	r3, [pc, #252]	@ (8007300 <xQueueGenericSend+0x200>)
 8007202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	e00a      	b.n	8007228 <xQueueGenericSend+0x128>
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xQueueGenericSend+0x128>
 8007218:	4b39      	ldr	r3, [pc, #228]	@ (8007300 <xQueueGenericSend+0x200>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f001 ff50 	bl	80090cc <vPortExitCritical>
 800722c:	2301      	movs	r3, #1
 800722e:	e063      	b.n	80072f8 <xQueueGenericSend+0x1f8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueGenericSend+0x13e>
 8007236:	f001 ff49 	bl	80090cc <vPortExitCritical>
 800723a:	2300      	movs	r3, #0
 800723c:	e05c      	b.n	80072f8 <xQueueGenericSend+0x1f8>
 800723e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <xQueueGenericSend+0x152>
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f83f 	bl	80082cc <vTaskInternalSetTimeOutState>
 800724e:	2301      	movs	r3, #1
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
 8007252:	f001 ff3b 	bl	80090cc <vPortExitCritical>
 8007256:	f000 fda7 	bl	8007da8 <vTaskSuspendAll>
 800725a:	f001 ff05 	bl	8009068 <vPortEnterCritical>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <xQueueGenericSend+0x174>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <xQueueGenericSend+0x18a>
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800728a:	f001 ff1f 	bl	80090cc <vPortExitCritical>
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f82e 	bl	80082f8 <xTaskCheckForTimeOut>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d124      	bne.n	80072ec <xQueueGenericSend+0x1ec>
 80072a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072a4:	f000 faa6 	bl	80077f4 <prvIsQueueFull>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <xQueueGenericSend+0x1e0>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	3310      	adds	r3, #16
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 ff52 	bl	8008160 <vTaskPlaceOnEventList>
 80072bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072be:	f000 fa31 	bl	8007724 <prvUnlockQueue>
 80072c2:	f000 fd7f 	bl	8007dc4 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af7c 	bne.w	80071c6 <xQueueGenericSend+0xc6>
 80072ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <xQueueGenericSend+0x200>)
 80072d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	e772      	b.n	80071c6 <xQueueGenericSend+0xc6>
 80072e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072e2:	f000 fa1f 	bl	8007724 <prvUnlockQueue>
 80072e6:	f000 fd6d 	bl	8007dc4 <xTaskResumeAll>
 80072ea:	e76c      	b.n	80071c6 <xQueueGenericSend+0xc6>
 80072ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072ee:	f000 fa19 	bl	8007724 <prvUnlockQueue>
 80072f2:	f000 fd67 	bl	8007dc4 <xTaskResumeAll>
 80072f6:	2300      	movs	r3, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	3738      	adds	r7, #56	@ 0x38
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xQueueGenericSendFromISR>:
 8007304:	b580      	push	{r7, lr}
 8007306:	b090      	sub	sp, #64	@ 0x40
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <xQueueGenericSendFromISR+0x30>
 800731c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	e7fd      	b.n	8007330 <xQueueGenericSendFromISR+0x2c>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <xQueueGenericSendFromISR+0x3e>
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueGenericSendFromISR+0x42>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueGenericSendFromISR+0x44>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xQueueGenericSendFromISR+0x60>
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueGenericSendFromISR+0x5c>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d103      	bne.n	8007372 <xQueueGenericSendFromISR+0x6e>
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <xQueueGenericSendFromISR+0x72>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <xQueueGenericSendFromISR+0x74>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <xQueueGenericSendFromISR+0x90>
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xQueueGenericSendFromISR+0x8c>
 8007394:	f001 ff48 	bl	8009228 <vPortValidateInterruptPriority>
 8007398:	f3ef 8211 	mrs	r2, BASEPRI
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	61fa      	str	r2, [r7, #28]
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <xQueueGenericSendFromISR+0xc2>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d12f      	bne.n	8007426 <xQueueGenericSendFromISR+0x122>
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073dc:	f000 f912 	bl	8007604 <prvCopyDataToQueue>
 80073e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d112      	bne.n	8007410 <xQueueGenericSendFromISR+0x10c>
 80073ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	3324      	adds	r3, #36	@ 0x24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 ff04 	bl	8008204 <xTaskRemoveFromEventList>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00e      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e007      	b.n	8007420 <xQueueGenericSendFromISR+0x11c>
 8007410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007414:	3301      	adds	r3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b25a      	sxtb	r2, r3
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007420:	2301      	movs	r3, #1
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007424:	e001      	b.n	800742a <xQueueGenericSendFromISR+0x126>
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	bf00      	nop
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007438:	4618      	mov	r0, r3
 800743a:	3740      	adds	r7, #64	@ 0x40
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xQueueReceive>:
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	@ 0x30
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	2300      	movs	r3, #0
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xQueueReceive+0x32>
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	623b      	str	r3, [r7, #32]
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xQueueReceive+0x2e>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <xQueueReceive+0x40>
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <xQueueReceive+0x44>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <xQueueReceive+0x46>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <xQueueReceive+0x62>
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <xQueueReceive+0x5e>
 80074a2:	f001 f875 	bl	8008590 <xTaskGetSchedulerState>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <xQueueReceive+0x72>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <xQueueReceive+0x76>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueReceive+0x78>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10b      	bne.n	80074d4 <xQueueReceive+0x94>
 80074bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	e7fd      	b.n	80074d0 <xQueueReceive+0x90>
 80074d4:	f001 fdc8 	bl	8009068 <vPortEnterCritical>
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01f      	beq.n	8007524 <xQueueReceive+0xe4>
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e8:	f000 f8f6 	bl	80076d8 <prvCopyDataFromQueue>
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	1e5a      	subs	r2, r3, #1
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00f      	beq.n	800751c <xQueueReceive+0xdc>
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fe:	3310      	adds	r3, #16
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fe7f 	bl	8008204 <xTaskRemoveFromEventList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <xQueueReceive+0xdc>
 800750c:	4b3c      	ldr	r3, [pc, #240]	@ (8007600 <xQueueReceive+0x1c0>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f001 fdd6 	bl	80090cc <vPortExitCritical>
 8007520:	2301      	movs	r3, #1
 8007522:	e069      	b.n	80075f8 <xQueueReceive+0x1b8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <xQueueReceive+0xf2>
 800752a:	f001 fdcf 	bl	80090cc <vPortExitCritical>
 800752e:	2300      	movs	r3, #0
 8007530:	e062      	b.n	80075f8 <xQueueReceive+0x1b8>
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <xQueueReceive+0x106>
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fec5 	bl	80082cc <vTaskInternalSetTimeOutState>
 8007542:	2301      	movs	r3, #1
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007546:	f001 fdc1 	bl	80090cc <vPortExitCritical>
 800754a:	f000 fc2d 	bl	8007da8 <vTaskSuspendAll>
 800754e:	f001 fd8b 	bl	8009068 <vPortEnterCritical>
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007558:	b25b      	sxtb	r3, r3
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d103      	bne.n	8007568 <xQueueReceive+0x128>
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d103      	bne.n	800757e <xQueueReceive+0x13e>
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800757e:	f001 fda5 	bl	80090cc <vPortExitCritical>
 8007582:	1d3a      	adds	r2, r7, #4
 8007584:	f107 0310 	add.w	r3, r7, #16
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f000 feb4 	bl	80082f8 <xTaskCheckForTimeOut>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d123      	bne.n	80075de <xQueueReceive+0x19e>
 8007596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007598:	f000 f916 	bl	80077c8 <prvIsQueueEmpty>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d017      	beq.n	80075d2 <xQueueReceive+0x192>
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	3324      	adds	r3, #36	@ 0x24
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4611      	mov	r1, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fdd8 	bl	8008160 <vTaskPlaceOnEventList>
 80075b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b2:	f000 f8b7 	bl	8007724 <prvUnlockQueue>
 80075b6:	f000 fc05 	bl	8007dc4 <xTaskResumeAll>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d189      	bne.n	80074d4 <xQueueReceive+0x94>
 80075c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007600 <xQueueReceive+0x1c0>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	e780      	b.n	80074d4 <xQueueReceive+0x94>
 80075d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d4:	f000 f8a6 	bl	8007724 <prvUnlockQueue>
 80075d8:	f000 fbf4 	bl	8007dc4 <xTaskResumeAll>
 80075dc:	e77a      	b.n	80074d4 <xQueueReceive+0x94>
 80075de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e0:	f000 f8a0 	bl	8007724 <prvUnlockQueue>
 80075e4:	f000 fbee 	bl	8007dc4 <xTaskResumeAll>
 80075e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ea:	f000 f8ed 	bl	80077c8 <prvIsQueueEmpty>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f43f af6f 	beq.w	80074d4 <xQueueReceive+0x94>
 80075f6:	2300      	movs	r3, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	3730      	adds	r7, #48	@ 0x30
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <prvCopyDataToQueue>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10d      	bne.n	800763e <prvCopyDataToQueue+0x3a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d14d      	bne.n	80076c6 <prvCopyDataToQueue+0xc2>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 ffcc 	bl	80085cc <xTaskPriorityDisinherit>
 8007634:	6178      	str	r0, [r7, #20]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	609a      	str	r2, [r3, #8]
 800763c:	e043      	b.n	80076c6 <prvCopyDataToQueue+0xc2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d119      	bne.n	8007678 <prvCopyDataToQueue+0x74>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6858      	ldr	r0, [r3, #4]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764c:	461a      	mov	r2, r3
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	f002 ff51 	bl	800a4f6 <memcpy>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765c:	441a      	add	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	605a      	str	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	429a      	cmp	r2, r3
 800766c:	d32b      	bcc.n	80076c6 <prvCopyDataToQueue+0xc2>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	e026      	b.n	80076c6 <prvCopyDataToQueue+0xc2>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68d8      	ldr	r0, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007680:	461a      	mov	r2, r3
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	f002 ff37 	bl	800a4f6 <memcpy>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007690:	425b      	negs	r3, r3
 8007692:	441a      	add	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	60da      	str	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d207      	bcs.n	80076b4 <prvCopyDataToQueue+0xb0>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ac:	425b      	negs	r3, r3
 80076ae:	441a      	add	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d105      	bne.n	80076c6 <prvCopyDataToQueue+0xc2>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <prvCopyDataToQueue+0xc2>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <prvCopyDataFromQueue>:
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d018      	beq.n	800771c <prvCopyDataFromQueue+0x44>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	441a      	add	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	d303      	bcc.n	800770c <prvCopyDataFromQueue+0x34>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68d9      	ldr	r1, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	461a      	mov	r2, r3
 8007716:	6838      	ldr	r0, [r7, #0]
 8007718:	f002 feed 	bl	800a4f6 <memcpy>
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvUnlockQueue>:
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	f001 fc9c 	bl	8009068 <vPortEnterCritical>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007736:	73fb      	strb	r3, [r7, #15]
 8007738:	e011      	b.n	800775e <prvUnlockQueue+0x3a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <prvUnlockQueue+0x44>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3324      	adds	r3, #36	@ 0x24
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fd5c 	bl	8008204 <xTaskRemoveFromEventList>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <prvUnlockQueue+0x32>
 8007752:	f000 fe35 	bl	80083c0 <vTaskMissedYield>
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	3b01      	subs	r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dce9      	bgt.n	800773a <prvUnlockQueue+0x16>
 8007766:	e000      	b.n	800776a <prvUnlockQueue+0x46>
 8007768:	bf00      	nop
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	22ff      	movs	r2, #255	@ 0xff
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007772:	f001 fcab 	bl	80090cc <vPortExitCritical>
 8007776:	f001 fc77 	bl	8009068 <vPortEnterCritical>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007780:	73bb      	strb	r3, [r7, #14]
 8007782:	e011      	b.n	80077a8 <prvUnlockQueue+0x84>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d012      	beq.n	80077b2 <prvUnlockQueue+0x8e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3310      	adds	r3, #16
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fd37 	bl	8008204 <xTaskRemoveFromEventList>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <prvUnlockQueue+0x7c>
 800779c:	f000 fe10 	bl	80083c0 <vTaskMissedYield>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	73bb      	strb	r3, [r7, #14]
 80077a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dce9      	bgt.n	8007784 <prvUnlockQueue+0x60>
 80077b0:	e000      	b.n	80077b4 <prvUnlockQueue+0x90>
 80077b2:	bf00      	nop
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	22ff      	movs	r2, #255	@ 0xff
 80077b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077bc:	f001 fc86 	bl	80090cc <vPortExitCritical>
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <prvIsQueueEmpty>:
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	f001 fc4a 	bl	8009068 <vPortEnterCritical>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <prvIsQueueEmpty+0x1a>
 80077dc:	2301      	movs	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e001      	b.n	80077e6 <prvIsQueueEmpty+0x1e>
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	f001 fc71 	bl	80090cc <vPortExitCritical>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <prvIsQueueFull>:
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	f001 fc34 	bl	8009068 <vPortEnterCritical>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	429a      	cmp	r2, r3
 800780a:	d102      	bne.n	8007812 <prvIsQueueFull+0x1e>
 800780c:	2301      	movs	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e001      	b.n	8007816 <prvIsQueueFull+0x22>
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	f001 fc59 	bl	80090cc <vPortExitCritical>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <vQueueAddToRegistry>:
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e014      	b.n	800785e <vQueueAddToRegistry+0x3a>
 8007834:	4a0f      	ldr	r2, [pc, #60]	@ (8007874 <vQueueAddToRegistry+0x50>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <vQueueAddToRegistry+0x34>
 8007840:	490c      	ldr	r1, [pc, #48]	@ (8007874 <vQueueAddToRegistry+0x50>)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800784a:	4a0a      	ldr	r2, [pc, #40]	@ (8007874 <vQueueAddToRegistry+0x50>)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	e006      	b.n	8007866 <vQueueAddToRegistry+0x42>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b07      	cmp	r3, #7
 8007862:	d9e7      	bls.n	8007834 <vQueueAddToRegistry+0x10>
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000b5c 	.word	0x20000b5c

08007878 <vQueueWaitForMessageRestricted>:
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	f001 fbee 	bl	8009068 <vPortEnterCritical>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d103      	bne.n	80078a2 <vQueueWaitForMessageRestricted+0x2a>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a8:	b25b      	sxtb	r3, r3
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d103      	bne.n	80078b8 <vQueueWaitForMessageRestricted+0x40>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b8:	f001 fc08 	bl	80090cc <vPortExitCritical>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <vQueueWaitForMessageRestricted+0x5a>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	3324      	adds	r3, #36	@ 0x24
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fc6d 	bl	80081ac <vTaskPlaceOnEventListRestricted>
 80078d2:	6978      	ldr	r0, [r7, #20]
 80078d4:	f7ff ff26 	bl	8007724 <prvUnlockQueue>
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <xTaskCreateStatic>:
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	@ 0x38
 80078e4:	af04      	add	r7, sp, #16
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10b      	bne.n	800790c <xTaskCreateStatic+0x2c>
 80078f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	bf00      	nop
 8007908:	bf00      	nop
 800790a:	e7fd      	b.n	8007908 <xTaskCreateStatic+0x28>
 800790c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10b      	bne.n	800792a <xTaskCreateStatic+0x4a>
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <xTaskCreateStatic+0x46>
 800792a:	23a8      	movs	r3, #168	@ 0xa8
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2ba8      	cmp	r3, #168	@ 0xa8
 8007932:	d00b      	beq.n	800794c <xTaskCreateStatic+0x6c>
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <xTaskCreateStatic+0x68>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01e      	beq.n	8007992 <xTaskCreateStatic+0xb2>
 8007954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01b      	beq.n	8007992 <xTaskCreateStatic+0xb2>
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007962:	631a      	str	r2, [r3, #48]	@ 0x30
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	2202      	movs	r2, #2
 8007968:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800796c:	2300      	movs	r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	f107 0314 	add.w	r3, r7, #20
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f851 	bl	8007a2c <prvInitialiseNewTask>
 800798a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800798c:	f000 f8f6 	bl	8007b7c <prvAddNewTaskToReadyList>
 8007990:	e001      	b.n	8007996 <xTaskCreateStatic+0xb6>
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	4618      	mov	r0, r3
 800799a:	3728      	adds	r7, #40	@ 0x28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <xTaskCreate>:
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	@ 0x30
 80079a4:	af04      	add	r7, sp, #16
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	80fb      	strh	r3, [r7, #6]
 80079b0:	88fb      	ldrh	r3, [r7, #6]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fc79 	bl	80092ac <pvPortMalloc>
 80079ba:	6178      	str	r0, [r7, #20]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <xTaskCreate+0x40>
 80079c2:	20a8      	movs	r0, #168	@ 0xa8
 80079c4:	f001 fc72 	bl	80092ac <pvPortMalloc>
 80079c8:	61f8      	str	r0, [r7, #28]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <xTaskCreate+0x38>
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80079d6:	e005      	b.n	80079e4 <xTaskCreate+0x44>
 80079d8:	6978      	ldr	r0, [r7, #20]
 80079da:	f001 fd35 	bl	8009448 <vPortFree>
 80079de:	e001      	b.n	80079e4 <xTaskCreate+0x44>
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d017      	beq.n	8007a1a <xTaskCreate+0x7a>
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	2300      	movs	r3, #0
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	9302      	str	r3, [sp, #8]
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f80f 	bl	8007a2c <prvInitialiseNewTask>
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f000 f8b4 	bl	8007b7c <prvAddNewTaskToReadyList>
 8007a14:	2301      	movs	r3, #1
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	e002      	b.n	8007a20 <xTaskCreate+0x80>
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	4618      	mov	r0, r3
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <prvInitialiseNewTask>:
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	461a      	mov	r2, r3
 8007a44:	21a5      	movs	r1, #165	@ 0xa5
 8007a46:	f002 fc81 	bl	800a34c <memset>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a54:	3b01      	subs	r3, #1
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <prvInitialiseNewTask+0x5a>
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <prvInitialiseNewTask+0x56>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01f      	beq.n	8007acc <prvInitialiseNewTask+0xa0>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	e012      	b.n	8007ab8 <prvInitialiseNewTask+0x8c>
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	7819      	ldrb	r1, [r3, #0]
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3334      	adds	r3, #52	@ 0x34
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d006      	beq.n	8007ac0 <prvInitialiseNewTask+0x94>
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	d9e9      	bls.n	8007a92 <prvInitialiseNewTask+0x66>
 8007abe:	e000      	b.n	8007ac2 <prvInitialiseNewTask+0x96>
 8007ac0:	bf00      	nop
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007aca:	e003      	b.n	8007ad4 <prvInitialiseNewTask+0xa8>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	2b37      	cmp	r3, #55	@ 0x37
 8007ad8:	d901      	bls.n	8007ade <prvInitialiseNewTask+0xb2>
 8007ada:	2337      	movs	r3, #55	@ 0x37
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	2200      	movs	r2, #0
 8007aee:	651a      	str	r2, [r3, #80]	@ 0x50
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff f965 	bl	8006dc4 <vListInitialiseItem>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f960 	bl	8006dc4 <vListInitialiseItem>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b08:	611a      	str	r2, [r3, #16]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	619a      	str	r2, [r3, #24]
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b18:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	3354      	adds	r3, #84	@ 0x54
 8007b2e:	224c      	movs	r2, #76	@ 0x4c
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 fc0a 	bl	800a34c <memset>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b70 <prvInitialiseNewTask+0x144>)
 8007b3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	4a0c      	ldr	r2, [pc, #48]	@ (8007b74 <prvInitialiseNewTask+0x148>)
 8007b42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <prvInitialiseNewTask+0x14c>)
 8007b48:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68f9      	ldr	r1, [r7, #12]
 8007b4e:	69b8      	ldr	r0, [r7, #24]
 8007b50:	f001 f95a 	bl	8008e08 <pxPortInitialiseStack>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <prvInitialiseNewTask+0x13a>
 8007b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	bf00      	nop
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20001da8 	.word	0x20001da8
 8007b74:	20001e10 	.word	0x20001e10
 8007b78:	20001e78 	.word	0x20001e78

08007b7c <prvAddNewTaskToReadyList>:
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	f001 fa70 	bl	8009068 <vPortEnterCritical>
 8007b88:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <prvAddNewTaskToReadyList+0xc4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c40 <prvAddNewTaskToReadyList+0xc4>)
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	4b2c      	ldr	r3, [pc, #176]	@ (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <prvAddNewTaskToReadyList+0x32>
 8007b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	4b27      	ldr	r3, [pc, #156]	@ (8007c40 <prvAddNewTaskToReadyList+0xc4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d110      	bne.n	8007bca <prvAddNewTaskToReadyList+0x4e>
 8007ba8:	f000 fc2e 	bl	8008408 <prvInitialiseTaskLists>
 8007bac:	e00d      	b.n	8007bca <prvAddNewTaskToReadyList+0x4e>
 8007bae:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <prvAddNewTaskToReadyList+0xcc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <prvAddNewTaskToReadyList+0x4e>
 8007bb6:	4b23      	ldr	r3, [pc, #140]	@ (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d802      	bhi.n	8007bca <prvAddNewTaskToReadyList+0x4e>
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	4b20      	ldr	r3, [pc, #128]	@ (8007c4c <prvAddNewTaskToReadyList+0xd0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c4c <prvAddNewTaskToReadyList+0xd0>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c4c <prvAddNewTaskToReadyList+0xd0>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	645a      	str	r2, [r3, #68]	@ 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c50 <prvAddNewTaskToReadyList+0xd4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d903      	bls.n	8007bf0 <prvAddNewTaskToReadyList+0x74>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	4a18      	ldr	r2, [pc, #96]	@ (8007c50 <prvAddNewTaskToReadyList+0xd4>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a15      	ldr	r2, [pc, #84]	@ (8007c54 <prvAddNewTaskToReadyList+0xd8>)
 8007bfe:	441a      	add	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7ff f8e9 	bl	8006dde <vListInsertEnd>
 8007c0c:	f001 fa5e 	bl	80090cc <vPortExitCritical>
 8007c10:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <prvAddNewTaskToReadyList+0xcc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <prvAddNewTaskToReadyList+0xba>
 8007c18:	4b0a      	ldr	r3, [pc, #40]	@ (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d207      	bcs.n	8007c36 <prvAddNewTaskToReadyList+0xba>
 8007c26:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <prvAddNewTaskToReadyList+0xdc>)
 8007c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20001070 	.word	0x20001070
 8007c44:	20000b9c 	.word	0x20000b9c
 8007c48:	2000107c 	.word	0x2000107c
 8007c4c:	2000108c 	.word	0x2000108c
 8007c50:	20001078 	.word	0x20001078
 8007c54:	20000ba0 	.word	0x20000ba0
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vTaskDelay>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d018      	beq.n	8007ca0 <vTaskDelay+0x44>
 8007c6e:	4b14      	ldr	r3, [pc, #80]	@ (8007cc0 <vTaskDelay+0x64>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <vTaskDelay+0x32>
 8007c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	60bb      	str	r3, [r7, #8]
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	e7fd      	b.n	8007c8a <vTaskDelay+0x2e>
 8007c8e:	f000 f88b 	bl	8007da8 <vTaskSuspendAll>
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fd09 	bl	80086ac <prvAddCurrentTaskToDelayedList>
 8007c9a:	f000 f893 	bl	8007dc4 <xTaskResumeAll>
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d107      	bne.n	8007cb6 <vTaskDelay+0x5a>
 8007ca6:	4b07      	ldr	r3, [pc, #28]	@ (8007cc4 <vTaskDelay+0x68>)
 8007ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20001098 	.word	0x20001098
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <vTaskStartScheduler>:
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af04      	add	r7, sp, #16
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	463a      	mov	r2, r7
 8007cd8:	1d39      	adds	r1, r7, #4
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff f81c 	bl	8006d1c <vApplicationGetIdleTaskMemory>
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	9202      	str	r2, [sp, #8]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	460a      	mov	r2, r1
 8007cf6:	4924      	ldr	r1, [pc, #144]	@ (8007d88 <vTaskStartScheduler+0xc0>)
 8007cf8:	4824      	ldr	r0, [pc, #144]	@ (8007d8c <vTaskStartScheduler+0xc4>)
 8007cfa:	f7ff fdf1 	bl	80078e0 <xTaskCreateStatic>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	4a23      	ldr	r2, [pc, #140]	@ (8007d90 <vTaskStartScheduler+0xc8>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4b22      	ldr	r3, [pc, #136]	@ (8007d90 <vTaskStartScheduler+0xc8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <vTaskStartScheduler+0x4a>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	e001      	b.n	8007d16 <vTaskStartScheduler+0x4e>
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d102      	bne.n	8007d22 <vTaskStartScheduler+0x5a>
 8007d1c:	f000 fd1a 	bl	8008754 <xTimerCreateTimerTask>
 8007d20:	6178      	str	r0, [r7, #20]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d11b      	bne.n	8007d60 <vTaskStartScheduler+0x98>
 8007d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	bf00      	nop
 8007d3c:	4b15      	ldr	r3, [pc, #84]	@ (8007d94 <vTaskStartScheduler+0xcc>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3354      	adds	r3, #84	@ 0x54
 8007d42:	4a15      	ldr	r2, [pc, #84]	@ (8007d98 <vTaskStartScheduler+0xd0>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4b15      	ldr	r3, [pc, #84]	@ (8007d9c <vTaskStartScheduler+0xd4>)
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4b14      	ldr	r3, [pc, #80]	@ (8007da0 <vTaskStartScheduler+0xd8>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <vTaskStartScheduler+0xdc>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f001 f8e1 	bl	8008f20 <xPortStartScheduler>
 8007d5e:	e00f      	b.n	8007d80 <vTaskStartScheduler+0xb8>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d10b      	bne.n	8007d80 <vTaskStartScheduler+0xb8>
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <vTaskStartScheduler+0xb4>
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	0800c918 	.word	0x0800c918
 8007d8c:	080083d9 	.word	0x080083d9
 8007d90:	20001094 	.word	0x20001094
 8007d94:	20000b9c 	.word	0x20000b9c
 8007d98:	2000001c 	.word	0x2000001c
 8007d9c:	20001090 	.word	0x20001090
 8007da0:	2000107c 	.word	0x2000107c
 8007da4:	20001074 	.word	0x20001074

08007da8 <vTaskSuspendAll>:
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	4b04      	ldr	r3, [pc, #16]	@ (8007dc0 <vTaskSuspendAll+0x18>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a03      	ldr	r2, [pc, #12]	@ (8007dc0 <vTaskSuspendAll+0x18>)
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20001098 	.word	0x20001098

08007dc4 <xTaskResumeAll>:
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	4b42      	ldr	r3, [pc, #264]	@ (8007edc <xTaskResumeAll+0x118>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <xTaskResumeAll+0x2e>
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xTaskResumeAll+0x2a>
 8007df2:	f001 f939 	bl	8009068 <vPortEnterCritical>
 8007df6:	4b39      	ldr	r3, [pc, #228]	@ (8007edc <xTaskResumeAll+0x118>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a37      	ldr	r2, [pc, #220]	@ (8007edc <xTaskResumeAll+0x118>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	4b36      	ldr	r3, [pc, #216]	@ (8007edc <xTaskResumeAll+0x118>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d162      	bne.n	8007ece <xTaskResumeAll+0x10a>
 8007e08:	4b35      	ldr	r3, [pc, #212]	@ (8007ee0 <xTaskResumeAll+0x11c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05e      	beq.n	8007ece <xTaskResumeAll+0x10a>
 8007e10:	e02f      	b.n	8007e72 <xTaskResumeAll+0xae>
 8007e12:	4b34      	ldr	r3, [pc, #208]	@ (8007ee4 <xTaskResumeAll+0x120>)
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3318      	adds	r3, #24
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff f83a 	bl	8006e98 <uxListRemove>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f835 	bl	8006e98 <uxListRemove>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e32:	4b2d      	ldr	r3, [pc, #180]	@ (8007ee8 <xTaskResumeAll+0x124>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d903      	bls.n	8007e42 <xTaskResumeAll+0x7e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee8 <xTaskResumeAll+0x124>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4a27      	ldr	r2, [pc, #156]	@ (8007eec <xTaskResumeAll+0x128>)
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7fe ffc0 	bl	8006dde <vListInsertEnd>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e62:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <xTaskResumeAll+0x12c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <xTaskResumeAll+0xae>
 8007e6c:	4b21      	ldr	r3, [pc, #132]	@ (8007ef4 <xTaskResumeAll+0x130>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	4b1c      	ldr	r3, [pc, #112]	@ (8007ee4 <xTaskResumeAll+0x120>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1cb      	bne.n	8007e12 <xTaskResumeAll+0x4e>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <xTaskResumeAll+0xc0>
 8007e80:	f000 fb66 	bl	8008550 <prvResetNextTaskUnblockTime>
 8007e84:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef8 <xTaskResumeAll+0x134>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d010      	beq.n	8007eb2 <xTaskResumeAll+0xee>
 8007e90:	f000 f846 	bl	8007f20 <xTaskIncrementTick>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <xTaskResumeAll+0xdc>
 8007e9a:	4b16      	ldr	r3, [pc, #88]	@ (8007ef4 <xTaskResumeAll+0x130>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f1      	bne.n	8007e90 <xTaskResumeAll+0xcc>
 8007eac:	4b12      	ldr	r3, [pc, #72]	@ (8007ef8 <xTaskResumeAll+0x134>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <xTaskResumeAll+0x130>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <xTaskResumeAll+0x10a>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8007efc <xTaskResumeAll+0x138>)
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f001 f8fd 	bl	80090cc <vPortExitCritical>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20001098 	.word	0x20001098
 8007ee0:	20001070 	.word	0x20001070
 8007ee4:	20001030 	.word	0x20001030
 8007ee8:	20001078 	.word	0x20001078
 8007eec:	20000ba0 	.word	0x20000ba0
 8007ef0:	20000b9c 	.word	0x20000b9c
 8007ef4:	20001084 	.word	0x20001084
 8007ef8:	20001080 	.word	0x20001080
 8007efc:	e000ed04 	.word	0xe000ed04

08007f00 <xTaskGetTickCount>:
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <xTaskGetTickCount+0x1c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20001074 	.word	0x20001074

08007f20 <xTaskIncrementTick>:
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008068 <xTaskIncrementTick+0x148>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 8090 	bne.w	8008054 <xTaskIncrementTick+0x134>
 8007f34:	4b4d      	ldr	r3, [pc, #308]	@ (800806c <xTaskIncrementTick+0x14c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800806c <xTaskIncrementTick+0x14c>)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d121      	bne.n	8007f8c <xTaskIncrementTick+0x6c>
 8007f48:	4b49      	ldr	r3, [pc, #292]	@ (8008070 <xTaskIncrementTick+0x150>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <xTaskIncrementTick+0x4a>
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xTaskIncrementTick+0x46>
 8007f6a:	4b41      	ldr	r3, [pc, #260]	@ (8008070 <xTaskIncrementTick+0x150>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	4b40      	ldr	r3, [pc, #256]	@ (8008074 <xTaskIncrementTick+0x154>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a3e      	ldr	r2, [pc, #248]	@ (8008070 <xTaskIncrementTick+0x150>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	4a3e      	ldr	r2, [pc, #248]	@ (8008074 <xTaskIncrementTick+0x154>)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008078 <xTaskIncrementTick+0x158>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a3c      	ldr	r2, [pc, #240]	@ (8008078 <xTaskIncrementTick+0x158>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f000 fae2 	bl	8008550 <prvResetNextTaskUnblockTime>
 8007f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800807c <xTaskIncrementTick+0x15c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d349      	bcc.n	800802a <xTaskIncrementTick+0x10a>
 8007f96:	4b36      	ldr	r3, [pc, #216]	@ (8008070 <xTaskIncrementTick+0x150>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <xTaskIncrementTick+0x8a>
 8007fa0:	4b36      	ldr	r3, [pc, #216]	@ (800807c <xTaskIncrementTick+0x15c>)
 8007fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e03f      	b.n	800802a <xTaskIncrementTick+0x10a>
 8007faa:	4b31      	ldr	r3, [pc, #196]	@ (8008070 <xTaskIncrementTick+0x150>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	60bb      	str	r3, [r7, #8]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d203      	bcs.n	8007fca <xTaskIncrementTick+0xaa>
 8007fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800807c <xTaskIncrementTick+0x15c>)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e02f      	b.n	800802a <xTaskIncrementTick+0x10a>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe ff62 	bl	8006e98 <uxListRemove>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <xTaskIncrementTick+0xc6>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	3318      	adds	r3, #24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe ff59 	bl	8006e98 <uxListRemove>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fea:	4b25      	ldr	r3, [pc, #148]	@ (8008080 <xTaskIncrementTick+0x160>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d903      	bls.n	8007ffa <xTaskIncrementTick+0xda>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	4a22      	ldr	r2, [pc, #136]	@ (8008080 <xTaskIncrementTick+0x160>)
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a1f      	ldr	r2, [pc, #124]	@ (8008084 <xTaskIncrementTick+0x164>)
 8008008:	441a      	add	r2, r3
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fe fee4 	bl	8006dde <vListInsertEnd>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4b1b      	ldr	r3, [pc, #108]	@ (8008088 <xTaskIncrementTick+0x168>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	429a      	cmp	r2, r3
 8008022:	d3b8      	bcc.n	8007f96 <xTaskIncrementTick+0x76>
 8008024:	2301      	movs	r3, #1
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e7b5      	b.n	8007f96 <xTaskIncrementTick+0x76>
 800802a:	4b17      	ldr	r3, [pc, #92]	@ (8008088 <xTaskIncrementTick+0x168>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008030:	4914      	ldr	r1, [pc, #80]	@ (8008084 <xTaskIncrementTick+0x164>)
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d901      	bls.n	8008046 <xTaskIncrementTick+0x126>
 8008042:	2301      	movs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	4b11      	ldr	r3, [pc, #68]	@ (800808c <xTaskIncrementTick+0x16c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <xTaskIncrementTick+0x13e>
 800804e:	2301      	movs	r3, #1
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	e004      	b.n	800805e <xTaskIncrementTick+0x13e>
 8008054:	4b0e      	ldr	r3, [pc, #56]	@ (8008090 <xTaskIncrementTick+0x170>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3301      	adds	r3, #1
 800805a:	4a0d      	ldr	r2, [pc, #52]	@ (8008090 <xTaskIncrementTick+0x170>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20001098 	.word	0x20001098
 800806c:	20001074 	.word	0x20001074
 8008070:	20001028 	.word	0x20001028
 8008074:	2000102c 	.word	0x2000102c
 8008078:	20001088 	.word	0x20001088
 800807c:	20001090 	.word	0x20001090
 8008080:	20001078 	.word	0x20001078
 8008084:	20000ba0 	.word	0x20000ba0
 8008088:	20000b9c 	.word	0x20000b9c
 800808c:	20001084 	.word	0x20001084
 8008090:	20001080 	.word	0x20001080

08008094 <vTaskSwitchContext>:
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	4b2b      	ldr	r3, [pc, #172]	@ (8008148 <vTaskSwitchContext+0xb4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <vTaskSwitchContext+0x16>
 80080a2:	4b2a      	ldr	r3, [pc, #168]	@ (800814c <vTaskSwitchContext+0xb8>)
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e047      	b.n	800813a <vTaskSwitchContext+0xa6>
 80080aa:	4b28      	ldr	r3, [pc, #160]	@ (800814c <vTaskSwitchContext+0xb8>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	4b27      	ldr	r3, [pc, #156]	@ (8008150 <vTaskSwitchContext+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e011      	b.n	80080dc <vTaskSwitchContext+0x48>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <vTaskSwitchContext+0x42>
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	e7fd      	b.n	80080d2 <vTaskSwitchContext+0x3e>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3b01      	subs	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	491d      	ldr	r1, [pc, #116]	@ (8008154 <vTaskSwitchContext+0xc0>)
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0e3      	beq.n	80080b8 <vTaskSwitchContext+0x24>
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4a16      	ldr	r2, [pc, #88]	@ (8008154 <vTaskSwitchContext+0xc0>)
 80080fc:	4413      	add	r3, r2
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	605a      	str	r2, [r3, #4]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	3308      	adds	r3, #8
 8008112:	429a      	cmp	r2, r3
 8008114:	d104      	bne.n	8008120 <vTaskSwitchContext+0x8c>
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	605a      	str	r2, [r3, #4]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	4a0c      	ldr	r2, [pc, #48]	@ (8008158 <vTaskSwitchContext+0xc4>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <vTaskSwitchContext+0xbc>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	4b09      	ldr	r3, [pc, #36]	@ (8008158 <vTaskSwitchContext+0xc4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3354      	adds	r3, #84	@ 0x54
 8008136:	4a09      	ldr	r2, [pc, #36]	@ (800815c <vTaskSwitchContext+0xc8>)
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20001098 	.word	0x20001098
 800814c:	20001084 	.word	0x20001084
 8008150:	20001078 	.word	0x20001078
 8008154:	20000ba0 	.word	0x20000ba0
 8008158:	20000b9c 	.word	0x20000b9c
 800815c:	2000001c 	.word	0x2000001c

08008160 <vTaskPlaceOnEventList>:
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <vTaskPlaceOnEventList+0x28>
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <vTaskPlaceOnEventList+0x24>
 8008188:	4b07      	ldr	r3, [pc, #28]	@ (80081a8 <vTaskPlaceOnEventList+0x48>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3318      	adds	r3, #24
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe fe48 	bl	8006e26 <vListInsert>
 8008196:	2101      	movs	r1, #1
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f000 fa87 	bl	80086ac <prvAddCurrentTaskToDelayedList>
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000b9c 	.word	0x20000b9c

080081ac <vTaskPlaceOnEventListRestricted>:
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <vTaskPlaceOnEventListRestricted+0x2a>
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <vTaskPlaceOnEventListRestricted+0x26>
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <vTaskPlaceOnEventListRestricted+0x54>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3318      	adds	r3, #24
 80081dc:	4619      	mov	r1, r3
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7fe fdfd 	bl	8006dde <vListInsertEnd>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <vTaskPlaceOnEventListRestricted+0x44>
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	68b8      	ldr	r0, [r7, #8]
 80081f4:	f000 fa5a 	bl	80086ac <prvAddCurrentTaskToDelayedList>
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000b9c 	.word	0x20000b9c

08008204 <xTaskRemoveFromEventList>:
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <xTaskRemoveFromEventList+0x2e>
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <xTaskRemoveFromEventList+0x2a>
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	3318      	adds	r3, #24
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fe2e 	bl	8006e98 <uxListRemove>
 800823c:	4b1d      	ldr	r3, [pc, #116]	@ (80082b4 <xTaskRemoveFromEventList+0xb0>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d11d      	bne.n	8008280 <xTaskRemoveFromEventList+0x7c>
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fe25 	bl	8006e98 <uxListRemove>
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008252:	4b19      	ldr	r3, [pc, #100]	@ (80082b8 <xTaskRemoveFromEventList+0xb4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d903      	bls.n	8008262 <xTaskRemoveFromEventList+0x5e>
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825e:	4a16      	ldr	r2, [pc, #88]	@ (80082b8 <xTaskRemoveFromEventList+0xb4>)
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4a13      	ldr	r2, [pc, #76]	@ (80082bc <xTaskRemoveFromEventList+0xb8>)
 8008270:	441a      	add	r2, r3
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fe fdb0 	bl	8006dde <vListInsertEnd>
 800827e:	e005      	b.n	800828c <xTaskRemoveFromEventList+0x88>
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	3318      	adds	r3, #24
 8008284:	4619      	mov	r1, r3
 8008286:	480e      	ldr	r0, [pc, #56]	@ (80082c0 <xTaskRemoveFromEventList+0xbc>)
 8008288:	f7fe fda9 	bl	8006dde <vListInsertEnd>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <xTaskRemoveFromEventList+0xc0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	429a      	cmp	r2, r3
 8008298:	d905      	bls.n	80082a6 <xTaskRemoveFromEventList+0xa2>
 800829a:	2301      	movs	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <xTaskRemoveFromEventList+0xc4>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e001      	b.n	80082aa <xTaskRemoveFromEventList+0xa6>
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20001098 	.word	0x20001098
 80082b8:	20001078 	.word	0x20001078
 80082bc:	20000ba0 	.word	0x20000ba0
 80082c0:	20001030 	.word	0x20001030
 80082c4:	20000b9c 	.word	0x20000b9c
 80082c8:	20001084 	.word	0x20001084

080082cc <vTaskInternalSetTimeOutState>:
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <vTaskInternalSetTimeOutState+0x24>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <vTaskInternalSetTimeOutState+0x28>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	605a      	str	r2, [r3, #4]
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20001088 	.word	0x20001088
 80082f4:	20001074 	.word	0x20001074

080082f8 <xTaskCheckForTimeOut>:
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <xTaskCheckForTimeOut+0x28>
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xTaskCheckForTimeOut+0x24>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <xTaskCheckForTimeOut+0x46>
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <xTaskCheckForTimeOut+0x42>
 800833e:	f000 fe93 	bl	8009068 <vPortEnterCritical>
 8008342:	4b1d      	ldr	r3, [pc, #116]	@ (80083b8 <xTaskCheckForTimeOut+0xc0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d102      	bne.n	8008362 <xTaskCheckForTimeOut+0x6a>
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e023      	b.n	80083aa <xTaskCheckForTimeOut+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b15      	ldr	r3, [pc, #84]	@ (80083bc <xTaskCheckForTimeOut+0xc4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d007      	beq.n	800837e <xTaskCheckForTimeOut+0x86>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	429a      	cmp	r2, r3
 8008376:	d302      	bcc.n	800837e <xTaskCheckForTimeOut+0x86>
 8008378:	2301      	movs	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	e015      	b.n	80083aa <xTaskCheckForTimeOut+0xb2>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d20b      	bcs.n	80083a0 <xTaskCheckForTimeOut+0xa8>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff99 	bl	80082cc <vTaskInternalSetTimeOutState>
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e004      	b.n	80083aa <xTaskCheckForTimeOut+0xb2>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	f000 fe8f 	bl	80090cc <vPortExitCritical>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20001074 	.word	0x20001074
 80083bc:	20001088 	.word	0x20001088

080083c0 <vTaskMissedYield>:
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	4b03      	ldr	r3, [pc, #12]	@ (80083d4 <vTaskMissedYield+0x14>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	bf00      	nop
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	20001084 	.word	0x20001084

080083d8 <prvIdleTask>:
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	f000 f852 	bl	8008488 <prvCheckTasksWaitingTermination>
 80083e4:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <prvIdleTask+0x28>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d9f9      	bls.n	80083e0 <prvIdleTask+0x8>
 80083ec:	4b05      	ldr	r3, [pc, #20]	@ (8008404 <prvIdleTask+0x2c>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	e7f0      	b.n	80083e0 <prvIdleTask+0x8>
 80083fe:	bf00      	nop
 8008400:	20000ba0 	.word	0x20000ba0
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <prvInitialiseTaskLists>:
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	e00c      	b.n	800842e <prvInitialiseTaskLists+0x26>
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a12      	ldr	r2, [pc, #72]	@ (8008468 <prvInitialiseTaskLists+0x60>)
 8008420:	4413      	add	r3, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fcae 	bl	8006d84 <vListInitialise>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3301      	adds	r3, #1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b37      	cmp	r3, #55	@ 0x37
 8008432:	d9ef      	bls.n	8008414 <prvInitialiseTaskLists+0xc>
 8008434:	480d      	ldr	r0, [pc, #52]	@ (800846c <prvInitialiseTaskLists+0x64>)
 8008436:	f7fe fca5 	bl	8006d84 <vListInitialise>
 800843a:	480d      	ldr	r0, [pc, #52]	@ (8008470 <prvInitialiseTaskLists+0x68>)
 800843c:	f7fe fca2 	bl	8006d84 <vListInitialise>
 8008440:	480c      	ldr	r0, [pc, #48]	@ (8008474 <prvInitialiseTaskLists+0x6c>)
 8008442:	f7fe fc9f 	bl	8006d84 <vListInitialise>
 8008446:	480c      	ldr	r0, [pc, #48]	@ (8008478 <prvInitialiseTaskLists+0x70>)
 8008448:	f7fe fc9c 	bl	8006d84 <vListInitialise>
 800844c:	480b      	ldr	r0, [pc, #44]	@ (800847c <prvInitialiseTaskLists+0x74>)
 800844e:	f7fe fc99 	bl	8006d84 <vListInitialise>
 8008452:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <prvInitialiseTaskLists+0x78>)
 8008454:	4a05      	ldr	r2, [pc, #20]	@ (800846c <prvInitialiseTaskLists+0x64>)
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	4b0a      	ldr	r3, [pc, #40]	@ (8008484 <prvInitialiseTaskLists+0x7c>)
 800845a:	4a05      	ldr	r2, [pc, #20]	@ (8008470 <prvInitialiseTaskLists+0x68>)
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000ba0 	.word	0x20000ba0
 800846c:	20001000 	.word	0x20001000
 8008470:	20001014 	.word	0x20001014
 8008474:	20001030 	.word	0x20001030
 8008478:	20001044 	.word	0x20001044
 800847c:	2000105c 	.word	0x2000105c
 8008480:	20001028 	.word	0x20001028
 8008484:	2000102c 	.word	0x2000102c

08008488 <prvCheckTasksWaitingTermination>:
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	e019      	b.n	80084c4 <prvCheckTasksWaitingTermination+0x3c>
 8008490:	f000 fdea 	bl	8009068 <vPortEnterCritical>
 8008494:	4b10      	ldr	r3, [pc, #64]	@ (80084d8 <prvCheckTasksWaitingTermination+0x50>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fcf9 	bl	8006e98 <uxListRemove>
 80084a6:	4b0d      	ldr	r3, [pc, #52]	@ (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	4a0b      	ldr	r2, [pc, #44]	@ (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4a0a      	ldr	r2, [pc, #40]	@ (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	f000 fe07 	bl	80090cc <vPortExitCritical>
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f810 	bl	80084e4 <prvDeleteTCB>
 80084c4:	4b06      	ldr	r3, [pc, #24]	@ (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e1      	bne.n	8008490 <prvCheckTasksWaitingTermination+0x8>
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20001044 	.word	0x20001044
 80084dc:	20001070 	.word	0x20001070
 80084e0:	20001058 	.word	0x20001058

080084e4 <prvDeleteTCB>:
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3354      	adds	r3, #84	@ 0x54
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 ff47 	bl	800a384 <_reclaim_reent>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d108      	bne.n	8008512 <prvDeleteTCB+0x2e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008504:	4618      	mov	r0, r3
 8008506:	f000 ff9f 	bl	8009448 <vPortFree>
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 ff9c 	bl	8009448 <vPortFree>
 8008510:	e019      	b.n	8008546 <prvDeleteTCB+0x62>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008518:	2b01      	cmp	r3, #1
 800851a:	d103      	bne.n	8008524 <prvDeleteTCB+0x40>
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 ff93 	bl	8009448 <vPortFree>
 8008522:	e010      	b.n	8008546 <prvDeleteTCB+0x62>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800852a:	2b02      	cmp	r3, #2
 800852c:	d00b      	beq.n	8008546 <prvDeleteTCB+0x62>
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <prvDeleteTCB+0x5e>
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <prvResetNextTaskUnblockTime>:
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <prvResetNextTaskUnblockTime+0x38>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <prvResetNextTaskUnblockTime+0x1a>
 8008560:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <prvResetNextTaskUnblockTime+0x3c>)
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e008      	b.n	800857c <prvResetNextTaskUnblockTime+0x2c>
 800856a:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <prvResetNextTaskUnblockTime+0x38>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	607b      	str	r3, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a04      	ldr	r2, [pc, #16]	@ (800858c <prvResetNextTaskUnblockTime+0x3c>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20001028 	.word	0x20001028
 800858c:	20001090 	.word	0x20001090

08008590 <xTaskGetSchedulerState>:
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <xTaskGetSchedulerState+0x34>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <xTaskGetSchedulerState+0x14>
 800859e:	2301      	movs	r3, #1
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e008      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
 80085a4:	4b08      	ldr	r3, [pc, #32]	@ (80085c8 <xTaskGetSchedulerState+0x38>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <xTaskGetSchedulerState+0x22>
 80085ac:	2302      	movs	r3, #2
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	e001      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
 80085b2:	2300      	movs	r3, #0
 80085b4:	607b      	str	r3, [r7, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	2000107c 	.word	0x2000107c
 80085c8:	20001098 	.word	0x20001098

080085cc <xTaskPriorityDisinherit>:
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d058      	beq.n	8008694 <xTaskPriorityDisinherit+0xc8>
 80085e2:	4b2f      	ldr	r3, [pc, #188]	@ (80086a0 <xTaskPriorityDisinherit+0xd4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d00b      	beq.n	8008604 <xTaskPriorityDisinherit+0x38>
 80085ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	e7fd      	b.n	8008600 <xTaskPriorityDisinherit+0x34>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <xTaskPriorityDisinherit+0x58>
 800860c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <xTaskPriorityDisinherit+0x54>
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008628:	1e5a      	subs	r2, r3, #1
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	651a      	str	r2, [r3, #80]	@ 0x50
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008636:	429a      	cmp	r2, r3
 8008638:	d02c      	beq.n	8008694 <xTaskPriorityDisinherit+0xc8>
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800863e:	2b00      	cmp	r3, #0
 8008640:	d128      	bne.n	8008694 <xTaskPriorityDisinherit+0xc8>
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3304      	adds	r3, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fc26 	bl	8006e98 <uxListRemove>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	619a      	str	r2, [r3, #24]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008664:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <xTaskPriorityDisinherit+0xd8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d903      	bls.n	8008674 <xTaskPriorityDisinherit+0xa8>
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	4a0c      	ldr	r2, [pc, #48]	@ (80086a4 <xTaskPriorityDisinherit+0xd8>)
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008678:	4613      	mov	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4a09      	ldr	r2, [pc, #36]	@ (80086a8 <xTaskPriorityDisinherit+0xdc>)
 8008682:	441a      	add	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fe fba7 	bl	8006dde <vListInsertEnd>
 8008690:	2301      	movs	r3, #1
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000b9c 	.word	0x20000b9c
 80086a4:	20001078 	.word	0x20001078
 80086a8:	20000ba0 	.word	0x20000ba0

080086ac <prvAddCurrentTaskToDelayedList>:
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	4b21      	ldr	r3, [pc, #132]	@ (800873c <prvAddCurrentTaskToDelayedList+0x90>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	4b20      	ldr	r3, [pc, #128]	@ (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fbe8 	bl	8006e98 <uxListRemove>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d10a      	bne.n	80086e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80086d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4819      	ldr	r0, [pc, #100]	@ (8008744 <prvAddCurrentTaskToDelayedList+0x98>)
 80086e0:	f7fe fb7d 	bl	8006dde <vListInsertEnd>
 80086e4:	e026      	b.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	4b14      	ldr	r3, [pc, #80]	@ (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d209      	bcs.n	8008712 <prvAddCurrentTaskToDelayedList+0x66>
 80086fe:	4b12      	ldr	r3, [pc, #72]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b0f      	ldr	r3, [pc, #60]	@ (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f7fe fb8b 	bl	8006e26 <vListInsert>
 8008710:	e010      	b.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
 8008712:	4b0e      	ldr	r3, [pc, #56]	@ (800874c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b0a      	ldr	r3, [pc, #40]	@ (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fe fb81 	bl	8006e26 <vListInsert>
 8008724:	4b0a      	ldr	r3, [pc, #40]	@ (8008750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	429a      	cmp	r2, r3
 800872c:	d202      	bcs.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
 800872e:	4a08      	ldr	r2, [pc, #32]	@ (8008750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20001074 	.word	0x20001074
 8008740:	20000b9c 	.word	0x20000b9c
 8008744:	2000105c 	.word	0x2000105c
 8008748:	2000102c 	.word	0x2000102c
 800874c:	20001028 	.word	0x20001028
 8008750:	20001090 	.word	0x20001090

08008754 <xTimerCreateTimerTask>:
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	@ 0x28
 8008758:	af04      	add	r7, sp, #16
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	f000 fb13 	bl	8008d88 <prvCheckForValidListAndQueue>
 8008762:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <xTimerCreateTimerTask+0x84>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d021      	beq.n	80087ae <xTimerCreateTimerTask+0x5a>
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	1d3a      	adds	r2, r7, #4
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	f107 030c 	add.w	r3, r7, #12
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fae7 	bl	8006d50 <vApplicationGetTimerTaskMemory>
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	9202      	str	r2, [sp, #8]
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	2302      	movs	r3, #2
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	2300      	movs	r3, #0
 8008792:	460a      	mov	r2, r1
 8008794:	4911      	ldr	r1, [pc, #68]	@ (80087dc <xTimerCreateTimerTask+0x88>)
 8008796:	4812      	ldr	r0, [pc, #72]	@ (80087e0 <xTimerCreateTimerTask+0x8c>)
 8008798:	f7ff f8a2 	bl	80078e0 <xTaskCreateStatic>
 800879c:	4603      	mov	r3, r0
 800879e:	4a11      	ldr	r2, [pc, #68]	@ (80087e4 <xTimerCreateTimerTask+0x90>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <xTimerCreateTimerTask+0x90>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <xTimerCreateTimerTask+0x5a>
 80087aa:	2301      	movs	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xTimerCreateTimerTask+0x78>
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xTimerCreateTimerTask+0x74>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200010cc 	.word	0x200010cc
 80087dc:	0800c920 	.word	0x0800c920
 80087e0:	08008921 	.word	0x08008921
 80087e4:	200010d0 	.word	0x200010d0

080087e8 <xTimerGenericCommand>:
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	@ 0x28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <xTimerGenericCommand+0x30>
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	623b      	str	r3, [r7, #32]
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <xTimerGenericCommand+0x2c>
 8008818:	4b19      	ldr	r3, [pc, #100]	@ (8008880 <xTimerGenericCommand+0x98>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02a      	beq.n	8008876 <xTimerGenericCommand+0x8e>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b05      	cmp	r3, #5
 8008830:	dc18      	bgt.n	8008864 <xTimerGenericCommand+0x7c>
 8008832:	f7ff fead 	bl	8008590 <xTaskGetSchedulerState>
 8008836:	4603      	mov	r3, r0
 8008838:	2b02      	cmp	r3, #2
 800883a:	d109      	bne.n	8008850 <xTimerGenericCommand+0x68>
 800883c:	4b10      	ldr	r3, [pc, #64]	@ (8008880 <xTimerGenericCommand+0x98>)
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	f107 0110 	add.w	r1, r7, #16
 8008844:	2300      	movs	r3, #0
 8008846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008848:	f7fe fc5a 	bl	8007100 <xQueueGenericSend>
 800884c:	6278      	str	r0, [r7, #36]	@ 0x24
 800884e:	e012      	b.n	8008876 <xTimerGenericCommand+0x8e>
 8008850:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <xTimerGenericCommand+0x98>)
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	f107 0110 	add.w	r1, r7, #16
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	f7fe fc50 	bl	8007100 <xQueueGenericSend>
 8008860:	6278      	str	r0, [r7, #36]	@ 0x24
 8008862:	e008      	b.n	8008876 <xTimerGenericCommand+0x8e>
 8008864:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <xTimerGenericCommand+0x98>)
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	f107 0110 	add.w	r1, r7, #16
 800886c:	2300      	movs	r3, #0
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	f7fe fd48 	bl	8007304 <xQueueGenericSendFromISR>
 8008874:	6278      	str	r0, [r7, #36]	@ 0x24
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	4618      	mov	r0, r3
 800887a:	3728      	adds	r7, #40	@ 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200010cc 	.word	0x200010cc

08008884 <prvProcessExpiredTimer>:
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af02      	add	r7, sp, #8
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	4b23      	ldr	r3, [pc, #140]	@ (800891c <prvProcessExpiredTimer+0x98>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fafb 	bl	8006e98 <uxListRemove>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d023      	beq.n	80088f8 <prvProcessExpiredTimer+0x74>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	699a      	ldr	r2, [r3, #24]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	18d1      	adds	r1, r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	6978      	ldr	r0, [r7, #20]
 80088be:	f000 f8d5 	bl	8008a6c <prvInsertTimerInActiveList>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d020      	beq.n	800890a <prvProcessExpiredTimer+0x86>
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	2100      	movs	r1, #0
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f7ff ff88 	bl	80087e8 <xTimerGenericCommand>
 80088d8:	6138      	str	r0, [r7, #16]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d114      	bne.n	800890a <prvProcessExpiredTimer+0x86>
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <prvProcessExpiredTimer+0x70>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088fe:	f023 0301 	bic.w	r3, r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	4798      	blx	r3
 8008912:	bf00      	nop
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200010c4 	.word	0x200010c4

08008920 <prvTimerTask>:
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f859 	bl	80089e4 <prvGetNextExpireTime>
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4619      	mov	r1, r3
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f805 	bl	8008948 <prvProcessTimerOrBlockTask>
 800893e:	f000 f8d7 	bl	8008af0 <prvProcessReceivedCommands>
 8008942:	bf00      	nop
 8008944:	e7f0      	b.n	8008928 <prvTimerTask+0x8>
	...

08008948 <prvProcessTimerOrBlockTask>:
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
 8008952:	f7ff fa29 	bl	8007da8 <vTaskSuspendAll>
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f866 	bl	8008a2c <prvSampleTimeNow>
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d130      	bne.n	80089ca <prvProcessTimerOrBlockTask+0x82>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <prvProcessTimerOrBlockTask+0x3c>
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	429a      	cmp	r2, r3
 8008974:	d806      	bhi.n	8008984 <prvProcessTimerOrBlockTask+0x3c>
 8008976:	f7ff fa25 	bl	8007dc4 <xTaskResumeAll>
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ff81 	bl	8008884 <prvProcessExpiredTimer>
 8008982:	e024      	b.n	80089ce <prvProcessTimerOrBlockTask+0x86>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d008      	beq.n	800899c <prvProcessTimerOrBlockTask+0x54>
 800898a:	4b13      	ldr	r3, [pc, #76]	@ (80089d8 <prvProcessTimerOrBlockTask+0x90>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <prvProcessTimerOrBlockTask+0x50>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <prvProcessTimerOrBlockTask+0x52>
 8008998:	2300      	movs	r3, #0
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <prvProcessTimerOrBlockTask+0x94>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4619      	mov	r1, r3
 80089aa:	f7fe ff65 	bl	8007878 <vQueueWaitForMessageRestricted>
 80089ae:	f7ff fa09 	bl	8007dc4 <xTaskResumeAll>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <prvProcessTimerOrBlockTask+0x86>
 80089b8:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <prvProcessTimerOrBlockTask+0x98>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	e001      	b.n	80089ce <prvProcessTimerOrBlockTask+0x86>
 80089ca:	f7ff f9fb 	bl	8007dc4 <xTaskResumeAll>
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200010c8 	.word	0x200010c8
 80089dc:	200010cc 	.word	0x200010cc
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <prvGetNextExpireTime>:
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <prvGetNextExpireTime+0x44>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <prvGetNextExpireTime+0x16>
 80089f6:	2201      	movs	r2, #1
 80089f8:	e000      	b.n	80089fc <prvGetNextExpireTime+0x18>
 80089fa:	2200      	movs	r2, #0
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d105      	bne.n	8008a14 <prvGetNextExpireTime+0x30>
 8008a08:	4b07      	ldr	r3, [pc, #28]	@ (8008a28 <prvGetNextExpireTime+0x44>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e001      	b.n	8008a18 <prvGetNextExpireTime+0x34>
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	200010c4 	.word	0x200010c4

08008a2c <prvSampleTimeNow>:
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	f7ff fa64 	bl	8007f00 <xTaskGetTickCount>
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a68 <prvSampleTimeNow+0x3c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d205      	bcs.n	8008a50 <prvSampleTimeNow+0x24>
 8008a44:	f000 f93a 	bl	8008cbc <prvSwitchTimerLists>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <prvSampleTimeNow+0x2a>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	4a04      	ldr	r2, [pc, #16]	@ (8008a68 <prvSampleTimeNow+0x3c>)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200010d4 	.word	0x200010d4

08008a6c <prvInsertTimerInActiveList>:
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	605a      	str	r2, [r3, #4]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	611a      	str	r2, [r3, #16]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d812      	bhi.n	8008ab8 <prvInsertTimerInActiveList+0x4c>
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d302      	bcc.n	8008aa6 <prvInsertTimerInActiveList+0x3a>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e01b      	b.n	8008ade <prvInsertTimerInActiveList+0x72>
 8008aa6:	4b10      	ldr	r3, [pc, #64]	@ (8008ae8 <prvInsertTimerInActiveList+0x7c>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f7fe f9b8 	bl	8006e26 <vListInsert>
 8008ab6:	e012      	b.n	8008ade <prvInsertTimerInActiveList+0x72>
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d206      	bcs.n	8008ace <prvInsertTimerInActiveList+0x62>
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d302      	bcc.n	8008ace <prvInsertTimerInActiveList+0x62>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e007      	b.n	8008ade <prvInsertTimerInActiveList+0x72>
 8008ace:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <prvInsertTimerInActiveList+0x80>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f7fe f9a4 	bl	8006e26 <vListInsert>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	200010c8 	.word	0x200010c8
 8008aec:	200010c4 	.word	0x200010c4

08008af0 <prvProcessReceivedCommands>:
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08e      	sub	sp, #56	@ 0x38
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	e0ce      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da19      	bge.n	8008b32 <prvProcessReceivedCommands+0x42>
 8008afe:	1d3b      	adds	r3, r7, #4
 8008b00:	3304      	adds	r3, #4
 8008b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10b      	bne.n	8008b22 <prvProcessReceivedCommands+0x32>
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	61fb      	str	r3, [r7, #28]
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	e7fd      	b.n	8008b1e <prvProcessReceivedCommands+0x2e>
 8008b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b28:	6850      	ldr	r0, [r2, #4]
 8008b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2c:	6892      	ldr	r2, [r2, #8]
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4798      	blx	r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f2c0 80ae 	blt.w	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <prvProcessReceivedCommands+0x60>
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f9a4 	bl	8006e98 <uxListRemove>
 8008b50:	463b      	mov	r3, r7
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff ff6a 	bl	8008a2c <prvSampleTimeNow>
 8008b58:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	f200 8097 	bhi.w	8008c90 <prvProcessReceivedCommands+0x1a0>
 8008b62:	a201      	add	r2, pc, #4	@ (adr r2, 8008b68 <prvProcessReceivedCommands+0x78>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008c07 	.word	0x08008c07
 8008b78:	08008c1b 	.word	0x08008c1b
 8008b7c:	08008c67 	.word	0x08008c67
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008b91 	.word	0x08008b91
 8008b88:	08008c07 	.word	0x08008c07
 8008b8c:	08008c1b 	.word	0x08008c1b
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	18d1      	adds	r1, r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bb0:	f7ff ff5c 	bl	8008a6c <prvInsertTimerInActiveList>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d06c      	beq.n	8008c94 <prvProcessReceivedCommands+0x1a4>
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc0:	4798      	blx	r3
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d061      	beq.n	8008c94 <prvProcessReceivedCommands+0x1a4>
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	441a      	add	r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2100      	movs	r1, #0
 8008be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be2:	f7ff fe01 	bl	80087e8 <xTimerGenericCommand>
 8008be6:	6238      	str	r0, [r7, #32]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d152      	bne.n	8008c94 <prvProcessReceivedCommands+0x1a4>
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	61bb      	str	r3, [r7, #24]
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <prvProcessReceivedCommands+0x112>
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c0c:	f023 0301 	bic.w	r3, r3, #1
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008c18:	e03d      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c20:	f043 0301 	orr.w	r3, r3, #1
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	619a      	str	r2, [r3, #24]
 8008c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10b      	bne.n	8008c52 <prvProcessReceivedCommands+0x162>
 8008c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	e7fd      	b.n	8008c4e <prvProcessReceivedCommands+0x15e>
 8008c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	18d1      	adds	r1, r2, r3
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c60:	f7ff ff04 	bl	8008a6c <prvInsertTimerInActiveList>
 8008c64:	e017      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <prvProcessReceivedCommands+0x18c>
 8008c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c76:	f000 fbe7 	bl	8009448 <vPortFree>
 8008c7a:	e00c      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c82:	f023 0301 	bic.w	r3, r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008c8e:	e002      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008c90:	bf00      	nop
 8008c92:	e000      	b.n	8008c96 <prvProcessReceivedCommands+0x1a6>
 8008c94:	bf00      	nop
 8008c96:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <prvProcessReceivedCommands+0x1c8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1d39      	adds	r1, r7, #4
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fbce 	bl	8007440 <xQueueReceive>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f47f af26 	bne.w	8008af8 <prvProcessReceivedCommands+0x8>
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	3730      	adds	r7, #48	@ 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200010cc 	.word	0x200010cc

08008cbc <prvSwitchTimerLists>:
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	e049      	b.n	8008d58 <prvSwitchTimerLists+0x9c>
 8008cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	4b2c      	ldr	r3, [pc, #176]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe f8db 	bl	8006e98 <uxListRemove>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	4798      	blx	r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02f      	beq.n	8008d58 <prvSwitchTimerLists+0x9c>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90e      	bls.n	8008d28 <prvSwitchTimerLists+0x6c>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	611a      	str	r2, [r3, #16]
 8008d16:	4b1a      	ldr	r3, [pc, #104]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe f880 	bl	8006e26 <vListInsert>
 8008d26:	e017      	b.n	8008d58 <prvSwitchTimerLists+0x9c>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fd58 	bl	80087e8 <xTimerGenericCommand>
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <prvSwitchTimerLists+0x9c>
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <prvSwitchTimerLists+0x98>
 8008d58:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1b0      	bne.n	8008cc4 <prvSwitchTimerLists+0x8>
 8008d62:	4b07      	ldr	r3, [pc, #28]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	4b06      	ldr	r3, [pc, #24]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a04      	ldr	r2, [pc, #16]	@ (8008d80 <prvSwitchTimerLists+0xc4>)
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	4a04      	ldr	r2, [pc, #16]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	bf00      	nop
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	200010c4 	.word	0x200010c4
 8008d84:	200010c8 	.word	0x200010c8

08008d88 <prvCheckForValidListAndQueue>:
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	f000 f96b 	bl	8009068 <vPortEnterCritical>
 8008d92:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d120      	bne.n	8008ddc <prvCheckForValidListAndQueue+0x54>
 8008d9a:	4814      	ldr	r0, [pc, #80]	@ (8008dec <prvCheckForValidListAndQueue+0x64>)
 8008d9c:	f7fd fff2 	bl	8006d84 <vListInitialise>
 8008da0:	4813      	ldr	r0, [pc, #76]	@ (8008df0 <prvCheckForValidListAndQueue+0x68>)
 8008da2:	f7fd ffef 	bl	8006d84 <vListInitialise>
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <prvCheckForValidListAndQueue+0x6c>)
 8008da8:	4a10      	ldr	r2, [pc, #64]	@ (8008dec <prvCheckForValidListAndQueue+0x64>)
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	4b12      	ldr	r3, [pc, #72]	@ (8008df8 <prvCheckForValidListAndQueue+0x70>)
 8008dae:	4a10      	ldr	r2, [pc, #64]	@ (8008df0 <prvCheckForValidListAndQueue+0x68>)
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	4b11      	ldr	r3, [pc, #68]	@ (8008dfc <prvCheckForValidListAndQueue+0x74>)
 8008db8:	4a11      	ldr	r2, [pc, #68]	@ (8008e00 <prvCheckForValidListAndQueue+0x78>)
 8008dba:	2110      	movs	r1, #16
 8008dbc:	200a      	movs	r0, #10
 8008dbe:	f7fe f8ff 	bl	8006fc0 <xQueueGenericCreateStatic>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4a08      	ldr	r2, [pc, #32]	@ (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	4b07      	ldr	r3, [pc, #28]	@ (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <prvCheckForValidListAndQueue+0x54>
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <prvCheckForValidListAndQueue+0x60>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	490b      	ldr	r1, [pc, #44]	@ (8008e04 <prvCheckForValidListAndQueue+0x7c>)
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fd24 	bl	8007824 <vQueueAddToRegistry>
 8008ddc:	f000 f976 	bl	80090cc <vPortExitCritical>
 8008de0:	bf00      	nop
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	200010cc 	.word	0x200010cc
 8008dec:	2000109c 	.word	0x2000109c
 8008df0:	200010b0 	.word	0x200010b0
 8008df4:	200010c4 	.word	0x200010c4
 8008df8:	200010c8 	.word	0x200010c8
 8008dfc:	20001178 	.word	0x20001178
 8008e00:	200010d8 	.word	0x200010d8
 8008e04:	0800c928 	.word	0x0800c928

08008e08 <pxPortInitialiseStack>:
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3b04      	subs	r3, #4
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3b04      	subs	r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f023 0201 	bic.w	r2, r3, #1
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	4a0c      	ldr	r2, [pc, #48]	@ (8008e6c <pxPortInitialiseStack+0x64>)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b14      	subs	r3, #20
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f06f 0202 	mvn.w	r2, #2
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3b20      	subs	r3, #32
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	08008e71 	.word	0x08008e71

08008e70 <prvTaskExitError>:
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <prvTaskExitError+0x58>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d00b      	beq.n	8008e9c <prvTaskExitError+0x2c>
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <prvTaskExitError+0x28>
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0fc      	beq.n	8008eb2 <prvTaskExitError+0x42>
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	2000000c 	.word	0x2000000c
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <SVC_Handler>:
 8008ed0:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	4770      	bx	lr
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	20000b9c 	.word	0x20000b9c
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
 8008ef8:	4808      	ldr	r0, [pc, #32]	@ (8008f1c <prvPortStartFirstTask+0x24>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8814 	msr	CONTROL, r0
 8008f0a:	b662      	cpsie	i
 8008f0c:	b661      	cpsie	f
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	df00      	svc	0
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e000ed08 	.word	0xe000ed08

08008f20 <xPortStartScheduler>:
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4b47      	ldr	r3, [pc, #284]	@ (8009044 <xPortStartScheduler+0x124>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a47      	ldr	r2, [pc, #284]	@ (8009048 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10b      	bne.n	8008f48 <xPortStartScheduler+0x28>
 8008f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <xPortStartScheduler+0x24>
 8008f48:	4b3e      	ldr	r3, [pc, #248]	@ (8009044 <xPortStartScheduler+0x124>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800904c <xPortStartScheduler+0x12c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d10b      	bne.n	8008f6a <xPortStartScheduler+0x4a>
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <xPortStartScheduler+0x46>
 8008f6a:	4b39      	ldr	r3, [pc, #228]	@ (8009050 <xPortStartScheduler+0x130>)
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	22ff      	movs	r2, #255	@ 0xff
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	70fb      	strb	r3, [r7, #3]
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4b31      	ldr	r3, [pc, #196]	@ (8009054 <xPortStartScheduler+0x134>)
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	4b31      	ldr	r3, [pc, #196]	@ (8009058 <xPortStartScheduler+0x138>)
 8008f94:	2207      	movs	r2, #7
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e009      	b.n	8008fae <xPortStartScheduler+0x8e>
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009058 <xPortStartScheduler+0x138>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8009058 <xPortStartScheduler+0x138>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	70fb      	strb	r3, [r7, #3]
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb6:	2b80      	cmp	r3, #128	@ 0x80
 8008fb8:	d0ef      	beq.n	8008f9a <xPortStartScheduler+0x7a>
 8008fba:	4b27      	ldr	r3, [pc, #156]	@ (8009058 <xPortStartScheduler+0x138>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f1c3 0307 	rsb	r3, r3, #7
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d00b      	beq.n	8008fde <xPortStartScheduler+0xbe>
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60bb      	str	r3, [r7, #8]
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <xPortStartScheduler+0xba>
 8008fde:	4b1e      	ldr	r3, [pc, #120]	@ (8009058 <xPortStartScheduler+0x138>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8009058 <xPortStartScheduler+0x138>)
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8009058 <xPortStartScheduler+0x138>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ff0:	4a19      	ldr	r2, [pc, #100]	@ (8009058 <xPortStartScheduler+0x138>)
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	4b17      	ldr	r3, [pc, #92]	@ (800905c <xPortStartScheduler+0x13c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a16      	ldr	r2, [pc, #88]	@ (800905c <xPortStartScheduler+0x13c>)
 8009002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4b14      	ldr	r3, [pc, #80]	@ (800905c <xPortStartScheduler+0x13c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a13      	ldr	r2, [pc, #76]	@ (800905c <xPortStartScheduler+0x13c>)
 800900e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	f000 f8da 	bl	80091cc <vPortSetupTimerInterrupt>
 8009018:	4b11      	ldr	r3, [pc, #68]	@ (8009060 <xPortStartScheduler+0x140>)
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	f000 f8f9 	bl	8009214 <vPortEnableVFP>
 8009022:	4b10      	ldr	r3, [pc, #64]	@ (8009064 <xPortStartScheduler+0x144>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a0f      	ldr	r2, [pc, #60]	@ (8009064 <xPortStartScheduler+0x144>)
 8009028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	f7ff ff63 	bl	8008ef8 <prvPortStartFirstTask>
 8009032:	f7ff f82f 	bl	8008094 <vTaskSwitchContext>
 8009036:	f7ff ff1b 	bl	8008e70 <prvTaskExitError>
 800903a:	2300      	movs	r3, #0
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed00 	.word	0xe000ed00
 8009048:	410fc271 	.word	0x410fc271
 800904c:	410fc270 	.word	0x410fc270
 8009050:	e000e400 	.word	0xe000e400
 8009054:	200011c8 	.word	0x200011c8
 8009058:	200011cc 	.word	0x200011cc
 800905c:	e000ed20 	.word	0xe000ed20
 8009060:	2000000c 	.word	0x2000000c
 8009064:	e000ef34 	.word	0xe000ef34

08009068 <vPortEnterCritical>:
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	607b      	str	r3, [r7, #4]
 8009080:	bf00      	nop
 8009082:	4b10      	ldr	r3, [pc, #64]	@ (80090c4 <vPortEnterCritical+0x5c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	4a0e      	ldr	r2, [pc, #56]	@ (80090c4 <vPortEnterCritical+0x5c>)
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	4b0d      	ldr	r3, [pc, #52]	@ (80090c4 <vPortEnterCritical+0x5c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d110      	bne.n	80090b6 <vPortEnterCritical+0x4e>
 8009094:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <vPortEnterCritical+0x60>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <vPortEnterCritical+0x4e>
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <vPortEnterCritical+0x4a>
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	2000000c 	.word	0x2000000c
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vPortExitCritical>:
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <vPortExitCritical+0x26>
 80090da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	607b      	str	r3, [r7, #4]
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	e7fd      	b.n	80090ee <vPortExitCritical+0x22>
 80090f2:	4b0a      	ldr	r3, [pc, #40]	@ (800911c <vPortExitCritical+0x50>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4a08      	ldr	r2, [pc, #32]	@ (800911c <vPortExitCritical+0x50>)
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	4b07      	ldr	r3, [pc, #28]	@ (800911c <vPortExitCritical+0x50>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <vPortExitCritical+0x44>
 8009104:	2300      	movs	r3, #0
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	2000000c 	.word	0x2000000c

08009120 <PendSV_Handler>:
 8009120:	f3ef 8009 	mrs	r0, PSP
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <pxCurrentTCBConst>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	f01e 0f10 	tst.w	lr, #16
 8009130:	bf08      	it	eq
 8009132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009144:	f380 8811 	msr	BASEPRI, r0
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f7fe ffa0 	bl	8008094 <vTaskSwitchContext>
 8009154:	f04f 0000 	mov.w	r0, #0
 8009158:	f380 8811 	msr	BASEPRI, r0
 800915c:	bc09      	pop	{r0, r3}
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	6808      	ldr	r0, [r1, #0]
 8009162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009166:	f01e 0f10 	tst.w	lr, #16
 800916a:	bf08      	it	eq
 800916c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009170:	f380 8809 	msr	PSP, r0
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w

08009180 <pxCurrentTCBConst>:
 8009180:	20000b9c 	.word	0x20000b9c
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <xPortSysTickHandler>:
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	bf00      	nop
 80091a2:	f7fe febd 	bl	8007f20 <xTaskIncrementTick>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <xPortSysTickHandler+0x2c>
 80091ac:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <xPortSysTickHandler+0x40>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <vPortSetupTimerInterrupt>:
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <vPortSetupTimerInterrupt+0x38>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <vPortSetupTimerInterrupt+0x3c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a0a      	ldr	r2, [pc, #40]	@ (800920c <vPortSetupTimerInterrupt+0x40>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	099b      	lsrs	r3, r3, #6
 80091e8:	4a09      	ldr	r2, [pc, #36]	@ (8009210 <vPortSetupTimerInterrupt+0x44>)
 80091ea:	3b01      	subs	r3, #1
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	4b04      	ldr	r3, [pc, #16]	@ (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091f0:	2207      	movs	r2, #7
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	e000e010 	.word	0xe000e010
 8009204:	e000e018 	.word	0xe000e018
 8009208:	20000000 	.word	0x20000000
 800920c:	10624dd3 	.word	0x10624dd3
 8009210:	e000e014 	.word	0xe000e014

08009214 <vPortEnableVFP>:
 8009214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009224 <vPortEnableVFP+0x10>
 8009218:	6801      	ldr	r1, [r0, #0]
 800921a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800921e:	6001      	str	r1, [r0, #0]
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	e000ed88 	.word	0xe000ed88

08009228 <vPortValidateInterruptPriority>:
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	f3ef 8305 	mrs	r3, IPSR
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b0f      	cmp	r3, #15
 8009238:	d915      	bls.n	8009266 <vPortValidateInterruptPriority+0x3e>
 800923a:	4a18      	ldr	r2, [pc, #96]	@ (800929c <vPortValidateInterruptPriority+0x74>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	72fb      	strb	r3, [r7, #11]
 8009244:	4b16      	ldr	r3, [pc, #88]	@ (80092a0 <vPortValidateInterruptPriority+0x78>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	7afa      	ldrb	r2, [r7, #11]
 800924a:	429a      	cmp	r2, r3
 800924c:	d20b      	bcs.n	8009266 <vPortValidateInterruptPriority+0x3e>
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <vPortValidateInterruptPriority+0x3a>
 8009266:	4b0f      	ldr	r3, [pc, #60]	@ (80092a4 <vPortValidateInterruptPriority+0x7c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800926e:	4b0e      	ldr	r3, [pc, #56]	@ (80092a8 <vPortValidateInterruptPriority+0x80>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d90b      	bls.n	800928e <vPortValidateInterruptPriority+0x66>
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <vPortValidateInterruptPriority+0x62>
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	e000e3f0 	.word	0xe000e3f0
 80092a0:	200011c8 	.word	0x200011c8
 80092a4:	e000ed0c 	.word	0xe000ed0c
 80092a8:	200011cc 	.word	0x200011cc

080092ac <pvPortMalloc>:
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	@ 0x28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	f7fe fd76 	bl	8007da8 <vTaskSuspendAll>
 80092bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009430 <pvPortMalloc+0x184>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <pvPortMalloc+0x1c>
 80092c4:	f000 f924 	bl	8009510 <prvHeapInit>
 80092c8:	4b5a      	ldr	r3, [pc, #360]	@ (8009434 <pvPortMalloc+0x188>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 8095 	bne.w	8009400 <pvPortMalloc+0x154>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01e      	beq.n	800931a <pvPortMalloc+0x6e>
 80092dc:	2208      	movs	r2, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	607b      	str	r3, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d015      	beq.n	800931a <pvPortMalloc+0x6e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f023 0307 	bic.w	r3, r3, #7
 80092f4:	3308      	adds	r3, #8
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00b      	beq.n	800931a <pvPortMalloc+0x6e>
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <pvPortMalloc+0x6a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d06f      	beq.n	8009400 <pvPortMalloc+0x154>
 8009320:	4b45      	ldr	r3, [pc, #276]	@ (8009438 <pvPortMalloc+0x18c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d86a      	bhi.n	8009400 <pvPortMalloc+0x154>
 800932a:	4b44      	ldr	r3, [pc, #272]	@ (800943c <pvPortMalloc+0x190>)
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	4b43      	ldr	r3, [pc, #268]	@ (800943c <pvPortMalloc+0x190>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	627b      	str	r3, [r7, #36]	@ 0x24
 8009334:	e004      	b.n	8009340 <pvPortMalloc+0x94>
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	623b      	str	r3, [r7, #32]
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d903      	bls.n	8009352 <pvPortMalloc+0xa6>
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f1      	bne.n	8009336 <pvPortMalloc+0x8a>
 8009352:	4b37      	ldr	r3, [pc, #220]	@ (8009430 <pvPortMalloc+0x184>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009358:	429a      	cmp	r2, r3
 800935a:	d051      	beq.n	8009400 <pvPortMalloc+0x154>
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2208      	movs	r2, #8
 8009362:	4413      	add	r3, r2
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	2308      	movs	r3, #8
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	429a      	cmp	r2, r3
 800937c:	d920      	bls.n	80093c0 <pvPortMalloc+0x114>
 800937e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <pvPortMalloc+0xfc>
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <pvPortMalloc+0xf8>
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	69b8      	ldr	r0, [r7, #24]
 80093bc:	f000 f90a 	bl	80095d4 <prvInsertBlockIntoFreeList>
 80093c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009438 <pvPortMalloc+0x18c>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009438 <pvPortMalloc+0x18c>)
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009438 <pvPortMalloc+0x18c>)
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009440 <pvPortMalloc+0x194>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d203      	bcs.n	80093e2 <pvPortMalloc+0x136>
 80093da:	4b17      	ldr	r3, [pc, #92]	@ (8009438 <pvPortMalloc+0x18c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a18      	ldr	r2, [pc, #96]	@ (8009440 <pvPortMalloc+0x194>)
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	4b13      	ldr	r3, [pc, #76]	@ (8009434 <pvPortMalloc+0x188>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	605a      	str	r2, [r3, #4]
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	4b13      	ldr	r3, [pc, #76]	@ (8009444 <pvPortMalloc+0x198>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a11      	ldr	r2, [pc, #68]	@ (8009444 <pvPortMalloc+0x198>)
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	f7fe fce0 	bl	8007dc4 <xTaskResumeAll>
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <pvPortMalloc+0x17a>
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	60fb      	str	r3, [r7, #12]
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <pvPortMalloc+0x176>
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	4618      	mov	r0, r3
 800942a:	3728      	adds	r7, #40	@ 0x28
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20001d90 	.word	0x20001d90
 8009434:	20001da4 	.word	0x20001da4
 8009438:	20001d94 	.word	0x20001d94
 800943c:	20001d88 	.word	0x20001d88
 8009440:	20001d98 	.word	0x20001d98
 8009444:	20001d9c 	.word	0x20001d9c

08009448 <vPortFree>:
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d04f      	beq.n	80094fa <vPortFree+0xb2>
 800945a:	2308      	movs	r3, #8
 800945c:	425b      	negs	r3, r3
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b25      	ldr	r3, [pc, #148]	@ (8009504 <vPortFree+0xbc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4013      	ands	r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <vPortFree+0x46>
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <vPortFree+0x42>
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <vPortFree+0x66>
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <vPortFree+0x62>
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	4b14      	ldr	r3, [pc, #80]	@ (8009504 <vPortFree+0xbc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01e      	beq.n	80094fa <vPortFree+0xb2>
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d11a      	bne.n	80094fa <vPortFree+0xb2>
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <vPortFree+0xbc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	43db      	mvns	r3, r3
 80094ce:	401a      	ands	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	f7fe fc68 	bl	8007da8 <vTaskSuspendAll>
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <vPortFree+0xc0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4413      	add	r3, r2
 80094e2:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <vPortFree+0xc0>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	6938      	ldr	r0, [r7, #16]
 80094e8:	f000 f874 	bl	80095d4 <prvInsertBlockIntoFreeList>
 80094ec:	4b07      	ldr	r3, [pc, #28]	@ (800950c <vPortFree+0xc4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3301      	adds	r3, #1
 80094f2:	4a06      	ldr	r2, [pc, #24]	@ (800950c <vPortFree+0xc4>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	f7fe fc65 	bl	8007dc4 <xTaskResumeAll>
 80094fa:	bf00      	nop
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20001da4 	.word	0x20001da4
 8009508:	20001d94 	.word	0x20001d94
 800950c:	20001da0 	.word	0x20001da0

08009510 <prvHeapInit>:
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	4b27      	ldr	r3, [pc, #156]	@ (80095bc <prvHeapInit+0xac>)
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00c      	beq.n	8009544 <prvHeapInit+0x34>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3307      	adds	r3, #7
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0307 	bic.w	r3, r3, #7
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	4a1f      	ldr	r2, [pc, #124]	@ (80095bc <prvHeapInit+0xac>)
 8009540:	4413      	add	r3, r2
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	607b      	str	r3, [r7, #4]
 8009548:	4a1d      	ldr	r2, [pc, #116]	@ (80095c0 <prvHeapInit+0xb0>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	4b1c      	ldr	r3, [pc, #112]	@ (80095c0 <prvHeapInit+0xb0>)
 8009550:	2200      	movs	r2, #0
 8009552:	605a      	str	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4413      	add	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	2208      	movs	r2, #8
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0307 	bic.w	r3, r3, #7
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <prvHeapInit+0xb4>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	4b14      	ldr	r3, [pc, #80]	@ (80095c4 <prvHeapInit+0xb4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	605a      	str	r2, [r3, #4]
 800957a:	4b12      	ldr	r3, [pc, #72]	@ (80095c4 <prvHeapInit+0xb4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	605a      	str	r2, [r3, #4]
 8009590:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <prvHeapInit+0xb4>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4a0a      	ldr	r2, [pc, #40]	@ (80095c8 <prvHeapInit+0xb8>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4a09      	ldr	r2, [pc, #36]	@ (80095cc <prvHeapInit+0xbc>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4b09      	ldr	r3, [pc, #36]	@ (80095d0 <prvHeapInit+0xc0>)
 80095aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	bf00      	nop
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	200011d0 	.word	0x200011d0
 80095c0:	20001d88 	.word	0x20001d88
 80095c4:	20001d90 	.word	0x20001d90
 80095c8:	20001d98 	.word	0x20001d98
 80095cc:	20001d94 	.word	0x20001d94
 80095d0:	20001da4 	.word	0x20001da4

080095d4 <prvInsertBlockIntoFreeList>:
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	4b28      	ldr	r3, [pc, #160]	@ (8009680 <prvInsertBlockIntoFreeList+0xac>)
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e002      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x14>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d8f7      	bhi.n	80095e2 <prvInsertBlockIntoFreeList+0xe>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	60bb      	str	r3, [r7, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d108      	bne.n	8009616 <prvInsertBlockIntoFreeList+0x42>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	607b      	str	r3, [r7, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	441a      	add	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d118      	bne.n	800965c <prvInsertBlockIntoFreeList+0x88>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	4b15      	ldr	r3, [pc, #84]	@ (8009684 <prvInsertBlockIntoFreeList+0xb0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d00d      	beq.n	8009652 <prvInsertBlockIntoFreeList+0x7e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	441a      	add	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e008      	b.n	8009664 <prvInsertBlockIntoFreeList+0x90>
 8009652:	4b0c      	ldr	r3, [pc, #48]	@ (8009684 <prvInsertBlockIntoFreeList+0xb0>)
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e003      	b.n	8009664 <prvInsertBlockIntoFreeList+0x90>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	429a      	cmp	r2, r3
 800966a:	d002      	beq.n	8009672 <prvInsertBlockIntoFreeList+0x9e>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	20001d88 	.word	0x20001d88
 8009684:	20001d90 	.word	0x20001d90

08009688 <__cvt>:
 8009688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	ec57 6b10 	vmov	r6, r7, d0
 8009690:	2f00      	cmp	r7, #0
 8009692:	460c      	mov	r4, r1
 8009694:	4619      	mov	r1, r3
 8009696:	463b      	mov	r3, r7
 8009698:	bfbb      	ittet	lt
 800969a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800969e:	461f      	movlt	r7, r3
 80096a0:	2300      	movge	r3, #0
 80096a2:	232d      	movlt	r3, #45	@ 0x2d
 80096a4:	700b      	strb	r3, [r1, #0]
 80096a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80096ac:	4691      	mov	r9, r2
 80096ae:	f023 0820 	bic.w	r8, r3, #32
 80096b2:	bfbc      	itt	lt
 80096b4:	4632      	movlt	r2, r6
 80096b6:	4616      	movlt	r6, r2
 80096b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096bc:	d005      	beq.n	80096ca <__cvt+0x42>
 80096be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80096c2:	d100      	bne.n	80096c6 <__cvt+0x3e>
 80096c4:	3401      	adds	r4, #1
 80096c6:	2102      	movs	r1, #2
 80096c8:	e000      	b.n	80096cc <__cvt+0x44>
 80096ca:	2103      	movs	r1, #3
 80096cc:	ab03      	add	r3, sp, #12
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	ab02      	add	r3, sp, #8
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	ec47 6b10 	vmov	d0, r6, r7
 80096d8:	4653      	mov	r3, sl
 80096da:	4622      	mov	r2, r4
 80096dc:	f000 ffa4 	bl	800a628 <_dtoa_r>
 80096e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80096e4:	4605      	mov	r5, r0
 80096e6:	d119      	bne.n	800971c <__cvt+0x94>
 80096e8:	f019 0f01 	tst.w	r9, #1
 80096ec:	d00e      	beq.n	800970c <__cvt+0x84>
 80096ee:	eb00 0904 	add.w	r9, r0, r4
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f7 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80096fe:	b108      	cbz	r0, 8009704 <__cvt+0x7c>
 8009700:	f8cd 900c 	str.w	r9, [sp, #12]
 8009704:	2230      	movs	r2, #48	@ 0x30
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	454b      	cmp	r3, r9
 800970a:	d31e      	bcc.n	800974a <__cvt+0xc2>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009710:	1b5b      	subs	r3, r3, r5
 8009712:	4628      	mov	r0, r5
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	b004      	add	sp, #16
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009720:	eb00 0904 	add.w	r9, r0, r4
 8009724:	d1e5      	bne.n	80096f2 <__cvt+0x6a>
 8009726:	7803      	ldrb	r3, [r0, #0]
 8009728:	2b30      	cmp	r3, #48	@ 0x30
 800972a:	d10a      	bne.n	8009742 <__cvt+0xba>
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009738:	b918      	cbnz	r0, 8009742 <__cvt+0xba>
 800973a:	f1c4 0401 	rsb	r4, r4, #1
 800973e:	f8ca 4000 	str.w	r4, [sl]
 8009742:	f8da 3000 	ldr.w	r3, [sl]
 8009746:	4499      	add	r9, r3
 8009748:	e7d3      	b.n	80096f2 <__cvt+0x6a>
 800974a:	1c59      	adds	r1, r3, #1
 800974c:	9103      	str	r1, [sp, #12]
 800974e:	701a      	strb	r2, [r3, #0]
 8009750:	e7d9      	b.n	8009706 <__cvt+0x7e>

08009752 <__exponent>:
 8009752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009754:	2900      	cmp	r1, #0
 8009756:	bfba      	itte	lt
 8009758:	4249      	neglt	r1, r1
 800975a:	232d      	movlt	r3, #45	@ 0x2d
 800975c:	232b      	movge	r3, #43	@ 0x2b
 800975e:	2909      	cmp	r1, #9
 8009760:	7002      	strb	r2, [r0, #0]
 8009762:	7043      	strb	r3, [r0, #1]
 8009764:	dd29      	ble.n	80097ba <__exponent+0x68>
 8009766:	f10d 0307 	add.w	r3, sp, #7
 800976a:	461d      	mov	r5, r3
 800976c:	270a      	movs	r7, #10
 800976e:	461a      	mov	r2, r3
 8009770:	fbb1 f6f7 	udiv	r6, r1, r7
 8009774:	fb07 1416 	mls	r4, r7, r6, r1
 8009778:	3430      	adds	r4, #48	@ 0x30
 800977a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800977e:	460c      	mov	r4, r1
 8009780:	2c63      	cmp	r4, #99	@ 0x63
 8009782:	f103 33ff 	add.w	r3, r3, #4294967295
 8009786:	4631      	mov	r1, r6
 8009788:	dcf1      	bgt.n	800976e <__exponent+0x1c>
 800978a:	3130      	adds	r1, #48	@ 0x30
 800978c:	1e94      	subs	r4, r2, #2
 800978e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009792:	1c41      	adds	r1, r0, #1
 8009794:	4623      	mov	r3, r4
 8009796:	42ab      	cmp	r3, r5
 8009798:	d30a      	bcc.n	80097b0 <__exponent+0x5e>
 800979a:	f10d 0309 	add.w	r3, sp, #9
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	42ac      	cmp	r4, r5
 80097a2:	bf88      	it	hi
 80097a4:	2300      	movhi	r3, #0
 80097a6:	3302      	adds	r3, #2
 80097a8:	4403      	add	r3, r0
 80097aa:	1a18      	subs	r0, r3, r0
 80097ac:	b003      	add	sp, #12
 80097ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097b8:	e7ed      	b.n	8009796 <__exponent+0x44>
 80097ba:	2330      	movs	r3, #48	@ 0x30
 80097bc:	3130      	adds	r1, #48	@ 0x30
 80097be:	7083      	strb	r3, [r0, #2]
 80097c0:	70c1      	strb	r1, [r0, #3]
 80097c2:	1d03      	adds	r3, r0, #4
 80097c4:	e7f1      	b.n	80097aa <__exponent+0x58>
	...

080097c8 <_printf_float>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	b08d      	sub	sp, #52	@ 0x34
 80097ce:	460c      	mov	r4, r1
 80097d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80097d4:	4616      	mov	r6, r2
 80097d6:	461f      	mov	r7, r3
 80097d8:	4605      	mov	r5, r0
 80097da:	f000 fdbf 	bl	800a35c <_localeconv_r>
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f6 fd44 	bl	8000270 <strlen>
 80097e8:	2300      	movs	r3, #0
 80097ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ec:	f8d8 3000 	ldr.w	r3, [r8]
 80097f0:	9005      	str	r0, [sp, #20]
 80097f2:	3307      	adds	r3, #7
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	f103 0208 	add.w	r2, r3, #8
 80097fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009800:	f8d4 b000 	ldr.w	fp, [r4]
 8009804:	f8c8 2000 	str.w	r2, [r8]
 8009808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800980c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	f8cd 8018 	str.w	r8, [sp, #24]
 8009816:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800981a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800981e:	4b9c      	ldr	r3, [pc, #624]	@ (8009a90 <_printf_float+0x2c8>)
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	f7f7 f982 	bl	8000b2c <__aeabi_dcmpun>
 8009828:	bb70      	cbnz	r0, 8009888 <_printf_float+0xc0>
 800982a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800982e:	4b98      	ldr	r3, [pc, #608]	@ (8009a90 <_printf_float+0x2c8>)
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	f7f7 f95c 	bl	8000af0 <__aeabi_dcmple>
 8009838:	bb30      	cbnz	r0, 8009888 <_printf_float+0xc0>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4640      	mov	r0, r8
 8009840:	4649      	mov	r1, r9
 8009842:	f7f7 f94b 	bl	8000adc <__aeabi_dcmplt>
 8009846:	b110      	cbz	r0, 800984e <_printf_float+0x86>
 8009848:	232d      	movs	r3, #45	@ 0x2d
 800984a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800984e:	4a91      	ldr	r2, [pc, #580]	@ (8009a94 <_printf_float+0x2cc>)
 8009850:	4b91      	ldr	r3, [pc, #580]	@ (8009a98 <_printf_float+0x2d0>)
 8009852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009856:	bf94      	ite	ls
 8009858:	4690      	movls	r8, r2
 800985a:	4698      	movhi	r8, r3
 800985c:	2303      	movs	r3, #3
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	f02b 0304 	bic.w	r3, fp, #4
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	f04f 0900 	mov.w	r9, #0
 800986a:	9700      	str	r7, [sp, #0]
 800986c:	4633      	mov	r3, r6
 800986e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f9d2 	bl	8009c1c <_printf_common>
 8009878:	3001      	adds	r0, #1
 800987a:	f040 808d 	bne.w	8009998 <_printf_float+0x1d0>
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	b00d      	add	sp, #52	@ 0x34
 8009884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	4640      	mov	r0, r8
 800988e:	4649      	mov	r1, r9
 8009890:	f7f7 f94c 	bl	8000b2c <__aeabi_dcmpun>
 8009894:	b140      	cbz	r0, 80098a8 <_printf_float+0xe0>
 8009896:	464b      	mov	r3, r9
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfbc      	itt	lt
 800989c:	232d      	movlt	r3, #45	@ 0x2d
 800989e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098a2:	4a7e      	ldr	r2, [pc, #504]	@ (8009a9c <_printf_float+0x2d4>)
 80098a4:	4b7e      	ldr	r3, [pc, #504]	@ (8009aa0 <_printf_float+0x2d8>)
 80098a6:	e7d4      	b.n	8009852 <_printf_float+0x8a>
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80098ae:	9206      	str	r2, [sp, #24]
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	d13b      	bne.n	800992c <_printf_float+0x164>
 80098b4:	2306      	movs	r3, #6
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80098bc:	2300      	movs	r3, #0
 80098be:	6022      	str	r2, [r4, #0]
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80098c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80098c8:	ab09      	add	r3, sp, #36	@ 0x24
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	6861      	ldr	r1, [r4, #4]
 80098ce:	ec49 8b10 	vmov	d0, r8, r9
 80098d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7ff fed6 	bl	8009688 <__cvt>
 80098dc:	9b06      	ldr	r3, [sp, #24]
 80098de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098e0:	2b47      	cmp	r3, #71	@ 0x47
 80098e2:	4680      	mov	r8, r0
 80098e4:	d129      	bne.n	800993a <_printf_float+0x172>
 80098e6:	1cc8      	adds	r0, r1, #3
 80098e8:	db02      	blt.n	80098f0 <_printf_float+0x128>
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	4299      	cmp	r1, r3
 80098ee:	dd41      	ble.n	8009974 <_printf_float+0x1ac>
 80098f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80098f4:	fa5f fa8a 	uxtb.w	sl, sl
 80098f8:	3901      	subs	r1, #1
 80098fa:	4652      	mov	r2, sl
 80098fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009900:	9109      	str	r1, [sp, #36]	@ 0x24
 8009902:	f7ff ff26 	bl	8009752 <__exponent>
 8009906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009908:	1813      	adds	r3, r2, r0
 800990a:	2a01      	cmp	r2, #1
 800990c:	4681      	mov	r9, r0
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	dc02      	bgt.n	8009918 <_printf_float+0x150>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	07d2      	lsls	r2, r2, #31
 8009916:	d501      	bpl.n	800991c <_printf_float+0x154>
 8009918:	3301      	adds	r3, #1
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0a2      	beq.n	800986a <_printf_float+0xa2>
 8009924:	232d      	movs	r3, #45	@ 0x2d
 8009926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800992a:	e79e      	b.n	800986a <_printf_float+0xa2>
 800992c:	9a06      	ldr	r2, [sp, #24]
 800992e:	2a47      	cmp	r2, #71	@ 0x47
 8009930:	d1c2      	bne.n	80098b8 <_printf_float+0xf0>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1c0      	bne.n	80098b8 <_printf_float+0xf0>
 8009936:	2301      	movs	r3, #1
 8009938:	e7bd      	b.n	80098b6 <_printf_float+0xee>
 800993a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800993e:	d9db      	bls.n	80098f8 <_printf_float+0x130>
 8009940:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009944:	d118      	bne.n	8009978 <_printf_float+0x1b0>
 8009946:	2900      	cmp	r1, #0
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	dd0b      	ble.n	8009964 <_printf_float+0x19c>
 800994c:	6121      	str	r1, [r4, #16]
 800994e:	b913      	cbnz	r3, 8009956 <_printf_float+0x18e>
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	07d0      	lsls	r0, r2, #31
 8009954:	d502      	bpl.n	800995c <_printf_float+0x194>
 8009956:	3301      	adds	r3, #1
 8009958:	440b      	add	r3, r1
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800995e:	f04f 0900 	mov.w	r9, #0
 8009962:	e7db      	b.n	800991c <_printf_float+0x154>
 8009964:	b913      	cbnz	r3, 800996c <_printf_float+0x1a4>
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	07d2      	lsls	r2, r2, #31
 800996a:	d501      	bpl.n	8009970 <_printf_float+0x1a8>
 800996c:	3302      	adds	r3, #2
 800996e:	e7f4      	b.n	800995a <_printf_float+0x192>
 8009970:	2301      	movs	r3, #1
 8009972:	e7f2      	b.n	800995a <_printf_float+0x192>
 8009974:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800997a:	4299      	cmp	r1, r3
 800997c:	db05      	blt.n	800998a <_printf_float+0x1c2>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	6121      	str	r1, [r4, #16]
 8009982:	07d8      	lsls	r0, r3, #31
 8009984:	d5ea      	bpl.n	800995c <_printf_float+0x194>
 8009986:	1c4b      	adds	r3, r1, #1
 8009988:	e7e7      	b.n	800995a <_printf_float+0x192>
 800998a:	2900      	cmp	r1, #0
 800998c:	bfd4      	ite	le
 800998e:	f1c1 0202 	rsble	r2, r1, #2
 8009992:	2201      	movgt	r2, #1
 8009994:	4413      	add	r3, r2
 8009996:	e7e0      	b.n	800995a <_printf_float+0x192>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	055a      	lsls	r2, r3, #21
 800999c:	d407      	bmi.n	80099ae <_printf_float+0x1e6>
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	4642      	mov	r2, r8
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d12b      	bne.n	8009a04 <_printf_float+0x23c>
 80099ac:	e767      	b.n	800987e <_printf_float+0xb6>
 80099ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099b2:	f240 80dd 	bls.w	8009b70 <_printf_float+0x3a8>
 80099b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099ba:	2200      	movs	r2, #0
 80099bc:	2300      	movs	r3, #0
 80099be:	f7f7 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d033      	beq.n	8009a2e <_printf_float+0x266>
 80099c6:	4a37      	ldr	r2, [pc, #220]	@ (8009aa4 <_printf_float+0x2dc>)
 80099c8:	2301      	movs	r3, #1
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	47b8      	blx	r7
 80099d0:	3001      	adds	r0, #1
 80099d2:	f43f af54 	beq.w	800987e <_printf_float+0xb6>
 80099d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099da:	4543      	cmp	r3, r8
 80099dc:	db02      	blt.n	80099e4 <_printf_float+0x21c>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	07d8      	lsls	r0, r3, #31
 80099e2:	d50f      	bpl.n	8009a04 <_printf_float+0x23c>
 80099e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f af45 	beq.w	800987e <_printf_float+0xb6>
 80099f4:	f04f 0900 	mov.w	r9, #0
 80099f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80099fc:	f104 0a1a 	add.w	sl, r4, #26
 8009a00:	45c8      	cmp	r8, r9
 8009a02:	dc09      	bgt.n	8009a18 <_printf_float+0x250>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	079b      	lsls	r3, r3, #30
 8009a08:	f100 8103 	bmi.w	8009c12 <_printf_float+0x44a>
 8009a0c:	68e0      	ldr	r0, [r4, #12]
 8009a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a10:	4298      	cmp	r0, r3
 8009a12:	bfb8      	it	lt
 8009a14:	4618      	movlt	r0, r3
 8009a16:	e734      	b.n	8009882 <_printf_float+0xba>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af2b 	beq.w	800987e <_printf_float+0xb6>
 8009a28:	f109 0901 	add.w	r9, r9, #1
 8009a2c:	e7e8      	b.n	8009a00 <_printf_float+0x238>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc39      	bgt.n	8009aa8 <_printf_float+0x2e0>
 8009a34:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <_printf_float+0x2dc>)
 8009a36:	2301      	movs	r3, #1
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af1d 	beq.w	800987e <_printf_float+0xb6>
 8009a44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a48:	ea59 0303 	orrs.w	r3, r9, r3
 8009a4c:	d102      	bne.n	8009a54 <_printf_float+0x28c>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	07d9      	lsls	r1, r3, #31
 8009a52:	d5d7      	bpl.n	8009a04 <_printf_float+0x23c>
 8009a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a58:	4631      	mov	r1, r6
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f43f af0d 	beq.w	800987e <_printf_float+0xb6>
 8009a64:	f04f 0a00 	mov.w	sl, #0
 8009a68:	f104 0b1a 	add.w	fp, r4, #26
 8009a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a6e:	425b      	negs	r3, r3
 8009a70:	4553      	cmp	r3, sl
 8009a72:	dc01      	bgt.n	8009a78 <_printf_float+0x2b0>
 8009a74:	464b      	mov	r3, r9
 8009a76:	e793      	b.n	80099a0 <_printf_float+0x1d8>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	465a      	mov	r2, fp
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	f43f aefb 	beq.w	800987e <_printf_float+0xb6>
 8009a88:	f10a 0a01 	add.w	sl, sl, #1
 8009a8c:	e7ee      	b.n	8009a6c <_printf_float+0x2a4>
 8009a8e:	bf00      	nop
 8009a90:	7fefffff 	.word	0x7fefffff
 8009a94:	0800c99c 	.word	0x0800c99c
 8009a98:	0800c9a0 	.word	0x0800c9a0
 8009a9c:	0800c9a4 	.word	0x0800c9a4
 8009aa0:	0800c9a8 	.word	0x0800c9a8
 8009aa4:	0800c9ac 	.word	0x0800c9ac
 8009aa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009aaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aae:	4553      	cmp	r3, sl
 8009ab0:	bfa8      	it	ge
 8009ab2:	4653      	movge	r3, sl
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	4699      	mov	r9, r3
 8009ab8:	dc36      	bgt.n	8009b28 <_printf_float+0x360>
 8009aba:	f04f 0b00 	mov.w	fp, #0
 8009abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ac2:	f104 021a 	add.w	r2, r4, #26
 8009ac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ac8:	9306      	str	r3, [sp, #24]
 8009aca:	eba3 0309 	sub.w	r3, r3, r9
 8009ace:	455b      	cmp	r3, fp
 8009ad0:	dc31      	bgt.n	8009b36 <_printf_float+0x36e>
 8009ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad4:	459a      	cmp	sl, r3
 8009ad6:	dc3a      	bgt.n	8009b4e <_printf_float+0x386>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	07da      	lsls	r2, r3, #31
 8009adc:	d437      	bmi.n	8009b4e <_printf_float+0x386>
 8009ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae0:	ebaa 0903 	sub.w	r9, sl, r3
 8009ae4:	9b06      	ldr	r3, [sp, #24]
 8009ae6:	ebaa 0303 	sub.w	r3, sl, r3
 8009aea:	4599      	cmp	r9, r3
 8009aec:	bfa8      	it	ge
 8009aee:	4699      	movge	r9, r3
 8009af0:	f1b9 0f00 	cmp.w	r9, #0
 8009af4:	dc33      	bgt.n	8009b5e <_printf_float+0x396>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009afe:	f104 0b1a 	add.w	fp, r4, #26
 8009b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b04:	ebaa 0303 	sub.w	r3, sl, r3
 8009b08:	eba3 0309 	sub.w	r3, r3, r9
 8009b0c:	4543      	cmp	r3, r8
 8009b0e:	f77f af79 	ble.w	8009a04 <_printf_float+0x23c>
 8009b12:	2301      	movs	r3, #1
 8009b14:	465a      	mov	r2, fp
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f aeae 	beq.w	800987e <_printf_float+0xb6>
 8009b22:	f108 0801 	add.w	r8, r8, #1
 8009b26:	e7ec      	b.n	8009b02 <_printf_float+0x33a>
 8009b28:	4642      	mov	r2, r8
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b8      	blx	r7
 8009b30:	3001      	adds	r0, #1
 8009b32:	d1c2      	bne.n	8009aba <_printf_float+0x2f2>
 8009b34:	e6a3      	b.n	800987e <_printf_float+0xb6>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	9206      	str	r2, [sp, #24]
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f ae9c 	beq.w	800987e <_printf_float+0xb6>
 8009b46:	9a06      	ldr	r2, [sp, #24]
 8009b48:	f10b 0b01 	add.w	fp, fp, #1
 8009b4c:	e7bb      	b.n	8009ac6 <_printf_float+0x2fe>
 8009b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b52:	4631      	mov	r1, r6
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b8      	blx	r7
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d1c0      	bne.n	8009ade <_printf_float+0x316>
 8009b5c:	e68f      	b.n	800987e <_printf_float+0xb6>
 8009b5e:	9a06      	ldr	r2, [sp, #24]
 8009b60:	464b      	mov	r3, r9
 8009b62:	4442      	add	r2, r8
 8009b64:	4631      	mov	r1, r6
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b8      	blx	r7
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	d1c3      	bne.n	8009af6 <_printf_float+0x32e>
 8009b6e:	e686      	b.n	800987e <_printf_float+0xb6>
 8009b70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b74:	f1ba 0f01 	cmp.w	sl, #1
 8009b78:	dc01      	bgt.n	8009b7e <_printf_float+0x3b6>
 8009b7a:	07db      	lsls	r3, r3, #31
 8009b7c:	d536      	bpl.n	8009bec <_printf_float+0x424>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4642      	mov	r2, r8
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f ae78 	beq.w	800987e <_printf_float+0xb6>
 8009b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f43f ae70 	beq.w	800987e <_printf_float+0xb6>
 8009b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009baa:	f7f6 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bae:	b9c0      	cbnz	r0, 8009be2 <_printf_float+0x41a>
 8009bb0:	4653      	mov	r3, sl
 8009bb2:	f108 0201 	add.w	r2, r8, #1
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d10c      	bne.n	8009bda <_printf_float+0x412>
 8009bc0:	e65d      	b.n	800987e <_printf_float+0xb6>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	465a      	mov	r2, fp
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f ae56 	beq.w	800987e <_printf_float+0xb6>
 8009bd2:	f108 0801 	add.w	r8, r8, #1
 8009bd6:	45d0      	cmp	r8, sl
 8009bd8:	dbf3      	blt.n	8009bc2 <_printf_float+0x3fa>
 8009bda:	464b      	mov	r3, r9
 8009bdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009be0:	e6df      	b.n	80099a2 <_printf_float+0x1da>
 8009be2:	f04f 0800 	mov.w	r8, #0
 8009be6:	f104 0b1a 	add.w	fp, r4, #26
 8009bea:	e7f4      	b.n	8009bd6 <_printf_float+0x40e>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4642      	mov	r2, r8
 8009bf0:	e7e1      	b.n	8009bb6 <_printf_float+0x3ee>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	464a      	mov	r2, r9
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f ae3e 	beq.w	800987e <_printf_float+0xb6>
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	68e3      	ldr	r3, [r4, #12]
 8009c08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c0a:	1a5b      	subs	r3, r3, r1
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	dcf0      	bgt.n	8009bf2 <_printf_float+0x42a>
 8009c10:	e6fc      	b.n	8009a0c <_printf_float+0x244>
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	f104 0919 	add.w	r9, r4, #25
 8009c1a:	e7f4      	b.n	8009c06 <_printf_float+0x43e>

08009c1c <_printf_common>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	4616      	mov	r6, r2
 8009c22:	4698      	mov	r8, r3
 8009c24:	688a      	ldr	r2, [r1, #8]
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bfb8      	it	lt
 8009c30:	4613      	movlt	r3, r2
 8009c32:	6033      	str	r3, [r6, #0]
 8009c34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c38:	4607      	mov	r7, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	b10a      	cbz	r2, 8009c42 <_printf_common+0x26>
 8009c3e:	3301      	adds	r3, #1
 8009c40:	6033      	str	r3, [r6, #0]
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	0699      	lsls	r1, r3, #26
 8009c46:	bf42      	ittt	mi
 8009c48:	6833      	ldrmi	r3, [r6, #0]
 8009c4a:	3302      	addmi	r3, #2
 8009c4c:	6033      	strmi	r3, [r6, #0]
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	f015 0506 	ands.w	r5, r5, #6
 8009c54:	d106      	bne.n	8009c64 <_printf_common+0x48>
 8009c56:	f104 0a19 	add.w	sl, r4, #25
 8009c5a:	68e3      	ldr	r3, [r4, #12]
 8009c5c:	6832      	ldr	r2, [r6, #0]
 8009c5e:	1a9b      	subs	r3, r3, r2
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	dc26      	bgt.n	8009cb2 <_printf_common+0x96>
 8009c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	3b00      	subs	r3, #0
 8009c6c:	bf18      	it	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	0692      	lsls	r2, r2, #26
 8009c72:	d42b      	bmi.n	8009ccc <_printf_common+0xb0>
 8009c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c8      	blx	r9
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d01e      	beq.n	8009cc0 <_printf_common+0xa4>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	6922      	ldr	r2, [r4, #16]
 8009c86:	f003 0306 	and.w	r3, r3, #6
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	bf02      	ittt	eq
 8009c8e:	68e5      	ldreq	r5, [r4, #12]
 8009c90:	6833      	ldreq	r3, [r6, #0]
 8009c92:	1aed      	subeq	r5, r5, r3
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	bf0c      	ite	eq
 8009c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c9c:	2500      	movne	r5, #0
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	bfc4      	itt	gt
 8009ca2:	1a9b      	subgt	r3, r3, r2
 8009ca4:	18ed      	addgt	r5, r5, r3
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	341a      	adds	r4, #26
 8009caa:	42b5      	cmp	r5, r6
 8009cac:	d11a      	bne.n	8009ce4 <_printf_common+0xc8>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e008      	b.n	8009cc4 <_printf_common+0xa8>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	4641      	mov	r1, r8
 8009cb8:	4638      	mov	r0, r7
 8009cba:	47c8      	blx	r9
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d103      	bne.n	8009cc8 <_printf_common+0xac>
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	3501      	adds	r5, #1
 8009cca:	e7c6      	b.n	8009c5a <_printf_common+0x3e>
 8009ccc:	18e1      	adds	r1, r4, r3
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	2030      	movs	r0, #48	@ 0x30
 8009cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cd6:	4422      	add	r2, r4
 8009cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	e7c7      	b.n	8009c74 <_printf_common+0x58>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	4641      	mov	r1, r8
 8009cea:	4638      	mov	r0, r7
 8009cec:	47c8      	blx	r9
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d0e6      	beq.n	8009cc0 <_printf_common+0xa4>
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7d9      	b.n	8009caa <_printf_common+0x8e>
	...

08009cf8 <_printf_i>:
 8009cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	7e0f      	ldrb	r7, [r1, #24]
 8009cfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d00:	2f78      	cmp	r7, #120	@ 0x78
 8009d02:	4691      	mov	r9, r2
 8009d04:	4680      	mov	r8, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	469a      	mov	sl, r3
 8009d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d0e:	d807      	bhi.n	8009d20 <_printf_i+0x28>
 8009d10:	2f62      	cmp	r7, #98	@ 0x62
 8009d12:	d80a      	bhi.n	8009d2a <_printf_i+0x32>
 8009d14:	2f00      	cmp	r7, #0
 8009d16:	f000 80d2 	beq.w	8009ebe <_printf_i+0x1c6>
 8009d1a:	2f58      	cmp	r7, #88	@ 0x58
 8009d1c:	f000 80b9 	beq.w	8009e92 <_printf_i+0x19a>
 8009d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d28:	e03a      	b.n	8009da0 <_printf_i+0xa8>
 8009d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d2e:	2b15      	cmp	r3, #21
 8009d30:	d8f6      	bhi.n	8009d20 <_printf_i+0x28>
 8009d32:	a101      	add	r1, pc, #4	@ (adr r1, 8009d38 <_printf_i+0x40>)
 8009d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d38:	08009d91 	.word	0x08009d91
 8009d3c:	08009da5 	.word	0x08009da5
 8009d40:	08009d21 	.word	0x08009d21
 8009d44:	08009d21 	.word	0x08009d21
 8009d48:	08009d21 	.word	0x08009d21
 8009d4c:	08009d21 	.word	0x08009d21
 8009d50:	08009da5 	.word	0x08009da5
 8009d54:	08009d21 	.word	0x08009d21
 8009d58:	08009d21 	.word	0x08009d21
 8009d5c:	08009d21 	.word	0x08009d21
 8009d60:	08009d21 	.word	0x08009d21
 8009d64:	08009ea5 	.word	0x08009ea5
 8009d68:	08009dcf 	.word	0x08009dcf
 8009d6c:	08009e5f 	.word	0x08009e5f
 8009d70:	08009d21 	.word	0x08009d21
 8009d74:	08009d21 	.word	0x08009d21
 8009d78:	08009ec7 	.word	0x08009ec7
 8009d7c:	08009d21 	.word	0x08009d21
 8009d80:	08009dcf 	.word	0x08009dcf
 8009d84:	08009d21 	.word	0x08009d21
 8009d88:	08009d21 	.word	0x08009d21
 8009d8c:	08009e67 	.word	0x08009e67
 8009d90:	6833      	ldr	r3, [r6, #0]
 8009d92:	1d1a      	adds	r2, r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6032      	str	r2, [r6, #0]
 8009d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009da0:	2301      	movs	r3, #1
 8009da2:	e09d      	b.n	8009ee0 <_printf_i+0x1e8>
 8009da4:	6833      	ldr	r3, [r6, #0]
 8009da6:	6820      	ldr	r0, [r4, #0]
 8009da8:	1d19      	adds	r1, r3, #4
 8009daa:	6031      	str	r1, [r6, #0]
 8009dac:	0606      	lsls	r6, r0, #24
 8009dae:	d501      	bpl.n	8009db4 <_printf_i+0xbc>
 8009db0:	681d      	ldr	r5, [r3, #0]
 8009db2:	e003      	b.n	8009dbc <_printf_i+0xc4>
 8009db4:	0645      	lsls	r5, r0, #25
 8009db6:	d5fb      	bpl.n	8009db0 <_printf_i+0xb8>
 8009db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	da03      	bge.n	8009dc8 <_printf_i+0xd0>
 8009dc0:	232d      	movs	r3, #45	@ 0x2d
 8009dc2:	426d      	negs	r5, r5
 8009dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dc8:	4859      	ldr	r0, [pc, #356]	@ (8009f30 <_printf_i+0x238>)
 8009dca:	230a      	movs	r3, #10
 8009dcc:	e011      	b.n	8009df2 <_printf_i+0xfa>
 8009dce:	6821      	ldr	r1, [r4, #0]
 8009dd0:	6833      	ldr	r3, [r6, #0]
 8009dd2:	0608      	lsls	r0, r1, #24
 8009dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dd8:	d402      	bmi.n	8009de0 <_printf_i+0xe8>
 8009dda:	0649      	lsls	r1, r1, #25
 8009ddc:	bf48      	it	mi
 8009dde:	b2ad      	uxthmi	r5, r5
 8009de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009de2:	4853      	ldr	r0, [pc, #332]	@ (8009f30 <_printf_i+0x238>)
 8009de4:	6033      	str	r3, [r6, #0]
 8009de6:	bf14      	ite	ne
 8009de8:	230a      	movne	r3, #10
 8009dea:	2308      	moveq	r3, #8
 8009dec:	2100      	movs	r1, #0
 8009dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009df2:	6866      	ldr	r6, [r4, #4]
 8009df4:	60a6      	str	r6, [r4, #8]
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	bfa2      	ittt	ge
 8009dfa:	6821      	ldrge	r1, [r4, #0]
 8009dfc:	f021 0104 	bicge.w	r1, r1, #4
 8009e00:	6021      	strge	r1, [r4, #0]
 8009e02:	b90d      	cbnz	r5, 8009e08 <_printf_i+0x110>
 8009e04:	2e00      	cmp	r6, #0
 8009e06:	d04b      	beq.n	8009ea0 <_printf_i+0x1a8>
 8009e08:	4616      	mov	r6, r2
 8009e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e12:	5dc7      	ldrb	r7, [r0, r7]
 8009e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e18:	462f      	mov	r7, r5
 8009e1a:	42bb      	cmp	r3, r7
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	d9f4      	bls.n	8009e0a <_printf_i+0x112>
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d10b      	bne.n	8009e3c <_printf_i+0x144>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	07df      	lsls	r7, r3, #31
 8009e28:	d508      	bpl.n	8009e3c <_printf_i+0x144>
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	6861      	ldr	r1, [r4, #4]
 8009e2e:	4299      	cmp	r1, r3
 8009e30:	bfde      	ittt	le
 8009e32:	2330      	movle	r3, #48	@ 0x30
 8009e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e3c:	1b92      	subs	r2, r2, r6
 8009e3e:	6122      	str	r2, [r4, #16]
 8009e40:	f8cd a000 	str.w	sl, [sp]
 8009e44:	464b      	mov	r3, r9
 8009e46:	aa03      	add	r2, sp, #12
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	f7ff fee6 	bl	8009c1c <_printf_common>
 8009e50:	3001      	adds	r0, #1
 8009e52:	d14a      	bne.n	8009eea <_printf_i+0x1f2>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b004      	add	sp, #16
 8009e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f043 0320 	orr.w	r3, r3, #32
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	4833      	ldr	r0, [pc, #204]	@ (8009f34 <_printf_i+0x23c>)
 8009e68:	2778      	movs	r7, #120	@ 0x78
 8009e6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6831      	ldr	r1, [r6, #0]
 8009e72:	061f      	lsls	r7, r3, #24
 8009e74:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e78:	d402      	bmi.n	8009e80 <_printf_i+0x188>
 8009e7a:	065f      	lsls	r7, r3, #25
 8009e7c:	bf48      	it	mi
 8009e7e:	b2ad      	uxthmi	r5, r5
 8009e80:	6031      	str	r1, [r6, #0]
 8009e82:	07d9      	lsls	r1, r3, #31
 8009e84:	bf44      	itt	mi
 8009e86:	f043 0320 	orrmi.w	r3, r3, #32
 8009e8a:	6023      	strmi	r3, [r4, #0]
 8009e8c:	b11d      	cbz	r5, 8009e96 <_printf_i+0x19e>
 8009e8e:	2310      	movs	r3, #16
 8009e90:	e7ac      	b.n	8009dec <_printf_i+0xf4>
 8009e92:	4827      	ldr	r0, [pc, #156]	@ (8009f30 <_printf_i+0x238>)
 8009e94:	e7e9      	b.n	8009e6a <_printf_i+0x172>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	f023 0320 	bic.w	r3, r3, #32
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	e7f6      	b.n	8009e8e <_printf_i+0x196>
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	e7bd      	b.n	8009e20 <_printf_i+0x128>
 8009ea4:	6833      	ldr	r3, [r6, #0]
 8009ea6:	6825      	ldr	r5, [r4, #0]
 8009ea8:	6961      	ldr	r1, [r4, #20]
 8009eaa:	1d18      	adds	r0, r3, #4
 8009eac:	6030      	str	r0, [r6, #0]
 8009eae:	062e      	lsls	r6, r5, #24
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	d501      	bpl.n	8009eb8 <_printf_i+0x1c0>
 8009eb4:	6019      	str	r1, [r3, #0]
 8009eb6:	e002      	b.n	8009ebe <_printf_i+0x1c6>
 8009eb8:	0668      	lsls	r0, r5, #25
 8009eba:	d5fb      	bpl.n	8009eb4 <_printf_i+0x1bc>
 8009ebc:	8019      	strh	r1, [r3, #0]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6123      	str	r3, [r4, #16]
 8009ec2:	4616      	mov	r6, r2
 8009ec4:	e7bc      	b.n	8009e40 <_printf_i+0x148>
 8009ec6:	6833      	ldr	r3, [r6, #0]
 8009ec8:	1d1a      	adds	r2, r3, #4
 8009eca:	6032      	str	r2, [r6, #0]
 8009ecc:	681e      	ldr	r6, [r3, #0]
 8009ece:	6862      	ldr	r2, [r4, #4]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7f6 f97c 	bl	80001d0 <memchr>
 8009ed8:	b108      	cbz	r0, 8009ede <_printf_i+0x1e6>
 8009eda:	1b80      	subs	r0, r0, r6
 8009edc:	6060      	str	r0, [r4, #4]
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee8:	e7aa      	b.n	8009e40 <_printf_i+0x148>
 8009eea:	6923      	ldr	r3, [r4, #16]
 8009eec:	4632      	mov	r2, r6
 8009eee:	4649      	mov	r1, r9
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	47d0      	blx	sl
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d0ad      	beq.n	8009e54 <_printf_i+0x15c>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	079b      	lsls	r3, r3, #30
 8009efc:	d413      	bmi.n	8009f26 <_printf_i+0x22e>
 8009efe:	68e0      	ldr	r0, [r4, #12]
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	4298      	cmp	r0, r3
 8009f04:	bfb8      	it	lt
 8009f06:	4618      	movlt	r0, r3
 8009f08:	e7a6      	b.n	8009e58 <_printf_i+0x160>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4649      	mov	r1, r9
 8009f10:	4640      	mov	r0, r8
 8009f12:	47d0      	blx	sl
 8009f14:	3001      	adds	r0, #1
 8009f16:	d09d      	beq.n	8009e54 <_printf_i+0x15c>
 8009f18:	3501      	adds	r5, #1
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	9903      	ldr	r1, [sp, #12]
 8009f1e:	1a5b      	subs	r3, r3, r1
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dcf2      	bgt.n	8009f0a <_printf_i+0x212>
 8009f24:	e7eb      	b.n	8009efe <_printf_i+0x206>
 8009f26:	2500      	movs	r5, #0
 8009f28:	f104 0619 	add.w	r6, r4, #25
 8009f2c:	e7f5      	b.n	8009f1a <_printf_i+0x222>
 8009f2e:	bf00      	nop
 8009f30:	0800c9ae 	.word	0x0800c9ae
 8009f34:	0800c9bf 	.word	0x0800c9bf

08009f38 <std>:
 8009f38:	2300      	movs	r3, #0
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f46:	6083      	str	r3, [r0, #8]
 8009f48:	8181      	strh	r1, [r0, #12]
 8009f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f4c:	81c2      	strh	r2, [r0, #14]
 8009f4e:	6183      	str	r3, [r0, #24]
 8009f50:	4619      	mov	r1, r3
 8009f52:	2208      	movs	r2, #8
 8009f54:	305c      	adds	r0, #92	@ 0x5c
 8009f56:	f000 f9f9 	bl	800a34c <memset>
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f90 <std+0x58>)
 8009f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <std+0x5c>)
 8009f60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f62:	4b0d      	ldr	r3, [pc, #52]	@ (8009f98 <std+0x60>)
 8009f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <std+0x64>)
 8009f68:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa0 <std+0x68>)
 8009f6c:	6224      	str	r4, [r4, #32]
 8009f6e:	429c      	cmp	r4, r3
 8009f70:	d006      	beq.n	8009f80 <std+0x48>
 8009f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f76:	4294      	cmp	r4, r2
 8009f78:	d002      	beq.n	8009f80 <std+0x48>
 8009f7a:	33d0      	adds	r3, #208	@ 0xd0
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	d105      	bne.n	8009f8c <std+0x54>
 8009f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f000 bab2 	b.w	800a4f0 <__retarget_lock_init_recursive>
 8009f8c:	bd10      	pop	{r4, pc}
 8009f8e:	bf00      	nop
 8009f90:	0800a19d 	.word	0x0800a19d
 8009f94:	0800a1bf 	.word	0x0800a1bf
 8009f98:	0800a1f7 	.word	0x0800a1f7
 8009f9c:	0800a21b 	.word	0x0800a21b
 8009fa0:	20001da8 	.word	0x20001da8

08009fa4 <stdio_exit_handler>:
 8009fa4:	4a02      	ldr	r2, [pc, #8]	@ (8009fb0 <stdio_exit_handler+0xc>)
 8009fa6:	4903      	ldr	r1, [pc, #12]	@ (8009fb4 <stdio_exit_handler+0x10>)
 8009fa8:	4803      	ldr	r0, [pc, #12]	@ (8009fb8 <stdio_exit_handler+0x14>)
 8009faa:	f000 b869 	b.w	800a080 <_fwalk_sglue>
 8009fae:	bf00      	nop
 8009fb0:	20000010 	.word	0x20000010
 8009fb4:	0800be41 	.word	0x0800be41
 8009fb8:	20000020 	.word	0x20000020

08009fbc <cleanup_stdio>:
 8009fbc:	6841      	ldr	r1, [r0, #4]
 8009fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff0 <cleanup_stdio+0x34>)
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	d001      	beq.n	8009fcc <cleanup_stdio+0x10>
 8009fc8:	f001 ff3a 	bl	800be40 <_fflush_r>
 8009fcc:	68a1      	ldr	r1, [r4, #8]
 8009fce:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <cleanup_stdio+0x38>)
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	d002      	beq.n	8009fda <cleanup_stdio+0x1e>
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f001 ff33 	bl	800be40 <_fflush_r>
 8009fda:	68e1      	ldr	r1, [r4, #12]
 8009fdc:	4b06      	ldr	r3, [pc, #24]	@ (8009ff8 <cleanup_stdio+0x3c>)
 8009fde:	4299      	cmp	r1, r3
 8009fe0:	d004      	beq.n	8009fec <cleanup_stdio+0x30>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe8:	f001 bf2a 	b.w	800be40 <_fflush_r>
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	bf00      	nop
 8009ff0:	20001da8 	.word	0x20001da8
 8009ff4:	20001e10 	.word	0x20001e10
 8009ff8:	20001e78 	.word	0x20001e78

08009ffc <global_stdio_init.part.0>:
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800a02c <global_stdio_init.part.0+0x30>)
 800a000:	4c0b      	ldr	r4, [pc, #44]	@ (800a030 <global_stdio_init.part.0+0x34>)
 800a002:	4a0c      	ldr	r2, [pc, #48]	@ (800a034 <global_stdio_init.part.0+0x38>)
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	4620      	mov	r0, r4
 800a008:	2200      	movs	r2, #0
 800a00a:	2104      	movs	r1, #4
 800a00c:	f7ff ff94 	bl	8009f38 <std>
 800a010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a014:	2201      	movs	r2, #1
 800a016:	2109      	movs	r1, #9
 800a018:	f7ff ff8e 	bl	8009f38 <std>
 800a01c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a020:	2202      	movs	r2, #2
 800a022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a026:	2112      	movs	r1, #18
 800a028:	f7ff bf86 	b.w	8009f38 <std>
 800a02c:	20001ee0 	.word	0x20001ee0
 800a030:	20001da8 	.word	0x20001da8
 800a034:	08009fa5 	.word	0x08009fa5

0800a038 <__sfp_lock_acquire>:
 800a038:	4801      	ldr	r0, [pc, #4]	@ (800a040 <__sfp_lock_acquire+0x8>)
 800a03a:	f000 ba5a 	b.w	800a4f2 <__retarget_lock_acquire_recursive>
 800a03e:	bf00      	nop
 800a040:	20001ee9 	.word	0x20001ee9

0800a044 <__sfp_lock_release>:
 800a044:	4801      	ldr	r0, [pc, #4]	@ (800a04c <__sfp_lock_release+0x8>)
 800a046:	f000 ba55 	b.w	800a4f4 <__retarget_lock_release_recursive>
 800a04a:	bf00      	nop
 800a04c:	20001ee9 	.word	0x20001ee9

0800a050 <__sinit>:
 800a050:	b510      	push	{r4, lr}
 800a052:	4604      	mov	r4, r0
 800a054:	f7ff fff0 	bl	800a038 <__sfp_lock_acquire>
 800a058:	6a23      	ldr	r3, [r4, #32]
 800a05a:	b11b      	cbz	r3, 800a064 <__sinit+0x14>
 800a05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a060:	f7ff bff0 	b.w	800a044 <__sfp_lock_release>
 800a064:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <__sinit+0x28>)
 800a066:	6223      	str	r3, [r4, #32]
 800a068:	4b04      	ldr	r3, [pc, #16]	@ (800a07c <__sinit+0x2c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f5      	bne.n	800a05c <__sinit+0xc>
 800a070:	f7ff ffc4 	bl	8009ffc <global_stdio_init.part.0>
 800a074:	e7f2      	b.n	800a05c <__sinit+0xc>
 800a076:	bf00      	nop
 800a078:	08009fbd 	.word	0x08009fbd
 800a07c:	20001ee0 	.word	0x20001ee0

0800a080 <_fwalk_sglue>:
 800a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a084:	4607      	mov	r7, r0
 800a086:	4688      	mov	r8, r1
 800a088:	4614      	mov	r4, r2
 800a08a:	2600      	movs	r6, #0
 800a08c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a090:	f1b9 0901 	subs.w	r9, r9, #1
 800a094:	d505      	bpl.n	800a0a2 <_fwalk_sglue+0x22>
 800a096:	6824      	ldr	r4, [r4, #0]
 800a098:	2c00      	cmp	r4, #0
 800a09a:	d1f7      	bne.n	800a08c <_fwalk_sglue+0xc>
 800a09c:	4630      	mov	r0, r6
 800a09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d907      	bls.n	800a0b8 <_fwalk_sglue+0x38>
 800a0a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	d003      	beq.n	800a0b8 <_fwalk_sglue+0x38>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	47c0      	blx	r8
 800a0b6:	4306      	orrs	r6, r0
 800a0b8:	3568      	adds	r5, #104	@ 0x68
 800a0ba:	e7e9      	b.n	800a090 <_fwalk_sglue+0x10>

0800a0bc <iprintf>:
 800a0bc:	b40f      	push	{r0, r1, r2, r3}
 800a0be:	b507      	push	{r0, r1, r2, lr}
 800a0c0:	4906      	ldr	r1, [pc, #24]	@ (800a0dc <iprintf+0x20>)
 800a0c2:	ab04      	add	r3, sp, #16
 800a0c4:	6808      	ldr	r0, [r1, #0]
 800a0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ca:	6881      	ldr	r1, [r0, #8]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f001 fd1b 	bl	800bb08 <_vfiprintf_r>
 800a0d2:	b003      	add	sp, #12
 800a0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0d8:	b004      	add	sp, #16
 800a0da:	4770      	bx	lr
 800a0dc:	2000001c 	.word	0x2000001c

0800a0e0 <_puts_r>:
 800a0e0:	6a03      	ldr	r3, [r0, #32]
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	6884      	ldr	r4, [r0, #8]
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	b90b      	cbnz	r3, 800a0f0 <_puts_r+0x10>
 800a0ec:	f7ff ffb0 	bl	800a050 <__sinit>
 800a0f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0f2:	07db      	lsls	r3, r3, #31
 800a0f4:	d405      	bmi.n	800a102 <_puts_r+0x22>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	0598      	lsls	r0, r3, #22
 800a0fa:	d402      	bmi.n	800a102 <_puts_r+0x22>
 800a0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0fe:	f000 f9f8 	bl	800a4f2 <__retarget_lock_acquire_recursive>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	0719      	lsls	r1, r3, #28
 800a106:	d502      	bpl.n	800a10e <_puts_r+0x2e>
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d135      	bne.n	800a17a <_puts_r+0x9a>
 800a10e:	4621      	mov	r1, r4
 800a110:	4628      	mov	r0, r5
 800a112:	f000 f8c5 	bl	800a2a0 <__swsetup_r>
 800a116:	b380      	cbz	r0, 800a17a <_puts_r+0x9a>
 800a118:	f04f 35ff 	mov.w	r5, #4294967295
 800a11c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a11e:	07da      	lsls	r2, r3, #31
 800a120:	d405      	bmi.n	800a12e <_puts_r+0x4e>
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	059b      	lsls	r3, r3, #22
 800a126:	d402      	bmi.n	800a12e <_puts_r+0x4e>
 800a128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a12a:	f000 f9e3 	bl	800a4f4 <__retarget_lock_release_recursive>
 800a12e:	4628      	mov	r0, r5
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	2b00      	cmp	r3, #0
 800a134:	da04      	bge.n	800a140 <_puts_r+0x60>
 800a136:	69a2      	ldr	r2, [r4, #24]
 800a138:	429a      	cmp	r2, r3
 800a13a:	dc17      	bgt.n	800a16c <_puts_r+0x8c>
 800a13c:	290a      	cmp	r1, #10
 800a13e:	d015      	beq.n	800a16c <_puts_r+0x8c>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	6022      	str	r2, [r4, #0]
 800a146:	7019      	strb	r1, [r3, #0]
 800a148:	68a3      	ldr	r3, [r4, #8]
 800a14a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a14e:	3b01      	subs	r3, #1
 800a150:	60a3      	str	r3, [r4, #8]
 800a152:	2900      	cmp	r1, #0
 800a154:	d1ed      	bne.n	800a132 <_puts_r+0x52>
 800a156:	2b00      	cmp	r3, #0
 800a158:	da11      	bge.n	800a17e <_puts_r+0x9e>
 800a15a:	4622      	mov	r2, r4
 800a15c:	210a      	movs	r1, #10
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f85f 	bl	800a222 <__swbuf_r>
 800a164:	3001      	adds	r0, #1
 800a166:	d0d7      	beq.n	800a118 <_puts_r+0x38>
 800a168:	250a      	movs	r5, #10
 800a16a:	e7d7      	b.n	800a11c <_puts_r+0x3c>
 800a16c:	4622      	mov	r2, r4
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 f857 	bl	800a222 <__swbuf_r>
 800a174:	3001      	adds	r0, #1
 800a176:	d1e7      	bne.n	800a148 <_puts_r+0x68>
 800a178:	e7ce      	b.n	800a118 <_puts_r+0x38>
 800a17a:	3e01      	subs	r6, #1
 800a17c:	e7e4      	b.n	800a148 <_puts_r+0x68>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	6022      	str	r2, [r4, #0]
 800a184:	220a      	movs	r2, #10
 800a186:	701a      	strb	r2, [r3, #0]
 800a188:	e7ee      	b.n	800a168 <_puts_r+0x88>
	...

0800a18c <puts>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	@ (800a198 <puts+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f7ff bfa5 	b.w	800a0e0 <_puts_r>
 800a196:	bf00      	nop
 800a198:	2000001c 	.word	0x2000001c

0800a19c <__sread>:
 800a19c:	b510      	push	{r4, lr}
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	f000 f956 	bl	800a454 <_read_r>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	bfab      	itete	ge
 800a1ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a1b0:	181b      	addge	r3, r3, r0
 800a1b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1b6:	bfac      	ite	ge
 800a1b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1ba:	81a3      	strhlt	r3, [r4, #12]
 800a1bc:	bd10      	pop	{r4, pc}

0800a1be <__swrite>:
 800a1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c2:	461f      	mov	r7, r3
 800a1c4:	898b      	ldrh	r3, [r1, #12]
 800a1c6:	05db      	lsls	r3, r3, #23
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	d505      	bpl.n	800a1dc <__swrite+0x1e>
 800a1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f000 f92a 	bl	800a430 <_lseek_r>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1e6:	81a3      	strh	r3, [r4, #12]
 800a1e8:	4632      	mov	r2, r6
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f2:	f000 b941 	b.w	800a478 <_write_r>

0800a1f6 <__sseek>:
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fe:	f000 f917 	bl	800a430 <_lseek_r>
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	bf15      	itete	ne
 800a208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a20a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a20e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a212:	81a3      	strheq	r3, [r4, #12]
 800a214:	bf18      	it	ne
 800a216:	81a3      	strhne	r3, [r4, #12]
 800a218:	bd10      	pop	{r4, pc}

0800a21a <__sclose>:
 800a21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21e:	f000 b8a1 	b.w	800a364 <_close_r>

0800a222 <__swbuf_r>:
 800a222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a224:	460e      	mov	r6, r1
 800a226:	4614      	mov	r4, r2
 800a228:	4605      	mov	r5, r0
 800a22a:	b118      	cbz	r0, 800a234 <__swbuf_r+0x12>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <__swbuf_r+0x12>
 800a230:	f7ff ff0e 	bl	800a050 <__sinit>
 800a234:	69a3      	ldr	r3, [r4, #24]
 800a236:	60a3      	str	r3, [r4, #8]
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	071a      	lsls	r2, r3, #28
 800a23c:	d501      	bpl.n	800a242 <__swbuf_r+0x20>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	b943      	cbnz	r3, 800a254 <__swbuf_r+0x32>
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f000 f82b 	bl	800a2a0 <__swsetup_r>
 800a24a:	b118      	cbz	r0, 800a254 <__swbuf_r+0x32>
 800a24c:	f04f 37ff 	mov.w	r7, #4294967295
 800a250:	4638      	mov	r0, r7
 800a252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	6922      	ldr	r2, [r4, #16]
 800a258:	1a98      	subs	r0, r3, r2
 800a25a:	6963      	ldr	r3, [r4, #20]
 800a25c:	b2f6      	uxtb	r6, r6
 800a25e:	4283      	cmp	r3, r0
 800a260:	4637      	mov	r7, r6
 800a262:	dc05      	bgt.n	800a270 <__swbuf_r+0x4e>
 800a264:	4621      	mov	r1, r4
 800a266:	4628      	mov	r0, r5
 800a268:	f001 fdea 	bl	800be40 <_fflush_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d1ed      	bne.n	800a24c <__swbuf_r+0x2a>
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	3b01      	subs	r3, #1
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	6022      	str	r2, [r4, #0]
 800a27c:	701e      	strb	r6, [r3, #0]
 800a27e:	6962      	ldr	r2, [r4, #20]
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	429a      	cmp	r2, r3
 800a284:	d004      	beq.n	800a290 <__swbuf_r+0x6e>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	07db      	lsls	r3, r3, #31
 800a28a:	d5e1      	bpl.n	800a250 <__swbuf_r+0x2e>
 800a28c:	2e0a      	cmp	r6, #10
 800a28e:	d1df      	bne.n	800a250 <__swbuf_r+0x2e>
 800a290:	4621      	mov	r1, r4
 800a292:	4628      	mov	r0, r5
 800a294:	f001 fdd4 	bl	800be40 <_fflush_r>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d0d9      	beq.n	800a250 <__swbuf_r+0x2e>
 800a29c:	e7d6      	b.n	800a24c <__swbuf_r+0x2a>
	...

0800a2a0 <__swsetup_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4b29      	ldr	r3, [pc, #164]	@ (800a348 <__swsetup_r+0xa8>)
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	b118      	cbz	r0, 800a2b4 <__swsetup_r+0x14>
 800a2ac:	6a03      	ldr	r3, [r0, #32]
 800a2ae:	b90b      	cbnz	r3, 800a2b4 <__swsetup_r+0x14>
 800a2b0:	f7ff fece 	bl	800a050 <__sinit>
 800a2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b8:	0719      	lsls	r1, r3, #28
 800a2ba:	d422      	bmi.n	800a302 <__swsetup_r+0x62>
 800a2bc:	06da      	lsls	r2, r3, #27
 800a2be:	d407      	bmi.n	800a2d0 <__swsetup_r+0x30>
 800a2c0:	2209      	movs	r2, #9
 800a2c2:	602a      	str	r2, [r5, #0]
 800a2c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ce:	e033      	b.n	800a338 <__swsetup_r+0x98>
 800a2d0:	0758      	lsls	r0, r3, #29
 800a2d2:	d512      	bpl.n	800a2fa <__swsetup_r+0x5a>
 800a2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2d6:	b141      	cbz	r1, 800a2ea <__swsetup_r+0x4a>
 800a2d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2dc:	4299      	cmp	r1, r3
 800a2de:	d002      	beq.n	800a2e6 <__swsetup_r+0x46>
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 ff65 	bl	800b1b0 <_free_r>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f043 0308 	orr.w	r3, r3, #8
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	b94b      	cbnz	r3, 800a31a <__swsetup_r+0x7a>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a310:	d003      	beq.n	800a31a <__swsetup_r+0x7a>
 800a312:	4621      	mov	r1, r4
 800a314:	4628      	mov	r0, r5
 800a316:	f001 fde1 	bl	800bedc <__smakebuf_r>
 800a31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31e:	f013 0201 	ands.w	r2, r3, #1
 800a322:	d00a      	beq.n	800a33a <__swsetup_r+0x9a>
 800a324:	2200      	movs	r2, #0
 800a326:	60a2      	str	r2, [r4, #8]
 800a328:	6962      	ldr	r2, [r4, #20]
 800a32a:	4252      	negs	r2, r2
 800a32c:	61a2      	str	r2, [r4, #24]
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	b942      	cbnz	r2, 800a344 <__swsetup_r+0xa4>
 800a332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a336:	d1c5      	bne.n	800a2c4 <__swsetup_r+0x24>
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	0799      	lsls	r1, r3, #30
 800a33c:	bf58      	it	pl
 800a33e:	6962      	ldrpl	r2, [r4, #20]
 800a340:	60a2      	str	r2, [r4, #8]
 800a342:	e7f4      	b.n	800a32e <__swsetup_r+0x8e>
 800a344:	2000      	movs	r0, #0
 800a346:	e7f7      	b.n	800a338 <__swsetup_r+0x98>
 800a348:	2000001c 	.word	0x2000001c

0800a34c <memset>:
 800a34c:	4402      	add	r2, r0
 800a34e:	4603      	mov	r3, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <_localeconv_r>:
 800a35c:	4800      	ldr	r0, [pc, #0]	@ (800a360 <_localeconv_r+0x4>)
 800a35e:	4770      	bx	lr
 800a360:	2000015c 	.word	0x2000015c

0800a364 <_close_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d06      	ldr	r5, [pc, #24]	@ (800a380 <_close_r+0x1c>)
 800a368:	2300      	movs	r3, #0
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	f7f7 fe1e 	bl	8001fb0 <_close>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_close_r+0x1a>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_close_r+0x1a>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20001ee4 	.word	0x20001ee4

0800a384 <_reclaim_reent>:
 800a384:	4b29      	ldr	r3, [pc, #164]	@ (800a42c <_reclaim_reent+0xa8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4283      	cmp	r3, r0
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	4604      	mov	r4, r0
 800a38e:	d04b      	beq.n	800a428 <_reclaim_reent+0xa4>
 800a390:	69c3      	ldr	r3, [r0, #28]
 800a392:	b1ab      	cbz	r3, 800a3c0 <_reclaim_reent+0x3c>
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	b16b      	cbz	r3, 800a3b4 <_reclaim_reent+0x30>
 800a398:	2500      	movs	r5, #0
 800a39a:	69e3      	ldr	r3, [r4, #28]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	5959      	ldr	r1, [r3, r5]
 800a3a0:	2900      	cmp	r1, #0
 800a3a2:	d13b      	bne.n	800a41c <_reclaim_reent+0x98>
 800a3a4:	3504      	adds	r5, #4
 800a3a6:	2d80      	cmp	r5, #128	@ 0x80
 800a3a8:	d1f7      	bne.n	800a39a <_reclaim_reent+0x16>
 800a3aa:	69e3      	ldr	r3, [r4, #28]
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	68d9      	ldr	r1, [r3, #12]
 800a3b0:	f000 fefe 	bl	800b1b0 <_free_r>
 800a3b4:	69e3      	ldr	r3, [r4, #28]
 800a3b6:	6819      	ldr	r1, [r3, #0]
 800a3b8:	b111      	cbz	r1, 800a3c0 <_reclaim_reent+0x3c>
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fef8 	bl	800b1b0 <_free_r>
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	b111      	cbz	r1, 800a3ca <_reclaim_reent+0x46>
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 fef3 	bl	800b1b0 <_free_r>
 800a3ca:	69e1      	ldr	r1, [r4, #28]
 800a3cc:	b111      	cbz	r1, 800a3d4 <_reclaim_reent+0x50>
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 feee 	bl	800b1b0 <_free_r>
 800a3d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a3d6:	b111      	cbz	r1, 800a3de <_reclaim_reent+0x5a>
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fee9 	bl	800b1b0 <_free_r>
 800a3de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3e0:	b111      	cbz	r1, 800a3e8 <_reclaim_reent+0x64>
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fee4 	bl	800b1b0 <_free_r>
 800a3e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a3ea:	b111      	cbz	r1, 800a3f2 <_reclaim_reent+0x6e>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fedf 	bl	800b1b0 <_free_r>
 800a3f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a3f4:	b111      	cbz	r1, 800a3fc <_reclaim_reent+0x78>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 feda 	bl	800b1b0 <_free_r>
 800a3fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a3fe:	b111      	cbz	r1, 800a406 <_reclaim_reent+0x82>
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fed5 	bl	800b1b0 <_free_r>
 800a406:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a408:	b111      	cbz	r1, 800a410 <_reclaim_reent+0x8c>
 800a40a:	4620      	mov	r0, r4
 800a40c:	f000 fed0 	bl	800b1b0 <_free_r>
 800a410:	6a23      	ldr	r3, [r4, #32]
 800a412:	b14b      	cbz	r3, 800a428 <_reclaim_reent+0xa4>
 800a414:	4620      	mov	r0, r4
 800a416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a41a:	4718      	bx	r3
 800a41c:	680e      	ldr	r6, [r1, #0]
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fec6 	bl	800b1b0 <_free_r>
 800a424:	4631      	mov	r1, r6
 800a426:	e7bb      	b.n	800a3a0 <_reclaim_reent+0x1c>
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	bf00      	nop
 800a42c:	2000001c 	.word	0x2000001c

0800a430 <_lseek_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	@ (800a450 <_lseek_r+0x20>)
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	f7f7 fddd 	bl	8001ffe <_lseek>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_lseek_r+0x1e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_lseek_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20001ee4 	.word	0x20001ee4

0800a454 <_read_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_read_r+0x20>)
 800a458:	4604      	mov	r4, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f7 fd87 	bl	8001f76 <_read>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_read_r+0x1e>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_read_r+0x1e>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20001ee4 	.word	0x20001ee4

0800a478 <_write_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	@ (800a498 <_write_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f6 ff06 	bl	8001298 <_write>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_write_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_write_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20001ee4 	.word	0x20001ee4

0800a49c <__errno>:
 800a49c:	4b01      	ldr	r3, [pc, #4]	@ (800a4a4 <__errno+0x8>)
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	2000001c 	.word	0x2000001c

0800a4a8 <__libc_init_array>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a4e0 <__libc_init_array+0x38>)
 800a4ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a4e4 <__libc_init_array+0x3c>)
 800a4ae:	1b64      	subs	r4, r4, r5
 800a4b0:	10a4      	asrs	r4, r4, #2
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	42a6      	cmp	r6, r4
 800a4b6:	d109      	bne.n	800a4cc <__libc_init_array+0x24>
 800a4b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a4e8 <__libc_init_array+0x40>)
 800a4ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a4ec <__libc_init_array+0x44>)
 800a4bc:	f001 fe2c 	bl	800c118 <_init>
 800a4c0:	1b64      	subs	r4, r4, r5
 800a4c2:	10a4      	asrs	r4, r4, #2
 800a4c4:	2600      	movs	r6, #0
 800a4c6:	42a6      	cmp	r6, r4
 800a4c8:	d105      	bne.n	800a4d6 <__libc_init_array+0x2e>
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d0:	4798      	blx	r3
 800a4d2:	3601      	adds	r6, #1
 800a4d4:	e7ee      	b.n	800a4b4 <__libc_init_array+0xc>
 800a4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4da:	4798      	blx	r3
 800a4dc:	3601      	adds	r6, #1
 800a4de:	e7f2      	b.n	800a4c6 <__libc_init_array+0x1e>
 800a4e0:	0800cd18 	.word	0x0800cd18
 800a4e4:	0800cd18 	.word	0x0800cd18
 800a4e8:	0800cd18 	.word	0x0800cd18
 800a4ec:	0800cd1c 	.word	0x0800cd1c

0800a4f0 <__retarget_lock_init_recursive>:
 800a4f0:	4770      	bx	lr

0800a4f2 <__retarget_lock_acquire_recursive>:
 800a4f2:	4770      	bx	lr

0800a4f4 <__retarget_lock_release_recursive>:
 800a4f4:	4770      	bx	lr

0800a4f6 <memcpy>:
 800a4f6:	440a      	add	r2, r1
 800a4f8:	4291      	cmp	r1, r2
 800a4fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4fe:	d100      	bne.n	800a502 <memcpy+0xc>
 800a500:	4770      	bx	lr
 800a502:	b510      	push	{r4, lr}
 800a504:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50c:	4291      	cmp	r1, r2
 800a50e:	d1f9      	bne.n	800a504 <memcpy+0xe>
 800a510:	bd10      	pop	{r4, pc}

0800a512 <quorem>:
 800a512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	6903      	ldr	r3, [r0, #16]
 800a518:	690c      	ldr	r4, [r1, #16]
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	4607      	mov	r7, r0
 800a51e:	db7e      	blt.n	800a61e <quorem+0x10c>
 800a520:	3c01      	subs	r4, #1
 800a522:	f101 0814 	add.w	r8, r1, #20
 800a526:	00a3      	lsls	r3, r4, #2
 800a528:	f100 0514 	add.w	r5, r0, #20
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a53c:	3301      	adds	r3, #1
 800a53e:	429a      	cmp	r2, r3
 800a540:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a544:	fbb2 f6f3 	udiv	r6, r2, r3
 800a548:	d32e      	bcc.n	800a5a8 <quorem+0x96>
 800a54a:	f04f 0a00 	mov.w	sl, #0
 800a54e:	46c4      	mov	ip, r8
 800a550:	46ae      	mov	lr, r5
 800a552:	46d3      	mov	fp, sl
 800a554:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a558:	b298      	uxth	r0, r3
 800a55a:	fb06 a000 	mla	r0, r6, r0, sl
 800a55e:	0c02      	lsrs	r2, r0, #16
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	fb06 2303 	mla	r3, r6, r3, r2
 800a566:	f8de 2000 	ldr.w	r2, [lr]
 800a56a:	b280      	uxth	r0, r0
 800a56c:	b292      	uxth	r2, r2
 800a56e:	1a12      	subs	r2, r2, r0
 800a570:	445a      	add	r2, fp
 800a572:	f8de 0000 	ldr.w	r0, [lr]
 800a576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a580:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a584:	b292      	uxth	r2, r2
 800a586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a58a:	45e1      	cmp	r9, ip
 800a58c:	f84e 2b04 	str.w	r2, [lr], #4
 800a590:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a594:	d2de      	bcs.n	800a554 <quorem+0x42>
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	58eb      	ldr	r3, [r5, r3]
 800a59a:	b92b      	cbnz	r3, 800a5a8 <quorem+0x96>
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	429d      	cmp	r5, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	d32f      	bcc.n	800a606 <quorem+0xf4>
 800a5a6:	613c      	str	r4, [r7, #16]
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f001 f97b 	bl	800b8a4 <__mcmp>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	db25      	blt.n	800a5fe <quorem+0xec>
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5ba:	f8d1 c000 	ldr.w	ip, [r1]
 800a5be:	fa1f fe82 	uxth.w	lr, r2
 800a5c2:	fa1f f38c 	uxth.w	r3, ip
 800a5c6:	eba3 030e 	sub.w	r3, r3, lr
 800a5ca:	4403      	add	r3, r0
 800a5cc:	0c12      	lsrs	r2, r2, #16
 800a5ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a5d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5dc:	45c1      	cmp	r9, r8
 800a5de:	f841 3b04 	str.w	r3, [r1], #4
 800a5e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5e6:	d2e6      	bcs.n	800a5b6 <quorem+0xa4>
 800a5e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5f0:	b922      	cbnz	r2, 800a5fc <quorem+0xea>
 800a5f2:	3b04      	subs	r3, #4
 800a5f4:	429d      	cmp	r5, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	d30b      	bcc.n	800a612 <quorem+0x100>
 800a5fa:	613c      	str	r4, [r7, #16]
 800a5fc:	3601      	adds	r6, #1
 800a5fe:	4630      	mov	r0, r6
 800a600:	b003      	add	sp, #12
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	6812      	ldr	r2, [r2, #0]
 800a608:	3b04      	subs	r3, #4
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	d1cb      	bne.n	800a5a6 <quorem+0x94>
 800a60e:	3c01      	subs	r4, #1
 800a610:	e7c6      	b.n	800a5a0 <quorem+0x8e>
 800a612:	6812      	ldr	r2, [r2, #0]
 800a614:	3b04      	subs	r3, #4
 800a616:	2a00      	cmp	r2, #0
 800a618:	d1ef      	bne.n	800a5fa <quorem+0xe8>
 800a61a:	3c01      	subs	r4, #1
 800a61c:	e7ea      	b.n	800a5f4 <quorem+0xe2>
 800a61e:	2000      	movs	r0, #0
 800a620:	e7ee      	b.n	800a600 <quorem+0xee>
 800a622:	0000      	movs	r0, r0
 800a624:	0000      	movs	r0, r0
	...

0800a628 <_dtoa_r>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	69c7      	ldr	r7, [r0, #28]
 800a62e:	b099      	sub	sp, #100	@ 0x64
 800a630:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a634:	ec55 4b10 	vmov	r4, r5, d0
 800a638:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a63a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a63c:	4683      	mov	fp, r0
 800a63e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a640:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a642:	b97f      	cbnz	r7, 800a664 <_dtoa_r+0x3c>
 800a644:	2010      	movs	r0, #16
 800a646:	f000 fdfd 	bl	800b244 <malloc>
 800a64a:	4602      	mov	r2, r0
 800a64c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a650:	b920      	cbnz	r0, 800a65c <_dtoa_r+0x34>
 800a652:	4ba7      	ldr	r3, [pc, #668]	@ (800a8f0 <_dtoa_r+0x2c8>)
 800a654:	21ef      	movs	r1, #239	@ 0xef
 800a656:	48a7      	ldr	r0, [pc, #668]	@ (800a8f4 <_dtoa_r+0x2cc>)
 800a658:	f001 fcae 	bl	800bfb8 <__assert_func>
 800a65c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a660:	6007      	str	r7, [r0, #0]
 800a662:	60c7      	str	r7, [r0, #12]
 800a664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	b159      	cbz	r1, 800a684 <_dtoa_r+0x5c>
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	604a      	str	r2, [r1, #4]
 800a670:	2301      	movs	r3, #1
 800a672:	4093      	lsls	r3, r2
 800a674:	608b      	str	r3, [r1, #8]
 800a676:	4658      	mov	r0, fp
 800a678:	f000 feda 	bl	800b430 <_Bfree>
 800a67c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	1e2b      	subs	r3, r5, #0
 800a686:	bfb9      	ittee	lt
 800a688:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a68c:	9303      	strlt	r3, [sp, #12]
 800a68e:	2300      	movge	r3, #0
 800a690:	6033      	strge	r3, [r6, #0]
 800a692:	9f03      	ldr	r7, [sp, #12]
 800a694:	4b98      	ldr	r3, [pc, #608]	@ (800a8f8 <_dtoa_r+0x2d0>)
 800a696:	bfbc      	itt	lt
 800a698:	2201      	movlt	r2, #1
 800a69a:	6032      	strlt	r2, [r6, #0]
 800a69c:	43bb      	bics	r3, r7
 800a69e:	d112      	bne.n	800a6c6 <_dtoa_r+0x9e>
 800a6a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6ac:	4323      	orrs	r3, r4
 800a6ae:	f000 854d 	beq.w	800b14c <_dtoa_r+0xb24>
 800a6b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a90c <_dtoa_r+0x2e4>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 854f 	beq.w	800b15c <_dtoa_r+0xb34>
 800a6be:	f10a 0303 	add.w	r3, sl, #3
 800a6c2:	f000 bd49 	b.w	800b158 <_dtoa_r+0xb30>
 800a6c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	ec51 0b17 	vmov	r0, r1, d7
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a6d6:	f7f6 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	b158      	cbz	r0, 800a6f6 <_dtoa_r+0xce>
 800a6de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6e6:	b113      	cbz	r3, 800a6ee <_dtoa_r+0xc6>
 800a6e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6ea:	4b84      	ldr	r3, [pc, #528]	@ (800a8fc <_dtoa_r+0x2d4>)
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a910 <_dtoa_r+0x2e8>
 800a6f2:	f000 bd33 	b.w	800b15c <_dtoa_r+0xb34>
 800a6f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a6fa:	aa16      	add	r2, sp, #88	@ 0x58
 800a6fc:	a917      	add	r1, sp, #92	@ 0x5c
 800a6fe:	4658      	mov	r0, fp
 800a700:	f001 f980 	bl	800ba04 <__d2b>
 800a704:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a708:	4681      	mov	r9, r0
 800a70a:	2e00      	cmp	r6, #0
 800a70c:	d077      	beq.n	800a7fe <_dtoa_r+0x1d6>
 800a70e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a710:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a71c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a720:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a724:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a728:	4619      	mov	r1, r3
 800a72a:	2200      	movs	r2, #0
 800a72c:	4b74      	ldr	r3, [pc, #464]	@ (800a900 <_dtoa_r+0x2d8>)
 800a72e:	f7f5 fdab 	bl	8000288 <__aeabi_dsub>
 800a732:	a369      	add	r3, pc, #420	@ (adr r3, 800a8d8 <_dtoa_r+0x2b0>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 ff5e 	bl	80005f8 <__aeabi_dmul>
 800a73c:	a368      	add	r3, pc, #416	@ (adr r3, 800a8e0 <_dtoa_r+0x2b8>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 fda3 	bl	800028c <__adddf3>
 800a746:	4604      	mov	r4, r0
 800a748:	4630      	mov	r0, r6
 800a74a:	460d      	mov	r5, r1
 800a74c:	f7f5 feea 	bl	8000524 <__aeabi_i2d>
 800a750:	a365      	add	r3, pc, #404	@ (adr r3, 800a8e8 <_dtoa_r+0x2c0>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 ff4f 	bl	80005f8 <__aeabi_dmul>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f5 fd93 	bl	800028c <__adddf3>
 800a766:	4604      	mov	r4, r0
 800a768:	460d      	mov	r5, r1
 800a76a:	f7f6 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800a76e:	2200      	movs	r2, #0
 800a770:	4607      	mov	r7, r0
 800a772:	2300      	movs	r3, #0
 800a774:	4620      	mov	r0, r4
 800a776:	4629      	mov	r1, r5
 800a778:	f7f6 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800a77c:	b140      	cbz	r0, 800a790 <_dtoa_r+0x168>
 800a77e:	4638      	mov	r0, r7
 800a780:	f7f5 fed0 	bl	8000524 <__aeabi_i2d>
 800a784:	4622      	mov	r2, r4
 800a786:	462b      	mov	r3, r5
 800a788:	f7f6 f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a78c:	b900      	cbnz	r0, 800a790 <_dtoa_r+0x168>
 800a78e:	3f01      	subs	r7, #1
 800a790:	2f16      	cmp	r7, #22
 800a792:	d851      	bhi.n	800a838 <_dtoa_r+0x210>
 800a794:	4b5b      	ldr	r3, [pc, #364]	@ (800a904 <_dtoa_r+0x2dc>)
 800a796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7a2:	f7f6 f99b 	bl	8000adc <__aeabi_dcmplt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d048      	beq.n	800a83c <_dtoa_r+0x214>
 800a7aa:	3f01      	subs	r7, #1
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a7b2:	1b9b      	subs	r3, r3, r6
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	bf44      	itt	mi
 800a7b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a7bc:	2300      	movmi	r3, #0
 800a7be:	9208      	str	r2, [sp, #32]
 800a7c0:	bf54      	ite	pl
 800a7c2:	f04f 0800 	movpl.w	r8, #0
 800a7c6:	9308      	strmi	r3, [sp, #32]
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	db39      	blt.n	800a840 <_dtoa_r+0x218>
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a7d0:	443b      	add	r3, r7
 800a7d2:	9308      	str	r3, [sp, #32]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7da:	2b09      	cmp	r3, #9
 800a7dc:	d864      	bhi.n	800a8a8 <_dtoa_r+0x280>
 800a7de:	2b05      	cmp	r3, #5
 800a7e0:	bfc4      	itt	gt
 800a7e2:	3b04      	subgt	r3, #4
 800a7e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	f1a3 0302 	sub.w	r3, r3, #2
 800a7ec:	bfcc      	ite	gt
 800a7ee:	2400      	movgt	r4, #0
 800a7f0:	2401      	movle	r4, #1
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d863      	bhi.n	800a8be <_dtoa_r+0x296>
 800a7f6:	e8df f003 	tbb	[pc, r3]
 800a7fa:	372a      	.short	0x372a
 800a7fc:	5535      	.short	0x5535
 800a7fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a802:	441e      	add	r6, r3
 800a804:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a808:	2b20      	cmp	r3, #32
 800a80a:	bfc1      	itttt	gt
 800a80c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a810:	409f      	lslgt	r7, r3
 800a812:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a816:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a81a:	bfd6      	itet	le
 800a81c:	f1c3 0320 	rsble	r3, r3, #32
 800a820:	ea47 0003 	orrgt.w	r0, r7, r3
 800a824:	fa04 f003 	lslle.w	r0, r4, r3
 800a828:	f7f5 fe6c 	bl	8000504 <__aeabi_ui2d>
 800a82c:	2201      	movs	r2, #1
 800a82e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a832:	3e01      	subs	r6, #1
 800a834:	9214      	str	r2, [sp, #80]	@ 0x50
 800a836:	e777      	b.n	800a728 <_dtoa_r+0x100>
 800a838:	2301      	movs	r3, #1
 800a83a:	e7b8      	b.n	800a7ae <_dtoa_r+0x186>
 800a83c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a83e:	e7b7      	b.n	800a7b0 <_dtoa_r+0x188>
 800a840:	427b      	negs	r3, r7
 800a842:	930a      	str	r3, [sp, #40]	@ 0x28
 800a844:	2300      	movs	r3, #0
 800a846:	eba8 0807 	sub.w	r8, r8, r7
 800a84a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a84c:	e7c4      	b.n	800a7d8 <_dtoa_r+0x1b0>
 800a84e:	2300      	movs	r3, #0
 800a850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	dc35      	bgt.n	800a8c4 <_dtoa_r+0x29c>
 800a858:	2301      	movs	r3, #1
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	9307      	str	r3, [sp, #28]
 800a85e:	461a      	mov	r2, r3
 800a860:	920e      	str	r2, [sp, #56]	@ 0x38
 800a862:	e00b      	b.n	800a87c <_dtoa_r+0x254>
 800a864:	2301      	movs	r3, #1
 800a866:	e7f3      	b.n	800a850 <_dtoa_r+0x228>
 800a868:	2300      	movs	r3, #0
 800a86a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a86c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a86e:	18fb      	adds	r3, r7, r3
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	2b01      	cmp	r3, #1
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	bfb8      	it	lt
 800a87a:	2301      	movlt	r3, #1
 800a87c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a880:	2100      	movs	r1, #0
 800a882:	2204      	movs	r2, #4
 800a884:	f102 0514 	add.w	r5, r2, #20
 800a888:	429d      	cmp	r5, r3
 800a88a:	d91f      	bls.n	800a8cc <_dtoa_r+0x2a4>
 800a88c:	6041      	str	r1, [r0, #4]
 800a88e:	4658      	mov	r0, fp
 800a890:	f000 fd8e 	bl	800b3b0 <_Balloc>
 800a894:	4682      	mov	sl, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d13c      	bne.n	800a914 <_dtoa_r+0x2ec>
 800a89a:	4b1b      	ldr	r3, [pc, #108]	@ (800a908 <_dtoa_r+0x2e0>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8a2:	e6d8      	b.n	800a656 <_dtoa_r+0x2e>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e7e0      	b.n	800a86a <_dtoa_r+0x242>
 800a8a8:	2401      	movs	r4, #1
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2312      	movs	r3, #18
 800a8bc:	e7d0      	b.n	800a860 <_dtoa_r+0x238>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8c2:	e7f5      	b.n	800a8b0 <_dtoa_r+0x288>
 800a8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	9307      	str	r3, [sp, #28]
 800a8ca:	e7d7      	b.n	800a87c <_dtoa_r+0x254>
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	0052      	lsls	r2, r2, #1
 800a8d0:	e7d8      	b.n	800a884 <_dtoa_r+0x25c>
 800a8d2:	bf00      	nop
 800a8d4:	f3af 8000 	nop.w
 800a8d8:	636f4361 	.word	0x636f4361
 800a8dc:	3fd287a7 	.word	0x3fd287a7
 800a8e0:	8b60c8b3 	.word	0x8b60c8b3
 800a8e4:	3fc68a28 	.word	0x3fc68a28
 800a8e8:	509f79fb 	.word	0x509f79fb
 800a8ec:	3fd34413 	.word	0x3fd34413
 800a8f0:	0800c9dd 	.word	0x0800c9dd
 800a8f4:	0800c9f4 	.word	0x0800c9f4
 800a8f8:	7ff00000 	.word	0x7ff00000
 800a8fc:	0800c9ad 	.word	0x0800c9ad
 800a900:	3ff80000 	.word	0x3ff80000
 800a904:	0800caf0 	.word	0x0800caf0
 800a908:	0800ca4c 	.word	0x0800ca4c
 800a90c:	0800c9d9 	.word	0x0800c9d9
 800a910:	0800c9ac 	.word	0x0800c9ac
 800a914:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a918:	6018      	str	r0, [r3, #0]
 800a91a:	9b07      	ldr	r3, [sp, #28]
 800a91c:	2b0e      	cmp	r3, #14
 800a91e:	f200 80a4 	bhi.w	800aa6a <_dtoa_r+0x442>
 800a922:	2c00      	cmp	r4, #0
 800a924:	f000 80a1 	beq.w	800aa6a <_dtoa_r+0x442>
 800a928:	2f00      	cmp	r7, #0
 800a92a:	dd33      	ble.n	800a994 <_dtoa_r+0x36c>
 800a92c:	4bad      	ldr	r3, [pc, #692]	@ (800abe4 <_dtoa_r+0x5bc>)
 800a92e:	f007 020f 	and.w	r2, r7, #15
 800a932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a936:	ed93 7b00 	vldr	d7, [r3]
 800a93a:	05f8      	lsls	r0, r7, #23
 800a93c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a940:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a944:	d516      	bpl.n	800a974 <_dtoa_r+0x34c>
 800a946:	4ba8      	ldr	r3, [pc, #672]	@ (800abe8 <_dtoa_r+0x5c0>)
 800a948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a94c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a950:	f7f5 ff7c 	bl	800084c <__aeabi_ddiv>
 800a954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a958:	f004 040f 	and.w	r4, r4, #15
 800a95c:	2603      	movs	r6, #3
 800a95e:	4da2      	ldr	r5, [pc, #648]	@ (800abe8 <_dtoa_r+0x5c0>)
 800a960:	b954      	cbnz	r4, 800a978 <_dtoa_r+0x350>
 800a962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a96a:	f7f5 ff6f 	bl	800084c <__aeabi_ddiv>
 800a96e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a972:	e028      	b.n	800a9c6 <_dtoa_r+0x39e>
 800a974:	2602      	movs	r6, #2
 800a976:	e7f2      	b.n	800a95e <_dtoa_r+0x336>
 800a978:	07e1      	lsls	r1, r4, #31
 800a97a:	d508      	bpl.n	800a98e <_dtoa_r+0x366>
 800a97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a980:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a984:	f7f5 fe38 	bl	80005f8 <__aeabi_dmul>
 800a988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a98c:	3601      	adds	r6, #1
 800a98e:	1064      	asrs	r4, r4, #1
 800a990:	3508      	adds	r5, #8
 800a992:	e7e5      	b.n	800a960 <_dtoa_r+0x338>
 800a994:	f000 80d2 	beq.w	800ab3c <_dtoa_r+0x514>
 800a998:	427c      	negs	r4, r7
 800a99a:	4b92      	ldr	r3, [pc, #584]	@ (800abe4 <_dtoa_r+0x5bc>)
 800a99c:	4d92      	ldr	r5, [pc, #584]	@ (800abe8 <_dtoa_r+0x5c0>)
 800a99e:	f004 020f 	and.w	r2, r4, #15
 800a9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ae:	f7f5 fe23 	bl	80005f8 <__aeabi_dmul>
 800a9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b6:	1124      	asrs	r4, r4, #4
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2602      	movs	r6, #2
 800a9bc:	2c00      	cmp	r4, #0
 800a9be:	f040 80b2 	bne.w	800ab26 <_dtoa_r+0x4fe>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1d3      	bne.n	800a96e <_dtoa_r+0x346>
 800a9c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 80b7 	beq.w	800ab40 <_dtoa_r+0x518>
 800a9d2:	4b86      	ldr	r3, [pc, #536]	@ (800abec <_dtoa_r+0x5c4>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f6 f87f 	bl	8000adc <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f000 80ae 	beq.w	800ab40 <_dtoa_r+0x518>
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80aa 	beq.w	800ab40 <_dtoa_r+0x518>
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dd37      	ble.n	800aa62 <_dtoa_r+0x43a>
 800a9f2:	1e7b      	subs	r3, r7, #1
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4b7d      	ldr	r3, [pc, #500]	@ (800abf0 <_dtoa_r+0x5c8>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f7f5 fdfb 	bl	80005f8 <__aeabi_dmul>
 800aa02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa06:	9c00      	ldr	r4, [sp, #0]
 800aa08:	3601      	adds	r6, #1
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7f5 fd8a 	bl	8000524 <__aeabi_i2d>
 800aa10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa14:	f7f5 fdf0 	bl	80005f8 <__aeabi_dmul>
 800aa18:	4b76      	ldr	r3, [pc, #472]	@ (800abf4 <_dtoa_r+0x5cc>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f7f5 fc36 	bl	800028c <__adddf3>
 800aa20:	4605      	mov	r5, r0
 800aa22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa26:	2c00      	cmp	r4, #0
 800aa28:	f040 808d 	bne.w	800ab46 <_dtoa_r+0x51e>
 800aa2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa30:	4b71      	ldr	r3, [pc, #452]	@ (800abf8 <_dtoa_r+0x5d0>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	f7f5 fc28 	bl	8000288 <__aeabi_dsub>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4633      	mov	r3, r6
 800aa44:	f7f6 f868 	bl	8000b18 <__aeabi_dcmpgt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f040 828b 	bne.w	800af64 <_dtoa_r+0x93c>
 800aa4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa52:	462a      	mov	r2, r5
 800aa54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa58:	f7f6 f840 	bl	8000adc <__aeabi_dcmplt>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f040 8128 	bne.w	800acb2 <_dtoa_r+0x68a>
 800aa62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f2c0 815a 	blt.w	800ad26 <_dtoa_r+0x6fe>
 800aa72:	2f0e      	cmp	r7, #14
 800aa74:	f300 8157 	bgt.w	800ad26 <_dtoa_r+0x6fe>
 800aa78:	4b5a      	ldr	r3, [pc, #360]	@ (800abe4 <_dtoa_r+0x5bc>)
 800aa7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa7e:	ed93 7b00 	vldr	d7, [r3]
 800aa82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	ed8d 7b00 	vstr	d7, [sp]
 800aa8a:	da03      	bge.n	800aa94 <_dtoa_r+0x46c>
 800aa8c:	9b07      	ldr	r3, [sp, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f340 8101 	ble.w	800ac96 <_dtoa_r+0x66e>
 800aa94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa98:	4656      	mov	r6, sl
 800aa9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f7f5 fed3 	bl	800084c <__aeabi_ddiv>
 800aaa6:	f7f6 f857 	bl	8000b58 <__aeabi_d2iz>
 800aaaa:	4680      	mov	r8, r0
 800aaac:	f7f5 fd3a 	bl	8000524 <__aeabi_i2d>
 800aab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aab4:	f7f5 fda0 	bl	80005f8 <__aeabi_dmul>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	f806 4b01 	strb.w	r4, [r6], #1
 800aacc:	9d07      	ldr	r5, [sp, #28]
 800aace:	eba6 040a 	sub.w	r4, r6, sl
 800aad2:	42a5      	cmp	r5, r4
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	f040 8117 	bne.w	800ad0a <_dtoa_r+0x6e2>
 800aadc:	f7f5 fbd6 	bl	800028c <__adddf3>
 800aae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae4:	4604      	mov	r4, r0
 800aae6:	460d      	mov	r5, r1
 800aae8:	f7f6 f816 	bl	8000b18 <__aeabi_dcmpgt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f040 80f9 	bne.w	800ace4 <_dtoa_r+0x6bc>
 800aaf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f5 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800aafe:	b118      	cbz	r0, 800ab08 <_dtoa_r+0x4e0>
 800ab00:	f018 0f01 	tst.w	r8, #1
 800ab04:	f040 80ee 	bne.w	800ace4 <_dtoa_r+0x6bc>
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f000 fc90 	bl	800b430 <_Bfree>
 800ab10:	2300      	movs	r3, #0
 800ab12:	7033      	strb	r3, [r6, #0]
 800ab14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab16:	3701      	adds	r7, #1
 800ab18:	601f      	str	r7, [r3, #0]
 800ab1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 831d 	beq.w	800b15c <_dtoa_r+0xb34>
 800ab22:	601e      	str	r6, [r3, #0]
 800ab24:	e31a      	b.n	800b15c <_dtoa_r+0xb34>
 800ab26:	07e2      	lsls	r2, r4, #31
 800ab28:	d505      	bpl.n	800ab36 <_dtoa_r+0x50e>
 800ab2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab2e:	f7f5 fd63 	bl	80005f8 <__aeabi_dmul>
 800ab32:	3601      	adds	r6, #1
 800ab34:	2301      	movs	r3, #1
 800ab36:	1064      	asrs	r4, r4, #1
 800ab38:	3508      	adds	r5, #8
 800ab3a:	e73f      	b.n	800a9bc <_dtoa_r+0x394>
 800ab3c:	2602      	movs	r6, #2
 800ab3e:	e742      	b.n	800a9c6 <_dtoa_r+0x39e>
 800ab40:	9c07      	ldr	r4, [sp, #28]
 800ab42:	9704      	str	r7, [sp, #16]
 800ab44:	e761      	b.n	800aa0a <_dtoa_r+0x3e2>
 800ab46:	4b27      	ldr	r3, [pc, #156]	@ (800abe4 <_dtoa_r+0x5bc>)
 800ab48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab52:	4454      	add	r4, sl
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d053      	beq.n	800ac00 <_dtoa_r+0x5d8>
 800ab58:	4928      	ldr	r1, [pc, #160]	@ (800abfc <_dtoa_r+0x5d4>)
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f7f5 fe76 	bl	800084c <__aeabi_ddiv>
 800ab60:	4633      	mov	r3, r6
 800ab62:	462a      	mov	r2, r5
 800ab64:	f7f5 fb90 	bl	8000288 <__aeabi_dsub>
 800ab68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab6c:	4656      	mov	r6, sl
 800ab6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab72:	f7f5 fff1 	bl	8000b58 <__aeabi_d2iz>
 800ab76:	4605      	mov	r5, r0
 800ab78:	f7f5 fcd4 	bl	8000524 <__aeabi_i2d>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab84:	f7f5 fb80 	bl	8000288 <__aeabi_dsub>
 800ab88:	3530      	adds	r5, #48	@ 0x30
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab92:	f806 5b01 	strb.w	r5, [r6], #1
 800ab96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab9a:	f7f5 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d171      	bne.n	800ac86 <_dtoa_r+0x65e>
 800aba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba6:	4911      	ldr	r1, [pc, #68]	@ (800abec <_dtoa_r+0x5c4>)
 800aba8:	2000      	movs	r0, #0
 800abaa:	f7f5 fb6d 	bl	8000288 <__aeabi_dsub>
 800abae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abb2:	f7f5 ff93 	bl	8000adc <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f040 8095 	bne.w	800ace6 <_dtoa_r+0x6be>
 800abbc:	42a6      	cmp	r6, r4
 800abbe:	f43f af50 	beq.w	800aa62 <_dtoa_r+0x43a>
 800abc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abc6:	4b0a      	ldr	r3, [pc, #40]	@ (800abf0 <_dtoa_r+0x5c8>)
 800abc8:	2200      	movs	r2, #0
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	4b08      	ldr	r3, [pc, #32]	@ (800abf0 <_dtoa_r+0x5c8>)
 800abd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abd4:	2200      	movs	r2, #0
 800abd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abda:	f7f5 fd0d 	bl	80005f8 <__aeabi_dmul>
 800abde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abe2:	e7c4      	b.n	800ab6e <_dtoa_r+0x546>
 800abe4:	0800caf0 	.word	0x0800caf0
 800abe8:	0800cac8 	.word	0x0800cac8
 800abec:	3ff00000 	.word	0x3ff00000
 800abf0:	40240000 	.word	0x40240000
 800abf4:	401c0000 	.word	0x401c0000
 800abf8:	40140000 	.word	0x40140000
 800abfc:	3fe00000 	.word	0x3fe00000
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac0c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac0e:	4656      	mov	r6, sl
 800ac10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac14:	f7f5 ffa0 	bl	8000b58 <__aeabi_d2iz>
 800ac18:	4605      	mov	r5, r0
 800ac1a:	f7f5 fc83 	bl	8000524 <__aeabi_i2d>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac26:	f7f5 fb2f 	bl	8000288 <__aeabi_dsub>
 800ac2a:	3530      	adds	r5, #48	@ 0x30
 800ac2c:	f806 5b01 	strb.w	r5, [r6], #1
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	42a6      	cmp	r6, r4
 800ac36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac3a:	f04f 0200 	mov.w	r2, #0
 800ac3e:	d124      	bne.n	800ac8a <_dtoa_r+0x662>
 800ac40:	4bac      	ldr	r3, [pc, #688]	@ (800aef4 <_dtoa_r+0x8cc>)
 800ac42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac46:	f7f5 fb21 	bl	800028c <__adddf3>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac52:	f7f5 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d145      	bne.n	800ace6 <_dtoa_r+0x6be>
 800ac5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac5e:	49a5      	ldr	r1, [pc, #660]	@ (800aef4 <_dtoa_r+0x8cc>)
 800ac60:	2000      	movs	r0, #0
 800ac62:	f7f5 fb11 	bl	8000288 <__aeabi_dsub>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6e:	f7f5 ff35 	bl	8000adc <__aeabi_dcmplt>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f43f aef5 	beq.w	800aa62 <_dtoa_r+0x43a>
 800ac78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ac7a:	1e73      	subs	r3, r6, #1
 800ac7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac82:	2b30      	cmp	r3, #48	@ 0x30
 800ac84:	d0f8      	beq.n	800ac78 <_dtoa_r+0x650>
 800ac86:	9f04      	ldr	r7, [sp, #16]
 800ac88:	e73e      	b.n	800ab08 <_dtoa_r+0x4e0>
 800ac8a:	4b9b      	ldr	r3, [pc, #620]	@ (800aef8 <_dtoa_r+0x8d0>)
 800ac8c:	f7f5 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ac90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac94:	e7bc      	b.n	800ac10 <_dtoa_r+0x5e8>
 800ac96:	d10c      	bne.n	800acb2 <_dtoa_r+0x68a>
 800ac98:	4b98      	ldr	r3, [pc, #608]	@ (800aefc <_dtoa_r+0x8d4>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca0:	f7f5 fcaa 	bl	80005f8 <__aeabi_dmul>
 800aca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aca8:	f7f5 ff2c 	bl	8000b04 <__aeabi_dcmpge>
 800acac:	2800      	cmp	r0, #0
 800acae:	f000 8157 	beq.w	800af60 <_dtoa_r+0x938>
 800acb2:	2400      	movs	r4, #0
 800acb4:	4625      	mov	r5, r4
 800acb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acb8:	43db      	mvns	r3, r3
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	4656      	mov	r6, sl
 800acbe:	2700      	movs	r7, #0
 800acc0:	4621      	mov	r1, r4
 800acc2:	4658      	mov	r0, fp
 800acc4:	f000 fbb4 	bl	800b430 <_Bfree>
 800acc8:	2d00      	cmp	r5, #0
 800acca:	d0dc      	beq.n	800ac86 <_dtoa_r+0x65e>
 800accc:	b12f      	cbz	r7, 800acda <_dtoa_r+0x6b2>
 800acce:	42af      	cmp	r7, r5
 800acd0:	d003      	beq.n	800acda <_dtoa_r+0x6b2>
 800acd2:	4639      	mov	r1, r7
 800acd4:	4658      	mov	r0, fp
 800acd6:	f000 fbab 	bl	800b430 <_Bfree>
 800acda:	4629      	mov	r1, r5
 800acdc:	4658      	mov	r0, fp
 800acde:	f000 fba7 	bl	800b430 <_Bfree>
 800ace2:	e7d0      	b.n	800ac86 <_dtoa_r+0x65e>
 800ace4:	9704      	str	r7, [sp, #16]
 800ace6:	4633      	mov	r3, r6
 800ace8:	461e      	mov	r6, r3
 800acea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acee:	2a39      	cmp	r2, #57	@ 0x39
 800acf0:	d107      	bne.n	800ad02 <_dtoa_r+0x6da>
 800acf2:	459a      	cmp	sl, r3
 800acf4:	d1f8      	bne.n	800ace8 <_dtoa_r+0x6c0>
 800acf6:	9a04      	ldr	r2, [sp, #16]
 800acf8:	3201      	adds	r2, #1
 800acfa:	9204      	str	r2, [sp, #16]
 800acfc:	2230      	movs	r2, #48	@ 0x30
 800acfe:	f88a 2000 	strb.w	r2, [sl]
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	3201      	adds	r2, #1
 800ad06:	701a      	strb	r2, [r3, #0]
 800ad08:	e7bd      	b.n	800ac86 <_dtoa_r+0x65e>
 800ad0a:	4b7b      	ldr	r3, [pc, #492]	@ (800aef8 <_dtoa_r+0x8d0>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f7f5 fc73 	bl	80005f8 <__aeabi_dmul>
 800ad12:	2200      	movs	r2, #0
 800ad14:	2300      	movs	r3, #0
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f aebb 	beq.w	800aa9a <_dtoa_r+0x472>
 800ad24:	e6f0      	b.n	800ab08 <_dtoa_r+0x4e0>
 800ad26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	f000 80db 	beq.w	800aee4 <_dtoa_r+0x8bc>
 800ad2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad30:	2a01      	cmp	r2, #1
 800ad32:	f300 80bf 	bgt.w	800aeb4 <_dtoa_r+0x88c>
 800ad36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad38:	2a00      	cmp	r2, #0
 800ad3a:	f000 80b7 	beq.w	800aeac <_dtoa_r+0x884>
 800ad3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad44:	4646      	mov	r6, r8
 800ad46:	9a08      	ldr	r2, [sp, #32]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	441a      	add	r2, r3
 800ad4c:	4658      	mov	r0, fp
 800ad4e:	4498      	add	r8, r3
 800ad50:	9208      	str	r2, [sp, #32]
 800ad52:	f000 fc21 	bl	800b598 <__i2b>
 800ad56:	4605      	mov	r5, r0
 800ad58:	b15e      	cbz	r6, 800ad72 <_dtoa_r+0x74a>
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dd08      	ble.n	800ad72 <_dtoa_r+0x74a>
 800ad60:	42b3      	cmp	r3, r6
 800ad62:	9a08      	ldr	r2, [sp, #32]
 800ad64:	bfa8      	it	ge
 800ad66:	4633      	movge	r3, r6
 800ad68:	eba8 0803 	sub.w	r8, r8, r3
 800ad6c:	1af6      	subs	r6, r6, r3
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	9308      	str	r3, [sp, #32]
 800ad72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad74:	b1f3      	cbz	r3, 800adb4 <_dtoa_r+0x78c>
 800ad76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80b7 	beq.w	800aeec <_dtoa_r+0x8c4>
 800ad7e:	b18c      	cbz	r4, 800ada4 <_dtoa_r+0x77c>
 800ad80:	4629      	mov	r1, r5
 800ad82:	4622      	mov	r2, r4
 800ad84:	4658      	mov	r0, fp
 800ad86:	f000 fcc7 	bl	800b718 <__pow5mult>
 800ad8a:	464a      	mov	r2, r9
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	4605      	mov	r5, r0
 800ad90:	4658      	mov	r0, fp
 800ad92:	f000 fc17 	bl	800b5c4 <__multiply>
 800ad96:	4649      	mov	r1, r9
 800ad98:	9004      	str	r0, [sp, #16]
 800ad9a:	4658      	mov	r0, fp
 800ad9c:	f000 fb48 	bl	800b430 <_Bfree>
 800ada0:	9b04      	ldr	r3, [sp, #16]
 800ada2:	4699      	mov	r9, r3
 800ada4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada6:	1b1a      	subs	r2, r3, r4
 800ada8:	d004      	beq.n	800adb4 <_dtoa_r+0x78c>
 800adaa:	4649      	mov	r1, r9
 800adac:	4658      	mov	r0, fp
 800adae:	f000 fcb3 	bl	800b718 <__pow5mult>
 800adb2:	4681      	mov	r9, r0
 800adb4:	2101      	movs	r1, #1
 800adb6:	4658      	mov	r0, fp
 800adb8:	f000 fbee 	bl	800b598 <__i2b>
 800adbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adbe:	4604      	mov	r4, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 81cf 	beq.w	800b164 <_dtoa_r+0xb3c>
 800adc6:	461a      	mov	r2, r3
 800adc8:	4601      	mov	r1, r0
 800adca:	4658      	mov	r0, fp
 800adcc:	f000 fca4 	bl	800b718 <__pow5mult>
 800add0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add2:	2b01      	cmp	r3, #1
 800add4:	4604      	mov	r4, r0
 800add6:	f300 8095 	bgt.w	800af04 <_dtoa_r+0x8dc>
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f040 8087 	bne.w	800aef0 <_dtoa_r+0x8c8>
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 8089 	bne.w	800af00 <_dtoa_r+0x8d8>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adf4:	0d1b      	lsrs	r3, r3, #20
 800adf6:	051b      	lsls	r3, r3, #20
 800adf8:	b12b      	cbz	r3, 800ae06 <_dtoa_r+0x7de>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	3301      	adds	r3, #1
 800adfe:	9308      	str	r3, [sp, #32]
 800ae00:	f108 0801 	add.w	r8, r8, #1
 800ae04:	2301      	movs	r3, #1
 800ae06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 81b0 	beq.w	800b170 <_dtoa_r+0xb48>
 800ae10:	6923      	ldr	r3, [r4, #16]
 800ae12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae16:	6918      	ldr	r0, [r3, #16]
 800ae18:	f000 fb72 	bl	800b500 <__hi0bits>
 800ae1c:	f1c0 0020 	rsb	r0, r0, #32
 800ae20:	9b08      	ldr	r3, [sp, #32]
 800ae22:	4418      	add	r0, r3
 800ae24:	f010 001f 	ands.w	r0, r0, #31
 800ae28:	d077      	beq.n	800af1a <_dtoa_r+0x8f2>
 800ae2a:	f1c0 0320 	rsb	r3, r0, #32
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	dd6b      	ble.n	800af0a <_dtoa_r+0x8e2>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	f1c0 001c 	rsb	r0, r0, #28
 800ae38:	4403      	add	r3, r0
 800ae3a:	4480      	add	r8, r0
 800ae3c:	4406      	add	r6, r0
 800ae3e:	9308      	str	r3, [sp, #32]
 800ae40:	f1b8 0f00 	cmp.w	r8, #0
 800ae44:	dd05      	ble.n	800ae52 <_dtoa_r+0x82a>
 800ae46:	4649      	mov	r1, r9
 800ae48:	4642      	mov	r2, r8
 800ae4a:	4658      	mov	r0, fp
 800ae4c:	f000 fcbe 	bl	800b7cc <__lshift>
 800ae50:	4681      	mov	r9, r0
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd05      	ble.n	800ae64 <_dtoa_r+0x83c>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	f000 fcb5 	bl	800b7cc <__lshift>
 800ae62:	4604      	mov	r4, r0
 800ae64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d059      	beq.n	800af1e <_dtoa_r+0x8f6>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f000 fd19 	bl	800b8a4 <__mcmp>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	da53      	bge.n	800af1e <_dtoa_r+0x8f6>
 800ae76:	1e7b      	subs	r3, r7, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	220a      	movs	r2, #10
 800ae80:	4658      	mov	r0, fp
 800ae82:	f000 faf7 	bl	800b474 <__multadd>
 800ae86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae88:	4681      	mov	r9, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 8172 	beq.w	800b174 <_dtoa_r+0xb4c>
 800ae90:	2300      	movs	r3, #0
 800ae92:	4629      	mov	r1, r5
 800ae94:	220a      	movs	r2, #10
 800ae96:	4658      	mov	r0, fp
 800ae98:	f000 faec 	bl	800b474 <__multadd>
 800ae9c:	9b00      	ldr	r3, [sp, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	4605      	mov	r5, r0
 800aea2:	dc67      	bgt.n	800af74 <_dtoa_r+0x94c>
 800aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	dc41      	bgt.n	800af2e <_dtoa_r+0x906>
 800aeaa:	e063      	b.n	800af74 <_dtoa_r+0x94c>
 800aeac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aeae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aeb2:	e746      	b.n	800ad42 <_dtoa_r+0x71a>
 800aeb4:	9b07      	ldr	r3, [sp, #28]
 800aeb6:	1e5c      	subs	r4, r3, #1
 800aeb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeba:	42a3      	cmp	r3, r4
 800aebc:	bfbf      	itttt	lt
 800aebe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aec0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aec2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aec4:	1ae3      	sublt	r3, r4, r3
 800aec6:	bfb4      	ite	lt
 800aec8:	18d2      	addlt	r2, r2, r3
 800aeca:	1b1c      	subge	r4, r3, r4
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	bfbc      	itt	lt
 800aed0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aed2:	2400      	movlt	r4, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bfb5      	itete	lt
 800aed8:	eba8 0603 	sublt.w	r6, r8, r3
 800aedc:	9b07      	ldrge	r3, [sp, #28]
 800aede:	2300      	movlt	r3, #0
 800aee0:	4646      	movge	r6, r8
 800aee2:	e730      	b.n	800ad46 <_dtoa_r+0x71e>
 800aee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aee6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aee8:	4646      	mov	r6, r8
 800aeea:	e735      	b.n	800ad58 <_dtoa_r+0x730>
 800aeec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aeee:	e75c      	b.n	800adaa <_dtoa_r+0x782>
 800aef0:	2300      	movs	r3, #0
 800aef2:	e788      	b.n	800ae06 <_dtoa_r+0x7de>
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	40140000 	.word	0x40140000
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	e780      	b.n	800ae06 <_dtoa_r+0x7de>
 800af04:	2300      	movs	r3, #0
 800af06:	930a      	str	r3, [sp, #40]	@ 0x28
 800af08:	e782      	b.n	800ae10 <_dtoa_r+0x7e8>
 800af0a:	d099      	beq.n	800ae40 <_dtoa_r+0x818>
 800af0c:	9a08      	ldr	r2, [sp, #32]
 800af0e:	331c      	adds	r3, #28
 800af10:	441a      	add	r2, r3
 800af12:	4498      	add	r8, r3
 800af14:	441e      	add	r6, r3
 800af16:	9208      	str	r2, [sp, #32]
 800af18:	e792      	b.n	800ae40 <_dtoa_r+0x818>
 800af1a:	4603      	mov	r3, r0
 800af1c:	e7f6      	b.n	800af0c <_dtoa_r+0x8e4>
 800af1e:	9b07      	ldr	r3, [sp, #28]
 800af20:	9704      	str	r7, [sp, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	dc20      	bgt.n	800af68 <_dtoa_r+0x940>
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	dd1e      	ble.n	800af6c <_dtoa_r+0x944>
 800af2e:	9b00      	ldr	r3, [sp, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f47f aec0 	bne.w	800acb6 <_dtoa_r+0x68e>
 800af36:	4621      	mov	r1, r4
 800af38:	2205      	movs	r2, #5
 800af3a:	4658      	mov	r0, fp
 800af3c:	f000 fa9a 	bl	800b474 <__multadd>
 800af40:	4601      	mov	r1, r0
 800af42:	4604      	mov	r4, r0
 800af44:	4648      	mov	r0, r9
 800af46:	f000 fcad 	bl	800b8a4 <__mcmp>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f77f aeb3 	ble.w	800acb6 <_dtoa_r+0x68e>
 800af50:	4656      	mov	r6, sl
 800af52:	2331      	movs	r3, #49	@ 0x31
 800af54:	f806 3b01 	strb.w	r3, [r6], #1
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	3301      	adds	r3, #1
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	e6ae      	b.n	800acbe <_dtoa_r+0x696>
 800af60:	9c07      	ldr	r4, [sp, #28]
 800af62:	9704      	str	r7, [sp, #16]
 800af64:	4625      	mov	r5, r4
 800af66:	e7f3      	b.n	800af50 <_dtoa_r+0x928>
 800af68:	9b07      	ldr	r3, [sp, #28]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 8104 	beq.w	800b17c <_dtoa_r+0xb54>
 800af74:	2e00      	cmp	r6, #0
 800af76:	dd05      	ble.n	800af84 <_dtoa_r+0x95c>
 800af78:	4629      	mov	r1, r5
 800af7a:	4632      	mov	r2, r6
 800af7c:	4658      	mov	r0, fp
 800af7e:	f000 fc25 	bl	800b7cc <__lshift>
 800af82:	4605      	mov	r5, r0
 800af84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d05a      	beq.n	800b040 <_dtoa_r+0xa18>
 800af8a:	6869      	ldr	r1, [r5, #4]
 800af8c:	4658      	mov	r0, fp
 800af8e:	f000 fa0f 	bl	800b3b0 <_Balloc>
 800af92:	4606      	mov	r6, r0
 800af94:	b928      	cbnz	r0, 800afa2 <_dtoa_r+0x97a>
 800af96:	4b84      	ldr	r3, [pc, #528]	@ (800b1a8 <_dtoa_r+0xb80>)
 800af98:	4602      	mov	r2, r0
 800af9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af9e:	f7ff bb5a 	b.w	800a656 <_dtoa_r+0x2e>
 800afa2:	692a      	ldr	r2, [r5, #16]
 800afa4:	3202      	adds	r2, #2
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	f105 010c 	add.w	r1, r5, #12
 800afac:	300c      	adds	r0, #12
 800afae:	f7ff faa2 	bl	800a4f6 <memcpy>
 800afb2:	2201      	movs	r2, #1
 800afb4:	4631      	mov	r1, r6
 800afb6:	4658      	mov	r0, fp
 800afb8:	f000 fc08 	bl	800b7cc <__lshift>
 800afbc:	f10a 0301 	add.w	r3, sl, #1
 800afc0:	9307      	str	r3, [sp, #28]
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	4453      	add	r3, sl
 800afc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	462f      	mov	r7, r5
 800afd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afd2:	4605      	mov	r5, r0
 800afd4:	9b07      	ldr	r3, [sp, #28]
 800afd6:	4621      	mov	r1, r4
 800afd8:	3b01      	subs	r3, #1
 800afda:	4648      	mov	r0, r9
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	f7ff fa98 	bl	800a512 <quorem>
 800afe2:	4639      	mov	r1, r7
 800afe4:	9002      	str	r0, [sp, #8]
 800afe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afea:	4648      	mov	r0, r9
 800afec:	f000 fc5a 	bl	800b8a4 <__mcmp>
 800aff0:	462a      	mov	r2, r5
 800aff2:	9008      	str	r0, [sp, #32]
 800aff4:	4621      	mov	r1, r4
 800aff6:	4658      	mov	r0, fp
 800aff8:	f000 fc70 	bl	800b8dc <__mdiff>
 800affc:	68c2      	ldr	r2, [r0, #12]
 800affe:	4606      	mov	r6, r0
 800b000:	bb02      	cbnz	r2, 800b044 <_dtoa_r+0xa1c>
 800b002:	4601      	mov	r1, r0
 800b004:	4648      	mov	r0, r9
 800b006:	f000 fc4d 	bl	800b8a4 <__mcmp>
 800b00a:	4602      	mov	r2, r0
 800b00c:	4631      	mov	r1, r6
 800b00e:	4658      	mov	r0, fp
 800b010:	920e      	str	r2, [sp, #56]	@ 0x38
 800b012:	f000 fa0d 	bl	800b430 <_Bfree>
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b01a:	9e07      	ldr	r6, [sp, #28]
 800b01c:	ea43 0102 	orr.w	r1, r3, r2
 800b020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b022:	4319      	orrs	r1, r3
 800b024:	d110      	bne.n	800b048 <_dtoa_r+0xa20>
 800b026:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b02a:	d029      	beq.n	800b080 <_dtoa_r+0xa58>
 800b02c:	9b08      	ldr	r3, [sp, #32]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dd02      	ble.n	800b038 <_dtoa_r+0xa10>
 800b032:	9b02      	ldr	r3, [sp, #8]
 800b034:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	f883 8000 	strb.w	r8, [r3]
 800b03e:	e63f      	b.n	800acc0 <_dtoa_r+0x698>
 800b040:	4628      	mov	r0, r5
 800b042:	e7bb      	b.n	800afbc <_dtoa_r+0x994>
 800b044:	2201      	movs	r2, #1
 800b046:	e7e1      	b.n	800b00c <_dtoa_r+0x9e4>
 800b048:	9b08      	ldr	r3, [sp, #32]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	db04      	blt.n	800b058 <_dtoa_r+0xa30>
 800b04e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b050:	430b      	orrs	r3, r1
 800b052:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b054:	430b      	orrs	r3, r1
 800b056:	d120      	bne.n	800b09a <_dtoa_r+0xa72>
 800b058:	2a00      	cmp	r2, #0
 800b05a:	dded      	ble.n	800b038 <_dtoa_r+0xa10>
 800b05c:	4649      	mov	r1, r9
 800b05e:	2201      	movs	r2, #1
 800b060:	4658      	mov	r0, fp
 800b062:	f000 fbb3 	bl	800b7cc <__lshift>
 800b066:	4621      	mov	r1, r4
 800b068:	4681      	mov	r9, r0
 800b06a:	f000 fc1b 	bl	800b8a4 <__mcmp>
 800b06e:	2800      	cmp	r0, #0
 800b070:	dc03      	bgt.n	800b07a <_dtoa_r+0xa52>
 800b072:	d1e1      	bne.n	800b038 <_dtoa_r+0xa10>
 800b074:	f018 0f01 	tst.w	r8, #1
 800b078:	d0de      	beq.n	800b038 <_dtoa_r+0xa10>
 800b07a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b07e:	d1d8      	bne.n	800b032 <_dtoa_r+0xa0a>
 800b080:	9a00      	ldr	r2, [sp, #0]
 800b082:	2339      	movs	r3, #57	@ 0x39
 800b084:	7013      	strb	r3, [r2, #0]
 800b086:	4633      	mov	r3, r6
 800b088:	461e      	mov	r6, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b090:	2a39      	cmp	r2, #57	@ 0x39
 800b092:	d052      	beq.n	800b13a <_dtoa_r+0xb12>
 800b094:	3201      	adds	r2, #1
 800b096:	701a      	strb	r2, [r3, #0]
 800b098:	e612      	b.n	800acc0 <_dtoa_r+0x698>
 800b09a:	2a00      	cmp	r2, #0
 800b09c:	dd07      	ble.n	800b0ae <_dtoa_r+0xa86>
 800b09e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0a2:	d0ed      	beq.n	800b080 <_dtoa_r+0xa58>
 800b0a4:	9a00      	ldr	r2, [sp, #0]
 800b0a6:	f108 0301 	add.w	r3, r8, #1
 800b0aa:	7013      	strb	r3, [r2, #0]
 800b0ac:	e608      	b.n	800acc0 <_dtoa_r+0x698>
 800b0ae:	9b07      	ldr	r3, [sp, #28]
 800b0b0:	9a07      	ldr	r2, [sp, #28]
 800b0b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b0b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d028      	beq.n	800b10e <_dtoa_r+0xae6>
 800b0bc:	4649      	mov	r1, r9
 800b0be:	2300      	movs	r3, #0
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 f9d6 	bl	800b474 <__multadd>
 800b0c8:	42af      	cmp	r7, r5
 800b0ca:	4681      	mov	r9, r0
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	f04f 020a 	mov.w	r2, #10
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4658      	mov	r0, fp
 800b0d8:	d107      	bne.n	800b0ea <_dtoa_r+0xac2>
 800b0da:	f000 f9cb 	bl	800b474 <__multadd>
 800b0de:	4607      	mov	r7, r0
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	9b07      	ldr	r3, [sp, #28]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	9307      	str	r3, [sp, #28]
 800b0e8:	e774      	b.n	800afd4 <_dtoa_r+0x9ac>
 800b0ea:	f000 f9c3 	bl	800b474 <__multadd>
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	f000 f9bc 	bl	800b474 <__multadd>
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	e7f0      	b.n	800b0e2 <_dtoa_r+0xaba>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfcc      	ite	gt
 800b106:	461e      	movgt	r6, r3
 800b108:	2601      	movle	r6, #1
 800b10a:	4456      	add	r6, sl
 800b10c:	2700      	movs	r7, #0
 800b10e:	4649      	mov	r1, r9
 800b110:	2201      	movs	r2, #1
 800b112:	4658      	mov	r0, fp
 800b114:	f000 fb5a 	bl	800b7cc <__lshift>
 800b118:	4621      	mov	r1, r4
 800b11a:	4681      	mov	r9, r0
 800b11c:	f000 fbc2 	bl	800b8a4 <__mcmp>
 800b120:	2800      	cmp	r0, #0
 800b122:	dcb0      	bgt.n	800b086 <_dtoa_r+0xa5e>
 800b124:	d102      	bne.n	800b12c <_dtoa_r+0xb04>
 800b126:	f018 0f01 	tst.w	r8, #1
 800b12a:	d1ac      	bne.n	800b086 <_dtoa_r+0xa5e>
 800b12c:	4633      	mov	r3, r6
 800b12e:	461e      	mov	r6, r3
 800b130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b134:	2a30      	cmp	r2, #48	@ 0x30
 800b136:	d0fa      	beq.n	800b12e <_dtoa_r+0xb06>
 800b138:	e5c2      	b.n	800acc0 <_dtoa_r+0x698>
 800b13a:	459a      	cmp	sl, r3
 800b13c:	d1a4      	bne.n	800b088 <_dtoa_r+0xa60>
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	3301      	adds	r3, #1
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	2331      	movs	r3, #49	@ 0x31
 800b146:	f88a 3000 	strb.w	r3, [sl]
 800b14a:	e5b9      	b.n	800acc0 <_dtoa_r+0x698>
 800b14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b14e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b1ac <_dtoa_r+0xb84>
 800b152:	b11b      	cbz	r3, 800b15c <_dtoa_r+0xb34>
 800b154:	f10a 0308 	add.w	r3, sl, #8
 800b158:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	4650      	mov	r0, sl
 800b15e:	b019      	add	sp, #100	@ 0x64
 800b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b166:	2b01      	cmp	r3, #1
 800b168:	f77f ae37 	ble.w	800adda <_dtoa_r+0x7b2>
 800b16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b170:	2001      	movs	r0, #1
 800b172:	e655      	b.n	800ae20 <_dtoa_r+0x7f8>
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f77f aed6 	ble.w	800af28 <_dtoa_r+0x900>
 800b17c:	4656      	mov	r6, sl
 800b17e:	4621      	mov	r1, r4
 800b180:	4648      	mov	r0, r9
 800b182:	f7ff f9c6 	bl	800a512 <quorem>
 800b186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b18a:	f806 8b01 	strb.w	r8, [r6], #1
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	eba6 020a 	sub.w	r2, r6, sl
 800b194:	4293      	cmp	r3, r2
 800b196:	ddb3      	ble.n	800b100 <_dtoa_r+0xad8>
 800b198:	4649      	mov	r1, r9
 800b19a:	2300      	movs	r3, #0
 800b19c:	220a      	movs	r2, #10
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 f968 	bl	800b474 <__multadd>
 800b1a4:	4681      	mov	r9, r0
 800b1a6:	e7ea      	b.n	800b17e <_dtoa_r+0xb56>
 800b1a8:	0800ca4c 	.word	0x0800ca4c
 800b1ac:	0800c9d0 	.word	0x0800c9d0

0800b1b0 <_free_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d041      	beq.n	800b23c <_free_r+0x8c>
 800b1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1bc:	1f0c      	subs	r4, r1, #4
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfb8      	it	lt
 800b1c2:	18e4      	addlt	r4, r4, r3
 800b1c4:	f000 f8e8 	bl	800b398 <__malloc_lock>
 800b1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b240 <_free_r+0x90>)
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	b933      	cbnz	r3, 800b1dc <_free_r+0x2c>
 800b1ce:	6063      	str	r3, [r4, #4]
 800b1d0:	6014      	str	r4, [r2, #0]
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d8:	f000 b8e4 	b.w	800b3a4 <__malloc_unlock>
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d908      	bls.n	800b1f2 <_free_r+0x42>
 800b1e0:	6820      	ldr	r0, [r4, #0]
 800b1e2:	1821      	adds	r1, r4, r0
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf01      	itttt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	1809      	addeq	r1, r1, r0
 800b1ee:	6021      	streq	r1, [r4, #0]
 800b1f0:	e7ed      	b.n	800b1ce <_free_r+0x1e>
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	b10b      	cbz	r3, 800b1fc <_free_r+0x4c>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d9fa      	bls.n	800b1f2 <_free_r+0x42>
 800b1fc:	6811      	ldr	r1, [r2, #0]
 800b1fe:	1850      	adds	r0, r2, r1
 800b200:	42a0      	cmp	r0, r4
 800b202:	d10b      	bne.n	800b21c <_free_r+0x6c>
 800b204:	6820      	ldr	r0, [r4, #0]
 800b206:	4401      	add	r1, r0
 800b208:	1850      	adds	r0, r2, r1
 800b20a:	4283      	cmp	r3, r0
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	d1e0      	bne.n	800b1d2 <_free_r+0x22>
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	6053      	str	r3, [r2, #4]
 800b216:	4408      	add	r0, r1
 800b218:	6010      	str	r0, [r2, #0]
 800b21a:	e7da      	b.n	800b1d2 <_free_r+0x22>
 800b21c:	d902      	bls.n	800b224 <_free_r+0x74>
 800b21e:	230c      	movs	r3, #12
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	e7d6      	b.n	800b1d2 <_free_r+0x22>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	1821      	adds	r1, r4, r0
 800b228:	428b      	cmp	r3, r1
 800b22a:	bf04      	itt	eq
 800b22c:	6819      	ldreq	r1, [r3, #0]
 800b22e:	685b      	ldreq	r3, [r3, #4]
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	bf04      	itt	eq
 800b234:	1809      	addeq	r1, r1, r0
 800b236:	6021      	streq	r1, [r4, #0]
 800b238:	6054      	str	r4, [r2, #4]
 800b23a:	e7ca      	b.n	800b1d2 <_free_r+0x22>
 800b23c:	bd38      	pop	{r3, r4, r5, pc}
 800b23e:	bf00      	nop
 800b240:	20001ef0 	.word	0x20001ef0

0800b244 <malloc>:
 800b244:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <malloc+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f000 b825 	b.w	800b298 <_malloc_r>
 800b24e:	bf00      	nop
 800b250:	2000001c 	.word	0x2000001c

0800b254 <sbrk_aligned>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	4e0f      	ldr	r6, [pc, #60]	@ (800b294 <sbrk_aligned+0x40>)
 800b258:	460c      	mov	r4, r1
 800b25a:	6831      	ldr	r1, [r6, #0]
 800b25c:	4605      	mov	r5, r0
 800b25e:	b911      	cbnz	r1, 800b266 <sbrk_aligned+0x12>
 800b260:	f000 fe9a 	bl	800bf98 <_sbrk_r>
 800b264:	6030      	str	r0, [r6, #0]
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f000 fe95 	bl	800bf98 <_sbrk_r>
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	d103      	bne.n	800b27a <sbrk_aligned+0x26>
 800b272:	f04f 34ff 	mov.w	r4, #4294967295
 800b276:	4620      	mov	r0, r4
 800b278:	bd70      	pop	{r4, r5, r6, pc}
 800b27a:	1cc4      	adds	r4, r0, #3
 800b27c:	f024 0403 	bic.w	r4, r4, #3
 800b280:	42a0      	cmp	r0, r4
 800b282:	d0f8      	beq.n	800b276 <sbrk_aligned+0x22>
 800b284:	1a21      	subs	r1, r4, r0
 800b286:	4628      	mov	r0, r5
 800b288:	f000 fe86 	bl	800bf98 <_sbrk_r>
 800b28c:	3001      	adds	r0, #1
 800b28e:	d1f2      	bne.n	800b276 <sbrk_aligned+0x22>
 800b290:	e7ef      	b.n	800b272 <sbrk_aligned+0x1e>
 800b292:	bf00      	nop
 800b294:	20001eec 	.word	0x20001eec

0800b298 <_malloc_r>:
 800b298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b29c:	1ccd      	adds	r5, r1, #3
 800b29e:	f025 0503 	bic.w	r5, r5, #3
 800b2a2:	3508      	adds	r5, #8
 800b2a4:	2d0c      	cmp	r5, #12
 800b2a6:	bf38      	it	cc
 800b2a8:	250c      	movcc	r5, #12
 800b2aa:	2d00      	cmp	r5, #0
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	db01      	blt.n	800b2b4 <_malloc_r+0x1c>
 800b2b0:	42a9      	cmp	r1, r5
 800b2b2:	d904      	bls.n	800b2be <_malloc_r+0x26>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b394 <_malloc_r+0xfc>
 800b2c2:	f000 f869 	bl	800b398 <__malloc_lock>
 800b2c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ca:	461c      	mov	r4, r3
 800b2cc:	bb44      	cbnz	r4, 800b320 <_malloc_r+0x88>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff ffbf 	bl	800b254 <sbrk_aligned>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	4604      	mov	r4, r0
 800b2da:	d158      	bne.n	800b38e <_malloc_r+0xf6>
 800b2dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b2e0:	4627      	mov	r7, r4
 800b2e2:	2f00      	cmp	r7, #0
 800b2e4:	d143      	bne.n	800b36e <_malloc_r+0xd6>
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d04b      	beq.n	800b382 <_malloc_r+0xea>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	eb04 0903 	add.w	r9, r4, r3
 800b2f4:	f000 fe50 	bl	800bf98 <_sbrk_r>
 800b2f8:	4581      	cmp	r9, r0
 800b2fa:	d142      	bne.n	800b382 <_malloc_r+0xea>
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	1a6d      	subs	r5, r5, r1
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ffa6 	bl	800b254 <sbrk_aligned>
 800b308:	3001      	adds	r0, #1
 800b30a:	d03a      	beq.n	800b382 <_malloc_r+0xea>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	442b      	add	r3, r5
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	f8d8 3000 	ldr.w	r3, [r8]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	bb62      	cbnz	r2, 800b374 <_malloc_r+0xdc>
 800b31a:	f8c8 7000 	str.w	r7, [r8]
 800b31e:	e00f      	b.n	800b340 <_malloc_r+0xa8>
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	1b52      	subs	r2, r2, r5
 800b324:	d420      	bmi.n	800b368 <_malloc_r+0xd0>
 800b326:	2a0b      	cmp	r2, #11
 800b328:	d917      	bls.n	800b35a <_malloc_r+0xc2>
 800b32a:	1961      	adds	r1, r4, r5
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	bf18      	it	ne
 800b332:	6059      	strne	r1, [r3, #4]
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	bf08      	it	eq
 800b338:	f8c8 1000 	streq.w	r1, [r8]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f82f 	bl	800b3a4 <__malloc_unlock>
 800b346:	f104 000b 	add.w	r0, r4, #11
 800b34a:	1d23      	adds	r3, r4, #4
 800b34c:	f020 0007 	bic.w	r0, r0, #7
 800b350:	1ac2      	subs	r2, r0, r3
 800b352:	bf1c      	itt	ne
 800b354:	1a1b      	subne	r3, r3, r0
 800b356:	50a3      	strne	r3, [r4, r2]
 800b358:	e7af      	b.n	800b2ba <_malloc_r+0x22>
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	bf0c      	ite	eq
 800b360:	f8c8 2000 	streq.w	r2, [r8]
 800b364:	605a      	strne	r2, [r3, #4]
 800b366:	e7eb      	b.n	800b340 <_malloc_r+0xa8>
 800b368:	4623      	mov	r3, r4
 800b36a:	6864      	ldr	r4, [r4, #4]
 800b36c:	e7ae      	b.n	800b2cc <_malloc_r+0x34>
 800b36e:	463c      	mov	r4, r7
 800b370:	687f      	ldr	r7, [r7, #4]
 800b372:	e7b6      	b.n	800b2e2 <_malloc_r+0x4a>
 800b374:	461a      	mov	r2, r3
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d1fb      	bne.n	800b374 <_malloc_r+0xdc>
 800b37c:	2300      	movs	r3, #0
 800b37e:	6053      	str	r3, [r2, #4]
 800b380:	e7de      	b.n	800b340 <_malloc_r+0xa8>
 800b382:	230c      	movs	r3, #12
 800b384:	6033      	str	r3, [r6, #0]
 800b386:	4630      	mov	r0, r6
 800b388:	f000 f80c 	bl	800b3a4 <__malloc_unlock>
 800b38c:	e794      	b.n	800b2b8 <_malloc_r+0x20>
 800b38e:	6005      	str	r5, [r0, #0]
 800b390:	e7d6      	b.n	800b340 <_malloc_r+0xa8>
 800b392:	bf00      	nop
 800b394:	20001ef0 	.word	0x20001ef0

0800b398 <__malloc_lock>:
 800b398:	4801      	ldr	r0, [pc, #4]	@ (800b3a0 <__malloc_lock+0x8>)
 800b39a:	f7ff b8aa 	b.w	800a4f2 <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	20001ee8 	.word	0x20001ee8

0800b3a4 <__malloc_unlock>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	@ (800b3ac <__malloc_unlock+0x8>)
 800b3a6:	f7ff b8a5 	b.w	800a4f4 <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20001ee8 	.word	0x20001ee8

0800b3b0 <_Balloc>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	69c6      	ldr	r6, [r0, #28]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	b976      	cbnz	r6, 800b3d8 <_Balloc+0x28>
 800b3ba:	2010      	movs	r0, #16
 800b3bc:	f7ff ff42 	bl	800b244 <malloc>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	61e0      	str	r0, [r4, #28]
 800b3c4:	b920      	cbnz	r0, 800b3d0 <_Balloc+0x20>
 800b3c6:	4b18      	ldr	r3, [pc, #96]	@ (800b428 <_Balloc+0x78>)
 800b3c8:	4818      	ldr	r0, [pc, #96]	@ (800b42c <_Balloc+0x7c>)
 800b3ca:	216b      	movs	r1, #107	@ 0x6b
 800b3cc:	f000 fdf4 	bl	800bfb8 <__assert_func>
 800b3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d4:	6006      	str	r6, [r0, #0]
 800b3d6:	60c6      	str	r6, [r0, #12]
 800b3d8:	69e6      	ldr	r6, [r4, #28]
 800b3da:	68f3      	ldr	r3, [r6, #12]
 800b3dc:	b183      	cbz	r3, 800b400 <_Balloc+0x50>
 800b3de:	69e3      	ldr	r3, [r4, #28]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3e6:	b9b8      	cbnz	r0, 800b418 <_Balloc+0x68>
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ee:	1d72      	adds	r2, r6, #5
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 fdfe 	bl	800bff4 <_calloc_r>
 800b3f8:	b160      	cbz	r0, 800b414 <_Balloc+0x64>
 800b3fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3fe:	e00e      	b.n	800b41e <_Balloc+0x6e>
 800b400:	2221      	movs	r2, #33	@ 0x21
 800b402:	2104      	movs	r1, #4
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fdf5 	bl	800bff4 <_calloc_r>
 800b40a:	69e3      	ldr	r3, [r4, #28]
 800b40c:	60f0      	str	r0, [r6, #12]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e4      	bne.n	800b3de <_Balloc+0x2e>
 800b414:	2000      	movs	r0, #0
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	6802      	ldr	r2, [r0, #0]
 800b41a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b41e:	2300      	movs	r3, #0
 800b420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b424:	e7f7      	b.n	800b416 <_Balloc+0x66>
 800b426:	bf00      	nop
 800b428:	0800c9dd 	.word	0x0800c9dd
 800b42c:	0800ca5d 	.word	0x0800ca5d

0800b430 <_Bfree>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	69c6      	ldr	r6, [r0, #28]
 800b434:	4605      	mov	r5, r0
 800b436:	460c      	mov	r4, r1
 800b438:	b976      	cbnz	r6, 800b458 <_Bfree+0x28>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f7ff ff02 	bl	800b244 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	61e8      	str	r0, [r5, #28]
 800b444:	b920      	cbnz	r0, 800b450 <_Bfree+0x20>
 800b446:	4b09      	ldr	r3, [pc, #36]	@ (800b46c <_Bfree+0x3c>)
 800b448:	4809      	ldr	r0, [pc, #36]	@ (800b470 <_Bfree+0x40>)
 800b44a:	218f      	movs	r1, #143	@ 0x8f
 800b44c:	f000 fdb4 	bl	800bfb8 <__assert_func>
 800b450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b454:	6006      	str	r6, [r0, #0]
 800b456:	60c6      	str	r6, [r0, #12]
 800b458:	b13c      	cbz	r4, 800b46a <_Bfree+0x3a>
 800b45a:	69eb      	ldr	r3, [r5, #28]
 800b45c:	6862      	ldr	r2, [r4, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b464:	6021      	str	r1, [r4, #0]
 800b466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b46a:	bd70      	pop	{r4, r5, r6, pc}
 800b46c:	0800c9dd 	.word	0x0800c9dd
 800b470:	0800ca5d 	.word	0x0800ca5d

0800b474 <__multadd>:
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b478:	690d      	ldr	r5, [r1, #16]
 800b47a:	4607      	mov	r7, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	461e      	mov	r6, r3
 800b480:	f101 0c14 	add.w	ip, r1, #20
 800b484:	2000      	movs	r0, #0
 800b486:	f8dc 3000 	ldr.w	r3, [ip]
 800b48a:	b299      	uxth	r1, r3
 800b48c:	fb02 6101 	mla	r1, r2, r1, r6
 800b490:	0c1e      	lsrs	r6, r3, #16
 800b492:	0c0b      	lsrs	r3, r1, #16
 800b494:	fb02 3306 	mla	r3, r2, r6, r3
 800b498:	b289      	uxth	r1, r1
 800b49a:	3001      	adds	r0, #1
 800b49c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4a0:	4285      	cmp	r5, r0
 800b4a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4aa:	dcec      	bgt.n	800b486 <__multadd+0x12>
 800b4ac:	b30e      	cbz	r6, 800b4f2 <__multadd+0x7e>
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc19      	bgt.n	800b4e8 <__multadd+0x74>
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	f7ff ff79 	bl	800b3b0 <_Balloc>
 800b4be:	4680      	mov	r8, r0
 800b4c0:	b928      	cbnz	r0, 800b4ce <__multadd+0x5a>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f8 <__multadd+0x84>)
 800b4c6:	480d      	ldr	r0, [pc, #52]	@ (800b4fc <__multadd+0x88>)
 800b4c8:	21ba      	movs	r1, #186	@ 0xba
 800b4ca:	f000 fd75 	bl	800bfb8 <__assert_func>
 800b4ce:	6922      	ldr	r2, [r4, #16]
 800b4d0:	3202      	adds	r2, #2
 800b4d2:	f104 010c 	add.w	r1, r4, #12
 800b4d6:	0092      	lsls	r2, r2, #2
 800b4d8:	300c      	adds	r0, #12
 800b4da:	f7ff f80c 	bl	800a4f6 <memcpy>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7ff ffa5 	bl	800b430 <_Bfree>
 800b4e6:	4644      	mov	r4, r8
 800b4e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	615e      	str	r6, [r3, #20]
 800b4f0:	6125      	str	r5, [r4, #16]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	0800ca4c 	.word	0x0800ca4c
 800b4fc:	0800ca5d 	.word	0x0800ca5d

0800b500 <__hi0bits>:
 800b500:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b504:	4603      	mov	r3, r0
 800b506:	bf36      	itet	cc
 800b508:	0403      	lslcc	r3, r0, #16
 800b50a:	2000      	movcs	r0, #0
 800b50c:	2010      	movcc	r0, #16
 800b50e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b512:	bf3c      	itt	cc
 800b514:	021b      	lslcc	r3, r3, #8
 800b516:	3008      	addcc	r0, #8
 800b518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b51c:	bf3c      	itt	cc
 800b51e:	011b      	lslcc	r3, r3, #4
 800b520:	3004      	addcc	r0, #4
 800b522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b526:	bf3c      	itt	cc
 800b528:	009b      	lslcc	r3, r3, #2
 800b52a:	3002      	addcc	r0, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db05      	blt.n	800b53c <__hi0bits+0x3c>
 800b530:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b534:	f100 0001 	add.w	r0, r0, #1
 800b538:	bf08      	it	eq
 800b53a:	2020      	moveq	r0, #32
 800b53c:	4770      	bx	lr

0800b53e <__lo0bits>:
 800b53e:	6803      	ldr	r3, [r0, #0]
 800b540:	4602      	mov	r2, r0
 800b542:	f013 0007 	ands.w	r0, r3, #7
 800b546:	d00b      	beq.n	800b560 <__lo0bits+0x22>
 800b548:	07d9      	lsls	r1, r3, #31
 800b54a:	d421      	bmi.n	800b590 <__lo0bits+0x52>
 800b54c:	0798      	lsls	r0, r3, #30
 800b54e:	bf49      	itett	mi
 800b550:	085b      	lsrmi	r3, r3, #1
 800b552:	089b      	lsrpl	r3, r3, #2
 800b554:	2001      	movmi	r0, #1
 800b556:	6013      	strmi	r3, [r2, #0]
 800b558:	bf5c      	itt	pl
 800b55a:	6013      	strpl	r3, [r2, #0]
 800b55c:	2002      	movpl	r0, #2
 800b55e:	4770      	bx	lr
 800b560:	b299      	uxth	r1, r3
 800b562:	b909      	cbnz	r1, 800b568 <__lo0bits+0x2a>
 800b564:	0c1b      	lsrs	r3, r3, #16
 800b566:	2010      	movs	r0, #16
 800b568:	b2d9      	uxtb	r1, r3
 800b56a:	b909      	cbnz	r1, 800b570 <__lo0bits+0x32>
 800b56c:	3008      	adds	r0, #8
 800b56e:	0a1b      	lsrs	r3, r3, #8
 800b570:	0719      	lsls	r1, r3, #28
 800b572:	bf04      	itt	eq
 800b574:	091b      	lsreq	r3, r3, #4
 800b576:	3004      	addeq	r0, #4
 800b578:	0799      	lsls	r1, r3, #30
 800b57a:	bf04      	itt	eq
 800b57c:	089b      	lsreq	r3, r3, #2
 800b57e:	3002      	addeq	r0, #2
 800b580:	07d9      	lsls	r1, r3, #31
 800b582:	d403      	bmi.n	800b58c <__lo0bits+0x4e>
 800b584:	085b      	lsrs	r3, r3, #1
 800b586:	f100 0001 	add.w	r0, r0, #1
 800b58a:	d003      	beq.n	800b594 <__lo0bits+0x56>
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	4770      	bx	lr
 800b590:	2000      	movs	r0, #0
 800b592:	4770      	bx	lr
 800b594:	2020      	movs	r0, #32
 800b596:	4770      	bx	lr

0800b598 <__i2b>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	460c      	mov	r4, r1
 800b59c:	2101      	movs	r1, #1
 800b59e:	f7ff ff07 	bl	800b3b0 <_Balloc>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	b928      	cbnz	r0, 800b5b2 <__i2b+0x1a>
 800b5a6:	4b05      	ldr	r3, [pc, #20]	@ (800b5bc <__i2b+0x24>)
 800b5a8:	4805      	ldr	r0, [pc, #20]	@ (800b5c0 <__i2b+0x28>)
 800b5aa:	f240 1145 	movw	r1, #325	@ 0x145
 800b5ae:	f000 fd03 	bl	800bfb8 <__assert_func>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	6144      	str	r4, [r0, #20]
 800b5b6:	6103      	str	r3, [r0, #16]
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800ca4c 	.word	0x0800ca4c
 800b5c0:	0800ca5d 	.word	0x0800ca5d

0800b5c4 <__multiply>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	690a      	ldr	r2, [r1, #16]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	bfa8      	it	ge
 800b5d2:	4623      	movge	r3, r4
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	bfa4      	itt	ge
 800b5d8:	460c      	movge	r4, r1
 800b5da:	461f      	movge	r7, r3
 800b5dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b5e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b5e4:	68a3      	ldr	r3, [r4, #8]
 800b5e6:	6861      	ldr	r1, [r4, #4]
 800b5e8:	eb0a 0609 	add.w	r6, sl, r9
 800b5ec:	42b3      	cmp	r3, r6
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	bfb8      	it	lt
 800b5f2:	3101      	addlt	r1, #1
 800b5f4:	f7ff fedc 	bl	800b3b0 <_Balloc>
 800b5f8:	b930      	cbnz	r0, 800b608 <__multiply+0x44>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	4b44      	ldr	r3, [pc, #272]	@ (800b710 <__multiply+0x14c>)
 800b5fe:	4845      	ldr	r0, [pc, #276]	@ (800b714 <__multiply+0x150>)
 800b600:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b604:	f000 fcd8 	bl	800bfb8 <__assert_func>
 800b608:	f100 0514 	add.w	r5, r0, #20
 800b60c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b610:	462b      	mov	r3, r5
 800b612:	2200      	movs	r2, #0
 800b614:	4543      	cmp	r3, r8
 800b616:	d321      	bcc.n	800b65c <__multiply+0x98>
 800b618:	f107 0114 	add.w	r1, r7, #20
 800b61c:	f104 0214 	add.w	r2, r4, #20
 800b620:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b624:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b628:	9302      	str	r3, [sp, #8]
 800b62a:	1b13      	subs	r3, r2, r4
 800b62c:	3b15      	subs	r3, #21
 800b62e:	f023 0303 	bic.w	r3, r3, #3
 800b632:	3304      	adds	r3, #4
 800b634:	f104 0715 	add.w	r7, r4, #21
 800b638:	42ba      	cmp	r2, r7
 800b63a:	bf38      	it	cc
 800b63c:	2304      	movcc	r3, #4
 800b63e:	9301      	str	r3, [sp, #4]
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	9103      	str	r1, [sp, #12]
 800b644:	428b      	cmp	r3, r1
 800b646:	d80c      	bhi.n	800b662 <__multiply+0x9e>
 800b648:	2e00      	cmp	r6, #0
 800b64a:	dd03      	ble.n	800b654 <__multiply+0x90>
 800b64c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05b      	beq.n	800b70c <__multiply+0x148>
 800b654:	6106      	str	r6, [r0, #16]
 800b656:	b005      	add	sp, #20
 800b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65c:	f843 2b04 	str.w	r2, [r3], #4
 800b660:	e7d8      	b.n	800b614 <__multiply+0x50>
 800b662:	f8b1 a000 	ldrh.w	sl, [r1]
 800b666:	f1ba 0f00 	cmp.w	sl, #0
 800b66a:	d024      	beq.n	800b6b6 <__multiply+0xf2>
 800b66c:	f104 0e14 	add.w	lr, r4, #20
 800b670:	46a9      	mov	r9, r5
 800b672:	f04f 0c00 	mov.w	ip, #0
 800b676:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b67a:	f8d9 3000 	ldr.w	r3, [r9]
 800b67e:	fa1f fb87 	uxth.w	fp, r7
 800b682:	b29b      	uxth	r3, r3
 800b684:	fb0a 330b 	mla	r3, sl, fp, r3
 800b688:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b68c:	f8d9 7000 	ldr.w	r7, [r9]
 800b690:	4463      	add	r3, ip
 800b692:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b696:	fb0a c70b 	mla	r7, sl, fp, ip
 800b69a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6a4:	4572      	cmp	r2, lr
 800b6a6:	f849 3b04 	str.w	r3, [r9], #4
 800b6aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6ae:	d8e2      	bhi.n	800b676 <__multiply+0xb2>
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	f845 c003 	str.w	ip, [r5, r3]
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b6bc:	3104      	adds	r1, #4
 800b6be:	f1b9 0f00 	cmp.w	r9, #0
 800b6c2:	d021      	beq.n	800b708 <__multiply+0x144>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	f104 0c14 	add.w	ip, r4, #20
 800b6ca:	46ae      	mov	lr, r5
 800b6cc:	f04f 0a00 	mov.w	sl, #0
 800b6d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b6d8:	fb09 770b 	mla	r7, r9, fp, r7
 800b6dc:	4457      	add	r7, sl
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6e4:	f84e 3b04 	str.w	r3, [lr], #4
 800b6e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6f0:	f8be 3000 	ldrh.w	r3, [lr]
 800b6f4:	fb09 330a 	mla	r3, r9, sl, r3
 800b6f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b6fc:	4562      	cmp	r2, ip
 800b6fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b702:	d8e5      	bhi.n	800b6d0 <__multiply+0x10c>
 800b704:	9f01      	ldr	r7, [sp, #4]
 800b706:	51eb      	str	r3, [r5, r7]
 800b708:	3504      	adds	r5, #4
 800b70a:	e799      	b.n	800b640 <__multiply+0x7c>
 800b70c:	3e01      	subs	r6, #1
 800b70e:	e79b      	b.n	800b648 <__multiply+0x84>
 800b710:	0800ca4c 	.word	0x0800ca4c
 800b714:	0800ca5d 	.word	0x0800ca5d

0800b718 <__pow5mult>:
 800b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4615      	mov	r5, r2
 800b71e:	f012 0203 	ands.w	r2, r2, #3
 800b722:	4607      	mov	r7, r0
 800b724:	460e      	mov	r6, r1
 800b726:	d007      	beq.n	800b738 <__pow5mult+0x20>
 800b728:	4c25      	ldr	r4, [pc, #148]	@ (800b7c0 <__pow5mult+0xa8>)
 800b72a:	3a01      	subs	r2, #1
 800b72c:	2300      	movs	r3, #0
 800b72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b732:	f7ff fe9f 	bl	800b474 <__multadd>
 800b736:	4606      	mov	r6, r0
 800b738:	10ad      	asrs	r5, r5, #2
 800b73a:	d03d      	beq.n	800b7b8 <__pow5mult+0xa0>
 800b73c:	69fc      	ldr	r4, [r7, #28]
 800b73e:	b97c      	cbnz	r4, 800b760 <__pow5mult+0x48>
 800b740:	2010      	movs	r0, #16
 800b742:	f7ff fd7f 	bl	800b244 <malloc>
 800b746:	4602      	mov	r2, r0
 800b748:	61f8      	str	r0, [r7, #28]
 800b74a:	b928      	cbnz	r0, 800b758 <__pow5mult+0x40>
 800b74c:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c4 <__pow5mult+0xac>)
 800b74e:	481e      	ldr	r0, [pc, #120]	@ (800b7c8 <__pow5mult+0xb0>)
 800b750:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b754:	f000 fc30 	bl	800bfb8 <__assert_func>
 800b758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b75c:	6004      	str	r4, [r0, #0]
 800b75e:	60c4      	str	r4, [r0, #12]
 800b760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b768:	b94c      	cbnz	r4, 800b77e <__pow5mult+0x66>
 800b76a:	f240 2171 	movw	r1, #625	@ 0x271
 800b76e:	4638      	mov	r0, r7
 800b770:	f7ff ff12 	bl	800b598 <__i2b>
 800b774:	2300      	movs	r3, #0
 800b776:	f8c8 0008 	str.w	r0, [r8, #8]
 800b77a:	4604      	mov	r4, r0
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	f04f 0900 	mov.w	r9, #0
 800b782:	07eb      	lsls	r3, r5, #31
 800b784:	d50a      	bpl.n	800b79c <__pow5mult+0x84>
 800b786:	4631      	mov	r1, r6
 800b788:	4622      	mov	r2, r4
 800b78a:	4638      	mov	r0, r7
 800b78c:	f7ff ff1a 	bl	800b5c4 <__multiply>
 800b790:	4631      	mov	r1, r6
 800b792:	4680      	mov	r8, r0
 800b794:	4638      	mov	r0, r7
 800b796:	f7ff fe4b 	bl	800b430 <_Bfree>
 800b79a:	4646      	mov	r6, r8
 800b79c:	106d      	asrs	r5, r5, #1
 800b79e:	d00b      	beq.n	800b7b8 <__pow5mult+0xa0>
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	b938      	cbnz	r0, 800b7b4 <__pow5mult+0x9c>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff ff0b 	bl	800b5c4 <__multiply>
 800b7ae:	6020      	str	r0, [r4, #0]
 800b7b0:	f8c0 9000 	str.w	r9, [r0]
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	e7e4      	b.n	800b782 <__pow5mult+0x6a>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	bf00      	nop
 800b7c0:	0800cab8 	.word	0x0800cab8
 800b7c4:	0800c9dd 	.word	0x0800c9dd
 800b7c8:	0800ca5d 	.word	0x0800ca5d

0800b7cc <__lshift>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	6849      	ldr	r1, [r1, #4]
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7da:	68a3      	ldr	r3, [r4, #8]
 800b7dc:	4607      	mov	r7, r0
 800b7de:	4691      	mov	r9, r2
 800b7e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7e4:	f108 0601 	add.w	r6, r8, #1
 800b7e8:	42b3      	cmp	r3, r6
 800b7ea:	db0b      	blt.n	800b804 <__lshift+0x38>
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff fddf 	bl	800b3b0 <_Balloc>
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	b948      	cbnz	r0, 800b80a <__lshift+0x3e>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b28      	ldr	r3, [pc, #160]	@ (800b89c <__lshift+0xd0>)
 800b7fa:	4829      	ldr	r0, [pc, #164]	@ (800b8a0 <__lshift+0xd4>)
 800b7fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b800:	f000 fbda 	bl	800bfb8 <__assert_func>
 800b804:	3101      	adds	r1, #1
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	e7ee      	b.n	800b7e8 <__lshift+0x1c>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f100 0114 	add.w	r1, r0, #20
 800b810:	f100 0210 	add.w	r2, r0, #16
 800b814:	4618      	mov	r0, r3
 800b816:	4553      	cmp	r3, sl
 800b818:	db33      	blt.n	800b882 <__lshift+0xb6>
 800b81a:	6920      	ldr	r0, [r4, #16]
 800b81c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b820:	f104 0314 	add.w	r3, r4, #20
 800b824:	f019 091f 	ands.w	r9, r9, #31
 800b828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b82c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b830:	d02b      	beq.n	800b88a <__lshift+0xbe>
 800b832:	f1c9 0e20 	rsb	lr, r9, #32
 800b836:	468a      	mov	sl, r1
 800b838:	2200      	movs	r2, #0
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	fa00 f009 	lsl.w	r0, r0, r9
 800b840:	4310      	orrs	r0, r2
 800b842:	f84a 0b04 	str.w	r0, [sl], #4
 800b846:	f853 2b04 	ldr.w	r2, [r3], #4
 800b84a:	459c      	cmp	ip, r3
 800b84c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b850:	d8f3      	bhi.n	800b83a <__lshift+0x6e>
 800b852:	ebac 0304 	sub.w	r3, ip, r4
 800b856:	3b15      	subs	r3, #21
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	3304      	adds	r3, #4
 800b85e:	f104 0015 	add.w	r0, r4, #21
 800b862:	4584      	cmp	ip, r0
 800b864:	bf38      	it	cc
 800b866:	2304      	movcc	r3, #4
 800b868:	50ca      	str	r2, [r1, r3]
 800b86a:	b10a      	cbz	r2, 800b870 <__lshift+0xa4>
 800b86c:	f108 0602 	add.w	r6, r8, #2
 800b870:	3e01      	subs	r6, #1
 800b872:	4638      	mov	r0, r7
 800b874:	612e      	str	r6, [r5, #16]
 800b876:	4621      	mov	r1, r4
 800b878:	f7ff fdda 	bl	800b430 <_Bfree>
 800b87c:	4628      	mov	r0, r5
 800b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b882:	f842 0f04 	str.w	r0, [r2, #4]!
 800b886:	3301      	adds	r3, #1
 800b888:	e7c5      	b.n	800b816 <__lshift+0x4a>
 800b88a:	3904      	subs	r1, #4
 800b88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b890:	f841 2f04 	str.w	r2, [r1, #4]!
 800b894:	459c      	cmp	ip, r3
 800b896:	d8f9      	bhi.n	800b88c <__lshift+0xc0>
 800b898:	e7ea      	b.n	800b870 <__lshift+0xa4>
 800b89a:	bf00      	nop
 800b89c:	0800ca4c 	.word	0x0800ca4c
 800b8a0:	0800ca5d 	.word	0x0800ca5d

0800b8a4 <__mcmp>:
 800b8a4:	690a      	ldr	r2, [r1, #16]
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	6900      	ldr	r0, [r0, #16]
 800b8aa:	1a80      	subs	r0, r0, r2
 800b8ac:	b530      	push	{r4, r5, lr}
 800b8ae:	d10e      	bne.n	800b8ce <__mcmp+0x2a>
 800b8b0:	3314      	adds	r3, #20
 800b8b2:	3114      	adds	r1, #20
 800b8b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b8b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b8bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8c4:	4295      	cmp	r5, r2
 800b8c6:	d003      	beq.n	800b8d0 <__mcmp+0x2c>
 800b8c8:	d205      	bcs.n	800b8d6 <__mcmp+0x32>
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	bd30      	pop	{r4, r5, pc}
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	d3f3      	bcc.n	800b8bc <__mcmp+0x18>
 800b8d4:	e7fb      	b.n	800b8ce <__mcmp+0x2a>
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	e7f9      	b.n	800b8ce <__mcmp+0x2a>
	...

0800b8dc <__mdiff>:
 800b8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	4689      	mov	r9, r1
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4648      	mov	r0, r9
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	f7ff ffdb 	bl	800b8a4 <__mcmp>
 800b8ee:	1e05      	subs	r5, r0, #0
 800b8f0:	d112      	bne.n	800b918 <__mdiff+0x3c>
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff fd5b 	bl	800b3b0 <_Balloc>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	b928      	cbnz	r0, 800b90a <__mdiff+0x2e>
 800b8fe:	4b3f      	ldr	r3, [pc, #252]	@ (800b9fc <__mdiff+0x120>)
 800b900:	f240 2137 	movw	r1, #567	@ 0x237
 800b904:	483e      	ldr	r0, [pc, #248]	@ (800ba00 <__mdiff+0x124>)
 800b906:	f000 fb57 	bl	800bfb8 <__assert_func>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b910:	4610      	mov	r0, r2
 800b912:	b003      	add	sp, #12
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	bfbc      	itt	lt
 800b91a:	464b      	movlt	r3, r9
 800b91c:	46a1      	movlt	r9, r4
 800b91e:	4630      	mov	r0, r6
 800b920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b924:	bfba      	itte	lt
 800b926:	461c      	movlt	r4, r3
 800b928:	2501      	movlt	r5, #1
 800b92a:	2500      	movge	r5, #0
 800b92c:	f7ff fd40 	bl	800b3b0 <_Balloc>
 800b930:	4602      	mov	r2, r0
 800b932:	b918      	cbnz	r0, 800b93c <__mdiff+0x60>
 800b934:	4b31      	ldr	r3, [pc, #196]	@ (800b9fc <__mdiff+0x120>)
 800b936:	f240 2145 	movw	r1, #581	@ 0x245
 800b93a:	e7e3      	b.n	800b904 <__mdiff+0x28>
 800b93c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b940:	6926      	ldr	r6, [r4, #16]
 800b942:	60c5      	str	r5, [r0, #12]
 800b944:	f109 0310 	add.w	r3, r9, #16
 800b948:	f109 0514 	add.w	r5, r9, #20
 800b94c:	f104 0e14 	add.w	lr, r4, #20
 800b950:	f100 0b14 	add.w	fp, r0, #20
 800b954:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b958:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	46d9      	mov	r9, fp
 800b960:	f04f 0c00 	mov.w	ip, #0
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b96a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	fa1f f38a 	uxth.w	r3, sl
 800b974:	4619      	mov	r1, r3
 800b976:	b283      	uxth	r3, r0
 800b978:	1acb      	subs	r3, r1, r3
 800b97a:	0c00      	lsrs	r0, r0, #16
 800b97c:	4463      	add	r3, ip
 800b97e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b982:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b986:	b29b      	uxth	r3, r3
 800b988:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b98c:	4576      	cmp	r6, lr
 800b98e:	f849 3b04 	str.w	r3, [r9], #4
 800b992:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b996:	d8e5      	bhi.n	800b964 <__mdiff+0x88>
 800b998:	1b33      	subs	r3, r6, r4
 800b99a:	3b15      	subs	r3, #21
 800b99c:	f023 0303 	bic.w	r3, r3, #3
 800b9a0:	3415      	adds	r4, #21
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	42a6      	cmp	r6, r4
 800b9a6:	bf38      	it	cc
 800b9a8:	2304      	movcc	r3, #4
 800b9aa:	441d      	add	r5, r3
 800b9ac:	445b      	add	r3, fp
 800b9ae:	461e      	mov	r6, r3
 800b9b0:	462c      	mov	r4, r5
 800b9b2:	4544      	cmp	r4, r8
 800b9b4:	d30e      	bcc.n	800b9d4 <__mdiff+0xf8>
 800b9b6:	f108 0103 	add.w	r1, r8, #3
 800b9ba:	1b49      	subs	r1, r1, r5
 800b9bc:	f021 0103 	bic.w	r1, r1, #3
 800b9c0:	3d03      	subs	r5, #3
 800b9c2:	45a8      	cmp	r8, r5
 800b9c4:	bf38      	it	cc
 800b9c6:	2100      	movcc	r1, #0
 800b9c8:	440b      	add	r3, r1
 800b9ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9ce:	b191      	cbz	r1, 800b9f6 <__mdiff+0x11a>
 800b9d0:	6117      	str	r7, [r2, #16]
 800b9d2:	e79d      	b.n	800b910 <__mdiff+0x34>
 800b9d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b9d8:	46e6      	mov	lr, ip
 800b9da:	0c08      	lsrs	r0, r1, #16
 800b9dc:	fa1c fc81 	uxtah	ip, ip, r1
 800b9e0:	4471      	add	r1, lr
 800b9e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9e6:	b289      	uxth	r1, r1
 800b9e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9ec:	f846 1b04 	str.w	r1, [r6], #4
 800b9f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9f4:	e7dd      	b.n	800b9b2 <__mdiff+0xd6>
 800b9f6:	3f01      	subs	r7, #1
 800b9f8:	e7e7      	b.n	800b9ca <__mdiff+0xee>
 800b9fa:	bf00      	nop
 800b9fc:	0800ca4c 	.word	0x0800ca4c
 800ba00:	0800ca5d 	.word	0x0800ca5d

0800ba04 <__d2b>:
 800ba04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba08:	460f      	mov	r7, r1
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	ec59 8b10 	vmov	r8, r9, d0
 800ba10:	4616      	mov	r6, r2
 800ba12:	f7ff fccd 	bl	800b3b0 <_Balloc>
 800ba16:	4604      	mov	r4, r0
 800ba18:	b930      	cbnz	r0, 800ba28 <__d2b+0x24>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4b23      	ldr	r3, [pc, #140]	@ (800baac <__d2b+0xa8>)
 800ba1e:	4824      	ldr	r0, [pc, #144]	@ (800bab0 <__d2b+0xac>)
 800ba20:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba24:	f000 fac8 	bl	800bfb8 <__assert_func>
 800ba28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba30:	b10d      	cbz	r5, 800ba36 <__d2b+0x32>
 800ba32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	f1b8 0300 	subs.w	r3, r8, #0
 800ba3c:	d023      	beq.n	800ba86 <__d2b+0x82>
 800ba3e:	4668      	mov	r0, sp
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	f7ff fd7c 	bl	800b53e <__lo0bits>
 800ba46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba4a:	b1d0      	cbz	r0, 800ba82 <__d2b+0x7e>
 800ba4c:	f1c0 0320 	rsb	r3, r0, #32
 800ba50:	fa02 f303 	lsl.w	r3, r2, r3
 800ba54:	430b      	orrs	r3, r1
 800ba56:	40c2      	lsrs	r2, r0
 800ba58:	6163      	str	r3, [r4, #20]
 800ba5a:	9201      	str	r2, [sp, #4]
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	61a3      	str	r3, [r4, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bf0c      	ite	eq
 800ba64:	2201      	moveq	r2, #1
 800ba66:	2202      	movne	r2, #2
 800ba68:	6122      	str	r2, [r4, #16]
 800ba6a:	b1a5      	cbz	r5, 800ba96 <__d2b+0x92>
 800ba6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba70:	4405      	add	r5, r0
 800ba72:	603d      	str	r5, [r7, #0]
 800ba74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba78:	6030      	str	r0, [r6, #0]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	b003      	add	sp, #12
 800ba7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba82:	6161      	str	r1, [r4, #20]
 800ba84:	e7ea      	b.n	800ba5c <__d2b+0x58>
 800ba86:	a801      	add	r0, sp, #4
 800ba88:	f7ff fd59 	bl	800b53e <__lo0bits>
 800ba8c:	9b01      	ldr	r3, [sp, #4]
 800ba8e:	6163      	str	r3, [r4, #20]
 800ba90:	3020      	adds	r0, #32
 800ba92:	2201      	movs	r2, #1
 800ba94:	e7e8      	b.n	800ba68 <__d2b+0x64>
 800ba96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba9e:	6038      	str	r0, [r7, #0]
 800baa0:	6918      	ldr	r0, [r3, #16]
 800baa2:	f7ff fd2d 	bl	800b500 <__hi0bits>
 800baa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baaa:	e7e5      	b.n	800ba78 <__d2b+0x74>
 800baac:	0800ca4c 	.word	0x0800ca4c
 800bab0:	0800ca5d 	.word	0x0800ca5d

0800bab4 <__sfputc_r>:
 800bab4:	6893      	ldr	r3, [r2, #8]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	b410      	push	{r4}
 800babc:	6093      	str	r3, [r2, #8]
 800babe:	da08      	bge.n	800bad2 <__sfputc_r+0x1e>
 800bac0:	6994      	ldr	r4, [r2, #24]
 800bac2:	42a3      	cmp	r3, r4
 800bac4:	db01      	blt.n	800baca <__sfputc_r+0x16>
 800bac6:	290a      	cmp	r1, #10
 800bac8:	d103      	bne.n	800bad2 <__sfputc_r+0x1e>
 800baca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bace:	f7fe bba8 	b.w	800a222 <__swbuf_r>
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	1c58      	adds	r0, r3, #1
 800bad6:	6010      	str	r0, [r2, #0]
 800bad8:	7019      	strb	r1, [r3, #0]
 800bada:	4608      	mov	r0, r1
 800badc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <__sfputs_r>:
 800bae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	4614      	mov	r4, r2
 800baea:	18d5      	adds	r5, r2, r3
 800baec:	42ac      	cmp	r4, r5
 800baee:	d101      	bne.n	800baf4 <__sfputs_r+0x12>
 800baf0:	2000      	movs	r0, #0
 800baf2:	e007      	b.n	800bb04 <__sfputs_r+0x22>
 800baf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf8:	463a      	mov	r2, r7
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff ffda 	bl	800bab4 <__sfputc_r>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d1f3      	bne.n	800baec <__sfputs_r+0xa>
 800bb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb08 <_vfiprintf_r>:
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	b09d      	sub	sp, #116	@ 0x74
 800bb10:	4614      	mov	r4, r2
 800bb12:	4698      	mov	r8, r3
 800bb14:	4606      	mov	r6, r0
 800bb16:	b118      	cbz	r0, 800bb20 <_vfiprintf_r+0x18>
 800bb18:	6a03      	ldr	r3, [r0, #32]
 800bb1a:	b90b      	cbnz	r3, 800bb20 <_vfiprintf_r+0x18>
 800bb1c:	f7fe fa98 	bl	800a050 <__sinit>
 800bb20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb22:	07d9      	lsls	r1, r3, #31
 800bb24:	d405      	bmi.n	800bb32 <_vfiprintf_r+0x2a>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	059a      	lsls	r2, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_vfiprintf_r+0x2a>
 800bb2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb2e:	f7fe fce0 	bl	800a4f2 <__retarget_lock_acquire_recursive>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	071b      	lsls	r3, r3, #28
 800bb36:	d501      	bpl.n	800bb3c <_vfiprintf_r+0x34>
 800bb38:	692b      	ldr	r3, [r5, #16]
 800bb3a:	b99b      	cbnz	r3, 800bb64 <_vfiprintf_r+0x5c>
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fe fbae 	bl	800a2a0 <__swsetup_r>
 800bb44:	b170      	cbz	r0, 800bb64 <_vfiprintf_r+0x5c>
 800bb46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb48:	07dc      	lsls	r4, r3, #31
 800bb4a:	d504      	bpl.n	800bb56 <_vfiprintf_r+0x4e>
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb50:	b01d      	add	sp, #116	@ 0x74
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	0598      	lsls	r0, r3, #22
 800bb5a:	d4f7      	bmi.n	800bb4c <_vfiprintf_r+0x44>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5e:	f7fe fcc9 	bl	800a4f4 <__retarget_lock_release_recursive>
 800bb62:	e7f3      	b.n	800bb4c <_vfiprintf_r+0x44>
 800bb64:	2300      	movs	r3, #0
 800bb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb72:	2330      	movs	r3, #48	@ 0x30
 800bb74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd24 <_vfiprintf_r+0x21c>
 800bb78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb7c:	f04f 0901 	mov.w	r9, #1
 800bb80:	4623      	mov	r3, r4
 800bb82:	469a      	mov	sl, r3
 800bb84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb88:	b10a      	cbz	r2, 800bb8e <_vfiprintf_r+0x86>
 800bb8a:	2a25      	cmp	r2, #37	@ 0x25
 800bb8c:	d1f9      	bne.n	800bb82 <_vfiprintf_r+0x7a>
 800bb8e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb92:	d00b      	beq.n	800bbac <_vfiprintf_r+0xa4>
 800bb94:	465b      	mov	r3, fp
 800bb96:	4622      	mov	r2, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ffa1 	bl	800bae2 <__sfputs_r>
 800bba0:	3001      	adds	r0, #1
 800bba2:	f000 80a7 	beq.w	800bcf4 <_vfiprintf_r+0x1ec>
 800bba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba8:	445a      	add	r2, fp
 800bbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbac:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 809f 	beq.w	800bcf4 <_vfiprintf_r+0x1ec>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc0:	f10a 0a01 	add.w	sl, sl, #1
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbce:	4654      	mov	r4, sl
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd6:	4853      	ldr	r0, [pc, #332]	@ (800bd24 <_vfiprintf_r+0x21c>)
 800bbd8:	f7f4 fafa 	bl	80001d0 <memchr>
 800bbdc:	9a04      	ldr	r2, [sp, #16]
 800bbde:	b9d8      	cbnz	r0, 800bc18 <_vfiprintf_r+0x110>
 800bbe0:	06d1      	lsls	r1, r2, #27
 800bbe2:	bf44      	itt	mi
 800bbe4:	2320      	movmi	r3, #32
 800bbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbea:	0713      	lsls	r3, r2, #28
 800bbec:	bf44      	itt	mi
 800bbee:	232b      	movmi	r3, #43	@ 0x2b
 800bbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbfa:	d015      	beq.n	800bc28 <_vfiprintf_r+0x120>
 800bbfc:	9a07      	ldr	r2, [sp, #28]
 800bbfe:	4654      	mov	r4, sl
 800bc00:	2000      	movs	r0, #0
 800bc02:	f04f 0c0a 	mov.w	ip, #10
 800bc06:	4621      	mov	r1, r4
 800bc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0c:	3b30      	subs	r3, #48	@ 0x30
 800bc0e:	2b09      	cmp	r3, #9
 800bc10:	d94b      	bls.n	800bcaa <_vfiprintf_r+0x1a2>
 800bc12:	b1b0      	cbz	r0, 800bc42 <_vfiprintf_r+0x13a>
 800bc14:	9207      	str	r2, [sp, #28]
 800bc16:	e014      	b.n	800bc42 <_vfiprintf_r+0x13a>
 800bc18:	eba0 0308 	sub.w	r3, r0, r8
 800bc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc20:	4313      	orrs	r3, r2
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	46a2      	mov	sl, r4
 800bc26:	e7d2      	b.n	800bbce <_vfiprintf_r+0xc6>
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	1d19      	adds	r1, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	9103      	str	r1, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bfbb      	ittet	lt
 800bc34:	425b      	neglt	r3, r3
 800bc36:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3a:	9307      	strge	r3, [sp, #28]
 800bc3c:	9307      	strlt	r3, [sp, #28]
 800bc3e:	bfb8      	it	lt
 800bc40:	9204      	strlt	r2, [sp, #16]
 800bc42:	7823      	ldrb	r3, [r4, #0]
 800bc44:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc46:	d10a      	bne.n	800bc5e <_vfiprintf_r+0x156>
 800bc48:	7863      	ldrb	r3, [r4, #1]
 800bc4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc4c:	d132      	bne.n	800bcb4 <_vfiprintf_r+0x1ac>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	1d1a      	adds	r2, r3, #4
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	9203      	str	r2, [sp, #12]
 800bc56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc5a:	3402      	adds	r4, #2
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd34 <_vfiprintf_r+0x22c>
 800bc62:	7821      	ldrb	r1, [r4, #0]
 800bc64:	2203      	movs	r2, #3
 800bc66:	4650      	mov	r0, sl
 800bc68:	f7f4 fab2 	bl	80001d0 <memchr>
 800bc6c:	b138      	cbz	r0, 800bc7e <_vfiprintf_r+0x176>
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	eba0 000a 	sub.w	r0, r0, sl
 800bc74:	2240      	movs	r2, #64	@ 0x40
 800bc76:	4082      	lsls	r2, r0
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	3401      	adds	r4, #1
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc82:	4829      	ldr	r0, [pc, #164]	@ (800bd28 <_vfiprintf_r+0x220>)
 800bc84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc88:	2206      	movs	r2, #6
 800bc8a:	f7f4 faa1 	bl	80001d0 <memchr>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d03f      	beq.n	800bd12 <_vfiprintf_r+0x20a>
 800bc92:	4b26      	ldr	r3, [pc, #152]	@ (800bd2c <_vfiprintf_r+0x224>)
 800bc94:	bb1b      	cbnz	r3, 800bcde <_vfiprintf_r+0x1d6>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	3307      	adds	r3, #7
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	3308      	adds	r3, #8
 800bca0:	9303      	str	r3, [sp, #12]
 800bca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca4:	443b      	add	r3, r7
 800bca6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca8:	e76a      	b.n	800bb80 <_vfiprintf_r+0x78>
 800bcaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcae:	460c      	mov	r4, r1
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	e7a8      	b.n	800bc06 <_vfiprintf_r+0xfe>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	9305      	str	r3, [sp, #20]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	f04f 0c0a 	mov.w	ip, #10
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc6:	3a30      	subs	r2, #48	@ 0x30
 800bcc8:	2a09      	cmp	r2, #9
 800bcca:	d903      	bls.n	800bcd4 <_vfiprintf_r+0x1cc>
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0c6      	beq.n	800bc5e <_vfiprintf_r+0x156>
 800bcd0:	9105      	str	r1, [sp, #20]
 800bcd2:	e7c4      	b.n	800bc5e <_vfiprintf_r+0x156>
 800bcd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd8:	4604      	mov	r4, r0
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e7f0      	b.n	800bcc0 <_vfiprintf_r+0x1b8>
 800bcde:	ab03      	add	r3, sp, #12
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	462a      	mov	r2, r5
 800bce4:	4b12      	ldr	r3, [pc, #72]	@ (800bd30 <_vfiprintf_r+0x228>)
 800bce6:	a904      	add	r1, sp, #16
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fd fd6d 	bl	80097c8 <_printf_float>
 800bcee:	4607      	mov	r7, r0
 800bcf0:	1c78      	adds	r0, r7, #1
 800bcf2:	d1d6      	bne.n	800bca2 <_vfiprintf_r+0x19a>
 800bcf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcf6:	07d9      	lsls	r1, r3, #31
 800bcf8:	d405      	bmi.n	800bd06 <_vfiprintf_r+0x1fe>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	059a      	lsls	r2, r3, #22
 800bcfe:	d402      	bmi.n	800bd06 <_vfiprintf_r+0x1fe>
 800bd00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd02:	f7fe fbf7 	bl	800a4f4 <__retarget_lock_release_recursive>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	065b      	lsls	r3, r3, #25
 800bd0a:	f53f af1f 	bmi.w	800bb4c <_vfiprintf_r+0x44>
 800bd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd10:	e71e      	b.n	800bb50 <_vfiprintf_r+0x48>
 800bd12:	ab03      	add	r3, sp, #12
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	462a      	mov	r2, r5
 800bd18:	4b05      	ldr	r3, [pc, #20]	@ (800bd30 <_vfiprintf_r+0x228>)
 800bd1a:	a904      	add	r1, sp, #16
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7fd ffeb 	bl	8009cf8 <_printf_i>
 800bd22:	e7e4      	b.n	800bcee <_vfiprintf_r+0x1e6>
 800bd24:	0800cbb8 	.word	0x0800cbb8
 800bd28:	0800cbc2 	.word	0x0800cbc2
 800bd2c:	080097c9 	.word	0x080097c9
 800bd30:	0800bae3 	.word	0x0800bae3
 800bd34:	0800cbbe 	.word	0x0800cbbe

0800bd38 <__sflush_r>:
 800bd38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd40:	0716      	lsls	r6, r2, #28
 800bd42:	4605      	mov	r5, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	d454      	bmi.n	800bdf2 <__sflush_r+0xba>
 800bd48:	684b      	ldr	r3, [r1, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dc02      	bgt.n	800bd54 <__sflush_r+0x1c>
 800bd4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dd48      	ble.n	800bde6 <__sflush_r+0xae>
 800bd54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d045      	beq.n	800bde6 <__sflush_r+0xae>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd60:	682f      	ldr	r7, [r5, #0]
 800bd62:	6a21      	ldr	r1, [r4, #32]
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	d030      	beq.n	800bdca <__sflush_r+0x92>
 800bd68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	0759      	lsls	r1, r3, #29
 800bd6e:	d505      	bpl.n	800bd7c <__sflush_r+0x44>
 800bd70:	6863      	ldr	r3, [r4, #4]
 800bd72:	1ad2      	subs	r2, r2, r3
 800bd74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd76:	b10b      	cbz	r3, 800bd7c <__sflush_r+0x44>
 800bd78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd7a:	1ad2      	subs	r2, r2, r3
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd80:	6a21      	ldr	r1, [r4, #32]
 800bd82:	4628      	mov	r0, r5
 800bd84:	47b0      	blx	r6
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	d106      	bne.n	800bd9a <__sflush_r+0x62>
 800bd8c:	6829      	ldr	r1, [r5, #0]
 800bd8e:	291d      	cmp	r1, #29
 800bd90:	d82b      	bhi.n	800bdea <__sflush_r+0xb2>
 800bd92:	4a2a      	ldr	r2, [pc, #168]	@ (800be3c <__sflush_r+0x104>)
 800bd94:	410a      	asrs	r2, r1
 800bd96:	07d6      	lsls	r6, r2, #31
 800bd98:	d427      	bmi.n	800bdea <__sflush_r+0xb2>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	6062      	str	r2, [r4, #4]
 800bd9e:	04d9      	lsls	r1, r3, #19
 800bda0:	6922      	ldr	r2, [r4, #16]
 800bda2:	6022      	str	r2, [r4, #0]
 800bda4:	d504      	bpl.n	800bdb0 <__sflush_r+0x78>
 800bda6:	1c42      	adds	r2, r0, #1
 800bda8:	d101      	bne.n	800bdae <__sflush_r+0x76>
 800bdaa:	682b      	ldr	r3, [r5, #0]
 800bdac:	b903      	cbnz	r3, 800bdb0 <__sflush_r+0x78>
 800bdae:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdb2:	602f      	str	r7, [r5, #0]
 800bdb4:	b1b9      	cbz	r1, 800bde6 <__sflush_r+0xae>
 800bdb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdba:	4299      	cmp	r1, r3
 800bdbc:	d002      	beq.n	800bdc4 <__sflush_r+0x8c>
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7ff f9f6 	bl	800b1b0 <_free_r>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdc8:	e00d      	b.n	800bde6 <__sflush_r+0xae>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b0      	blx	r6
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	1c50      	adds	r0, r2, #1
 800bdd4:	d1c9      	bne.n	800bd6a <__sflush_r+0x32>
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0c6      	beq.n	800bd6a <__sflush_r+0x32>
 800bddc:	2b1d      	cmp	r3, #29
 800bdde:	d001      	beq.n	800bde4 <__sflush_r+0xac>
 800bde0:	2b16      	cmp	r3, #22
 800bde2:	d11e      	bne.n	800be22 <__sflush_r+0xea>
 800bde4:	602f      	str	r7, [r5, #0]
 800bde6:	2000      	movs	r0, #0
 800bde8:	e022      	b.n	800be30 <__sflush_r+0xf8>
 800bdea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdee:	b21b      	sxth	r3, r3
 800bdf0:	e01b      	b.n	800be2a <__sflush_r+0xf2>
 800bdf2:	690f      	ldr	r7, [r1, #16]
 800bdf4:	2f00      	cmp	r7, #0
 800bdf6:	d0f6      	beq.n	800bde6 <__sflush_r+0xae>
 800bdf8:	0793      	lsls	r3, r2, #30
 800bdfa:	680e      	ldr	r6, [r1, #0]
 800bdfc:	bf08      	it	eq
 800bdfe:	694b      	ldreq	r3, [r1, #20]
 800be00:	600f      	str	r7, [r1, #0]
 800be02:	bf18      	it	ne
 800be04:	2300      	movne	r3, #0
 800be06:	eba6 0807 	sub.w	r8, r6, r7
 800be0a:	608b      	str	r3, [r1, #8]
 800be0c:	f1b8 0f00 	cmp.w	r8, #0
 800be10:	dde9      	ble.n	800bde6 <__sflush_r+0xae>
 800be12:	6a21      	ldr	r1, [r4, #32]
 800be14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be16:	4643      	mov	r3, r8
 800be18:	463a      	mov	r2, r7
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b0      	blx	r6
 800be1e:	2800      	cmp	r0, #0
 800be20:	dc08      	bgt.n	800be34 <__sflush_r+0xfc>
 800be22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be2a:	81a3      	strh	r3, [r4, #12]
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be34:	4407      	add	r7, r0
 800be36:	eba8 0800 	sub.w	r8, r8, r0
 800be3a:	e7e7      	b.n	800be0c <__sflush_r+0xd4>
 800be3c:	dfbffffe 	.word	0xdfbffffe

0800be40 <_fflush_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	690b      	ldr	r3, [r1, #16]
 800be44:	4605      	mov	r5, r0
 800be46:	460c      	mov	r4, r1
 800be48:	b913      	cbnz	r3, 800be50 <_fflush_r+0x10>
 800be4a:	2500      	movs	r5, #0
 800be4c:	4628      	mov	r0, r5
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	b118      	cbz	r0, 800be5a <_fflush_r+0x1a>
 800be52:	6a03      	ldr	r3, [r0, #32]
 800be54:	b90b      	cbnz	r3, 800be5a <_fflush_r+0x1a>
 800be56:	f7fe f8fb 	bl	800a050 <__sinit>
 800be5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0f3      	beq.n	800be4a <_fflush_r+0xa>
 800be62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be64:	07d0      	lsls	r0, r2, #31
 800be66:	d404      	bmi.n	800be72 <_fflush_r+0x32>
 800be68:	0599      	lsls	r1, r3, #22
 800be6a:	d402      	bmi.n	800be72 <_fflush_r+0x32>
 800be6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be6e:	f7fe fb40 	bl	800a4f2 <__retarget_lock_acquire_recursive>
 800be72:	4628      	mov	r0, r5
 800be74:	4621      	mov	r1, r4
 800be76:	f7ff ff5f 	bl	800bd38 <__sflush_r>
 800be7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be7c:	07da      	lsls	r2, r3, #31
 800be7e:	4605      	mov	r5, r0
 800be80:	d4e4      	bmi.n	800be4c <_fflush_r+0xc>
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	059b      	lsls	r3, r3, #22
 800be86:	d4e1      	bmi.n	800be4c <_fflush_r+0xc>
 800be88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be8a:	f7fe fb33 	bl	800a4f4 <__retarget_lock_release_recursive>
 800be8e:	e7dd      	b.n	800be4c <_fflush_r+0xc>

0800be90 <__swhatbuf_r>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	460c      	mov	r4, r1
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	2900      	cmp	r1, #0
 800be9a:	b096      	sub	sp, #88	@ 0x58
 800be9c:	4615      	mov	r5, r2
 800be9e:	461e      	mov	r6, r3
 800bea0:	da0d      	bge.n	800bebe <__swhatbuf_r+0x2e>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	bf14      	ite	ne
 800beae:	2340      	movne	r3, #64	@ 0x40
 800beb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beb4:	2000      	movs	r0, #0
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	b016      	add	sp, #88	@ 0x58
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	466a      	mov	r2, sp
 800bec0:	f000 f848 	bl	800bf54 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbec      	blt.n	800bea2 <__swhatbuf_r+0x12>
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bece:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bed2:	4259      	negs	r1, r3
 800bed4:	4159      	adcs	r1, r3
 800bed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beda:	e7eb      	b.n	800beb4 <__swhatbuf_r+0x24>

0800bedc <__smakebuf_r>:
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee0:	079d      	lsls	r5, r3, #30
 800bee2:	4606      	mov	r6, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	d507      	bpl.n	800bef8 <__smakebuf_r+0x1c>
 800bee8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	6123      	str	r3, [r4, #16]
 800bef0:	2301      	movs	r3, #1
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	b003      	add	sp, #12
 800bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef8:	ab01      	add	r3, sp, #4
 800befa:	466a      	mov	r2, sp
 800befc:	f7ff ffc8 	bl	800be90 <__swhatbuf_r>
 800bf00:	9f00      	ldr	r7, [sp, #0]
 800bf02:	4605      	mov	r5, r0
 800bf04:	4639      	mov	r1, r7
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7ff f9c6 	bl	800b298 <_malloc_r>
 800bf0c:	b948      	cbnz	r0, 800bf22 <__smakebuf_r+0x46>
 800bf0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf12:	059a      	lsls	r2, r3, #22
 800bf14:	d4ee      	bmi.n	800bef4 <__smakebuf_r+0x18>
 800bf16:	f023 0303 	bic.w	r3, r3, #3
 800bf1a:	f043 0302 	orr.w	r3, r3, #2
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	e7e2      	b.n	800bee8 <__smakebuf_r+0xc>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	6020      	str	r0, [r4, #0]
 800bf26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf32:	b15b      	cbz	r3, 800bf4c <__smakebuf_r+0x70>
 800bf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 f81d 	bl	800bf78 <_isatty_r>
 800bf3e:	b128      	cbz	r0, 800bf4c <__smakebuf_r+0x70>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	431d      	orrs	r5, r3
 800bf50:	81a5      	strh	r5, [r4, #12]
 800bf52:	e7cf      	b.n	800bef4 <__smakebuf_r+0x18>

0800bf54 <_fstat_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	@ (800bf74 <_fstat_r+0x20>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f7f6 f831 	bl	8001fc8 <_fstat>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d102      	bne.n	800bf70 <_fstat_r+0x1c>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b103      	cbz	r3, 800bf70 <_fstat_r+0x1c>
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	bf00      	nop
 800bf74:	20001ee4 	.word	0x20001ee4

0800bf78 <_isatty_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	@ (800bf94 <_isatty_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f6 f830 	bl	8001fe8 <_isatty>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_isatty_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_isatty_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	20001ee4 	.word	0x20001ee4

0800bf98 <_sbrk_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	@ (800bfb4 <_sbrk_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f6 f838 	bl	8002018 <_sbrk>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_sbrk_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_sbrk_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20001ee4 	.word	0x20001ee4

0800bfb8 <__assert_func>:
 800bfb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfba:	4614      	mov	r4, r2
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <__assert_func+0x2c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	68d8      	ldr	r0, [r3, #12]
 800bfc6:	b954      	cbnz	r4, 800bfde <__assert_func+0x26>
 800bfc8:	4b07      	ldr	r3, [pc, #28]	@ (800bfe8 <__assert_func+0x30>)
 800bfca:	461c      	mov	r4, r3
 800bfcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfd0:	9100      	str	r1, [sp, #0]
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	4905      	ldr	r1, [pc, #20]	@ (800bfec <__assert_func+0x34>)
 800bfd6:	f000 f841 	bl	800c05c <fiprintf>
 800bfda:	f000 f851 	bl	800c080 <abort>
 800bfde:	4b04      	ldr	r3, [pc, #16]	@ (800bff0 <__assert_func+0x38>)
 800bfe0:	e7f4      	b.n	800bfcc <__assert_func+0x14>
 800bfe2:	bf00      	nop
 800bfe4:	2000001c 	.word	0x2000001c
 800bfe8:	0800cc0e 	.word	0x0800cc0e
 800bfec:	0800cbe0 	.word	0x0800cbe0
 800bff0:	0800cbd3 	.word	0x0800cbd3

0800bff4 <_calloc_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	fba1 5402 	umull	r5, r4, r1, r2
 800bffa:	b93c      	cbnz	r4, 800c00c <_calloc_r+0x18>
 800bffc:	4629      	mov	r1, r5
 800bffe:	f7ff f94b 	bl	800b298 <_malloc_r>
 800c002:	4606      	mov	r6, r0
 800c004:	b928      	cbnz	r0, 800c012 <_calloc_r+0x1e>
 800c006:	2600      	movs	r6, #0
 800c008:	4630      	mov	r0, r6
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	220c      	movs	r2, #12
 800c00e:	6002      	str	r2, [r0, #0]
 800c010:	e7f9      	b.n	800c006 <_calloc_r+0x12>
 800c012:	462a      	mov	r2, r5
 800c014:	4621      	mov	r1, r4
 800c016:	f7fe f999 	bl	800a34c <memset>
 800c01a:	e7f5      	b.n	800c008 <_calloc_r+0x14>

0800c01c <__ascii_mbtowc>:
 800c01c:	b082      	sub	sp, #8
 800c01e:	b901      	cbnz	r1, 800c022 <__ascii_mbtowc+0x6>
 800c020:	a901      	add	r1, sp, #4
 800c022:	b142      	cbz	r2, 800c036 <__ascii_mbtowc+0x1a>
 800c024:	b14b      	cbz	r3, 800c03a <__ascii_mbtowc+0x1e>
 800c026:	7813      	ldrb	r3, [r2, #0]
 800c028:	600b      	str	r3, [r1, #0]
 800c02a:	7812      	ldrb	r2, [r2, #0]
 800c02c:	1e10      	subs	r0, r2, #0
 800c02e:	bf18      	it	ne
 800c030:	2001      	movne	r0, #1
 800c032:	b002      	add	sp, #8
 800c034:	4770      	bx	lr
 800c036:	4610      	mov	r0, r2
 800c038:	e7fb      	b.n	800c032 <__ascii_mbtowc+0x16>
 800c03a:	f06f 0001 	mvn.w	r0, #1
 800c03e:	e7f8      	b.n	800c032 <__ascii_mbtowc+0x16>

0800c040 <__ascii_wctomb>:
 800c040:	4603      	mov	r3, r0
 800c042:	4608      	mov	r0, r1
 800c044:	b141      	cbz	r1, 800c058 <__ascii_wctomb+0x18>
 800c046:	2aff      	cmp	r2, #255	@ 0xff
 800c048:	d904      	bls.n	800c054 <__ascii_wctomb+0x14>
 800c04a:	228a      	movs	r2, #138	@ 0x8a
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	4770      	bx	lr
 800c054:	700a      	strb	r2, [r1, #0]
 800c056:	2001      	movs	r0, #1
 800c058:	4770      	bx	lr
	...

0800c05c <fiprintf>:
 800c05c:	b40e      	push	{r1, r2, r3}
 800c05e:	b503      	push	{r0, r1, lr}
 800c060:	4601      	mov	r1, r0
 800c062:	ab03      	add	r3, sp, #12
 800c064:	4805      	ldr	r0, [pc, #20]	@ (800c07c <fiprintf+0x20>)
 800c066:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f7ff fd4b 	bl	800bb08 <_vfiprintf_r>
 800c072:	b002      	add	sp, #8
 800c074:	f85d eb04 	ldr.w	lr, [sp], #4
 800c078:	b003      	add	sp, #12
 800c07a:	4770      	bx	lr
 800c07c:	2000001c 	.word	0x2000001c

0800c080 <abort>:
 800c080:	b508      	push	{r3, lr}
 800c082:	2006      	movs	r0, #6
 800c084:	f000 f82c 	bl	800c0e0 <raise>
 800c088:	2001      	movs	r0, #1
 800c08a:	f7f5 ff69 	bl	8001f60 <_exit>

0800c08e <_raise_r>:
 800c08e:	291f      	cmp	r1, #31
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	460c      	mov	r4, r1
 800c096:	d904      	bls.n	800c0a2 <_raise_r+0x14>
 800c098:	2316      	movs	r3, #22
 800c09a:	6003      	str	r3, [r0, #0]
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	bd38      	pop	{r3, r4, r5, pc}
 800c0a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0a4:	b112      	cbz	r2, 800c0ac <_raise_r+0x1e>
 800c0a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0aa:	b94b      	cbnz	r3, 800c0c0 <_raise_r+0x32>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f000 f831 	bl	800c114 <_getpid_r>
 800c0b2:	4622      	mov	r2, r4
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0bc:	f000 b818 	b.w	800c0f0 <_kill_r>
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d00a      	beq.n	800c0da <_raise_r+0x4c>
 800c0c4:	1c59      	adds	r1, r3, #1
 800c0c6:	d103      	bne.n	800c0d0 <_raise_r+0x42>
 800c0c8:	2316      	movs	r3, #22
 800c0ca:	6003      	str	r3, [r0, #0]
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	e7e7      	b.n	800c0a0 <_raise_r+0x12>
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4798      	blx	r3
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e7e0      	b.n	800c0a0 <_raise_r+0x12>
	...

0800c0e0 <raise>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ec <raise+0xc>)
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f7ff bfd2 	b.w	800c08e <_raise_r>
 800c0ea:	bf00      	nop
 800c0ec:	2000001c 	.word	0x2000001c

0800c0f0 <_kill_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	@ (800c110 <_kill_r+0x20>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	602b      	str	r3, [r5, #0]
 800c0fe:	f7f5 ff1f 	bl	8001f40 <_kill>
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	d102      	bne.n	800c10c <_kill_r+0x1c>
 800c106:	682b      	ldr	r3, [r5, #0]
 800c108:	b103      	cbz	r3, 800c10c <_kill_r+0x1c>
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	bf00      	nop
 800c110:	20001ee4 	.word	0x20001ee4

0800c114 <_getpid_r>:
 800c114:	f7f5 bf0c 	b.w	8001f30 <_getpid>

0800c118 <_init>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	bf00      	nop
 800c11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11e:	bc08      	pop	{r3}
 800c120:	469e      	mov	lr, r3
 800c122:	4770      	bx	lr

0800c124 <_fini>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr
