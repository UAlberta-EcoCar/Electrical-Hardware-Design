ARM GAS  /tmp/ccNBuYt9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hadc1
  20              		.section	.bss.hadc1,"aw",%nobits
  21              		.align	2
  24              	hadc1:
  25 0000 00000000 		.space	72
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	hadc2
  27              		.section	.bss.hadc2,"aw",%nobits
  28              		.align	2
  31              	hadc2:
  32 0000 00000000 		.space	72
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	hdma_adc1
  34              		.section	.bss.hdma_adc1,"aw",%nobits
  35              		.align	2
  38              	hdma_adc1:
  39 0000 00000000 		.space	96
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	hdma_adc2
  41              		.section	.bss.hdma_adc2,"aw",%nobits
  42              		.align	2
  45              	hdma_adc2:
  46 0000 00000000 		.space	96
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	hcan1
  48              		.section	.bss.hcan1,"aw",%nobits
  49              		.align	2
ARM GAS  /tmp/ccNBuYt9.s 			page 2


  52              	hcan1:
  53 0000 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	RelayTaskHandle
  55              		.section	.bss.RelayTaskHandle,"aw",%nobits
  56              		.align	2
  59              	RelayTaskHandle:
  60 0000 00000000 		.space	4
  61              		.global	RelayTaskBuffer
  62              		.section	.bss.RelayTaskBuffer,"aw",%nobits
  63              		.align	2
  66              	RelayTaskBuffer:
  67 0000 00000000 		.space	512
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.global	RelayTaskControlBlock
  69              		.section	.bss.RelayTaskControlBlock,"aw",%nobits
  70              		.align	3
  73              	RelayTaskControlBlock:
  74 0000 00000000 		.space	1160
  74      00000000 
  74      00000000 
  74      00000000 
  74      00000000 
  75              		.global	RelayTask_attributes
  76              		.section	.rodata
  77              		.align	2
  78              	.LC0:
  79 0000 52656C61 		.ascii	"RelayTask\000"
  79      79546173 
  79      6B00
  80              		.section	.rodata.RelayTask_attributes,"a"
  81              		.align	2
  84              	RelayTask_attributes:
  85 0000 00000000 		.word	.LC0
  86 0004 00000000 		.space	4
  87 0008 00000000 		.word	RelayTaskControlBlock
  88 000c 88040000 		.word	1160
  89 0010 00000000 		.word	RelayTaskBuffer
  90 0014 00020000 		.word	512
  91 0018 18000000 		.word	24
  92 001c 00000000 		.space	8
  92      00000000 
  93              		.global	CanTaskHandle
  94              		.section	.bss.CanTaskHandle,"aw",%nobits
  95              		.align	2
  98              	CanTaskHandle:
  99 0000 00000000 		.space	4
 100              		.global	CanTaksBuffer
 101              		.section	.bss.CanTaksBuffer,"aw",%nobits
 102              		.align	2
 105              	CanTaksBuffer:
ARM GAS  /tmp/ccNBuYt9.s 			page 3


 106 0000 00000000 		.space	512
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.global	CanTaksControlBlock
 108              		.section	.bss.CanTaksControlBlock,"aw",%nobits
 109              		.align	3
 112              	CanTaksControlBlock:
 113 0000 00000000 		.space	1160
 113      00000000 
 113      00000000 
 113      00000000 
 113      00000000 
 114              		.global	CanTask_attributes
 115              		.section	.rodata
 116 000a 0000     		.align	2
 117              	.LC1:
 118 000c 43616E54 		.ascii	"CanTask\000"
 118      61736B00 
 119              		.section	.rodata.CanTask_attributes,"a"
 120              		.align	2
 123              	CanTask_attributes:
 124 0000 0C000000 		.word	.LC1
 125 0004 00000000 		.space	4
 126 0008 00000000 		.word	CanTaksControlBlock
 127 000c 88040000 		.word	1160
 128 0010 00000000 		.word	CanTaksBuffer
 129 0014 00020000 		.word	512
 130 0018 18000000 		.word	24
 131 001c 00000000 		.space	8
 131      00000000 
 132              		.global	AdcTaskHandle
 133              		.section	.bss.AdcTaskHandle,"aw",%nobits
 134              		.align	2
 137              	AdcTaskHandle:
 138 0000 00000000 		.space	4
 139              		.global	AdcTaskBuffer
 140              		.section	.bss.AdcTaskBuffer,"aw",%nobits
 141              		.align	2
 144              	AdcTaskBuffer:
 145 0000 00000000 		.space	512
 145      00000000 
 145      00000000 
 145      00000000 
 145      00000000 
 146              		.global	AdcTaskControlBlock
 147              		.section	.bss.AdcTaskControlBlock,"aw",%nobits
 148              		.align	3
 151              	AdcTaskControlBlock:
 152 0000 00000000 		.space	1160
 152      00000000 
 152      00000000 
 152      00000000 
 152      00000000 
 153              		.global	AdcTask_attributes
 154              		.section	.rodata
ARM GAS  /tmp/ccNBuYt9.s 			page 4


 155              		.align	2
 156              	.LC2:
 157 0014 41646354 		.ascii	"AdcTask\000"
 157      61736B00 
 158              		.section	.rodata.AdcTask_attributes,"a"
 159              		.align	2
 162              	AdcTask_attributes:
 163 0000 14000000 		.word	.LC2
 164 0004 00000000 		.space	4
 165 0008 00000000 		.word	AdcTaskControlBlock
 166 000c 88040000 		.word	1160
 167 0010 00000000 		.word	AdcTaskBuffer
 168 0014 00020000 		.word	512
 169 0018 18000000 		.word	24
 170 001c 00000000 		.space	8
 170      00000000 
 171              		.global	canMsgReceivedSemHandle
 172              		.section	.bss.canMsgReceivedSemHandle,"aw",%nobits
 173              		.align	2
 176              	canMsgReceivedSemHandle:
 177 0000 00000000 		.space	4
 178              		.global	canMsgReceivedSem_attributes
 179              		.section	.rodata
 180              		.align	2
 181              	.LC3:
 182 001c 63616E4D 		.ascii	"canMsgReceivedSem\000"
 182      73675265 
 182      63656976 
 182      65645365 
 182      6D00
 183              		.section	.rodata.canMsgReceivedSem_attributes,"a"
 184              		.align	2
 187              	canMsgReceivedSem_attributes:
 188 0000 1C000000 		.word	.LC3
 189 0004 00000000 		.space	12
 189      00000000 
 189      00000000 
 190              		.global	rb_state
 191              		.section	.bss.rb_state,"aw",%nobits
 194              	rb_state:
 195 0000 00       		.space	1
 196              		.global	relay_board_data
 197              		.section	.bss.relay_board_data,"aw",%nobits
 198              		.align	2
 201              	relay_board_data:
 202 0000 00000000 		.space	24
 202      00000000 
 202      00000000 
 202      00000000 
 202      00000000 
 203              		.global	relay_board_bin
 204              		.section	.bss.relay_board_bin,"aw",%nobits
 205              		.align	2
 208              	relay_board_bin:
 209 0000 00000000 		.space	24
 209      00000000 
 209      00000000 
ARM GAS  /tmp/ccNBuYt9.s 			page 5


 209      00000000 
 209      00000000 
 210              		.global	adc1Results
 211              		.section	.bss.adc1Results,"aw",%nobits
 212              		.align	2
 215              	adc1Results:
 216 0000 00000000 		.space	6
 216      0000
 217              		.global	RxHeader
 218              		.section	.bss.RxHeader,"aw",%nobits
 219              		.align	2
 222              	RxHeader:
 223 0000 00000000 		.space	28
 223      00000000 
 223      00000000 
 223      00000000 
 223      00000000 
 224              		.global	RxData
 225              		.section	.bss.RxData,"aw",%nobits
 226              		.align	2
 229              	RxData:
 230 0000 00000000 		.space	8
 230      00000000 
 231              		.section	.text._write,"ax",%progbits
 232              		.align	1
 233              		.global	_write
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 238              	_write:
 239              	.LFB243:
 240              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** #include "usb_device.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/ccNBuYt9.s 			page 6


  26:Core/Src/main.c **** #include "usbd_cdc_if.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** typedef StaticTask_t osStaticThreadDef_t;
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** typedef enum
  34:Core/Src/main.c **** {
  35:Core/Src/main.c ****   ALL_RELAY_OFF = 0x00,
  36:Core/Src/main.c ****   CAP_RELAY = 0x01,
  37:Core/Src/main.c ****   RES_RELAY = 0x02,
  38:Core/Src/main.c ****   DSCHRGE_RELAY = 0x04,
  39:Core/Src/main.c ****   MTR_RELAY = 0x08,
  40:Core/Src/main.c **** } relayBit_t;
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** typedef enum
  43:Core/Src/main.c **** {
  44:Core/Src/main.c ****   RELAY_STBY = ALL_RELAY_OFF,
  45:Core/Src/main.c ****   RELAY_STRTP = RES_RELAY | DSCHRGE_RELAY,
  46:Core/Src/main.c ****   RELAY_CHRGE = RES_RELAY,
  47:Core/Src/main.c ****   RELAY_RUN = CAP_RELAY | DSCHRGE_RELAY | MTR_RELAY,
  48:Core/Src/main.c **** } rbState_t;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** typedef struct
  51:Core/Src/main.c **** {
  52:Core/Src/main.c ****   float fc_volt;
  53:Core/Src/main.c ****   float fc_curr;
  54:Core/Src/main.c ****   float mtr_volt;
  55:Core/Src/main.c ****   float mtr_curr;
  56:Core/Src/main.c ****   float cap_volt;
  57:Core/Src/main.c ****   float cap_curr;
  58:Core/Src/main.c **** } rbData_t;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** typedef struct
  61:Core/Src/main.c **** {
  62:Core/Src/main.c ****   uint32_t fc_volt;
  63:Core/Src/main.c ****   uint32_t fc_curr;
  64:Core/Src/main.c ****   uint32_t mtr_volt;
  65:Core/Src/main.c ****   uint32_t mtr_curr;
  66:Core/Src/main.c ****   uint32_t cap_volt;
  67:Core/Src/main.c ****   uint32_t cap_curr;
  68:Core/Src/main.c **** } rbDataBin_t;
  69:Core/Src/main.c **** /* USER CODE END PTD */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN PD */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PD */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  77:Core/Src/main.c **** /* USER CODE BEGIN PM */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PM */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  82:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
ARM GAS  /tmp/ccNBuYt9.s 			page 7


  83:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  84:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  85:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc2;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* Definitions for RelayTask */
  90:Core/Src/main.c **** osThreadId_t RelayTaskHandle;
  91:Core/Src/main.c **** uint32_t RelayTaskBuffer[128];
  92:Core/Src/main.c **** osStaticThreadDef_t RelayTaskControlBlock;
  93:Core/Src/main.c **** const osThreadAttr_t RelayTask_attributes = {
  94:Core/Src/main.c ****     .name = "RelayTask",
  95:Core/Src/main.c ****     .cb_mem = &RelayTaskControlBlock,
  96:Core/Src/main.c ****     .cb_size = sizeof(RelayTaskControlBlock),
  97:Core/Src/main.c ****     .stack_mem = &RelayTaskBuffer[0],
  98:Core/Src/main.c ****     .stack_size = sizeof(RelayTaskBuffer),
  99:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
 100:Core/Src/main.c **** };
 101:Core/Src/main.c **** /* Definitions for CanTask */
 102:Core/Src/main.c **** osThreadId_t CanTaskHandle;
 103:Core/Src/main.c **** uint32_t CanTaksBuffer[128];
 104:Core/Src/main.c **** osStaticThreadDef_t CanTaksControlBlock;
 105:Core/Src/main.c **** const osThreadAttr_t CanTask_attributes = {
 106:Core/Src/main.c ****     .name = "CanTask",
 107:Core/Src/main.c ****     .cb_mem = &CanTaksControlBlock,
 108:Core/Src/main.c ****     .cb_size = sizeof(CanTaksControlBlock),
 109:Core/Src/main.c ****     .stack_mem = &CanTaksBuffer[0],
 110:Core/Src/main.c ****     .stack_size = sizeof(CanTaksBuffer),
 111:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
 112:Core/Src/main.c **** };
 113:Core/Src/main.c **** /* Definitions for AdcTask */
 114:Core/Src/main.c **** osThreadId_t AdcTaskHandle;
 115:Core/Src/main.c **** uint32_t AdcTaskBuffer[128];
 116:Core/Src/main.c **** osStaticThreadDef_t AdcTaskControlBlock;
 117:Core/Src/main.c **** const osThreadAttr_t AdcTask_attributes = {
 118:Core/Src/main.c ****     .name = "AdcTask",
 119:Core/Src/main.c ****     .cb_mem = &AdcTaskControlBlock,
 120:Core/Src/main.c ****     .cb_size = sizeof(AdcTaskControlBlock),
 121:Core/Src/main.c ****     .stack_mem = &AdcTaskBuffer[0],
 122:Core/Src/main.c ****     .stack_size = sizeof(AdcTaskBuffer),
 123:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
 124:Core/Src/main.c **** };
 125:Core/Src/main.c **** /* Definitions for canMsgReceivedSem */
 126:Core/Src/main.c **** osSemaphoreId_t canMsgReceivedSemHandle;
 127:Core/Src/main.c **** const osSemaphoreAttr_t canMsgReceivedSem_attributes = {
 128:Core/Src/main.c ****     .name = "canMsgReceivedSem"};
 129:Core/Src/main.c **** /* USER CODE BEGIN PV */
 130:Core/Src/main.c **** rbState_t rb_state = RELAY_STBY;
 131:Core/Src/main.c **** rbData_t relay_board_data;
 132:Core/Src/main.c **** rbDataBin_t relay_board_bin;
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** volatile uint16_t adc1Results[3];
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
 137:Core/Src/main.c **** uint8_t RxData[8];
 138:Core/Src/main.c **** /* USER CODE END PV */
 139:Core/Src/main.c **** 
ARM GAS  /tmp/ccNBuYt9.s 			page 8


 140:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 141:Core/Src/main.c **** void SystemClock_Config(void);
 142:Core/Src/main.c **** static void MX_GPIO_Init(void);
 143:Core/Src/main.c **** static void MX_DMA_Init(void);
 144:Core/Src/main.c **** static void MX_CAN1_Init(void);
 145:Core/Src/main.c **** static void MX_ADC1_Init(void);
 146:Core/Src/main.c **** static void MX_ADC2_Init(void);
 147:Core/Src/main.c **** void StartRelayTask(void *argument);
 148:Core/Src/main.c **** void StartCanTask(void *argument);
 149:Core/Src/main.c **** void StartAdcTask(void *argument);
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 152:Core/Src/main.c **** int _write(int file, char *ptr, int len)
 153:Core/Src/main.c **** {
 241              		.loc 1 153 1
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 16
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI0:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 84B0     		sub	sp, sp, #16
 251              	.LCFI1:
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI2:
 255              		.cfi_def_cfa_register 7
 256 0006 F860     		str	r0, [r7, #12]
 257 0008 B960     		str	r1, [r7, #8]
 258 000a 7A60     		str	r2, [r7, #4]
 154:Core/Src/main.c ****   CDC_Transmit_FS((uint8_t *)ptr, (uint16_t)len);
 259              		.loc 1 154 3
 260 000c 7B68     		ldr	r3, [r7, #4]
 261 000e 9BB2     		uxth	r3, r3
 262 0010 1946     		mov	r1, r3
 263 0012 B868     		ldr	r0, [r7, #8]
 264 0014 FFF7FEFF 		bl	CDC_Transmit_FS
 155:Core/Src/main.c ****   return len;
 265              		.loc 1 155 10
 266 0018 7B68     		ldr	r3, [r7, #4]
 156:Core/Src/main.c **** }
 267              		.loc 1 156 1
 268 001a 1846     		mov	r0, r3
 269 001c 1037     		adds	r7, r7, #16
 270              	.LCFI3:
 271              		.cfi_def_cfa_offset 8
 272 001e BD46     		mov	sp, r7
 273              	.LCFI4:
 274              		.cfi_def_cfa_register 13
 275              		@ sp needed
 276 0020 80BD     		pop	{r7, pc}
 277              		.cfi_endproc
 278              	.LFE243:
 280              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 281              		.align	1
ARM GAS  /tmp/ccNBuYt9.s 			page 9


 282              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 287              	HAL_CAN_RxFifo0MsgPendingCallback:
 288              	.LFB244:
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 159:Core/Src/main.c **** {
 289              		.loc 1 159 1
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 8
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              	.LCFI5:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              	.LCFI6:
 300              		.cfi_def_cfa_offset 16
 301 0004 00AF     		add	r7, sp, #0
 302              	.LCFI7:
 303              		.cfi_def_cfa_register 7
 304 0006 7860     		str	r0, [r7, #4]
 160:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 305              		.loc 1 160 3
 306 0008 074B     		ldr	r3, .L4
 307 000a 084A     		ldr	r2, .L4+4
 308 000c 0021     		movs	r1, #0
 309 000e 7868     		ldr	r0, [r7, #4]
 310 0010 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 161:Core/Src/main.c ****   osSemaphoreRelease(canMsgReceivedSemHandle);
 311              		.loc 1 161 3
 312 0014 064B     		ldr	r3, .L4+8
 313 0016 1B68     		ldr	r3, [r3]
 314 0018 1846     		mov	r0, r3
 315 001a FFF7FEFF 		bl	osSemaphoreRelease
 162:Core/Src/main.c **** }
 316              		.loc 1 162 1
 317 001e 00BF     		nop
 318 0020 0837     		adds	r7, r7, #8
 319              	.LCFI8:
 320              		.cfi_def_cfa_offset 8
 321 0022 BD46     		mov	sp, r7
 322              	.LCFI9:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 0024 80BD     		pop	{r7, pc}
 326              	.L5:
 327 0026 00BF     		.align	2
 328              	.L4:
 329 0028 00000000 		.word	RxData
 330 002c 00000000 		.word	RxHeader
 331 0030 00000000 		.word	canMsgReceivedSemHandle
 332              		.cfi_endproc
 333              	.LFE244:
ARM GAS  /tmp/ccNBuYt9.s 			page 10


 335              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 336              		.align	1
 337              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 342              	HAL_CAN_RxFifo1MsgPendingCallback:
 343              	.LFB245:
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 165:Core/Src/main.c **** {
 344              		.loc 1 165 1
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 8
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348 0000 80B5     		push	{r7, lr}
 349              	.LCFI10:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 82B0     		sub	sp, sp, #8
 354              	.LCFI11:
 355              		.cfi_def_cfa_offset 16
 356 0004 00AF     		add	r7, sp, #0
 357              	.LCFI12:
 358              		.cfi_def_cfa_register 7
 359 0006 7860     		str	r0, [r7, #4]
 166:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 360              		.loc 1 166 3
 361 0008 074B     		ldr	r3, .L7
 362 000a 084A     		ldr	r2, .L7+4
 363 000c 0121     		movs	r1, #1
 364 000e 7868     		ldr	r0, [r7, #4]
 365 0010 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 167:Core/Src/main.c ****   osSemaphoreRelease(canMsgReceivedSemHandle);
 366              		.loc 1 167 3
 367 0014 064B     		ldr	r3, .L7+8
 368 0016 1B68     		ldr	r3, [r3]
 369 0018 1846     		mov	r0, r3
 370 001a FFF7FEFF 		bl	osSemaphoreRelease
 168:Core/Src/main.c **** }
 371              		.loc 1 168 1
 372 001e 00BF     		nop
 373 0020 0837     		adds	r7, r7, #8
 374              	.LCFI13:
 375              		.cfi_def_cfa_offset 8
 376 0022 BD46     		mov	sp, r7
 377              	.LCFI14:
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 0024 80BD     		pop	{r7, pc}
 381              	.L8:
 382 0026 00BF     		.align	2
 383              	.L7:
 384 0028 00000000 		.word	RxData
 385 002c 00000000 		.word	RxHeader
 386 0030 00000000 		.word	canMsgReceivedSemHandle
ARM GAS  /tmp/ccNBuYt9.s 			page 11


 387              		.cfi_endproc
 388              	.LFE245:
 390              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 391              		.align	1
 392              		.global	HAL_CAN_TxMailbox0CompleteCallback
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	HAL_CAN_TxMailbox0CompleteCallback:
 398              	.LFB246:
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /* Transmit Completed Callbacks for Message Sent Confirmations */
 171:Core/Src/main.c **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {}
 399              		.loc 1 171 66
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 8
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404 0000 80B4     		push	{r7}
 405              	.LCFI15:
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 7, -4
 408 0002 83B0     		sub	sp, sp, #12
 409              	.LCFI16:
 410              		.cfi_def_cfa_offset 16
 411 0004 00AF     		add	r7, sp, #0
 412              	.LCFI17:
 413              		.cfi_def_cfa_register 7
 414 0006 7860     		str	r0, [r7, #4]
 415              		.loc 1 171 67
 416 0008 00BF     		nop
 417 000a 0C37     		adds	r7, r7, #12
 418              	.LCFI18:
 419              		.cfi_def_cfa_offset 4
 420 000c BD46     		mov	sp, r7
 421              	.LCFI19:
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 000e 5DF8047B 		ldr	r7, [sp], #4
 425              	.LCFI20:
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0012 7047     		bx	lr
 429              		.cfi_endproc
 430              	.LFE246:
 432              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 433              		.align	1
 434              		.global	HAL_CAN_TxMailbox1CompleteCallback
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	HAL_CAN_TxMailbox1CompleteCallback:
 440              	.LFB247:
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {}
 441              		.loc 1 173 66
 442              		.cfi_startproc
ARM GAS  /tmp/ccNBuYt9.s 			page 12


 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              	.LCFI21:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 83B0     		sub	sp, sp, #12
 451              	.LCFI22:
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI23:
 455              		.cfi_def_cfa_register 7
 456 0006 7860     		str	r0, [r7, #4]
 457              		.loc 1 173 67
 458 0008 00BF     		nop
 459 000a 0C37     		adds	r7, r7, #12
 460              	.LCFI24:
 461              		.cfi_def_cfa_offset 4
 462 000c BD46     		mov	sp, r7
 463              	.LCFI25:
 464              		.cfi_def_cfa_register 13
 465              		@ sp needed
 466 000e 5DF8047B 		ldr	r7, [sp], #4
 467              	.LCFI26:
 468              		.cfi_restore 7
 469              		.cfi_def_cfa_offset 0
 470 0012 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE247:
 474              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 475              		.align	1
 476              		.global	HAL_CAN_TxMailbox2CompleteCallback
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 481              	HAL_CAN_TxMailbox2CompleteCallback:
 482              	.LFB248:
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {}
 483              		.loc 1 175 66
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 8
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488 0000 80B4     		push	{r7}
 489              	.LCFI27:
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 7, -4
 492 0002 83B0     		sub	sp, sp, #12
 493              	.LCFI28:
 494              		.cfi_def_cfa_offset 16
 495 0004 00AF     		add	r7, sp, #0
 496              	.LCFI29:
 497              		.cfi_def_cfa_register 7
 498 0006 7860     		str	r0, [r7, #4]
 499              		.loc 1 175 67
ARM GAS  /tmp/ccNBuYt9.s 			page 13


 500 0008 00BF     		nop
 501 000a 0C37     		adds	r7, r7, #12
 502              	.LCFI30:
 503              		.cfi_def_cfa_offset 4
 504 000c BD46     		mov	sp, r7
 505              	.LCFI31:
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 000e 5DF8047B 		ldr	r7, [sp], #4
 509              	.LCFI32:
 510              		.cfi_restore 7
 511              		.cfi_def_cfa_offset 0
 512 0012 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE248:
 516              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 517              		.align	1
 518              		.global	HAL_ADC_ConvCpltCallback
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 523              	HAL_ADC_ConvCpltCallback:
 524              	.LFB249:
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 178:Core/Src/main.c **** {
 525              		.loc 1 178 1
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 8
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529 0000 80B5     		push	{r7, lr}
 530              	.LCFI33:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 82B0     		sub	sp, sp, #8
 535              	.LCFI34:
 536              		.cfi_def_cfa_offset 16
 537 0004 00AF     		add	r7, sp, #0
 538              	.LCFI35:
 539              		.cfi_def_cfa_register 7
 540 0006 7860     		str	r0, [r7, #4]
 179:Core/Src/main.c ****   relay_board_bin.fc_volt = adc1Results[1];
 541              		.loc 1 179 40
 542 0008 074B     		ldr	r3, .L13
 543 000a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 544 000c 9BB2     		uxth	r3, r3
 545 000e 1A46     		mov	r2, r3
 546              		.loc 1 179 27
 547 0010 064B     		ldr	r3, .L13+4
 548 0012 1A60     		str	r2, [r3]
 180:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Results, 3);
 549              		.loc 1 180 3
 550 0014 0322     		movs	r2, #3
 551 0016 0449     		ldr	r1, .L13
 552 0018 0548     		ldr	r0, .L13+8
 553 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
ARM GAS  /tmp/ccNBuYt9.s 			page 14


 181:Core/Src/main.c **** }
 554              		.loc 1 181 1
 555 001e 00BF     		nop
 556 0020 0837     		adds	r7, r7, #8
 557              	.LCFI36:
 558              		.cfi_def_cfa_offset 8
 559 0022 BD46     		mov	sp, r7
 560              	.LCFI37:
 561              		.cfi_def_cfa_register 13
 562              		@ sp needed
 563 0024 80BD     		pop	{r7, pc}
 564              	.L14:
 565 0026 00BF     		.align	2
 566              	.L13:
 567 0028 00000000 		.word	adc1Results
 568 002c 00000000 		.word	relay_board_bin
 569 0030 00000000 		.word	hadc1
 570              		.cfi_endproc
 571              	.LFE249:
 573              		.section	.text.main,"ax",%progbits
 574              		.align	1
 575              		.global	main
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 580              	main:
 581              	.LFB250:
 182:Core/Src/main.c **** /* USER CODE END PFP */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 185:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** /* USER CODE END 0 */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /**
 190:Core/Src/main.c ****  * @brief  The application entry point.
 191:Core/Src/main.c ****  * @retval int
 192:Core/Src/main.c ****  */
 193:Core/Src/main.c **** int main(void)
 194:Core/Src/main.c **** {
 582              		.loc 1 194 1
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 1, uses_anonymous_args = 0
 586 0000 80B5     		push	{r7, lr}
 587              	.LCFI38:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 00AF     		add	r7, sp, #0
 592              	.LCFI39:
 593              		.cfi_def_cfa_register 7
 195:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE END 1 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/ccNBuYt9.s 			page 15


 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 202:Core/Src/main.c ****   HAL_Init();
 594              		.loc 1 202 3
 595 0004 FFF7FEFF 		bl	HAL_Init
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END Init */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* Configure the system clock */
 209:Core/Src/main.c ****   SystemClock_Config();
 596              		.loc 1 209 3
 597 0008 FFF7FEFF 		bl	SystemClock_Config
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END SysInit */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* Initialize all configured peripherals */
 216:Core/Src/main.c ****   MX_GPIO_Init();
 598              		.loc 1 216 3
 599 000c FFF7FEFF 		bl	MX_GPIO_Init
 217:Core/Src/main.c ****   MX_DMA_Init();
 600              		.loc 1 217 3
 601 0010 FFF7FEFF 		bl	MX_DMA_Init
 218:Core/Src/main.c ****   MX_CAN1_Init();
 602              		.loc 1 218 3
 603 0014 FFF7FEFF 		bl	MX_CAN1_Init
 219:Core/Src/main.c ****   MX_ADC1_Init();
 604              		.loc 1 219 3
 605 0018 FFF7FEFF 		bl	MX_ADC1_Init
 220:Core/Src/main.c ****   MX_ADC2_Init();
 606              		.loc 1 220 3
 607 001c FFF7FEFF 		bl	MX_ADC2_Init
 221:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE END 2 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* Init scheduler */
 226:Core/Src/main.c ****   osKernelInitialize();
 608              		.loc 1 226 3
 609 0020 FFF7FEFF 		bl	osKernelInitialize
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 229:Core/Src/main.c ****   /* add mutexes, ... */
 230:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* Create the semaphores(s) */
 233:Core/Src/main.c ****   /* creation of canMsgReceivedSem */
 234:Core/Src/main.c ****   canMsgReceivedSemHandle = osSemaphoreNew(1, 0, &canMsgReceivedSem_attributes);
 610              		.loc 1 234 29
 611 0024 114A     		ldr	r2, .L17
 612 0026 0021     		movs	r1, #0
 613 0028 0120     		movs	r0, #1
 614 002a FFF7FEFF 		bl	osSemaphoreNew
 615 002e 0346     		mov	r3, r0
ARM GAS  /tmp/ccNBuYt9.s 			page 16


 616              		.loc 1 234 27
 617 0030 0F4A     		ldr	r2, .L17+4
 618 0032 1360     		str	r3, [r2]
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 237:Core/Src/main.c ****   /* add semaphores, ... */
 238:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 241:Core/Src/main.c ****   /* start timers, add new ones, ... */
 242:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 245:Core/Src/main.c ****   /* add queues, ... */
 246:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* Create the thread(s) */
 249:Core/Src/main.c ****   /* creation of RelayTask */
 250:Core/Src/main.c ****   RelayTaskHandle = osThreadNew(StartRelayTask, NULL, &RelayTask_attributes);
 619              		.loc 1 250 21
 620 0034 0F4A     		ldr	r2, .L17+8
 621 0036 0021     		movs	r1, #0
 622 0038 0F48     		ldr	r0, .L17+12
 623 003a FFF7FEFF 		bl	osThreadNew
 624 003e 0346     		mov	r3, r0
 625              		.loc 1 250 19
 626 0040 0E4A     		ldr	r2, .L17+16
 627 0042 1360     		str	r3, [r2]
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* creation of CanTask */
 253:Core/Src/main.c ****   CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 628              		.loc 1 253 19
 629 0044 0E4A     		ldr	r2, .L17+20
 630 0046 0021     		movs	r1, #0
 631 0048 0E48     		ldr	r0, .L17+24
 632 004a FFF7FEFF 		bl	osThreadNew
 633 004e 0346     		mov	r3, r0
 634              		.loc 1 253 17
 635 0050 0D4A     		ldr	r2, .L17+28
 636 0052 1360     		str	r3, [r2]
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* creation of AdcTask */
 256:Core/Src/main.c ****   AdcTaskHandle = osThreadNew(StartAdcTask, NULL, &AdcTask_attributes);
 637              		.loc 1 256 19
 638 0054 0D4A     		ldr	r2, .L17+32
 639 0056 0021     		movs	r1, #0
 640 0058 0D48     		ldr	r0, .L17+36
 641 005a FFF7FEFF 		bl	osThreadNew
 642 005e 0346     		mov	r3, r0
 643              		.loc 1 256 17
 644 0060 0C4A     		ldr	r2, .L17+40
 645 0062 1360     		str	r3, [r2]
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 259:Core/Src/main.c ****   /* add threads, ... */
 260:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 261:Core/Src/main.c **** 
ARM GAS  /tmp/ccNBuYt9.s 			page 17


 262:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 263:Core/Src/main.c ****   /* add events, ... */
 264:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* Start scheduler */
 267:Core/Src/main.c ****   osKernelStart();
 646              		.loc 1 267 3
 647 0064 FFF7FEFF 		bl	osKernelStart
 648              	.L16:
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 270:Core/Src/main.c ****   /* Infinite loop */
 271:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   while (1)
 649              		.loc 1 273 9 discriminator 1
 650 0068 FEE7     		b	.L16
 651              	.L18:
 652 006a 00BF     		.align	2
 653              	.L17:
 654 006c 00000000 		.word	canMsgReceivedSem_attributes
 655 0070 00000000 		.word	canMsgReceivedSemHandle
 656 0074 00000000 		.word	RelayTask_attributes
 657 0078 00000000 		.word	StartRelayTask
 658 007c 00000000 		.word	RelayTaskHandle
 659 0080 00000000 		.word	CanTask_attributes
 660 0084 00000000 		.word	StartCanTask
 661 0088 00000000 		.word	CanTaskHandle
 662 008c 00000000 		.word	AdcTask_attributes
 663 0090 00000000 		.word	StartAdcTask
 664 0094 00000000 		.word	AdcTaskHandle
 665              		.cfi_endproc
 666              	.LFE250:
 668              		.section	.text.SystemClock_Config,"ax",%progbits
 669              		.align	1
 670              		.global	SystemClock_Config
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 675              	SystemClock_Config:
 676              	.LFB251:
 274:Core/Src/main.c ****   {
 275:Core/Src/main.c ****     /* USER CODE END WHILE */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 278:Core/Src/main.c ****   }
 279:Core/Src/main.c ****   /* USER CODE END 3 */
 280:Core/Src/main.c **** }
 281:Core/Src/main.c **** 
 282:Core/Src/main.c **** /**
 283:Core/Src/main.c ****  * @brief System Clock Configuration
 284:Core/Src/main.c ****  * @retval None
 285:Core/Src/main.c ****  */
 286:Core/Src/main.c **** void SystemClock_Config(void)
 287:Core/Src/main.c **** {
 677              		.loc 1 287 1
 678              		.cfi_startproc
ARM GAS  /tmp/ccNBuYt9.s 			page 18


 679              		@ args = 0, pretend = 0, frame = 80
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              	.LCFI40:
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 94B0     		sub	sp, sp, #80
 687              	.LCFI41:
 688              		.cfi_def_cfa_offset 88
 689 0004 00AF     		add	r7, sp, #0
 690              	.LCFI42:
 691              		.cfi_def_cfa_register 7
 288:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 692              		.loc 1 288 22
 693 0006 07F11C03 		add	r3, r7, #28
 694 000a 3422     		movs	r2, #52
 695 000c 0021     		movs	r1, #0
 696 000e 1846     		mov	r0, r3
 697 0010 FFF7FEFF 		bl	memset
 289:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 698              		.loc 1 289 22
 699 0014 07F10803 		add	r3, r7, #8
 700 0018 0022     		movs	r2, #0
 701 001a 1A60     		str	r2, [r3]
 702 001c 5A60     		str	r2, [r3, #4]
 703 001e 9A60     		str	r2, [r3, #8]
 704 0020 DA60     		str	r2, [r3, #12]
 705 0022 1A61     		str	r2, [r3, #16]
 706              	.LBB4:
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 292:Core/Src/main.c ****    */
 293:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 707              		.loc 1 293 3
 708 0024 0023     		movs	r3, #0
 709 0026 7B60     		str	r3, [r7, #4]
 710 0028 324B     		ldr	r3, .L23
 711 002a 1B6C     		ldr	r3, [r3, #64]
 712 002c 314A     		ldr	r2, .L23
 713 002e 43F08053 		orr	r3, r3, #268435456
 714 0032 1364     		str	r3, [r2, #64]
 715 0034 2F4B     		ldr	r3, .L23
 716 0036 1B6C     		ldr	r3, [r3, #64]
 717 0038 03F08053 		and	r3, r3, #268435456
 718 003c 7B60     		str	r3, [r7, #4]
 719 003e 7B68     		ldr	r3, [r7, #4]
 720              	.LBE4:
 721              	.LBB5:
 294:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 722              		.loc 1 294 3
 723 0040 0023     		movs	r3, #0
 724 0042 3B60     		str	r3, [r7]
 725 0044 2C4B     		ldr	r3, .L23+4
 726 0046 1B68     		ldr	r3, [r3]
 727 0048 2B4A     		ldr	r2, .L23+4
 728 004a 43F44043 		orr	r3, r3, #49152
ARM GAS  /tmp/ccNBuYt9.s 			page 19


 729 004e 1360     		str	r3, [r2]
 730 0050 294B     		ldr	r3, .L23+4
 731 0052 1B68     		ldr	r3, [r3]
 732 0054 03F44043 		and	r3, r3, #49152
 733 0058 3B60     		str	r3, [r7]
 734 005a 3B68     		ldr	r3, [r7]
 735              	.LBE5:
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 297:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 298:Core/Src/main.c ****    */
 299:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 736              		.loc 1 299 36
 737 005c 0123     		movs	r3, #1
 738 005e FB61     		str	r3, [r7, #28]
 300:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 739              		.loc 1 300 30
 740 0060 4FF4A023 		mov	r3, #327680
 741 0064 3B62     		str	r3, [r7, #32]
 301:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 742              		.loc 1 301 34
 743 0066 0223     		movs	r3, #2
 744 0068 7B63     		str	r3, [r7, #52]
 302:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 745              		.loc 1 302 35
 746 006a 4FF48003 		mov	r3, #4194304
 747 006e BB63     		str	r3, [r7, #56]
 303:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 748              		.loc 1 303 30
 749 0070 0423     		movs	r3, #4
 750 0072 FB63     		str	r3, [r7, #60]
 304:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 180;
 751              		.loc 1 304 30
 752 0074 B423     		movs	r3, #180
 753 0076 3B64     		str	r3, [r7, #64]
 305:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 754              		.loc 1 305 30
 755 0078 0223     		movs	r3, #2
 756 007a 7B64     		str	r3, [r7, #68]
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 5;
 757              		.loc 1 306 30
 758 007c 0523     		movs	r3, #5
 759 007e BB64     		str	r3, [r7, #72]
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 760              		.loc 1 307 30
 761 0080 0223     		movs	r3, #2
 762 0082 FB64     		str	r3, [r7, #76]
 308:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 763              		.loc 1 308 7
 764 0084 07F11C03 		add	r3, r7, #28
 765 0088 1846     		mov	r0, r3
 766 008a FFF7FEFF 		bl	HAL_RCC_OscConfig
 767 008e 0346     		mov	r3, r0
 768              		.loc 1 308 6
 769 0090 002B     		cmp	r3, #0
 770 0092 01D0     		beq	.L20
 309:Core/Src/main.c ****   {
ARM GAS  /tmp/ccNBuYt9.s 			page 20


 310:Core/Src/main.c ****     Error_Handler();
 771              		.loc 1 310 5
 772 0094 FFF7FEFF 		bl	Error_Handler
 773              	.L20:
 311:Core/Src/main.c ****   }
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /** Activate the Over-Drive mode
 314:Core/Src/main.c ****    */
 315:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 774              		.loc 1 315 7
 775 0098 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 776 009c 0346     		mov	r3, r0
 777              		.loc 1 315 6
 778 009e 002B     		cmp	r3, #0
 779 00a0 01D0     		beq	.L21
 316:Core/Src/main.c ****   {
 317:Core/Src/main.c ****     Error_Handler();
 780              		.loc 1 317 5
 781 00a2 FFF7FEFF 		bl	Error_Handler
 782              	.L21:
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 321:Core/Src/main.c ****    */
 322:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 783              		.loc 1 322 31
 784 00a6 0F23     		movs	r3, #15
 785 00a8 BB60     		str	r3, [r7, #8]
 323:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 786              		.loc 1 323 34
 787 00aa 0223     		movs	r3, #2
 788 00ac FB60     		str	r3, [r7, #12]
 324:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 789              		.loc 1 324 35
 790 00ae 0023     		movs	r3, #0
 791 00b0 3B61     		str	r3, [r7, #16]
 325:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 792              		.loc 1 325 36
 793 00b2 4FF4A053 		mov	r3, #5120
 794 00b6 7B61     		str	r3, [r7, #20]
 326:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 795              		.loc 1 326 36
 796 00b8 4FF48053 		mov	r3, #4096
 797 00bc BB61     		str	r3, [r7, #24]
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 798              		.loc 1 328 7
 799 00be 07F10803 		add	r3, r7, #8
 800 00c2 0521     		movs	r1, #5
 801 00c4 1846     		mov	r0, r3
 802 00c6 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 803 00ca 0346     		mov	r3, r0
 804              		.loc 1 328 6
 805 00cc 002B     		cmp	r3, #0
 806 00ce 01D0     		beq	.L22
 329:Core/Src/main.c ****   {
 330:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccNBuYt9.s 			page 21


 807              		.loc 1 330 5
 808 00d0 FFF7FEFF 		bl	Error_Handler
 809              	.L22:
 331:Core/Src/main.c ****   }
 332:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 810              		.loc 1 332 3
 811 00d4 0022     		movs	r2, #0
 812 00d6 4FF48001 		mov	r1, #4194304
 813 00da 0020     		movs	r0, #0
 814 00dc FFF7FEFF 		bl	HAL_RCC_MCOConfig
 333:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 815              		.loc 1 333 3
 816 00e0 4FF0E062 		mov	r2, #117440512
 817 00e4 0021     		movs	r1, #0
 818 00e6 0120     		movs	r0, #1
 819 00e8 FFF7FEFF 		bl	HAL_RCC_MCOConfig
 334:Core/Src/main.c **** }
 820              		.loc 1 334 1
 821 00ec 00BF     		nop
 822 00ee 5037     		adds	r7, r7, #80
 823              	.LCFI43:
 824              		.cfi_def_cfa_offset 8
 825 00f0 BD46     		mov	sp, r7
 826              	.LCFI44:
 827              		.cfi_def_cfa_register 13
 828              		@ sp needed
 829 00f2 80BD     		pop	{r7, pc}
 830              	.L24:
 831              		.align	2
 832              	.L23:
 833 00f4 00380240 		.word	1073887232
 834 00f8 00700040 		.word	1073770496
 835              		.cfi_endproc
 836              	.LFE251:
 838              		.section	.text.MX_ADC1_Init,"ax",%progbits
 839              		.align	1
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 844              	MX_ADC1_Init:
 845              	.LFB252:
 335:Core/Src/main.c **** 
 336:Core/Src/main.c **** /**
 337:Core/Src/main.c ****  * @brief ADC1 Initialization Function
 338:Core/Src/main.c ****  * @param None
 339:Core/Src/main.c ****  * @retval None
 340:Core/Src/main.c ****  */
 341:Core/Src/main.c **** static void MX_ADC1_Init(void)
 342:Core/Src/main.c **** {
 846              		.loc 1 342 1
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 16
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850 0000 80B5     		push	{r7, lr}
 851              	.LCFI45:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
ARM GAS  /tmp/ccNBuYt9.s 			page 22


 854              		.cfi_offset 14, -4
 855 0002 84B0     		sub	sp, sp, #16
 856              	.LCFI46:
 857              		.cfi_def_cfa_offset 24
 858 0004 00AF     		add	r7, sp, #0
 859              	.LCFI47:
 860              		.cfi_def_cfa_register 7
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 861              		.loc 1 348 26
 862 0006 3B46     		mov	r3, r7
 863 0008 0022     		movs	r2, #0
 864 000a 1A60     		str	r2, [r3]
 865 000c 5A60     		str	r2, [r3, #4]
 866 000e 9A60     		str	r2, [r3, #8]
 867 0010 DA60     		str	r2, [r3, #12]
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 355:Core/Src/main.c ****    */
 356:Core/Src/main.c ****   hadc1.Instance = ADC1;
 868              		.loc 1 356 18
 869 0012 2F4B     		ldr	r3, .L31
 870 0014 2F4A     		ldr	r2, .L31+4
 871 0016 1A60     		str	r2, [r3]
 357:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 872              		.loc 1 357 29
 873 0018 2D4B     		ldr	r3, .L31
 874 001a 4FF48032 		mov	r2, #65536
 875 001e 5A60     		str	r2, [r3, #4]
 358:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 876              		.loc 1 358 25
 877 0020 2B4B     		ldr	r3, .L31
 878 0022 0022     		movs	r2, #0
 879 0024 9A60     		str	r2, [r3, #8]
 359:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 880              		.loc 1 359 27
 881 0026 2A4B     		ldr	r3, .L31
 882 0028 0122     		movs	r2, #1
 883 002a 1A61     		str	r2, [r3, #16]
 360:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 884              		.loc 1 360 33
 885 002c 284B     		ldr	r3, .L31
 886 002e 0022     		movs	r2, #0
 887 0030 1A76     		strb	r2, [r3, #24]
 361:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 888              		.loc 1 361 36
 889 0032 274B     		ldr	r3, .L31
 890 0034 0022     		movs	r2, #0
 891 0036 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccNBuYt9.s 			page 23


 362:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 892              		.loc 1 362 35
 893 003a 254B     		ldr	r3, .L31
 894 003c 0022     		movs	r2, #0
 895 003e DA62     		str	r2, [r3, #44]
 363:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 896              		.loc 1 363 31
 897 0040 234B     		ldr	r3, .L31
 898 0042 254A     		ldr	r2, .L31+8
 899 0044 9A62     		str	r2, [r3, #40]
 364:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 900              		.loc 1 364 24
 901 0046 224B     		ldr	r3, .L31
 902 0048 0022     		movs	r2, #0
 903 004a DA60     		str	r2, [r3, #12]
 365:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 904              		.loc 1 365 30
 905 004c 204B     		ldr	r3, .L31
 906 004e 0322     		movs	r2, #3
 907 0050 DA61     		str	r2, [r3, #28]
 366:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 908              		.loc 1 366 36
 909 0052 1F4B     		ldr	r3, .L31
 910 0054 0022     		movs	r2, #0
 911 0056 83F83020 		strb	r2, [r3, #48]
 367:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 912              		.loc 1 367 27
 913 005a 1D4B     		ldr	r3, .L31
 914 005c 0022     		movs	r2, #0
 915 005e 5A61     		str	r2, [r3, #20]
 368:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 916              		.loc 1 368 7
 917 0060 1B48     		ldr	r0, .L31
 918 0062 FFF7FEFF 		bl	HAL_ADC_Init
 919 0066 0346     		mov	r3, r0
 920              		.loc 1 368 6
 921 0068 002B     		cmp	r3, #0
 922 006a 01D0     		beq	.L26
 369:Core/Src/main.c ****   {
 370:Core/Src/main.c ****     Error_Handler();
 923              		.loc 1 370 5
 924 006c FFF7FEFF 		bl	Error_Handler
 925              	.L26:
 371:Core/Src/main.c ****   }
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 374:Core/Src/main.c ****    */
 375:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 926              		.loc 1 375 19
 927 0070 0423     		movs	r3, #4
 928 0072 3B60     		str	r3, [r7]
 376:Core/Src/main.c ****   sConfig.Rank = 1;
 929              		.loc 1 376 16
 930 0074 0123     		movs	r3, #1
 931 0076 7B60     		str	r3, [r7, #4]
 377:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 932              		.loc 1 377 24
ARM GAS  /tmp/ccNBuYt9.s 			page 24


 933 0078 0723     		movs	r3, #7
 934 007a BB60     		str	r3, [r7, #8]
 378:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 935              		.loc 1 378 7
 936 007c 3B46     		mov	r3, r7
 937 007e 1946     		mov	r1, r3
 938 0080 1348     		ldr	r0, .L31
 939 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 940 0086 0346     		mov	r3, r0
 941              		.loc 1 378 6
 942 0088 002B     		cmp	r3, #0
 943 008a 01D0     		beq	.L27
 379:Core/Src/main.c ****   {
 380:Core/Src/main.c ****     Error_Handler();
 944              		.loc 1 380 5
 945 008c FFF7FEFF 		bl	Error_Handler
 946              	.L27:
 381:Core/Src/main.c ****   }
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 384:Core/Src/main.c ****    */
 385:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 947              		.loc 1 385 19
 948 0090 0623     		movs	r3, #6
 949 0092 3B60     		str	r3, [r7]
 386:Core/Src/main.c ****   sConfig.Rank = 2;
 950              		.loc 1 386 16
 951 0094 0223     		movs	r3, #2
 952 0096 7B60     		str	r3, [r7, #4]
 387:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 953              		.loc 1 387 7
 954 0098 3B46     		mov	r3, r7
 955 009a 1946     		mov	r1, r3
 956 009c 0C48     		ldr	r0, .L31
 957 009e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 958 00a2 0346     		mov	r3, r0
 959              		.loc 1 387 6
 960 00a4 002B     		cmp	r3, #0
 961 00a6 01D0     		beq	.L28
 388:Core/Src/main.c ****   {
 389:Core/Src/main.c ****     Error_Handler();
 962              		.loc 1 389 5
 963 00a8 FFF7FEFF 		bl	Error_Handler
 964              	.L28:
 390:Core/Src/main.c ****   }
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 393:Core/Src/main.c ****    */
 394:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_15;
 965              		.loc 1 394 19
 966 00ac 0F23     		movs	r3, #15
 967 00ae 3B60     		str	r3, [r7]
 395:Core/Src/main.c ****   sConfig.Rank = 3;
 968              		.loc 1 395 16
 969 00b0 0323     		movs	r3, #3
 970 00b2 7B60     		str	r3, [r7, #4]
 396:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccNBuYt9.s 			page 25


 971              		.loc 1 396 7
 972 00b4 3B46     		mov	r3, r7
 973 00b6 1946     		mov	r1, r3
 974 00b8 0548     		ldr	r0, .L31
 975 00ba FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 976 00be 0346     		mov	r3, r0
 977              		.loc 1 396 6
 978 00c0 002B     		cmp	r3, #0
 979 00c2 01D0     		beq	.L30
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****     Error_Handler();
 980              		.loc 1 398 5
 981 00c4 FFF7FEFF 		bl	Error_Handler
 982              	.L30:
 399:Core/Src/main.c ****   }
 400:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 403:Core/Src/main.c **** }
 983              		.loc 1 403 1
 984 00c8 00BF     		nop
 985 00ca 1037     		adds	r7, r7, #16
 986              	.LCFI48:
 987              		.cfi_def_cfa_offset 8
 988 00cc BD46     		mov	sp, r7
 989              	.LCFI49:
 990              		.cfi_def_cfa_register 13
 991              		@ sp needed
 992 00ce 80BD     		pop	{r7, pc}
 993              	.L32:
 994              		.align	2
 995              	.L31:
 996 00d0 00000000 		.word	hadc1
 997 00d4 00200140 		.word	1073815552
 998 00d8 0100000F 		.word	251658241
 999              		.cfi_endproc
 1000              	.LFE252:
 1002              		.section	.text.MX_ADC2_Init,"ax",%progbits
 1003              		.align	1
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1008              	MX_ADC2_Init:
 1009              	.LFB253:
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** /**
 406:Core/Src/main.c ****  * @brief ADC2 Initialization Function
 407:Core/Src/main.c ****  * @param None
 408:Core/Src/main.c ****  * @retval None
 409:Core/Src/main.c ****  */
 410:Core/Src/main.c **** static void MX_ADC2_Init(void)
 411:Core/Src/main.c **** {
 1010              		.loc 1 411 1
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 16
 1013              		@ frame_needed = 1, uses_anonymous_args = 0
 1014 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccNBuYt9.s 			page 26


 1015              	.LCFI50:
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 7, -8
 1018              		.cfi_offset 14, -4
 1019 0002 84B0     		sub	sp, sp, #16
 1020              	.LCFI51:
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              	.LCFI52:
 1024              		.cfi_def_cfa_register 7
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 1025              		.loc 1 417 26
 1026 0006 3B46     		mov	r3, r7
 1027 0008 0022     		movs	r2, #0
 1028 000a 1A60     		str	r2, [r3]
 1029 000c 5A60     		str	r2, [r3, #4]
 1030 000e 9A60     		str	r2, [r3, #8]
 1031 0010 DA60     		str	r2, [r3, #12]
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 424:Core/Src/main.c ****    */
 425:Core/Src/main.c ****   hadc2.Instance = ADC2;
 1032              		.loc 1 425 18
 1033 0012 2F4B     		ldr	r3, .L39
 1034 0014 2F4A     		ldr	r2, .L39+4
 1035 0016 1A60     		str	r2, [r3]
 426:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1036              		.loc 1 426 29
 1037 0018 2D4B     		ldr	r3, .L39
 1038 001a 4FF48032 		mov	r2, #65536
 1039 001e 5A60     		str	r2, [r3, #4]
 427:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 1040              		.loc 1 427 25
 1041 0020 2B4B     		ldr	r3, .L39
 1042 0022 0022     		movs	r2, #0
 1043 0024 9A60     		str	r2, [r3, #8]
 428:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ENABLE;
 1044              		.loc 1 428 27
 1045 0026 2A4B     		ldr	r3, .L39
 1046 0028 0122     		movs	r2, #1
 1047 002a 1A61     		str	r2, [r3, #16]
 429:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = ENABLE;
 1048              		.loc 1 429 33
 1049 002c 284B     		ldr	r3, .L39
 1050 002e 0122     		movs	r2, #1
 1051 0030 1A76     		strb	r2, [r3, #24]
 430:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 1052              		.loc 1 430 36
ARM GAS  /tmp/ccNBuYt9.s 			page 27


 1053 0032 274B     		ldr	r3, .L39
 1054 0034 0022     		movs	r2, #0
 1055 0036 83F82020 		strb	r2, [r3, #32]
 431:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1056              		.loc 1 431 35
 1057 003a 254B     		ldr	r3, .L39
 1058 003c 0022     		movs	r2, #0
 1059 003e DA62     		str	r2, [r3, #44]
 432:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1060              		.loc 1 432 31
 1061 0040 234B     		ldr	r3, .L39
 1062 0042 254A     		ldr	r2, .L39+8
 1063 0044 9A62     		str	r2, [r3, #40]
 433:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1064              		.loc 1 433 24
 1065 0046 224B     		ldr	r3, .L39
 1066 0048 0022     		movs	r2, #0
 1067 004a DA60     		str	r2, [r3, #12]
 434:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 3;
 1068              		.loc 1 434 30
 1069 004c 204B     		ldr	r3, .L39
 1070 004e 0322     		movs	r2, #3
 1071 0050 DA61     		str	r2, [r3, #28]
 435:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 1072              		.loc 1 435 36
 1073 0052 1F4B     		ldr	r3, .L39
 1074 0054 0022     		movs	r2, #0
 1075 0056 83F83020 		strb	r2, [r3, #48]
 436:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1076              		.loc 1 436 27
 1077 005a 1D4B     		ldr	r3, .L39
 1078 005c 0122     		movs	r2, #1
 1079 005e 5A61     		str	r2, [r3, #20]
 437:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 1080              		.loc 1 437 7
 1081 0060 1B48     		ldr	r0, .L39
 1082 0062 FFF7FEFF 		bl	HAL_ADC_Init
 1083 0066 0346     		mov	r3, r0
 1084              		.loc 1 437 6
 1085 0068 002B     		cmp	r3, #0
 1086 006a 01D0     		beq	.L34
 438:Core/Src/main.c ****   {
 439:Core/Src/main.c ****     Error_Handler();
 1087              		.loc 1 439 5
 1088 006c FFF7FEFF 		bl	Error_Handler
 1089              	.L34:
 440:Core/Src/main.c ****   }
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 443:Core/Src/main.c ****    */
 444:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 1090              		.loc 1 444 19
 1091 0070 0523     		movs	r3, #5
 1092 0072 3B60     		str	r3, [r7]
 445:Core/Src/main.c ****   sConfig.Rank = 1;
 1093              		.loc 1 445 16
 1094 0074 0123     		movs	r3, #1
ARM GAS  /tmp/ccNBuYt9.s 			page 28


 1095 0076 7B60     		str	r3, [r7, #4]
 446:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1096              		.loc 1 446 24
 1097 0078 0023     		movs	r3, #0
 1098 007a BB60     		str	r3, [r7, #8]
 447:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 1099              		.loc 1 447 7
 1100 007c 3B46     		mov	r3, r7
 1101 007e 1946     		mov	r1, r3
 1102 0080 1348     		ldr	r0, .L39
 1103 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1104 0086 0346     		mov	r3, r0
 1105              		.loc 1 447 6
 1106 0088 002B     		cmp	r3, #0
 1107 008a 01D0     		beq	.L35
 448:Core/Src/main.c ****   {
 449:Core/Src/main.c ****     Error_Handler();
 1108              		.loc 1 449 5
 1109 008c FFF7FEFF 		bl	Error_Handler
 1110              	.L35:
 450:Core/Src/main.c ****   }
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 453:Core/Src/main.c ****    */
 454:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 1111              		.loc 1 454 19
 1112 0090 0723     		movs	r3, #7
 1113 0092 3B60     		str	r3, [r7]
 455:Core/Src/main.c ****   sConfig.Rank = 2;
 1114              		.loc 1 455 16
 1115 0094 0223     		movs	r3, #2
 1116 0096 7B60     		str	r3, [r7, #4]
 456:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 1117              		.loc 1 456 7
 1118 0098 3B46     		mov	r3, r7
 1119 009a 1946     		mov	r1, r3
 1120 009c 0C48     		ldr	r0, .L39
 1121 009e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1122 00a2 0346     		mov	r3, r0
 1123              		.loc 1 456 6
 1124 00a4 002B     		cmp	r3, #0
 1125 00a6 01D0     		beq	.L36
 457:Core/Src/main.c ****   {
 458:Core/Src/main.c ****     Error_Handler();
 1126              		.loc 1 458 5
 1127 00a8 FFF7FEFF 		bl	Error_Handler
 1128              	.L36:
 459:Core/Src/main.c ****   }
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 462:Core/Src/main.c ****    */
 463:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_14;
 1129              		.loc 1 463 19
 1130 00ac 0E23     		movs	r3, #14
 1131 00ae 3B60     		str	r3, [r7]
 464:Core/Src/main.c ****   sConfig.Rank = 3;
 1132              		.loc 1 464 16
ARM GAS  /tmp/ccNBuYt9.s 			page 29


 1133 00b0 0323     		movs	r3, #3
 1134 00b2 7B60     		str	r3, [r7, #4]
 465:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 1135              		.loc 1 465 7
 1136 00b4 3B46     		mov	r3, r7
 1137 00b6 1946     		mov	r1, r3
 1138 00b8 0548     		ldr	r0, .L39
 1139 00ba FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1140 00be 0346     		mov	r3, r0
 1141              		.loc 1 465 6
 1142 00c0 002B     		cmp	r3, #0
 1143 00c2 01D0     		beq	.L38
 466:Core/Src/main.c ****   {
 467:Core/Src/main.c ****     Error_Handler();
 1144              		.loc 1 467 5
 1145 00c4 FFF7FEFF 		bl	Error_Handler
 1146              	.L38:
 468:Core/Src/main.c ****   }
 469:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 472:Core/Src/main.c **** }
 1147              		.loc 1 472 1
 1148 00c8 00BF     		nop
 1149 00ca 1037     		adds	r7, r7, #16
 1150              	.LCFI53:
 1151              		.cfi_def_cfa_offset 8
 1152 00cc BD46     		mov	sp, r7
 1153              	.LCFI54:
 1154              		.cfi_def_cfa_register 13
 1155              		@ sp needed
 1156 00ce 80BD     		pop	{r7, pc}
 1157              	.L40:
 1158              		.align	2
 1159              	.L39:
 1160 00d0 00000000 		.word	hadc2
 1161 00d4 00210140 		.word	1073815808
 1162 00d8 0100000F 		.word	251658241
 1163              		.cfi_endproc
 1164              	.LFE253:
 1166              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1167              		.align	1
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1172              	MX_CAN1_Init:
 1173              	.LFB254:
 473:Core/Src/main.c **** 
 474:Core/Src/main.c **** /**
 475:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 476:Core/Src/main.c ****  * @param None
 477:Core/Src/main.c ****  * @retval None
 478:Core/Src/main.c ****  */
 479:Core/Src/main.c **** static void MX_CAN1_Init(void)
 480:Core/Src/main.c **** {
 1174              		.loc 1 480 1
 1175              		.cfi_startproc
ARM GAS  /tmp/ccNBuYt9.s 			page 30


 1176              		@ args = 0, pretend = 0, frame = 40
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178 0000 80B5     		push	{r7, lr}
 1179              	.LCFI55:
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 0002 8AB0     		sub	sp, sp, #40
 1184              	.LCFI56:
 1185              		.cfi_def_cfa_offset 48
 1186 0004 00AF     		add	r7, sp, #0
 1187              	.LCFI57:
 1188              		.cfi_def_cfa_register 7
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 487:Core/Src/main.c **** 
 488:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 489:Core/Src/main.c ****   hcan1.Instance = CAN1;
 1189              		.loc 1 489 18
 1190 0006 2D4B     		ldr	r3, .L45
 1191 0008 2D4A     		ldr	r2, .L45+4
 1192 000a 1A60     		str	r2, [r3]
 490:Core/Src/main.c ****   hcan1.Init.Prescaler = 15;
 1193              		.loc 1 490 24
 1194 000c 2B4B     		ldr	r3, .L45
 1195 000e 0F22     		movs	r2, #15
 1196 0010 5A60     		str	r2, [r3, #4]
 491:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 1197              		.loc 1 491 19
 1198 0012 2A4B     		ldr	r3, .L45
 1199 0014 4FF08042 		mov	r2, #1073741824
 1200 0018 9A60     		str	r2, [r3, #8]
 492:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1201              		.loc 1 492 28
 1202 001a 284B     		ldr	r3, .L45
 1203 001c 0022     		movs	r2, #0
 1204 001e DA60     		str	r2, [r3, #12]
 493:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 1205              		.loc 1 493 23
 1206 0020 264B     		ldr	r3, .L45
 1207 0022 0022     		movs	r2, #0
 1208 0024 1A61     		str	r2, [r3, #16]
 494:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 1209              		.loc 1 494 23
 1210 0026 254B     		ldr	r3, .L45
 1211 0028 0022     		movs	r2, #0
 1212 002a 5A61     		str	r2, [r3, #20]
 495:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1213              		.loc 1 495 32
 1214 002c 234B     		ldr	r3, .L45
 1215 002e 0022     		movs	r2, #0
 1216 0030 1A76     		strb	r2, [r3, #24]
 496:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/ccNBuYt9.s 			page 31


 1217              		.loc 1 496 25
 1218 0032 224B     		ldr	r3, .L45
 1219 0034 0022     		movs	r2, #0
 1220 0036 5A76     		strb	r2, [r3, #25]
 497:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 1221              		.loc 1 497 25
 1222 0038 204B     		ldr	r3, .L45
 1223 003a 0022     		movs	r2, #0
 1224 003c 9A76     		strb	r2, [r3, #26]
 498:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 1225              		.loc 1 498 33
 1226 003e 1F4B     		ldr	r3, .L45
 1227 0040 0022     		movs	r2, #0
 1228 0042 DA76     		strb	r2, [r3, #27]
 499:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1229              		.loc 1 499 32
 1230 0044 1D4B     		ldr	r3, .L45
 1231 0046 0022     		movs	r2, #0
 1232 0048 1A77     		strb	r2, [r3, #28]
 500:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1233              		.loc 1 500 35
 1234 004a 1C4B     		ldr	r3, .L45
 1235 004c 0022     		movs	r2, #0
 1236 004e 5A77     		strb	r2, [r3, #29]
 501:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1237              		.loc 1 501 7
 1238 0050 1A48     		ldr	r0, .L45
 1239 0052 FFF7FEFF 		bl	HAL_CAN_Init
 1240 0056 0346     		mov	r3, r0
 1241              		.loc 1 501 6
 1242 0058 002B     		cmp	r3, #0
 1243 005a 01D0     		beq	.L42
 502:Core/Src/main.c ****   {
 503:Core/Src/main.c ****     Error_Handler();
 1244              		.loc 1 503 5
 1245 005c FFF7FEFF 		bl	Error_Handler
 1246              	.L42:
 504:Core/Src/main.c ****   }
 505:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 506:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 1247              		.loc 1 506 3
 1248 0060 0121     		movs	r1, #1
 1249 0062 1648     		ldr	r0, .L45
 1250 0064 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 507:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 1251              		.loc 1 507 3
 1252 0068 0221     		movs	r1, #2
 1253 006a 1448     		ldr	r0, .L45
 1254 006c FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 508:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 1255              		.loc 1 508 3
 1256 0070 1021     		movs	r1, #16
 1257 0072 1248     		ldr	r0, .L45
 1258 0074 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   CAN_FilterTypeDef sf;
 511:Core/Src/main.c ****   // Accept StdID's 0x100 through 0x1FF
ARM GAS  /tmp/ccNBuYt9.s 			page 32


 512:Core/Src/main.c ****   sf.FilterIdHigh = 0x100 << 5;
 1259              		.loc 1 512 19
 1260 0078 4FF40053 		mov	r3, #8192
 1261 007c 3B60     		str	r3, [r7]
 513:Core/Src/main.c ****   sf.FilterMaskIdHigh = 0x700 << 5;
 1262              		.loc 1 513 23
 1263 007e 4FF46043 		mov	r3, #57344
 1264 0082 BB60     		str	r3, [r7, #8]
 514:Core/Src/main.c ****   sf.FilterIdLow = 0x0000;
 1265              		.loc 1 514 18
 1266 0084 0023     		movs	r3, #0
 1267 0086 7B60     		str	r3, [r7, #4]
 515:Core/Src/main.c ****   sf.FilterMaskIdLow = 0x0000;
 1268              		.loc 1 515 22
 1269 0088 0023     		movs	r3, #0
 1270 008a FB60     		str	r3, [r7, #12]
 516:Core/Src/main.c ****   sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 1271              		.loc 1 516 27
 1272 008c 0023     		movs	r3, #0
 1273 008e 3B61     		str	r3, [r7, #16]
 517:Core/Src/main.c ****   sf.FilterBank = 0;
 1274              		.loc 1 517 17
 1275 0090 0023     		movs	r3, #0
 1276 0092 7B61     		str	r3, [r7, #20]
 518:Core/Src/main.c ****   sf.FilterMode = CAN_FILTERMODE_IDMASK;
 1277              		.loc 1 518 17
 1278 0094 0023     		movs	r3, #0
 1279 0096 BB61     		str	r3, [r7, #24]
 519:Core/Src/main.c ****   sf.FilterScale = CAN_FILTERSCALE_32BIT;
 1280              		.loc 1 519 18
 1281 0098 0123     		movs	r3, #1
 1282 009a FB61     		str	r3, [r7, #28]
 520:Core/Src/main.c ****   sf.FilterActivation = CAN_FILTER_ENABLE;
 1283              		.loc 1 520 23
 1284 009c 0123     		movs	r3, #1
 1285 009e 3B62     		str	r3, [r7, #32]
 521:Core/Src/main.c ****   if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 1286              		.loc 1 521 7
 1287 00a0 3B46     		mov	r3, r7
 1288 00a2 1946     		mov	r1, r3
 1289 00a4 0548     		ldr	r0, .L45
 1290 00a6 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1291 00aa 0346     		mov	r3, r0
 1292              		.loc 1 521 6
 1293 00ac 002B     		cmp	r3, #0
 1294 00ae 01D0     		beq	.L44
 522:Core/Src/main.c ****   {
 523:Core/Src/main.c ****     Error_Handler();
 1295              		.loc 1 523 5
 1296 00b0 FFF7FEFF 		bl	Error_Handler
 1297              	.L44:
 524:Core/Src/main.c ****   }
 525:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 526:Core/Src/main.c **** }
 1298              		.loc 1 526 1
 1299 00b4 00BF     		nop
 1300 00b6 2837     		adds	r7, r7, #40
ARM GAS  /tmp/ccNBuYt9.s 			page 33


 1301              	.LCFI58:
 1302              		.cfi_def_cfa_offset 8
 1303 00b8 BD46     		mov	sp, r7
 1304              	.LCFI59:
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 00ba 80BD     		pop	{r7, pc}
 1308              	.L46:
 1309              		.align	2
 1310              	.L45:
 1311 00bc 00000000 		.word	hcan1
 1312 00c0 00640040 		.word	1073767424
 1313              		.cfi_endproc
 1314              	.LFE254:
 1316              		.section	.text.MX_DMA_Init,"ax",%progbits
 1317              		.align	1
 1318              		.syntax unified
 1319              		.thumb
 1320              		.thumb_func
 1322              	MX_DMA_Init:
 1323              	.LFB255:
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** /**
 529:Core/Src/main.c ****  * Enable DMA controller clock
 530:Core/Src/main.c ****  */
 531:Core/Src/main.c **** static void MX_DMA_Init(void)
 532:Core/Src/main.c **** {
 1324              		.loc 1 532 1
 1325              		.cfi_startproc
 1326              		@ args = 0, pretend = 0, frame = 8
 1327              		@ frame_needed = 1, uses_anonymous_args = 0
 1328 0000 80B5     		push	{r7, lr}
 1329              	.LCFI60:
 1330              		.cfi_def_cfa_offset 8
 1331              		.cfi_offset 7, -8
 1332              		.cfi_offset 14, -4
 1333 0002 82B0     		sub	sp, sp, #8
 1334              	.LCFI61:
 1335              		.cfi_def_cfa_offset 16
 1336 0004 00AF     		add	r7, sp, #0
 1337              	.LCFI62:
 1338              		.cfi_def_cfa_register 7
 1339              	.LBB6:
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* DMA controller clock enable */
 535:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 1340              		.loc 1 535 3
 1341 0006 0023     		movs	r3, #0
 1342 0008 7B60     		str	r3, [r7, #4]
 1343 000a 104B     		ldr	r3, .L48
 1344 000c 1B6B     		ldr	r3, [r3, #48]
 1345 000e 0F4A     		ldr	r2, .L48
 1346 0010 43F48003 		orr	r3, r3, #4194304
 1347 0014 1363     		str	r3, [r2, #48]
 1348 0016 0D4B     		ldr	r3, .L48
 1349 0018 1B6B     		ldr	r3, [r3, #48]
 1350 001a 03F48003 		and	r3, r3, #4194304
ARM GAS  /tmp/ccNBuYt9.s 			page 34


 1351 001e 7B60     		str	r3, [r7, #4]
 1352 0020 7B68     		ldr	r3, [r7, #4]
 1353              	.LBE6:
 536:Core/Src/main.c **** 
 537:Core/Src/main.c ****   /* DMA interrupt init */
 538:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 539:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 1354              		.loc 1 539 3
 1355 0022 0022     		movs	r2, #0
 1356 0024 0521     		movs	r1, #5
 1357 0026 3820     		movs	r0, #56
 1358 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 540:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 1359              		.loc 1 540 3
 1360 002c 3820     		movs	r0, #56
 1361 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 541:Core/Src/main.c ****   /* DMA2_Stream2_IRQn interrupt configuration */
 542:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 1362              		.loc 1 542 3
 1363 0032 0022     		movs	r2, #0
 1364 0034 0521     		movs	r1, #5
 1365 0036 3A20     		movs	r0, #58
 1366 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 543:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 1367              		.loc 1 543 3
 1368 003c 3A20     		movs	r0, #58
 1369 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 544:Core/Src/main.c **** }
 1370              		.loc 1 544 1
 1371 0042 00BF     		nop
 1372 0044 0837     		adds	r7, r7, #8
 1373              	.LCFI63:
 1374              		.cfi_def_cfa_offset 8
 1375 0046 BD46     		mov	sp, r7
 1376              	.LCFI64:
 1377              		.cfi_def_cfa_register 13
 1378              		@ sp needed
 1379 0048 80BD     		pop	{r7, pc}
 1380              	.L49:
 1381 004a 00BF     		.align	2
 1382              	.L48:
 1383 004c 00380240 		.word	1073887232
 1384              		.cfi_endproc
 1385              	.LFE255:
 1387              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1388              		.align	1
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1393              	MX_GPIO_Init:
 1394              	.LFB256:
 545:Core/Src/main.c **** 
 546:Core/Src/main.c **** /**
 547:Core/Src/main.c ****  * @brief GPIO Initialization Function
 548:Core/Src/main.c ****  * @param None
 549:Core/Src/main.c ****  * @retval None
 550:Core/Src/main.c ****  */
ARM GAS  /tmp/ccNBuYt9.s 			page 35


 551:Core/Src/main.c **** static void MX_GPIO_Init(void)
 552:Core/Src/main.c **** {
 1395              		.loc 1 552 1
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 40
 1398              		@ frame_needed = 1, uses_anonymous_args = 0
 1399 0000 80B5     		push	{r7, lr}
 1400              	.LCFI65:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 7, -8
 1403              		.cfi_offset 14, -4
 1404 0002 8AB0     		sub	sp, sp, #40
 1405              	.LCFI66:
 1406              		.cfi_def_cfa_offset 48
 1407 0004 00AF     		add	r7, sp, #0
 1408              	.LCFI67:
 1409              		.cfi_def_cfa_register 7
 553:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1410              		.loc 1 553 20
 1411 0006 07F11403 		add	r3, r7, #20
 1412 000a 0022     		movs	r2, #0
 1413 000c 1A60     		str	r2, [r3]
 1414 000e 5A60     		str	r2, [r3, #4]
 1415 0010 9A60     		str	r2, [r3, #8]
 1416 0012 DA60     		str	r2, [r3, #12]
 1417 0014 1A61     		str	r2, [r3, #16]
 1418              	.LBB7:
 554:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 555:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 558:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1419              		.loc 1 558 3
 1420 0016 0023     		movs	r3, #0
 1421 0018 3B61     		str	r3, [r7, #16]
 1422 001a 584B     		ldr	r3, .L51
 1423 001c 1B6B     		ldr	r3, [r3, #48]
 1424 001e 574A     		ldr	r2, .L51
 1425 0020 43F00403 		orr	r3, r3, #4
 1426 0024 1363     		str	r3, [r2, #48]
 1427 0026 554B     		ldr	r3, .L51
 1428 0028 1B6B     		ldr	r3, [r3, #48]
 1429 002a 03F00403 		and	r3, r3, #4
 1430 002e 3B61     		str	r3, [r7, #16]
 1431 0030 3B69     		ldr	r3, [r7, #16]
 1432              	.LBE7:
 1433              	.LBB8:
 559:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1434              		.loc 1 559 3
 1435 0032 0023     		movs	r3, #0
 1436 0034 FB60     		str	r3, [r7, #12]
 1437 0036 514B     		ldr	r3, .L51
 1438 0038 1B6B     		ldr	r3, [r3, #48]
 1439 003a 504A     		ldr	r2, .L51
 1440 003c 43F08003 		orr	r3, r3, #128
 1441 0040 1363     		str	r3, [r2, #48]
 1442 0042 4E4B     		ldr	r3, .L51
ARM GAS  /tmp/ccNBuYt9.s 			page 36


 1443 0044 1B6B     		ldr	r3, [r3, #48]
 1444 0046 03F08003 		and	r3, r3, #128
 1445 004a FB60     		str	r3, [r7, #12]
 1446 004c FB68     		ldr	r3, [r7, #12]
 1447              	.LBE8:
 1448              	.LBB9:
 560:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1449              		.loc 1 560 3
 1450 004e 0023     		movs	r3, #0
 1451 0050 BB60     		str	r3, [r7, #8]
 1452 0052 4A4B     		ldr	r3, .L51
 1453 0054 1B6B     		ldr	r3, [r3, #48]
 1454 0056 494A     		ldr	r2, .L51
 1455 0058 43F00103 		orr	r3, r3, #1
 1456 005c 1363     		str	r3, [r2, #48]
 1457 005e 474B     		ldr	r3, .L51
 1458 0060 1B6B     		ldr	r3, [r3, #48]
 1459 0062 03F00103 		and	r3, r3, #1
 1460 0066 BB60     		str	r3, [r7, #8]
 1461 0068 BB68     		ldr	r3, [r7, #8]
 1462              	.LBE9:
 1463              	.LBB10:
 561:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1464              		.loc 1 561 3
 1465 006a 0023     		movs	r3, #0
 1466 006c 7B60     		str	r3, [r7, #4]
 1467 006e 434B     		ldr	r3, .L51
 1468 0070 1B6B     		ldr	r3, [r3, #48]
 1469 0072 424A     		ldr	r2, .L51
 1470 0074 43F00203 		orr	r3, r3, #2
 1471 0078 1363     		str	r3, [r2, #48]
 1472 007a 404B     		ldr	r3, .L51
 1473 007c 1B6B     		ldr	r3, [r3, #48]
 1474 007e 03F00203 		and	r3, r3, #2
 1475 0082 7B60     		str	r3, [r7, #4]
 1476 0084 7B68     		ldr	r3, [r7, #4]
 1477              	.LBE10:
 1478              	.LBB11:
 562:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 1479              		.loc 1 562 3
 1480 0086 0023     		movs	r3, #0
 1481 0088 3B60     		str	r3, [r7]
 1482 008a 3C4B     		ldr	r3, .L51
 1483 008c 1B6B     		ldr	r3, [r3, #48]
 1484 008e 3B4A     		ldr	r2, .L51
 1485 0090 43F00803 		orr	r3, r3, #8
 1486 0094 1363     		str	r3, [r2, #48]
 1487 0096 394B     		ldr	r3, .L51
 1488 0098 1B6B     		ldr	r3, [r3, #48]
 1489 009a 03F00803 		and	r3, r3, #8
 1490 009e 3B60     		str	r3, [r7]
 1491 00a0 3B68     		ldr	r3, [r7]
 1492              	.LBE11:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 565:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, DSCHRGE_RELAY_Pin | RES_RELAY_Pin | CAP_RELAY_Pin | MTR_RELAY_Pin | DSCH
 1493              		.loc 1 565 3
ARM GAS  /tmp/ccNBuYt9.s 			page 37


 1494 00a2 0022     		movs	r2, #0
 1495 00a4 4FF28741 		movw	r1, #62599
 1496 00a8 3548     		ldr	r0, .L51+4
 1497 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   /*Configure GPIO pins : PC13 PC14 PC15 PC0
 568:Core/Src/main.c ****                            PC1 PC2 PC3 PC6
 569:Core/Src/main.c ****                            PC7 PC8 PC10 PC11
 570:Core/Src/main.c ****                            PC12 */
 571:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PI
 1498              		.loc 1 571 23
 1499 00ae 4FF6CF53 		movw	r3, #64975
 1500 00b2 7B61     		str	r3, [r7, #20]
 572:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1501              		.loc 1 572 24
 1502 00b4 0323     		movs	r3, #3
 1503 00b6 BB61     		str	r3, [r7, #24]
 573:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1504              		.loc 1 573 24
 1505 00b8 0023     		movs	r3, #0
 1506 00ba FB61     		str	r3, [r7, #28]
 574:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1507              		.loc 1 574 3
 1508 00bc 07F11403 		add	r3, r7, #20
 1509 00c0 1946     		mov	r1, r3
 1510 00c2 3048     		ldr	r0, .L51+8
 1511 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA2 PA3
 577:Core/Src/main.c ****                            PA9 PA10 PA15 */
 578:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_9 | GPIO_PIN_1
 1512              		.loc 1 578 23
 1513 00c8 48F20F63 		movw	r3, #34319
 1514 00cc 7B61     		str	r3, [r7, #20]
 579:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1515              		.loc 1 579 24
 1516 00ce 0323     		movs	r3, #3
 1517 00d0 BB61     		str	r3, [r7, #24]
 580:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1518              		.loc 1 580 24
 1519 00d2 0023     		movs	r3, #0
 1520 00d4 FB61     		str	r3, [r7, #28]
 581:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1521              		.loc 1 581 3
 1522 00d6 07F11403 		add	r3, r7, #20
 1523 00da 1946     		mov	r1, r3
 1524 00dc 2A48     		ldr	r0, .L51+12
 1525 00de FFF7FEFF 		bl	HAL_GPIO_Init
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /*Configure GPIO pins : DSCHRGE_RELAY_Pin RES_RELAY_Pin CAP_RELAY_Pin MTR_RELAY_Pin
 584:Core/Src/main.c ****                            DSCHRGE_LED_Pin RES_LED_Pin MTR_LED_Pin CAP_LED_Pin
 585:Core/Src/main.c ****                            CAN_STBY_Pin */
 586:Core/Src/main.c ****   GPIO_InitStruct.Pin = DSCHRGE_RELAY_Pin | RES_RELAY_Pin | CAP_RELAY_Pin | MTR_RELAY_Pin | DSCHRGE
 1526              		.loc 1 586 23
 1527 00e2 4FF28743 		movw	r3, #62599
 1528 00e6 7B61     		str	r3, [r7, #20]
 587:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/ccNBuYt9.s 			page 38


 1529              		.loc 1 587 24
 1530 00e8 0123     		movs	r3, #1
 1531 00ea BB61     		str	r3, [r7, #24]
 588:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1532              		.loc 1 588 24
 1533 00ec 0023     		movs	r3, #0
 1534 00ee FB61     		str	r3, [r7, #28]
 589:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1535              		.loc 1 589 25
 1536 00f0 0023     		movs	r3, #0
 1537 00f2 3B62     		str	r3, [r7, #32]
 590:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1538              		.loc 1 590 3
 1539 00f4 07F11403 		add	r3, r7, #20
 1540 00f8 1946     		mov	r1, r3
 1541 00fa 2148     		ldr	r0, .L51+4
 1542 00fc FFF7FEFF 		bl	HAL_GPIO_Init
 591:Core/Src/main.c **** 
 592:Core/Src/main.c ****   /*Configure GPIO pin : PC9 */
 593:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_9;
 1543              		.loc 1 593 23
 1544 0100 4FF40073 		mov	r3, #512
 1545 0104 7B61     		str	r3, [r7, #20]
 594:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1546              		.loc 1 594 24
 1547 0106 0223     		movs	r3, #2
 1548 0108 BB61     		str	r3, [r7, #24]
 595:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1549              		.loc 1 595 24
 1550 010a 0023     		movs	r3, #0
 1551 010c FB61     		str	r3, [r7, #28]
 596:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1552              		.loc 1 596 25
 1553 010e 0023     		movs	r3, #0
 1554 0110 3B62     		str	r3, [r7, #32]
 597:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1555              		.loc 1 597 29
 1556 0112 0023     		movs	r3, #0
 1557 0114 7B62     		str	r3, [r7, #36]
 598:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1558              		.loc 1 598 3
 1559 0116 07F11403 		add	r3, r7, #20
 1560 011a 1946     		mov	r1, r3
 1561 011c 1948     		ldr	r0, .L51+8
 1562 011e FFF7FEFF 		bl	HAL_GPIO_Init
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****   /*Configure GPIO pin : PA8 */
 601:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 1563              		.loc 1 601 23
 1564 0122 4FF48073 		mov	r3, #256
 1565 0126 7B61     		str	r3, [r7, #20]
 602:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1566              		.loc 1 602 24
 1567 0128 0223     		movs	r3, #2
 1568 012a BB61     		str	r3, [r7, #24]
 603:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1569              		.loc 1 603 24
ARM GAS  /tmp/ccNBuYt9.s 			page 39


 1570 012c 0023     		movs	r3, #0
 1571 012e FB61     		str	r3, [r7, #28]
 604:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1572              		.loc 1 604 25
 1573 0130 0023     		movs	r3, #0
 1574 0132 3B62     		str	r3, [r7, #32]
 605:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1575              		.loc 1 605 29
 1576 0134 0023     		movs	r3, #0
 1577 0136 7B62     		str	r3, [r7, #36]
 606:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1578              		.loc 1 606 3
 1579 0138 07F11403 		add	r3, r7, #20
 1580 013c 1946     		mov	r1, r3
 1581 013e 1248     		ldr	r0, .L51+12
 1582 0140 FFF7FEFF 		bl	HAL_GPIO_Init
 607:Core/Src/main.c **** 
 608:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 609:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 1583              		.loc 1 609 23
 1584 0144 0423     		movs	r3, #4
 1585 0146 7B61     		str	r3, [r7, #20]
 610:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1586              		.loc 1 610 24
 1587 0148 0323     		movs	r3, #3
 1588 014a BB61     		str	r3, [r7, #24]
 611:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1589              		.loc 1 611 24
 1590 014c 0023     		movs	r3, #0
 1591 014e FB61     		str	r3, [r7, #28]
 612:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 1592              		.loc 1 612 3
 1593 0150 07F11403 		add	r3, r7, #20
 1594 0154 1946     		mov	r1, r3
 1595 0156 0D48     		ldr	r0, .L51+16
 1596 0158 FFF7FEFF 		bl	HAL_GPIO_Init
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
 615:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 1597              		.loc 1 615 23
 1598 015c 7823     		movs	r3, #120
 1599 015e 7B61     		str	r3, [r7, #20]
 616:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1600              		.loc 1 616 24
 1601 0160 0323     		movs	r3, #3
 1602 0162 BB61     		str	r3, [r7, #24]
 617:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1603              		.loc 1 617 24
 1604 0164 0023     		movs	r3, #0
 1605 0166 FB61     		str	r3, [r7, #28]
 618:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1606              		.loc 1 618 3
 1607 0168 07F11403 		add	r3, r7, #20
 1608 016c 1946     		mov	r1, r3
 1609 016e 0448     		ldr	r0, .L51+4
 1610 0170 FFF7FEFF 		bl	HAL_GPIO_Init
 619:Core/Src/main.c **** 
ARM GAS  /tmp/ccNBuYt9.s 			page 40


 620:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 621:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 622:Core/Src/main.c **** }
 1611              		.loc 1 622 1
 1612 0174 00BF     		nop
 1613 0176 2837     		adds	r7, r7, #40
 1614              	.LCFI68:
 1615              		.cfi_def_cfa_offset 8
 1616 0178 BD46     		mov	sp, r7
 1617              	.LCFI69:
 1618              		.cfi_def_cfa_register 13
 1619              		@ sp needed
 1620 017a 80BD     		pop	{r7, pc}
 1621              	.L52:
 1622              		.align	2
 1623              	.L51:
 1624 017c 00380240 		.word	1073887232
 1625 0180 00040240 		.word	1073873920
 1626 0184 00080240 		.word	1073874944
 1627 0188 00000240 		.word	1073872896
 1628 018c 000C0240 		.word	1073875968
 1629              		.cfi_endproc
 1630              	.LFE256:
 1632              		.section	.rodata
 1633 002e 0000     		.align	2
 1634              	.LC4:
 1635 0030 496E2072 		.ascii	"In relay standby state\015\000"
 1635      656C6179 
 1635      20737461 
 1635      6E646279 
 1635      20737461 
 1636              		.align	2
 1637              	.LC5:
 1638 0048 496E2072 		.ascii	"In relay startup state\015\000"
 1638      656C6179 
 1638      20737461 
 1638      72747570 
 1638      20737461 
 1639              		.align	2
 1640              	.LC6:
 1641 0060 496E2072 		.ascii	"In relay charge state\015\000"
 1641      656C6179 
 1641      20636861 
 1641      72676520 
 1641      73746174 
 1642 0077 00       		.align	2
 1643              	.LC7:
 1644 0078 496E2072 		.ascii	"In relay run state\015\000"
 1644      656C6179 
 1644      2072756E 
 1644      20737461 
 1644      74650D00 
 1645              		.section	.text.StartRelayTask,"ax",%progbits
 1646              		.align	1
 1647              		.global	StartRelayTask
 1648              		.syntax unified
 1649              		.thumb
ARM GAS  /tmp/ccNBuYt9.s 			page 41


 1650              		.thumb_func
 1652              	StartRelayTask:
 1653              	.LFB257:
 623:Core/Src/main.c **** 
 624:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 625:Core/Src/main.c **** 
 626:Core/Src/main.c **** /* USER CODE END 4 */
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** /* USER CODE BEGIN Header_StartRelayTask */
 629:Core/Src/main.c **** /**
 630:Core/Src/main.c ****  * @brief  Function implementing the RelayTask thread.
 631:Core/Src/main.c ****  * @param  argument: Not used
 632:Core/Src/main.c ****  * @retval None
 633:Core/Src/main.c ****  */
 634:Core/Src/main.c **** /* USER CODE END Header_StartRelayTask */
 635:Core/Src/main.c **** void StartRelayTask(void *argument)
 636:Core/Src/main.c **** {
 1654              		.loc 1 636 1
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 8
 1657              		@ frame_needed = 1, uses_anonymous_args = 0
 1658 0000 80B5     		push	{r7, lr}
 1659              	.LCFI70:
 1660              		.cfi_def_cfa_offset 8
 1661              		.cfi_offset 7, -8
 1662              		.cfi_offset 14, -4
 1663 0002 82B0     		sub	sp, sp, #8
 1664              	.LCFI71:
 1665              		.cfi_def_cfa_offset 16
 1666 0004 00AF     		add	r7, sp, #0
 1667              	.LCFI72:
 1668              		.cfi_def_cfa_register 7
 1669 0006 7860     		str	r0, [r7, #4]
 637:Core/Src/main.c ****   /* init code for USB_DEVICE */
 638:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 1670              		.loc 1 638 3
 1671 0008 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 639:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 640:Core/Src/main.c ****   /* Infinite loop */
 641:Core/Src/main.c ****   rb_state = RELAY_STBY;
 1672              		.loc 1 641 12
 1673 000c 324B     		ldr	r3, .L61
 1674 000e 0022     		movs	r2, #0
 1675 0010 1A70     		strb	r2, [r3]
 1676              	.L60:
 642:Core/Src/main.c ****   for (;;)
 643:Core/Src/main.c ****   {
 644:Core/Src/main.c ****     switch (rb_state)
 1677              		.loc 1 644 5
 1678 0012 314B     		ldr	r3, .L61
 1679 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1680 0016 0D2B     		cmp	r3, #13
 1681 0018 58D8     		bhi	.L54
 1682 001a 01A2     		adr	r2, .L56
 1683 001c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1684              		.p2align 2
 1685              	.L56:
ARM GAS  /tmp/ccNBuYt9.s 			page 42


 1686 0020 59000000 		.word	.L59+1
 1687 0024 CD000000 		.word	.L54+1
 1688 0028 8D000000 		.word	.L58+1
 1689 002c CD000000 		.word	.L54+1
 1690 0030 CD000000 		.word	.L54+1
 1691 0034 CD000000 		.word	.L54+1
 1692 0038 6D000000 		.word	.L57+1
 1693 003c CD000000 		.word	.L54+1
 1694 0040 CD000000 		.word	.L54+1
 1695 0044 CD000000 		.word	.L54+1
 1696 0048 CD000000 		.word	.L54+1
 1697 004c CD000000 		.word	.L54+1
 1698 0050 CD000000 		.word	.L54+1
 1699 0054 AD000000 		.word	.L55+1
 1700              		.p2align 1
 1701              	.L59:
 645:Core/Src/main.c ****     {
 646:Core/Src/main.c ****     case RELAY_STBY:
 647:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1702              		.loc 1 647 7
 1703 0058 0022     		movs	r2, #0
 1704 005a 4FF20741 		movw	r1, #62471
 1705 005e 1F48     		ldr	r0, .L61+4
 1706 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 648:Core/Src/main.c ****                         DSCHRGE_RELAY_Pin | RES_RELAY_Pin | CAP_RELAY_Pin |
 649:Core/Src/main.c ****                             MTR_RELAY_Pin | DSCHRGE_LED_Pin | RES_LED_Pin |
 650:Core/Src/main.c ****                             MTR_LED_Pin | CAP_LED_Pin,
 651:Core/Src/main.c ****                         GPIO_PIN_RESET);
 652:Core/Src/main.c ****       printf("In relay standby state\r\n");
 1707              		.loc 1 652 7
 1708 0064 1E48     		ldr	r0, .L61+8
 1709 0066 FFF7FEFF 		bl	puts
 653:Core/Src/main.c ****       break;
 1710              		.loc 1 653 7
 1711 006a 2FE0     		b	.L54
 1712              	.L57:
 654:Core/Src/main.c ****     case RELAY_STRTP:
 655:Core/Src/main.c ****       HAL_GPIO_WritePin(
 1713              		.loc 1 655 7
 1714 006c 0022     		movs	r2, #0
 1715 006e 4CF20441 		movw	r1, #50180
 1716 0072 1A48     		ldr	r0, .L61+4
 1717 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 656:Core/Src/main.c ****           GPIOB, CAP_RELAY_Pin | MTR_RELAY_Pin | MTR_LED_Pin | CAP_LED_Pin,
 657:Core/Src/main.c ****           GPIO_PIN_RESET);
 658:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1718              		.loc 1 658 7
 1719 0078 0122     		movs	r2, #1
 1720 007a 43F20301 		movw	r1, #12291
 1721 007e 1748     		ldr	r0, .L61+4
 1722 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 659:Core/Src/main.c ****                         DSCHRGE_RELAY_Pin | RES_RELAY_Pin | DSCHRGE_LED_Pin |
 660:Core/Src/main.c ****                             RES_LED_Pin,
 661:Core/Src/main.c ****                         GPIO_PIN_SET);
 662:Core/Src/main.c ****       printf("In relay startup state\r\n");
 1723              		.loc 1 662 7
 1724 0084 1748     		ldr	r0, .L61+12
ARM GAS  /tmp/ccNBuYt9.s 			page 43


 1725 0086 FFF7FEFF 		bl	puts
 663:Core/Src/main.c ****       break;
 1726              		.loc 1 663 7
 1727 008a 1FE0     		b	.L54
 1728              	.L58:
 664:Core/Src/main.c ****     case RELAY_CHRGE:
 665:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1729              		.loc 1 665 7
 1730 008c 0022     		movs	r2, #0
 1731 008e 4DF20541 		movw	r1, #54277
 1732 0092 1248     		ldr	r0, .L61+4
 1733 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 666:Core/Src/main.c ****                         DSCHRGE_RELAY_Pin | CAP_RELAY_Pin |
 667:Core/Src/main.c ****                             MTR_RELAY_Pin | DSCHRGE_LED_Pin |
 668:Core/Src/main.c ****                             MTR_LED_Pin | CAP_LED_Pin,
 669:Core/Src/main.c ****                         GPIO_PIN_RESET);
 670:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1734              		.loc 1 670 7
 1735 0098 0122     		movs	r2, #1
 1736 009a 42F20201 		movw	r1, #8194
 1737 009e 0F48     		ldr	r0, .L61+4
 1738 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 671:Core/Src/main.c ****                         RES_RELAY_Pin | RES_LED_Pin,
 672:Core/Src/main.c ****                         GPIO_PIN_SET);
 673:Core/Src/main.c ****       printf("In relay charge state\r\n");
 1739              		.loc 1 673 7
 1740 00a4 1048     		ldr	r0, .L61+16
 1741 00a6 FFF7FEFF 		bl	puts
 674:Core/Src/main.c ****       break;
 1742              		.loc 1 674 7
 1743 00aa 0FE0     		b	.L54
 1744              	.L55:
 675:Core/Src/main.c ****     case RELAY_RUN:
 676:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1745              		.loc 1 676 7
 1746 00ac 0022     		movs	r2, #0
 1747 00ae 42F20201 		movw	r1, #8194
 1748 00b2 0A48     		ldr	r0, .L61+4
 1749 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 677:Core/Src/main.c ****                         RES_RELAY_Pin | RES_LED_Pin,
 678:Core/Src/main.c ****                         GPIO_PIN_RESET);
 679:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB,
 1750              		.loc 1 679 7
 1751 00b8 0122     		movs	r2, #1
 1752 00ba 4DF20541 		movw	r1, #54277
 1753 00be 0748     		ldr	r0, .L61+4
 1754 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 680:Core/Src/main.c ****                         DSCHRGE_RELAY_Pin | CAP_RELAY_Pin |
 681:Core/Src/main.c ****                             MTR_RELAY_Pin | DSCHRGE_LED_Pin |
 682:Core/Src/main.c ****                             MTR_LED_Pin | CAP_LED_Pin,
 683:Core/Src/main.c ****                         GPIO_PIN_SET);
 684:Core/Src/main.c ****       printf("In relay run state\r\n");
 1755              		.loc 1 684 7
 1756 00c4 0948     		ldr	r0, .L61+20
 1757 00c6 FFF7FEFF 		bl	puts
 685:Core/Src/main.c ****       break;
 1758              		.loc 1 685 7
ARM GAS  /tmp/ccNBuYt9.s 			page 44


 1759 00ca 00BF     		nop
 1760              	.L54:
 686:Core/Src/main.c ****     }
 687:Core/Src/main.c ****     osDelay(10000);
 1761              		.loc 1 687 5
 1762 00cc 42F21070 		movw	r0, #10000
 1763 00d0 FFF7FEFF 		bl	osDelay
 644:Core/Src/main.c ****     {
 1764              		.loc 1 644 5
 1765 00d4 9DE7     		b	.L60
 1766              	.L62:
 1767 00d6 00BF     		.align	2
 1768              	.L61:
 1769 00d8 00000000 		.word	rb_state
 1770 00dc 00040240 		.word	1073873920
 1771 00e0 30000000 		.word	.LC4
 1772 00e4 48000000 		.word	.LC5
 1773 00e8 60000000 		.word	.LC6
 1774 00ec 78000000 		.word	.LC7
 1775              		.cfi_endproc
 1776              	.LFE257:
 1778              		.section	.text.StartCanTask,"ax",%progbits
 1779              		.align	1
 1780              		.global	StartCanTask
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1785              	StartCanTask:
 1786              	.LFB258:
 688:Core/Src/main.c ****   }
 689:Core/Src/main.c ****   /* USER CODE END 5 */
 690:Core/Src/main.c **** }
 691:Core/Src/main.c **** 
 692:Core/Src/main.c **** /* USER CODE BEGIN Header_StartCanTask */
 693:Core/Src/main.c **** /**
 694:Core/Src/main.c ****  * @brief Function implementing the CanTask thread.
 695:Core/Src/main.c ****  * @param argument: Not used
 696:Core/Src/main.c ****  * @retval None
 697:Core/Src/main.c ****  */
 698:Core/Src/main.c **** /* USER CODE END Header_StartCanTask */
 699:Core/Src/main.c **** void StartCanTask(void *argument)
 700:Core/Src/main.c **** {
 1787              		.loc 1 700 1
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 8
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791 0000 80B5     		push	{r7, lr}
 1792              	.LCFI73:
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796 0002 82B0     		sub	sp, sp, #8
 1797              	.LCFI74:
 1798              		.cfi_def_cfa_offset 16
 1799 0004 00AF     		add	r7, sp, #0
 1800              	.LCFI75:
 1801              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccNBuYt9.s 			page 45


 1802 0006 7860     		str	r0, [r7, #4]
 1803              	.L64:
 701:Core/Src/main.c ****   /* USER CODE BEGIN StartCanTask */
 702:Core/Src/main.c ****   /* Infinite loop */
 703:Core/Src/main.c ****   for (;;)
 704:Core/Src/main.c ****   {
 705:Core/Src/main.c ****     osDelay(1);
 1804              		.loc 1 705 5 discriminator 1
 1805 0008 0120     		movs	r0, #1
 1806 000a FFF7FEFF 		bl	osDelay
 1807 000e FBE7     		b	.L64
 1808              		.cfi_endproc
 1809              	.LFE258:
 1811              		.section	.rodata
 1812              		.align	2
 1813              	.LC8:
 1814 008c 46432056 		.ascii	"FC Voltage %d\015\012\000"
 1814      6F6C7461 
 1814      67652025 
 1814      640D0A00 
 1815              		.section	.text.StartAdcTask,"ax",%progbits
 1816              		.align	1
 1817              		.global	StartAdcTask
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1822              	StartAdcTask:
 1823              	.LFB259:
 706:Core/Src/main.c ****   }
 707:Core/Src/main.c ****   /* USER CODE END StartCanTask */
 708:Core/Src/main.c **** }
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** /* USER CODE BEGIN Header_StartAdcTask */
 711:Core/Src/main.c **** /**
 712:Core/Src/main.c ****  * @brief Function implementing the AdcTask thread.
 713:Core/Src/main.c ****  * @param argument: Not used
 714:Core/Src/main.c ****  * @retval None
 715:Core/Src/main.c ****  */
 716:Core/Src/main.c **** /* USER CODE END Header_StartAdcTask */
 717:Core/Src/main.c **** void StartAdcTask(void *argument)
 718:Core/Src/main.c **** {
 1824              		.loc 1 718 1
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 16
 1827              		@ frame_needed = 1, uses_anonymous_args = 0
 1828 0000 80B5     		push	{r7, lr}
 1829              	.LCFI76:
 1830              		.cfi_def_cfa_offset 8
 1831              		.cfi_offset 7, -8
 1832              		.cfi_offset 14, -4
 1833 0002 84B0     		sub	sp, sp, #16
 1834              	.LCFI77:
 1835              		.cfi_def_cfa_offset 24
 1836 0004 00AF     		add	r7, sp, #0
 1837              	.LCFI78:
 1838              		.cfi_def_cfa_register 7
 1839 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccNBuYt9.s 			page 46


 719:Core/Src/main.c ****   /* USER CODE BEGIN StartAdcTask */
 720:Core/Src/main.c ****   /* Infinite loop */
 721:Core/Src/main.c ****   uint32_t printable;
 722:Core/Src/main.c ****   adc1Results[0] = 0;
 1840              		.loc 1 722 18
 1841 0008 184B     		ldr	r3, .L67
 1842 000a 0022     		movs	r2, #0
 1843 000c 1A80     		strh	r2, [r3]	@ movhi
 723:Core/Src/main.c ****   adc1Results[1] = 0;
 1844              		.loc 1 723 18
 1845 000e 174B     		ldr	r3, .L67
 1846 0010 0022     		movs	r2, #0
 1847 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 724:Core/Src/main.c ****   adc1Results[2] = 0;
 1848              		.loc 1 724 18
 1849 0014 154B     		ldr	r3, .L67
 1850 0016 0022     		movs	r2, #0
 1851 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 725:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Results, 3);
 1852              		.loc 1 725 3
 1853 001a 0322     		movs	r2, #3
 1854 001c 1349     		ldr	r1, .L67
 1855 001e 1448     		ldr	r0, .L67+4
 1856 0020 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1857              	.L66:
 726:Core/Src/main.c ****   // HAL_ADC_Start(&hadc1);
 727:Core/Src/main.c ****   // HAL_ADC_Start_DMA(&hadc2, buffer2, 3);
 728:Core/Src/main.c ****   for (;;)
 729:Core/Src/main.c ****   {
 730:Core/Src/main.c ****     // HAL_ADC_PollForConversion(&hadc1, 5000);
 731:Core/Src/main.c ****     printable = relay_board_bin.fc_volt * 3.3F / 4096.0F / 0.107F * 1000;
 1858              		.loc 1 731 32 discriminator 1
 1859 0024 134B     		ldr	r3, .L67+8
 1860 0026 1B68     		ldr	r3, [r3]
 1861              		.loc 1 731 41 discriminator 1
 1862 0028 07EE903A 		vmov	s15, r3	@ int
 1863 002c F8EE677A 		vcvt.f32.u32	s15, s15
 1864 0030 9FED117A 		vldr.32	s14, .L67+12
 1865 0034 67EE877A 		vmul.f32	s15, s15, s14
 1866              		.loc 1 731 48 discriminator 1
 1867 0038 DFED106A 		vldr.32	s13, .L67+16
 1868 003c 87EEA67A 		vdiv.f32	s14, s15, s13
 1869              		.loc 1 731 58 discriminator 1
 1870 0040 DFED0F6A 		vldr.32	s13, .L67+20
 1871 0044 C7EE267A 		vdiv.f32	s15, s14, s13
 1872              		.loc 1 731 67 discriminator 1
 1873 0048 9FED0E7A 		vldr.32	s14, .L67+24
 1874 004c 67EE877A 		vmul.f32	s15, s15, s14
 1875              		.loc 1 731 15 discriminator 1
 1876 0050 FCEEE77A 		vcvt.u32.f32	s15, s15
 1877 0054 17EE903A 		vmov	r3, s15	@ int
 1878 0058 FB60     		str	r3, [r7, #12]
 732:Core/Src/main.c ****     // relay_board_data.fc_volt = buffer1[0]*3.3F/4096.0F;
 733:Core/Src/main.c ****     printf("FC Voltage %d\r\n", printable);
 1879              		.loc 1 733 5 discriminator 1
 1880 005a F968     		ldr	r1, [r7, #12]
 1881 005c 0A48     		ldr	r0, .L67+28
ARM GAS  /tmp/ccNBuYt9.s 			page 47


 1882 005e FFF7FEFF 		bl	printf
 734:Core/Src/main.c ****     osDelay(10);
 1883              		.loc 1 734 5 discriminator 1
 1884 0062 0A20     		movs	r0, #10
 1885 0064 FFF7FEFF 		bl	osDelay
 731:Core/Src/main.c ****     // relay_board_data.fc_volt = buffer1[0]*3.3F/4096.0F;
 1886              		.loc 1 731 15 discriminator 1
 1887 0068 DCE7     		b	.L66
 1888              	.L68:
 1889 006a 00BF     		.align	2
 1890              	.L67:
 1891 006c 00000000 		.word	adc1Results
 1892 0070 00000000 		.word	hadc1
 1893 0074 00000000 		.word	relay_board_bin
 1894 0078 33335340 		.word	1079194419
 1895 007c 00008045 		.word	1166016512
 1896 0080 D122DB3D 		.word	1037771473
 1897 0084 00007A44 		.word	1148846080
 1898 0088 8C000000 		.word	.LC8
 1899              		.cfi_endproc
 1900              	.LFE259:
 1902              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1903              		.align	1
 1904              		.global	HAL_TIM_PeriodElapsedCallback
 1905              		.syntax unified
 1906              		.thumb
 1907              		.thumb_func
 1909              	HAL_TIM_PeriodElapsedCallback:
 1910              	.LFB260:
 735:Core/Src/main.c ****   }
 736:Core/Src/main.c ****   /* USER CODE END StartAdcTask */
 737:Core/Src/main.c **** }
 738:Core/Src/main.c **** 
 739:Core/Src/main.c **** /**
 740:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 741:Core/Src/main.c ****  * @note   This function is called  when TIM1 interrupt took place, inside
 742:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 743:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 744:Core/Src/main.c ****  * @param  htim : TIM handle
 745:Core/Src/main.c ****  * @retval None
 746:Core/Src/main.c ****  */
 747:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 748:Core/Src/main.c **** {
 1911              		.loc 1 748 1
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 8
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 80B5     		push	{r7, lr}
 1916              	.LCFI79:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 82B0     		sub	sp, sp, #8
 1921              	.LCFI80:
 1922              		.cfi_def_cfa_offset 16
 1923 0004 00AF     		add	r7, sp, #0
 1924              	.LCFI81:
ARM GAS  /tmp/ccNBuYt9.s 			page 48


 1925              		.cfi_def_cfa_register 7
 1926 0006 7860     		str	r0, [r7, #4]
 749:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 750:Core/Src/main.c **** 
 751:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 752:Core/Src/main.c ****   if (htim->Instance == TIM1)
 1927              		.loc 1 752 11
 1928 0008 7B68     		ldr	r3, [r7, #4]
 1929 000a 1B68     		ldr	r3, [r3]
 1930              		.loc 1 752 6
 1931 000c 044A     		ldr	r2, .L72
 1932 000e 9342     		cmp	r3, r2
 1933 0010 01D1     		bne	.L71
 753:Core/Src/main.c ****   {
 754:Core/Src/main.c ****     HAL_IncTick();
 1934              		.loc 1 754 5
 1935 0012 FFF7FEFF 		bl	HAL_IncTick
 1936              	.L71:
 755:Core/Src/main.c ****   }
 756:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 757:Core/Src/main.c **** 
 758:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 759:Core/Src/main.c **** }
 1937              		.loc 1 759 1
 1938 0016 00BF     		nop
 1939 0018 0837     		adds	r7, r7, #8
 1940              	.LCFI82:
 1941              		.cfi_def_cfa_offset 8
 1942 001a BD46     		mov	sp, r7
 1943              	.LCFI83:
 1944              		.cfi_def_cfa_register 13
 1945              		@ sp needed
 1946 001c 80BD     		pop	{r7, pc}
 1947              	.L73:
 1948 001e 00BF     		.align	2
 1949              	.L72:
 1950 0020 00000140 		.word	1073807360
 1951              		.cfi_endproc
 1952              	.LFE260:
 1954              		.section	.text.Error_Handler,"ax",%progbits
 1955              		.align	1
 1956              		.global	Error_Handler
 1957              		.syntax unified
 1958              		.thumb
 1959              		.thumb_func
 1961              	Error_Handler:
 1962              	.LFB261:
 760:Core/Src/main.c **** 
 761:Core/Src/main.c **** /**
 762:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 763:Core/Src/main.c ****  * @retval None
 764:Core/Src/main.c ****  */
 765:Core/Src/main.c **** void Error_Handler(void)
 766:Core/Src/main.c **** {
 1963              		.loc 1 766 1
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNBuYt9.s 			page 49


 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967              		@ link register save eliminated.
 1968 0000 80B4     		push	{r7}
 1969              	.LCFI84:
 1970              		.cfi_def_cfa_offset 4
 1971              		.cfi_offset 7, -4
 1972 0002 00AF     		add	r7, sp, #0
 1973              	.LCFI85:
 1974              		.cfi_def_cfa_register 7
 1975              	.LBB12:
 1976              	.LBB13:
 1977              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccNBuYt9.s 			page 50


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  /tmp/ccNBuYt9.s 			page 51


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1978              		.loc 2 142 3
 1979              		.syntax unified
 1980              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1981 0004 72B6     		cpsid i
 1982              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1983              		.loc 2 143 1
 1984              		.thumb
 1985              		.syntax unified
 1986 0006 00BF     		nop
 1987              	.L75:
 1988              	.LBE13:
 1989              	.LBE12:
 767:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 768:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 769:Core/Src/main.c ****   __disable_irq();
 770:Core/Src/main.c ****   while (1)
ARM GAS  /tmp/ccNBuYt9.s 			page 52


 1990              		.loc 1 770 9 discriminator 1
 1991 0008 FEE7     		b	.L75
 1992              		.cfi_endproc
 1993              	.LFE261:
 1995              		.text
 1996              	.Letext0:
 1997              		.file 3 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_ty
 1998              		.file 4 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 1999              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2000              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2001              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2002              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2003              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2004              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2005              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2006              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2007              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2008              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2009              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2010              		.file 16 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/std
 2011              		.file 17 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_types.h"
 2012              		.file 18 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/reent.h"
 2013              		.file 19 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/lock.h"
 2014              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2015              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/ccNBuYt9.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNBuYt9.s:24     .bss.hadc1:0000000000000000 hadc1
     /tmp/ccNBuYt9.s:21     .bss.hadc1:0000000000000000 $d
     /tmp/ccNBuYt9.s:31     .bss.hadc2:0000000000000000 hadc2
     /tmp/ccNBuYt9.s:28     .bss.hadc2:0000000000000000 $d
     /tmp/ccNBuYt9.s:38     .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccNBuYt9.s:35     .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccNBuYt9.s:45     .bss.hdma_adc2:0000000000000000 hdma_adc2
     /tmp/ccNBuYt9.s:42     .bss.hdma_adc2:0000000000000000 $d
     /tmp/ccNBuYt9.s:52     .bss.hcan1:0000000000000000 hcan1
     /tmp/ccNBuYt9.s:49     .bss.hcan1:0000000000000000 $d
     /tmp/ccNBuYt9.s:59     .bss.RelayTaskHandle:0000000000000000 RelayTaskHandle
     /tmp/ccNBuYt9.s:56     .bss.RelayTaskHandle:0000000000000000 $d
     /tmp/ccNBuYt9.s:66     .bss.RelayTaskBuffer:0000000000000000 RelayTaskBuffer
     /tmp/ccNBuYt9.s:63     .bss.RelayTaskBuffer:0000000000000000 $d
     /tmp/ccNBuYt9.s:73     .bss.RelayTaskControlBlock:0000000000000000 RelayTaskControlBlock
     /tmp/ccNBuYt9.s:70     .bss.RelayTaskControlBlock:0000000000000000 $d
     /tmp/ccNBuYt9.s:84     .rodata.RelayTask_attributes:0000000000000000 RelayTask_attributes
     /tmp/ccNBuYt9.s:77     .rodata:0000000000000000 $d
     /tmp/ccNBuYt9.s:81     .rodata.RelayTask_attributes:0000000000000000 $d
     /tmp/ccNBuYt9.s:98     .bss.CanTaskHandle:0000000000000000 CanTaskHandle
     /tmp/ccNBuYt9.s:95     .bss.CanTaskHandle:0000000000000000 $d
     /tmp/ccNBuYt9.s:105    .bss.CanTaksBuffer:0000000000000000 CanTaksBuffer
     /tmp/ccNBuYt9.s:102    .bss.CanTaksBuffer:0000000000000000 $d
     /tmp/ccNBuYt9.s:112    .bss.CanTaksControlBlock:0000000000000000 CanTaksControlBlock
     /tmp/ccNBuYt9.s:109    .bss.CanTaksControlBlock:0000000000000000 $d
     /tmp/ccNBuYt9.s:123    .rodata.CanTask_attributes:0000000000000000 CanTask_attributes
     /tmp/ccNBuYt9.s:120    .rodata.CanTask_attributes:0000000000000000 $d
     /tmp/ccNBuYt9.s:137    .bss.AdcTaskHandle:0000000000000000 AdcTaskHandle
     /tmp/ccNBuYt9.s:134    .bss.AdcTaskHandle:0000000000000000 $d
     /tmp/ccNBuYt9.s:144    .bss.AdcTaskBuffer:0000000000000000 AdcTaskBuffer
     /tmp/ccNBuYt9.s:141    .bss.AdcTaskBuffer:0000000000000000 $d
     /tmp/ccNBuYt9.s:151    .bss.AdcTaskControlBlock:0000000000000000 AdcTaskControlBlock
     /tmp/ccNBuYt9.s:148    .bss.AdcTaskControlBlock:0000000000000000 $d
     /tmp/ccNBuYt9.s:162    .rodata.AdcTask_attributes:0000000000000000 AdcTask_attributes
     /tmp/ccNBuYt9.s:159    .rodata.AdcTask_attributes:0000000000000000 $d
     /tmp/ccNBuYt9.s:176    .bss.canMsgReceivedSemHandle:0000000000000000 canMsgReceivedSemHandle
     /tmp/ccNBuYt9.s:173    .bss.canMsgReceivedSemHandle:0000000000000000 $d
     /tmp/ccNBuYt9.s:187    .rodata.canMsgReceivedSem_attributes:0000000000000000 canMsgReceivedSem_attributes
     /tmp/ccNBuYt9.s:184    .rodata.canMsgReceivedSem_attributes:0000000000000000 $d
     /tmp/ccNBuYt9.s:194    .bss.rb_state:0000000000000000 rb_state
     /tmp/ccNBuYt9.s:195    .bss.rb_state:0000000000000000 $d
     /tmp/ccNBuYt9.s:201    .bss.relay_board_data:0000000000000000 relay_board_data
     /tmp/ccNBuYt9.s:198    .bss.relay_board_data:0000000000000000 $d
     /tmp/ccNBuYt9.s:208    .bss.relay_board_bin:0000000000000000 relay_board_bin
     /tmp/ccNBuYt9.s:205    .bss.relay_board_bin:0000000000000000 $d
     /tmp/ccNBuYt9.s:215    .bss.adc1Results:0000000000000000 adc1Results
     /tmp/ccNBuYt9.s:212    .bss.adc1Results:0000000000000000 $d
     /tmp/ccNBuYt9.s:222    .bss.RxHeader:0000000000000000 RxHeader
     /tmp/ccNBuYt9.s:219    .bss.RxHeader:0000000000000000 $d
     /tmp/ccNBuYt9.s:229    .bss.RxData:0000000000000000 RxData
     /tmp/ccNBuYt9.s:226    .bss.RxData:0000000000000000 $d
     /tmp/ccNBuYt9.s:232    .text._write:0000000000000000 $t
     /tmp/ccNBuYt9.s:238    .text._write:0000000000000000 _write
     /tmp/ccNBuYt9.s:281    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:287    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
ARM GAS  /tmp/ccNBuYt9.s 			page 54


     /tmp/ccNBuYt9.s:329    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000028 $d
     /tmp/ccNBuYt9.s:336    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:342    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccNBuYt9.s:384    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000028 $d
     /tmp/ccNBuYt9.s:391    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:397    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccNBuYt9.s:433    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:439    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccNBuYt9.s:475    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:481    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccNBuYt9.s:517    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:523    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccNBuYt9.s:567    .text.HAL_ADC_ConvCpltCallback:0000000000000028 $d
     /tmp/ccNBuYt9.s:574    .text.main:0000000000000000 $t
     /tmp/ccNBuYt9.s:580    .text.main:0000000000000000 main
     /tmp/ccNBuYt9.s:675    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNBuYt9.s:1393   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccNBuYt9.s:1322   .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccNBuYt9.s:1172   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccNBuYt9.s:844    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccNBuYt9.s:1008   .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccNBuYt9.s:654    .text.main:000000000000006c $d
     /tmp/ccNBuYt9.s:1652   .text.StartRelayTask:0000000000000000 StartRelayTask
     /tmp/ccNBuYt9.s:1785   .text.StartCanTask:0000000000000000 StartCanTask
     /tmp/ccNBuYt9.s:1822   .text.StartAdcTask:0000000000000000 StartAdcTask
     /tmp/ccNBuYt9.s:669    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNBuYt9.s:1961   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccNBuYt9.s:833    .text.SystemClock_Config:00000000000000f4 $d
     /tmp/ccNBuYt9.s:839    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccNBuYt9.s:996    .text.MX_ADC1_Init:00000000000000d0 $d
     /tmp/ccNBuYt9.s:1003   .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccNBuYt9.s:1160   .text.MX_ADC2_Init:00000000000000d0 $d
     /tmp/ccNBuYt9.s:1167   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccNBuYt9.s:1311   .text.MX_CAN1_Init:00000000000000bc $d
     /tmp/ccNBuYt9.s:1317   .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccNBuYt9.s:1383   .text.MX_DMA_Init:000000000000004c $d
     /tmp/ccNBuYt9.s:1388   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccNBuYt9.s:1624   .text.MX_GPIO_Init:000000000000017c $d
     /tmp/ccNBuYt9.s:1646   .text.StartRelayTask:0000000000000000 $t
     /tmp/ccNBuYt9.s:1686   .text.StartRelayTask:0000000000000020 $d
     /tmp/ccNBuYt9.s:1700   .text.StartRelayTask:0000000000000058 $t
     /tmp/ccNBuYt9.s:1769   .text.StartRelayTask:00000000000000d8 $d
     /tmp/ccNBuYt9.s:1779   .text.StartCanTask:0000000000000000 $t
     /tmp/ccNBuYt9.s:1816   .text.StartAdcTask:0000000000000000 $t
     /tmp/ccNBuYt9.s:1891   .text.StartAdcTask:000000000000006c $d
     /tmp/ccNBuYt9.s:1903   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccNBuYt9.s:1909   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccNBuYt9.s:1950   .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccNBuYt9.s:1955   .text.Error_Handler:0000000000000000 $t

UNDEFINED SYMBOLS
CDC_Transmit_FS
HAL_CAN_GetRxMessage
osSemaphoreRelease
HAL_ADC_Start_DMA
HAL_Init
osKernelInitialize
ARM GAS  /tmp/ccNBuYt9.s 			page 55


osSemaphoreNew
osThreadNew
osKernelStart
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCC_MCOConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ActivateNotification
HAL_CAN_ConfigFilter
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
MX_USB_DEVICE_Init
puts
osDelay
printf
HAL_IncTick
