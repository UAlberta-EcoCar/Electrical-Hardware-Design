
H2-Sensor-Board-Lucy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011240  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e8  080113d0  080113d0  000213d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124b8  080124b8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080124b8  080124b8  000224b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124c0  080124c0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124c0  080124c0  000224c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124c4  080124c4  000224c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080124c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c94  20000200  080126c8  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e94  080126c8  00033e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002715f  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000575b  00000000  00000000  000573d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  0005cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019e3  00000000  00000000  0005ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002841f  00000000  00000000  00060693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028ca6  00000000  00000000  00088ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee25e  00000000  00000000  000b1758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a2e8  00000000  00000000  0019f9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001a9ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080113b8 	.word	0x080113b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080113b8 	.word	0x080113b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <MQ8_GetPercentage>:
//to the original curve.
//data format:{ x, y, slope}; point1: (lg200, lg8.5), point2: (lg10000, lg0.03)

float Ro = 10;                  //Ro is initialized to 10 kilo ohms

int MQ8_GetPercentage(float rs_ro_ratio, float *pcurve) {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ff2:	6038      	str	r0, [r7, #0]
	return (pow(10, (((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0])));
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	ec43 2b10 	vmov	d0, r2, r3
 8001002:	f00f f89d 	bl	8010140 <log>
 8001006:	ec55 4b10 	vmov	r4, r5, d0
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f933 	bl	8000288 <__aeabi_dsub>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4614      	mov	r4, r2
 8001028:	461d      	mov	r5, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3308      	adds	r3, #8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa89 	bl	8000548 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4620      	mov	r0, r4
 800103c:	4629      	mov	r1, r5
 800103e:	f7ff fc05 	bl	800084c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa7a 	bl	8000548 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff f916 	bl	800028c <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b17 	vmov	d7, r2, r3
 8001068:	eeb0 1a47 	vmov.f32	s2, s14
 800106c:	eef0 1a67 	vmov.f32	s3, s15
 8001070:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001090 <MQ8_GetPercentage+0xa8>
 8001074:	f00f f8a2 	bl	80101bc <pow>
 8001078:	ec53 2b10 	vmov	r2, r3, d0
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd6a 	bl	8000b58 <__aeabi_d2iz>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40240000 	.word	0x40240000

08001098 <MQ8_GetH2Percentage>:

int MQ8_GetH2Percentage(float rs_ro_ratio) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	return MQ8_GetPercentage(rs_ro_ratio, H2Curve);
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MQ8_GetH2Percentage+0x20>)
 80010a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a8:	f7ff ff9e 	bl	8000fe8 <MQ8_GetPercentage>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <MQ8_ResistanceCalculation>:

float MQ8_ResistanceCalculation(int real_adc) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	return ((float) (RL_VALUE * real_adc));
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	// 4095 is adc resolution origitan was 1023
//	return (((float) RL_VALUE * (4095 - real_adc) / real_adc));
}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <MQ8_Compensate>:

float MQ8_Compensate(float real_adc) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	float rs = 0;
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e015      	b.n	8001126 <MQ8_Compensate+0x42>
		rs += MQ8_ResistanceCalculation(real_adc);
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 0a90 	vmov	r0, s15
 8001106:	f7ff ffd9 	bl	80010bc <MQ8_ResistanceCalculation>
 800110a:	eeb0 7a40 	vmov.f32	s14, s0
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001116:	edc7 7a02 	vstr	s15, [r7, #8]
		osDelay(READ_SAMPLE_INTERVAL);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f008 fcba 	bl	8009a94 <osDelay>
	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b09      	cmp	r3, #9
 800112a:	dde6      	ble.n	80010fa <MQ8_Compensate+0x16>

	}

	rs = rs / READ_SAMPLE_TIMES;
 800112c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001130:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	edc7 7a02 	vstr	s15, [r7, #8]

	return rs;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	ee07 3a90 	vmov	s15, r3
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001164:	4a29      	ldr	r2, [pc, #164]	; (800120c <MX_ADC1_Init+0xc0>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_ADC1_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_ADC1_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001182:	2204      	movs	r2, #4
 8001184:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_ADC1_Init+0xbc>)
 800118e:	2201      	movs	r2, #1
 8001190:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC1_Init+0xbc>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_ADC1_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011c4:	f003 fadc 	bl	8004780 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011ce:	f001 f85b 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0xc4>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	; 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC1_Init+0xbc>)
 80011f0:	f003 fcb0 	bl	8004b54 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f001 f845 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000021c 	.word	0x2000021c
 800120c:	50040000 	.word	0x50040000
 8001210:	21800100 	.word	0x21800100

08001214 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09e      	sub	sp, #120	; 0x78
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2254      	movs	r2, #84	; 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00c ff39 	bl	800e0ac <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a3b      	ldr	r2, [pc, #236]	; (800132c <HAL_ADC_MspInit+0x118>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d16e      	bne.n	8001322 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001248:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800124a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800124e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001250:	2303      	movs	r3, #3
 8001252:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001258:	2308      	movs	r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800125c:	2307      	movs	r3, #7
 800125e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4618      	mov	r0, r3
 8001274:	f007 f8c8 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800127e:	f001 f803 	bl	8002288 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 8001288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = H2_SENSE_ADC_Pin;
 80012b2:	2308      	movs	r3, #8
 80012b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(H2_SENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f005 f8fc 	bl	80064c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_ADC_MspInit+0x124>)
 80012d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012fc:	2220      	movs	r2, #32
 80012fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_MspInit+0x120>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_ADC_MspInit+0x120>)
 8001308:	f004 fee4 	bl	80060d4 <HAL_DMA_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001312:	f000 ffb9 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_ADC_MspInit+0x120>)
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_ADC_MspInit+0x120>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001322:	bf00      	nop
 8001324:	3778      	adds	r7, #120	; 0x78
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	50040000 	.word	0x50040000
 8001330:	40021000 	.word	0x40021000
 8001334:	20000280 	.word	0x20000280
 8001338:	40020008 	.word	0x40020008

0800133c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <MX_CAN1_Init+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001348:	2205      	movs	r2, #5
 800134a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_CAN1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_CAN1_Init+0x64>)
 800135a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800135e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001362:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001366:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_CAN1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_CAN1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_CAN1_Init+0x64>)
 800138e:	f004 f8db 	bl	8005548 <HAL_CAN_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001398:	f000 ff76 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002c8 	.word	0x200002c8
 80013a4:	40006400 	.word	0x40006400

080013a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_CAN_MspInit+0x90>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d131      	bne.n	800142e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_CAN_MspInit+0x94>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800140c:	2309      	movs	r3, #9
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f005 f853 	bl	80064c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2105      	movs	r1, #5
 8001422:	2014      	movs	r0, #20
 8001424:	f004 fe2c 	bl	8006080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001428:	2014      	movs	r0, #20
 800142a:	f004 fe45 	bl	80060b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40006400 	.word	0x40006400
 800143c:	40021000 	.word	0x40021000

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_DMA_Init+0x38>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <MX_DMA_Init+0x38>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6493      	str	r3, [r2, #72]	; 0x48
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_DMA_Init+0x38>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	200b      	movs	r0, #11
 8001464:	f004 fe0c 	bl	8006080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001468:	200b      	movs	r0, #11
 800146a:	f004 fe25 	bl	80060b8 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <CAN_Transmit_Intrim>:
}

/**
 * Send 8 bytes at a time, with standard id size.
 */
int CAN_Transmit_Intrim(IntrimPacket _to_send) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	TxHeader.StdId = _to_send.id;
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <CAN_Transmit_Intrim+0x50>)
 800148e:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = _to_send.rtr_type;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	461a      	mov	r2, r3
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <CAN_Transmit_Intrim+0x50>)
 8001496:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = _to_send.dlc;
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	461a      	mov	r2, r3
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <CAN_Transmit_Intrim+0x50>)
 800149e:	611a      	str	r2, [r3, #16]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, _to_send.data, &TxMailbox)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	1d1a      	adds	r2, r3, #4
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <CAN_Transmit_Intrim+0x54>)
 80014a6:	4909      	ldr	r1, [pc, #36]	; (80014cc <CAN_Transmit_Intrim+0x50>)
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <CAN_Transmit_Intrim+0x58>)
 80014aa:	f004 f948 	bl	800573e <HAL_CAN_AddTxMessage>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <CAN_Transmit_Intrim+0x46>
			!= HAL_OK) {
		printf("Can transmission error on packet id: %hu\r\n", _to_send.id);
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <CAN_Transmit_Intrim+0x5c>)
 80014ba:	f00c fc77 	bl	800ddac <iprintf>
		Error_Handler();
 80014be:	f000 fee3 	bl	8002288 <Error_Handler>
	}

	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002f0 	.word	0x200002f0
 80014d0:	20000308 	.word	0x20000308
 80014d4:	200002c8 	.word	0x200002c8
 80014d8:	0801149c 	.word	0x0801149c

080014dc <user_i2c_read>:

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	603a      	str	r2, [r7, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	460b      	mov	r3, r1
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	4613      	mov	r3, r2
 80014f0:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	b299      	uxth	r1, r3
 80014fa:	1dba      	adds	r2, r7, #6
 80014fc:	230a      	movs	r3, #10
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <user_i2c_read+0x6c>)
 8001504:	f005 f9f0 	bl	80068e8 <HAL_I2C_Master_Transmit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <user_i2c_read+0x38>
		return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e014      	b.n	800153e <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b21b      	sxth	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b21b      	sxth	r3, r3
 8001520:	b299      	uxth	r1, r3
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	220a      	movs	r2, #10
 8001526:	9200      	str	r2, [sp, #0]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <user_i2c_read+0x6c>)
 800152c:	f005 fad0 	bl	8006ad0 <HAL_I2C_Master_Receive>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e000      	b.n	800153e <user_i2c_read+0x62>

	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001f0c 	.word	0x20001f0c

0800154c <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f008 fa9d 	bl	8009a94 <osDelay>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8001564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001568:	b087      	sub	sp, #28
 800156a:	af02      	add	r7, sp, #8
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	460b      	mov	r3, r1
 8001576:	71bb      	strb	r3, [r7, #6]
 8001578:	4613      	mov	r3, r2
 800157a:	80bb      	strh	r3, [r7, #4]
 800157c:	466b      	mov	r3, sp
 800157e:	461e      	mov	r6, r3
	uint8_t buf[len + 1];
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	1e4b      	subs	r3, r1, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	460a      	mov	r2, r1
 800158a:	2300      	movs	r3, #0
 800158c:	4690      	mov	r8, r2
 800158e:	4699      	mov	r9, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800159c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a4:	460a      	mov	r2, r1
 80015a6:	2300      	movs	r3, #0
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	00eb      	lsls	r3, r5, #3
 80015b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ba:	00e2      	lsls	r2, r4, #3
 80015bc:	460b      	mov	r3, r1
 80015be:	3307      	adds	r3, #7
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	ebad 0d03 	sub.w	sp, sp, r3
 80015c8:	ab02      	add	r3, sp, #8
 80015ca:	3300      	adds	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	79ba      	ldrb	r2, [r7, #6]
 80015d2:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3301      	adds	r3, #1
 80015d8:	88ba      	ldrh	r2, [r7, #4]
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c fde4 	bl	800e1aa <memcpy>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 80015e2:	e002      	b.n	80015ea <user_i2c_write+0x86>
	HAL_MAX_DELAY) != HAL_OK)
		printf("I2C Error\r\n");
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <user_i2c_write+0xb8>)
 80015e6:	f00c fc47 	bl	800de78 <puts>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	b299      	uxth	r1, r3
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <user_i2c_write+0xbc>)
 8001602:	f005 f971 	bl	80068e8 <HAL_I2C_Master_Transmit>
 8001606:	4603      	mov	r3, r0
	HAL_MAX_DELAY) != HAL_OK)
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1eb      	bne.n	80015e4 <user_i2c_write+0x80>
//	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
//	HAL_MAX_DELAY) != HAL_OK)
//		return -1;
//
//	free(buf);
	return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	46b5      	mov	sp, r6
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161a:	bf00      	nop
 800161c:	080114c8 	.word	0x080114c8
 8001620:	20001f0c 	.word	0x20001f0c

08001624 <HAL_CAN_RxFifo0MsgPendingCallback>:

IntrimPacket packet; // Declared as a temporary variable outside ISR as this is being allocated and re allocated,
// therefore to save ISR time declaring it out side. Also volatile since only used in ISR.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, packet.data)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001630:	2100      	movs	r1, #0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f004 f953 	bl	80058de <HAL_CAN_GetRxMessage>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
			!= HAL_OK) {
		Error_Handler();
 800163e:	f000 fe23 	bl	8002288 <Error_Handler>
	}
	// Just check if there is atleast 1 spot open
	// If we dont and call get message we will loose that message since it wont fit and the ISR will exit.
	if (osMessageQueueGetSpace(CAN_HighPro_QHandle) >= 1) {
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f008 fd5a 	bl	800a100 <osMessageQueueGetSpace>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d013      	beq.n	800167a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>

		printf("[CAN RX Inturrupt] Got message\r\n");
 8001652:	480f      	ldr	r0, [pc, #60]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001654:	f00c fc10 	bl	800de78 <puts>
		// Mask the packet ID out.
		packet.id = RxHeader.StdId;	// & 0x0FF;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001660:	801a      	strh	r2, [r3, #0]
		packet.rtr_type = RxHeader.RTR;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800166a:	70da      	strb	r2, [r3, #3]
		//memcpy(packet.data, RxData, 8); // this is always 8 bytes therefore there
		// is pretty much no added iteration time. The compiler will optimize the loop away.

		osMessageQueuePut(CAN_HighPro_QHandle, &packet, 0, 0);
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001676:	f008 fc85 	bl	8009f84 <osMessageQueuePut>
	}

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001f00 	.word	0x20001f00
 8001688:	2000030c 	.word	0x2000030c
 800168c:	20001d90 	.word	0x20001d90
 8001690:	080114d4 	.word	0x080114d4
 8001694:	20001efc 	.word	0x20001efc

08001698 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox0CompleteCallback] Sent\r\n");
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80016b6:	f00c fbdf 	bl	800de78 <puts>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	080114f4 	.word	0x080114f4

080016c8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox1CompleteCallback] Sent\r\n");
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80016d2:	f00c fbd1 	bl	800de78 <puts>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08011518 	.word	0x08011518

080016e4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox2CompleteCallback] Sent\r\n");
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80016ee:	f00c fbc3 	bl	800de78 <puts>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	0801153c 	.word	0x0801153c

08001700 <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of I2CBusControl */
  I2CBusControlHandle = osMutexNew(&I2CBusControl_attributes);
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <MX_FREERTOS_Init+0x94>)
 800171e:	f008 f9d4 	bl	8009aca <osMutexNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <MX_FREERTOS_Init+0x98>)
 8001726:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of calibrateSensor */
  calibrateSensorHandle = osSemaphoreNew(1, 0, &calibrateSensor_attributes);
 8001728:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <MX_FREERTOS_Init+0x9c>)
 800172a:	2100      	movs	r1, #0
 800172c:	2001      	movs	r0, #1
 800172e:	f008 fada 	bl	8009ce6 <osSemaphoreNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <MX_FREERTOS_Init+0xa0>)
 8001736:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN_HighPro_Q */
  CAN_HighPro_QHandle = osMessageQueueNew (16, sizeof(IntrimPacket), &CAN_HighPro_Q_attributes);
 8001738:	4a20      	ldr	r2, [pc, #128]	; (80017bc <MX_FREERTOS_Init+0xa4>)
 800173a:	210c      	movs	r1, #12
 800173c:	2010      	movs	r0, #16
 800173e:	f008 fbad 	bl	8009e9c <osMessageQueueNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <MX_FREERTOS_Init+0xa8>)
 8001746:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <MX_FREERTOS_Init+0xac>)
 800174a:	2100      	movs	r1, #0
 800174c:	481e      	ldr	r0, [pc, #120]	; (80017c8 <MX_FREERTOS_Init+0xb0>)
 800174e:	f008 f90f 	bl	8009970 <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <MX_FREERTOS_Init+0xb4>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of SensorReadT */
  SensorReadTHandle = osThreadNew(startSensorReadThread, NULL, &SensorReadT_attributes);
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <MX_FREERTOS_Init+0xb8>)
 800175a:	2100      	movs	r1, #0
 800175c:	481d      	ldr	r0, [pc, #116]	; (80017d4 <MX_FREERTOS_Init+0xbc>)
 800175e:	f008 f907 	bl	8009970 <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <MX_FREERTOS_Init+0xc0>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of AuxilaryPrintT */
  AuxilaryPrintTHandle = osThreadNew(startAuxilaryPrintThread, NULL, &AuxilaryPrintT_attributes);
 8001768:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <MX_FREERTOS_Init+0xc4>)
 800176a:	2100      	movs	r1, #0
 800176c:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_FREERTOS_Init+0xc8>)
 800176e:	f008 f8ff 	bl	8009970 <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_FREERTOS_Init+0xcc>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of SensorTransmitT */
  SensorTransmitTHandle = osThreadNew(startSensorTransmitThread, NULL, &SensorTransmitT_attributes);
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_FREERTOS_Init+0xd0>)
 800177a:	2100      	movs	r1, #0
 800177c:	481b      	ldr	r0, [pc, #108]	; (80017ec <MX_FREERTOS_Init+0xd4>)
 800177e:	f008 f8f7 	bl	8009970 <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <MX_FREERTOS_Init+0xd8>)
 8001786:	6013      	str	r3, [r2, #0]

  /* creation of LeakWatchdogT */
  LeakWatchdogTHandle = osThreadNew(startLeakWatchdogThread, NULL, &LeakWatchdogT_attributes);
 8001788:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <MX_FREERTOS_Init+0xdc>)
 800178a:	2100      	movs	r1, #0
 800178c:	481a      	ldr	r0, [pc, #104]	; (80017f8 <MX_FREERTOS_Init+0xe0>)
 800178e:	f008 f8ef 	bl	8009970 <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <MX_FREERTOS_Init+0xe4>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of SensorCalibrate */
  SensorCalibrateHandle = osThreadNew(startSensorCalibrateThread, NULL, &SensorCalibrate_attributes);
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <MX_FREERTOS_Init+0xe8>)
 800179a:	2100      	movs	r1, #0
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <MX_FREERTOS_Init+0xec>)
 800179e:	f008 f8e7 	bl	8009970 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <MX_FREERTOS_Init+0xf0>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0801193c 	.word	0x0801193c
 80017b0:	20001ea4 	.word	0x20001ea4
 80017b4:	0801194c 	.word	0x0801194c
 80017b8:	20001ea8 	.word	0x20001ea8
 80017bc:	08011924 	.word	0x08011924
 80017c0:	20001d90 	.word	0x20001d90
 80017c4:	0801184c 	.word	0x0801184c
 80017c8:	0800180d 	.word	0x0800180d
 80017cc:	200007ac 	.word	0x200007ac
 80017d0:	08011870 	.word	0x08011870
 80017d4:	08001829 	.word	0x08001829
 80017d8:	200007b0 	.word	0x200007b0
 80017dc:	08011894 	.word	0x08011894
 80017e0:	08001a85 	.word	0x08001a85
 80017e4:	20000c10 	.word	0x20000c10
 80017e8:	080118b8 	.word	0x080118b8
 80017ec:	08001cf9 	.word	0x08001cf9
 80017f0:	20001070 	.word	0x20001070
 80017f4:	080118dc 	.word	0x080118dc
 80017f8:	08001e59 	.word	0x08001e59
 80017fc:	200014d0 	.word	0x200014d0
 8001800:	08011900 	.word	0x08011900
 8001804:	08001ee1 	.word	0x08001ee1
 8001808:	20001930 	.word	0x20001930

0800180c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	for (;;) {
		printf("[!Default task]: s");
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <StartDefaultTask+0x18>)
 8001816:	f00c fac9 	bl	800ddac <iprintf>
		osDelay(osWaitForever);
 800181a:	f04f 30ff 	mov.w	r0, #4294967295
 800181e:	f008 f939 	bl	8009a94 <osDelay>
		printf("[!Default task]: s");
 8001822:	e7f7      	b.n	8001814 <StartDefaultTask+0x8>
 8001824:	08011560 	.word	0x08011560

08001828 <startSensorReadThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorReadThread */
void startSensorReadThread(void *argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b096      	sub	sp, #88	; 0x58
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSensorReadThread */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001830:	2228      	movs	r2, #40	; 0x28
 8001832:	497f      	ldr	r1, [pc, #508]	; (8001a30 <startSensorReadThread+0x208>)
 8001834:	487f      	ldr	r0, [pc, #508]	; (8001a34 <startSensorReadThread+0x20c>)
 8001836:	f003 f8eb 	bl	8004a10 <HAL_ADC_Start_DMA>

	struct bme280_dev dev;
	struct bme280_data comp_data;
	int8_t rslt;

	osMutexAcquire(I2CBusControlHandle, osWaitForever);
 800183a:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <startSensorReadThread+0x210>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 31ff 	mov.w	r1, #4294967295
 8001842:	4618      	mov	r0, r3
 8001844:	f008 f9c7 	bl	8009bd6 <osMutexAcquire>
	dev.dev_id = BME280_I2C_ADDR_SEC;
 8001848:	2377      	movs	r3, #119	; 0x77
 800184a:	757b      	strb	r3, [r7, #21]
	dev.intf = BME280_I2C_INTF;
 800184c:	2301      	movs	r3, #1
 800184e:	75bb      	strb	r3, [r7, #22]
	dev.read = user_i2c_read;
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <startSensorReadThread+0x214>)
 8001852:	61bb      	str	r3, [r7, #24]
	dev.write = user_i2c_write;
 8001854:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <startSensorReadThread+0x218>)
 8001856:	61fb      	str	r3, [r7, #28]
	dev.delay_ms = user_delay_ms;
 8001858:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <startSensorReadThread+0x21c>)
 800185a:	623b      	str	r3, [r7, #32]
	rslt = bme280_init(&dev);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4618      	mov	r0, r3
 8001862:	f001 fa49 	bl	8002cf8 <bme280_init>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8001872:	2305      	movs	r3, #5
 8001874:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001878:	2302      	movs	r3, #2
 800187a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800187e:	2304      	movs	r3, #4
 8001880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	rslt = bme280_set_sensor_settings(
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	200f      	movs	r0, #15
 800188c:	f001 fb28 	bl	8002ee0 <bme280_set_sensor_settings>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	2003      	movs	r0, #3
 800189e:	f001 fb74 	bl	8002f8a <bme280_set_sensor_mode>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	osDelay(50);
 80018a8:	2032      	movs	r0, #50	; 0x32
 80018aa:	f008 f8f3 	bl	8009a94 <osDelay>
	osMutexRelease(I2CBusControlHandle);
 80018ae:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <startSensorReadThread+0x210>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f008 f9da 	bl	8009c6c <osMutexRelease>
	/* Infinite loop */
	// \033[2J\033[0;0H
	for (;;) {

		//HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_SET);
		printf("[Main Thread] ");
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <startSensorReadThread+0x220>)
 80018ba:	f00c fa77 	bl	800ddac <iprintf>
		printf("H2 ADC: ");
 80018be:	4863      	ldr	r0, [pc, #396]	; (8001a4c <startSensorReadThread+0x224>)
 80018c0:	f00c fa74 	bl	800ddac <iprintf>
		printf("%d\r\n", adc_buf[ADC_BUF_LEN - 1] * 0.8);
 80018c4:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <startSensorReadThread+0x208>)
 80018c6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_i2d>
 80018d0:	a353      	add	r3, pc, #332	; (adr r3, 8001a20 <startSensorReadThread+0x1f8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe8f 	bl	80005f8 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	485c      	ldr	r0, [pc, #368]	; (8001a50 <startSensorReadThread+0x228>)
 80018e0:	f00c fa64 	bl	800ddac <iprintf>
		//		TxHeader.StdId = 0x102;
		printf("[!Main Thread] Calibrated H2 Sensor Reading: %d\r\n",
				(h2_conc_ppm = MQ8_GetH2Percentage(
						MQ8_Compensate(adc_buf[ADC_BUF_LEN - 1]) / Ro)));
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <startSensorReadThread+0x208>)
 80018e6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f2:	eeb0 0a67 	vmov.f32	s0, s15
 80018f6:	f7ff fbf5 	bl	80010e4 <MQ8_Compensate>
 80018fa:	eef0 6a40 	vmov.f32	s13, s0
				(h2_conc_ppm = MQ8_GetH2Percentage(
 80018fe:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <startSensorReadThread+0x22c>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001908:	eeb0 0a47 	vmov.f32	s0, s14
 800190c:	f7ff fbc4 	bl	8001098 <MQ8_GetH2Percentage>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <startSensorReadThread+0x230>)
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <startSensorReadThread+0x230>)
 800191a:	881b      	ldrh	r3, [r3, #0]
		printf("[!Main Thread] Calibrated H2 Sensor Reading: %d\r\n",
 800191c:	4619      	mov	r1, r3
 800191e:	484f      	ldr	r0, [pc, #316]	; (8001a5c <startSensorReadThread+0x234>)
 8001920:	f00c fa44 	bl	800ddac <iprintf>
		if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <startSensorReadThread+0x210>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	4618      	mov	r0, r3
 800192e:	f008 f952 	bl	8009bd6 <osMutexAcquire>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d14a      	bne.n	80019ce <startSensorReadThread+0x1a6>
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8001938:	f107 0214 	add.w	r2, r7, #20
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	4619      	mov	r1, r3
 8001942:	2007      	movs	r0, #7
 8001944:	f001 fb9d 	bl	8003082 <bme280_get_sensor_data>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			osMutexRelease(I2CBusControlHandle);
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <startSensorReadThread+0x210>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f008 f98a 	bl	8009c6c <osMutexRelease>
			if (rslt == BME280_OK) {
 8001958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800195c:	2b00      	cmp	r3, #0
 800195e:	d139      	bne.n	80019d4 <startSensorReadThread+0x1ac>
				temperature = comp_data.temperature / 100.0; /* °C  */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdde 	bl	8000524 <__aeabi_i2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <startSensorReadThread+0x238>)
 800196e:	f7fe ff6d 	bl	800084c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f915 	bl	8000ba8 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <startSensorReadThread+0x23c>)
 8001982:	6013      	str	r3, [r2, #0]
				humidity = comp_data.humidity / 1024.0; /* %   */
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdbc 	bl	8000504 <__aeabi_ui2d>
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <startSensorReadThread+0x240>)
 8001992:	f7fe ff5b 	bl	800084c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f903 	bl	8000ba8 <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <startSensorReadThread+0x244>)
 80019a6:	6013      	str	r3, [r2, #0]
				pressure = comp_data.pressure / 10000.0; /* hPa */
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdaa 	bl	8000504 <__aeabi_ui2d>
 80019b0:	a31d      	add	r3, pc, #116	; (adr r3, 8001a28 <startSensorReadThread+0x200>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8f1 	bl	8000ba8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <startSensorReadThread+0x248>)
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e002      	b.n	80019d4 <startSensorReadThread+0x1ac>
			}

		} else {
			printf("[!Main Thread] Failed to aquire control of I2C Bus\r\n");
 80019ce:	4829      	ldr	r0, [pc, #164]	; (8001a74 <startSensorReadThread+0x24c>)
 80019d0:	f00c fa52 	bl	800de78 <puts>
		}

		printf("[!Main Thread] Humidity: %03.1f\r\n", humidity);
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <startSensorReadThread+0x244>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdb5 	bl	8000548 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4825      	ldr	r0, [pc, #148]	; (8001a78 <startSensorReadThread+0x250>)
 80019e4:	f00c f9e2 	bl	800ddac <iprintf>
		printf("[!Main Thread] Temprature: %03.1f\r\n", temperature);
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <startSensorReadThread+0x23c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdab 	bl	8000548 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4821      	ldr	r0, [pc, #132]	; (8001a7c <startSensorReadThread+0x254>)
 80019f8:	f00c f9d8 	bl	800ddac <iprintf>
		printf("[!Main Thread] Pressure: %03.1f\r\n", pressure);
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <startSensorReadThread+0x248>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fda1 	bl	8000548 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	481d      	ldr	r0, [pc, #116]	; (8001a80 <startSensorReadThread+0x258>)
 8001a0c:	f00c f9ce 	bl	800ddac <iprintf>
		//		packet.rtr_type = CAN_RTR_REMOTE;
		//		TxHeader.DLC = 0;
		//		packet.id = 0x111;
		//		CAN_Transmit_Intrim(packet);

		osDelay(500);
 8001a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a14:	f008 f83e 	bl	8009a94 <osDelay>
		printf("[Main Thread] ");
 8001a18:	e74e      	b.n	80018b8 <startSensorReadThread+0x90>
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	9999999a 	.word	0x9999999a
 8001a24:	3fe99999 	.word	0x3fe99999
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40c38800 	.word	0x40c38800
 8001a30:	2000032c 	.word	0x2000032c
 8001a34:	2000021c 	.word	0x2000021c
 8001a38:	20001ea4 	.word	0x20001ea4
 8001a3c:	080014dd 	.word	0x080014dd
 8001a40:	08001565 	.word	0x08001565
 8001a44:	0800154d 	.word	0x0800154d
 8001a48:	08011574 	.word	0x08011574
 8001a4c:	08011584 	.word	0x08011584
 8001a50:	08011590 	.word	0x08011590
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000328 	.word	0x20000328
 8001a5c:	08011598 	.word	0x08011598
 8001a60:	40590000 	.word	0x40590000
 8001a64:	2000079c 	.word	0x2000079c
 8001a68:	40900000 	.word	0x40900000
 8001a6c:	200007a0 	.word	0x200007a0
 8001a70:	200007a4 	.word	0x200007a4
 8001a74:	080115cc 	.word	0x080115cc
 8001a78:	08011600 	.word	0x08011600
 8001a7c:	08011624 	.word	0x08011624
 8001a80:	08011648 	.word	0x08011648

08001a84 <startAuxilaryPrintThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startAuxilaryPrintThread */
void startAuxilaryPrintThread(void *argument)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAuxilaryPrintThread */
	osDelay(500);
 8001a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a90:	f008 f800 	bl	8009a94 <osDelay>
	if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8001a94:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <startAuxilaryPrintThread+0x210>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f008 f89a 	bl	8009bd6 <osMutexAcquire>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <startAuxilaryPrintThread+0x34>
		ssd1306_Init();
 8001aa8:	f000 fc2c 	bl	8002304 <ssd1306_Init>
		osMutexRelease(I2CBusControlHandle);
 8001aac:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <startAuxilaryPrintThread+0x210>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f008 f8db 	bl	8009c6c <osMutexRelease>
 8001ab6:	e002      	b.n	8001abe <startAuxilaryPrintThread+0x3a>
	} else {
		printf("[!Secondary Thread] I2C Busy\r\n");
 8001ab8:	4877      	ldr	r0, [pc, #476]	; (8001c98 <startAuxilaryPrintThread+0x214>)
 8001aba:	f00c f9dd 	bl	800de78 <puts>

	static int temp_blink = 0;
	/* Infinite loop */
	for (;;) {

		ssd1306_Fill(Black);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 fc8a 	bl	80023d8 <ssd1306_Fill>
		ssd1306_Line(0, 0, SSD1306_WIDTH, 0, White);
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	2100      	movs	r1, #0
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 fddc 	bl	800268c <ssd1306_Line>
		ssd1306_SetCursor(0, 2);
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 fdc0 	bl	800265c <ssd1306_SetCursor>
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
				adc_buf[ADC_BUF_LEN - 1] * 0.8f);
 8001adc:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <startAuxilaryPrintThread+0x218>)
 8001ade:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001ca0 <startAuxilaryPrintThread+0x21c>
 8001aee:	ee67 7a87 	vmul.f32	s15, s15, s14
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
 8001af2:	ee17 0a90 	vmov	r0, s15
 8001af6:	f7fe fd27 	bl	8000548 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4969      	ldr	r1, [pc, #420]	; (8001ca4 <startAuxilaryPrintThread+0x220>)
 8001b00:	4869      	ldr	r0, [pc, #420]	; (8001ca8 <startAuxilaryPrintThread+0x224>)
 8001b02:	f00c f9c1 	bl	800de88 <siprintf>
		ssd1306_WriteString(h2_conc_str, Font_7x10, White);
 8001b06:	4a69      	ldr	r2, [pc, #420]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001b08:	2301      	movs	r3, #1
 8001b0a:	ca06      	ldmia	r2, {r1, r2}
 8001b0c:	4866      	ldr	r0, [pc, #408]	; (8001ca8 <startAuxilaryPrintThread+0x224>)
 8001b0e:	f000 fd7f 	bl	8002610 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 8001b12:	210c      	movs	r1, #12
 8001b14:	2000      	movs	r0, #0
 8001b16:	f000 fda1 	bl	800265c <ssd1306_SetCursor>
		sprintf(bme_data_str, "Temperature: %2.0fC", temperature);
 8001b1a:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <startAuxilaryPrintThread+0x22c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd12 	bl	8000548 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4962      	ldr	r1, [pc, #392]	; (8001cb4 <startAuxilaryPrintThread+0x230>)
 8001b2a:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b2c:	f00c f9ac 	bl	800de88 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001b30:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001b32:	2301      	movs	r3, #1
 8001b34:	ca06      	ldmia	r2, {r1, r2}
 8001b36:	4860      	ldr	r0, [pc, #384]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b38:	f000 fd6a 	bl	8002610 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 22);
 8001b3c:	2116      	movs	r1, #22
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 fd8c 	bl	800265c <ssd1306_SetCursor>
		sprintf(bme_data_str, "Humidity: %2.0f%%", humidity);
 8001b44:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <startAuxilaryPrintThread+0x238>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	495b      	ldr	r1, [pc, #364]	; (8001cc0 <startAuxilaryPrintThread+0x23c>)
 8001b54:	4858      	ldr	r0, [pc, #352]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b56:	f00c f997 	bl	800de88 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001b5a:	4a54      	ldr	r2, [pc, #336]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	ca06      	ldmia	r2, {r1, r2}
 8001b60:	4855      	ldr	r0, [pc, #340]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b62:	f000 fd55 	bl	8002610 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 32);
 8001b66:	2120      	movs	r1, #32
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 fd77 	bl	800265c <ssd1306_SetCursor>
		sprintf(bme_data_str, "Pressure: %3.0f hPa", pressure);
 8001b6e:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <startAuxilaryPrintThread+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fce8 	bl	8000548 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4952      	ldr	r1, [pc, #328]	; (8001cc8 <startAuxilaryPrintThread+0x244>)
 8001b7e:	484e      	ldr	r0, [pc, #312]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b80:	f00c f982 	bl	800de88 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001b86:	2301      	movs	r3, #1
 8001b88:	ca06      	ldmia	r2, {r1, r2}
 8001b8a:	484b      	ldr	r0, [pc, #300]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001b8c:	f000 fd40 	bl	8002610 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 42);
 8001b90:	212a      	movs	r1, #42	; 0x2a
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 fd62 	bl	800265c <ssd1306_SetCursor>
		sprintf(bme_data_str,
				(system_state != H2_SYSTEM_STATE_CALIBRATE) ?
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <startAuxilaryPrintThread+0x248>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
		sprintf(bme_data_str,
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d001      	beq.n	8001ba4 <startAuxilaryPrintThread+0x120>
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <startAuxilaryPrintThread+0x24c>)
 8001ba2:	e000      	b.n	8001ba6 <startAuxilaryPrintThread+0x122>
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <startAuxilaryPrintThread+0x250>)
 8001ba6:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <startAuxilaryPrintThread+0x254>)
 8001ba8:	8812      	ldrh	r2, [r2, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4842      	ldr	r0, [pc, #264]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001bae:	f00c f96b 	bl	800de88 <siprintf>
						"H2 Conc: %d ppm" : "Calibrating ppm", h2_conc_ppm);
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001bb2:	4a3e      	ldr	r2, [pc, #248]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	ca06      	ldmia	r2, {r1, r2}
 8001bb8:	483f      	ldr	r0, [pc, #252]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001bba:	f000 fd29 	bl	8002610 <ssd1306_WriteString>
		ssd1306_Line(0, 62, SSD1306_WIDTH, 62, White);
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	233e      	movs	r3, #62	; 0x3e
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	213e      	movs	r1, #62	; 0x3e
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 fd5f 	bl	800268c <ssd1306_Line>

		ssd1306_SetCursor(0, 52);
 8001bce:	2134      	movs	r1, #52	; 0x34
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f000 fd43 	bl	800265c <ssd1306_SetCursor>

		switch (system_state) {
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <startAuxilaryPrintThread+0x248>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d82a      	bhi.n	8001c34 <startAuxilaryPrintThread+0x1b0>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <startAuxilaryPrintThread+0x160>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001bf9 	.word	0x08001bf9
 8001be8:	08001c05 	.word	0x08001c05
 8001bec:	08001c11 	.word	0x08001c11
 8001bf0:	08001c1d 	.word	0x08001c1d
 8001bf4:	08001c29 	.word	0x08001c29
		case H2_SYSTEM_STATE_INACTIVE:
			sprintf(bme_data_str, "%s", "ALARM INACTIVE");
 8001bf8:	4a38      	ldr	r2, [pc, #224]	; (8001cdc <startAuxilaryPrintThread+0x258>)
 8001bfa:	4939      	ldr	r1, [pc, #228]	; (8001ce0 <startAuxilaryPrintThread+0x25c>)
 8001bfc:	482e      	ldr	r0, [pc, #184]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001bfe:	f00c f943 	bl	800de88 <siprintf>
			break;
 8001c02:	e017      	b.n	8001c34 <startAuxilaryPrintThread+0x1b0>
		case H2_SYSTEM_STATE_ALARM_ACTIVE:
			sprintf(bme_data_str, "%s", "ALARM ACTIVE");
 8001c04:	4a37      	ldr	r2, [pc, #220]	; (8001ce4 <startAuxilaryPrintThread+0x260>)
 8001c06:	4936      	ldr	r1, [pc, #216]	; (8001ce0 <startAuxilaryPrintThread+0x25c>)
 8001c08:	482b      	ldr	r0, [pc, #172]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001c0a:	f00c f93d 	bl	800de88 <siprintf>
			break;
 8001c0e:	e011      	b.n	8001c34 <startAuxilaryPrintThread+0x1b0>
		case H2_SYSTEM_STATE_ALARM_TEST:
			sprintf(bme_data_str, "%s", "ALARM TEST");
 8001c10:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <startAuxilaryPrintThread+0x264>)
 8001c12:	4933      	ldr	r1, [pc, #204]	; (8001ce0 <startAuxilaryPrintThread+0x25c>)
 8001c14:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001c16:	f00c f937 	bl	800de88 <siprintf>
			break;
 8001c1a:	e00b      	b.n	8001c34 <startAuxilaryPrintThread+0x1b0>
		case H2_SYSTEM_STATE_ALARM_TEST_SILENT:
			sprintf(bme_data_str, "%s", "ALARM TEST SILENT");
 8001c1c:	4a33      	ldr	r2, [pc, #204]	; (8001cec <startAuxilaryPrintThread+0x268>)
 8001c1e:	4930      	ldr	r1, [pc, #192]	; (8001ce0 <startAuxilaryPrintThread+0x25c>)
 8001c20:	4825      	ldr	r0, [pc, #148]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001c22:	f00c f931 	bl	800de88 <siprintf>
			break;
 8001c26:	e005      	b.n	8001c34 <startAuxilaryPrintThread+0x1b0>
		case H2_SYSTEM_STATE_CALIBRATE:
			sprintf(bme_data_str, "%s", "CALIBRATE");
 8001c28:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <startAuxilaryPrintThread+0x26c>)
 8001c2a:	492d      	ldr	r1, [pc, #180]	; (8001ce0 <startAuxilaryPrintThread+0x25c>)
 8001c2c:	4822      	ldr	r0, [pc, #136]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001c2e:	f00c f92b 	bl	800de88 <siprintf>
			break;
 8001c32:	bf00      	nop
		}

		ssd1306_WriteString(bme_data_str, Font_7x10,
				(temp_blink = !temp_blink) ? White : Black);
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <startAuxilaryPrintThread+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <startAuxilaryPrintThread+0x270>)
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <startAuxilaryPrintThread+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
		ssd1306_WriteString(bme_data_str, Font_7x10,
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <startAuxilaryPrintThread+0x228>)
 8001c58:	ca06      	ldmia	r2, {r1, r2}
 8001c5a:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <startAuxilaryPrintThread+0x234>)
 8001c5c:	f000 fcd8 	bl	8002610 <ssd1306_WriteString>

		ssd1306_Line(0, 62, SSD1306_WIDTH, 62, White);
 8001c60:	2301      	movs	r3, #1
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	233e      	movs	r3, #62	; 0x3e
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	213e      	movs	r1, #62	; 0x3e
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 fd0e 	bl	800268c <ssd1306_Line>

		osMutexAcquire(I2CBusControlHandle, osWaitForever);
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <startAuxilaryPrintThread+0x210>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 ffac 	bl	8009bd6 <osMutexAcquire>
		ssd1306_UpdateScreen();
 8001c7e:	f000 fbc3 	bl	8002408 <ssd1306_UpdateScreen>
		osMutexRelease(I2CBusControlHandle);
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <startAuxilaryPrintThread+0x210>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f007 fff0 	bl	8009c6c <osMutexRelease>
		osDelay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f007 ff01 	bl	8009a94 <osDelay>
		ssd1306_Fill(Black);
 8001c92:	e714      	b.n	8001abe <startAuxilaryPrintThread+0x3a>
 8001c94:	20001ea4 	.word	0x20001ea4
 8001c98:	0801166c 	.word	0x0801166c
 8001c9c:	2000032c 	.word	0x2000032c
 8001ca0:	3f4ccccd 	.word	0x3f4ccccd
 8001ca4:	0801168c 	.word	0x0801168c
 8001ca8:	2000037c 	.word	0x2000037c
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	2000079c 	.word	0x2000079c
 8001cb4:	080116a0 	.word	0x080116a0
 8001cb8:	2000039c 	.word	0x2000039c
 8001cbc:	200007a0 	.word	0x200007a0
 8001cc0:	080116b4 	.word	0x080116b4
 8001cc4:	200007a4 	.word	0x200007a4
 8001cc8:	080116c8 	.word	0x080116c8
 8001ccc:	200007a8 	.word	0x200007a8
 8001cd0:	080116dc 	.word	0x080116dc
 8001cd4:	080116ec 	.word	0x080116ec
 8001cd8:	20000328 	.word	0x20000328
 8001cdc:	080116fc 	.word	0x080116fc
 8001ce0:	0801170c 	.word	0x0801170c
 8001ce4:	08011710 	.word	0x08011710
 8001ce8:	08011720 	.word	0x08011720
 8001cec:	0801172c 	.word	0x0801172c
 8001cf0:	08011740 	.word	0x08011740
 8001cf4:	20001f08 	.word	0x20001f08

08001cf8 <startSensorTransmitThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorTransmitThread */
void startSensorTransmitThread(void *argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	float temp_h2;
	/* Infinite loop */
	for (;;) {

		//if (osMessageQueueGetCount(CAN_HighPro_QHandle) > 0) {
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <startSensorTransmitThread+0x130>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	f107 0110 	add.w	r1, r7, #16
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f008 f999 	bl	800a044 <osMessageQueueGet>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 8081 	bne.w	8001e1c <startSensorTransmitThread+0x124>
		osWaitForever) == osOK) {
			response_packet.dlc = 8;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	74bb      	strb	r3, [r7, #18]
			if (response_packet.rtr_type == CAN_RTR_REMOTE) {
 8001d1e:	7cfb      	ldrb	r3, [r7, #19]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d17b      	bne.n	8001e1c <startSensorTransmitThread+0x124>
				switch (response_packet.id) {
 8001d24:	8a3b      	ldrh	r3, [r7, #16]
 8001d26:	f240 2223 	movw	r2, #547	; 0x223
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d032      	beq.n	8001d94 <startSensorTransmitThread+0x9c>
 8001d2e:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8001d32:	da6b      	bge.n	8001e0c <startSensorTransmitThread+0x114>
 8001d34:	f240 2222 	movw	r2, #546	; 0x222
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d03f      	beq.n	8001dbc <startSensorTransmitThread+0xc4>
 8001d3c:	f240 2222 	movw	r2, #546	; 0x222
 8001d40:	4293      	cmp	r3, r2
 8001d42:	dc63      	bgt.n	8001e0c <startSensorTransmitThread+0x114>
 8001d44:	f240 1211 	movw	r2, #273	; 0x111
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <startSensorTransmitThread+0x5e>
 8001d4c:	f240 2221 	movw	r2, #545	; 0x221
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d047      	beq.n	8001de4 <startSensorTransmitThread+0xec>
 8001d54:	e05a      	b.n	8001e0c <startSensorTransmitThread+0x114>
				case GET_H2_CONC:
					response_packet.id = RESPOND_H2_CONC;
 8001d56:	f240 1311 	movw	r3, #273	; 0x111
 8001d5a:	823b      	strh	r3, [r7, #16]
					temp_h2 = adc_buf[ADC_BUF_LEN - 1] * 0.80f;
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <startSensorTransmitThread+0x134>)
 8001d5e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001e30 <startSensorTransmitThread+0x138>
 8001d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d72:	edc7 7a03 	vstr	s15, [r7, #12]
					//							!= HAL_OK) {
					////						printf("Can transmission error on packet id: %hu\r\n",
					////								_to_send.id);
					//						Error_Handler();
					//					}
					response_packet.dlc = 4;
 8001d76:	2304      	movs	r3, #4
 8001d78:	74bb      	strb	r3, [r7, #18]
					memcpy(&response_packet.data, (uint8_t*) &temp_h2, 8);
 8001d7a:	f107 010c 	add.w	r1, r7, #12
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	3304      	adds	r3, #4
 8001d84:	2208      	movs	r2, #8
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00c fa0f 	bl	800e1aa <memcpy>
					printf("[!SensorTransmitThread]Sending CAN H2 Conc\r\n");
 8001d8c:	4829      	ldr	r0, [pc, #164]	; (8001e34 <startSensorTransmitThread+0x13c>)
 8001d8e:	f00c f873 	bl	800de78 <puts>
					break;
 8001d92:	e03b      	b.n	8001e0c <startSensorTransmitThread+0x114>
				case GET_HUMIDITY:
					response_packet.id = RESPOND_HUMIDITY;
 8001d94:	f44f 738a 	mov.w	r3, #276	; 0x114
 8001d98:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", humidity);
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <startSensorTransmitThread+0x140>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbd2 	bl	8000548 <__aeabi_f2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	f107 0110 	add.w	r1, r7, #16
 8001dac:	1d08      	adds	r0, r1, #4
 8001dae:	4923      	ldr	r1, [pc, #140]	; (8001e3c <startSensorTransmitThread+0x144>)
 8001db0:	f00c f86a 	bl	800de88 <siprintf>
					//memcpy(, humidity, 8);
					printf("[!SensorTransmitThread]Sending CAN Humidity\r\n");
 8001db4:	4822      	ldr	r0, [pc, #136]	; (8001e40 <startSensorTransmitThread+0x148>)
 8001db6:	f00c f85f 	bl	800de78 <puts>
					break;
 8001dba:	e027      	b.n	8001e0c <startSensorTransmitThread+0x114>
				case GET_PRESSURE:
					response_packet.id = RESPOND_PRESSURE;
 8001dbc:	f240 1313 	movw	r3, #275	; 0x113
 8001dc0:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", pressure);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <startSensorTransmitThread+0x14c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbbe 	bl	8000548 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	f107 0110 	add.w	r1, r7, #16
 8001dd4:	1d08      	adds	r0, r1, #4
 8001dd6:	4919      	ldr	r1, [pc, #100]	; (8001e3c <startSensorTransmitThread+0x144>)
 8001dd8:	f00c f856 	bl	800de88 <siprintf>
					//memcpy(&response_packet.data, pressure, 8);
					printf("[!SensorTransmitThread]Sending CAN Pressure\r\n");
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <startSensorTransmitThread+0x150>)
 8001dde:	f00c f84b 	bl	800de78 <puts>
					break;
 8001de2:	e013      	b.n	8001e0c <startSensorTransmitThread+0x114>
				case GET_TEMP:
					response_packet.id = RESPOND_TEMP;
 8001de4:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001de8:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", temperature);
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <startSensorTransmitThread+0x154>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	f107 0110 	add.w	r1, r7, #16
 8001dfc:	1d08      	adds	r0, r1, #4
 8001dfe:	490f      	ldr	r1, [pc, #60]	; (8001e3c <startSensorTransmitThread+0x144>)
 8001e00:	f00c f842 	bl	800de88 <siprintf>
					//memcpy(&response_packet.data, temperature, 8);
					printf("[!SensorTransmitThread]Sending CAN Temprature\r\n");
 8001e04:	4812      	ldr	r0, [pc, #72]	; (8001e50 <startSensorTransmitThread+0x158>)
 8001e06:	f00c f837 	bl	800de78 <puts>
					break;
 8001e0a:	bf00      	nop
				}
				response_packet.rtr_type = CAN_RTR_DATA;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74fb      	strb	r3, [r7, #19]
				CAN_Transmit_Intrim(response_packet);
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e18:	f7ff fb30 	bl	800147c <CAN_Transmit_Intrim>
			//				printf(
			//						"[!Sensor Transmit Thread] Error getting Message from HIGH priority thread.\r\n");
			//			}
		}

		osDelay(500);
 8001e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e20:	f007 fe38 	bl	8009a94 <osDelay>
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8001e24:	e76c      	b.n	8001d00 <startSensorTransmitThread+0x8>
 8001e26:	bf00      	nop
 8001e28:	20001d90 	.word	0x20001d90
 8001e2c:	2000032c 	.word	0x2000032c
 8001e30:	3f4ccccd 	.word	0x3f4ccccd
 8001e34:	0801174c 	.word	0x0801174c
 8001e38:	200007a0 	.word	0x200007a0
 8001e3c:	08011778 	.word	0x08011778
 8001e40:	0801177c 	.word	0x0801177c
 8001e44:	200007a4 	.word	0x200007a4
 8001e48:	080117ac 	.word	0x080117ac
 8001e4c:	2000079c 	.word	0x2000079c
 8001e50:	080117dc 	.word	0x080117dc
 8001e54:	00000000 	.word	0x00000000

08001e58 <startLeakWatchdogThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLeakWatchdogThread */
void startLeakWatchdogThread(void *argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLeakWatchdogThread */
	IntrimPacket empack;
	empack.rtr_type = CAN_RTR_DATA;
 8001e60:	2300      	movs	r3, #0
 8001e62:	72fb      	strb	r3, [r7, #11]
	empack.id = RESPOND_EMERGENCY_JERMA_ALERT;
 8001e64:	2301      	movs	r3, #1
 8001e66:	813b      	strh	r3, [r7, #8]
	empack.dlc = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	72bb      	strb	r3, [r7, #10]
	int lockout = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
	// Max Freq = 80MHz/(100*8000) = 1000
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	//htim2.Instance->CCR1 = 5; // Duty Cycle we want this to be 0% so that when needed we can turn the beeeper on.
	/* Infinite loop */
	for (;;) {
		if (lockout || (adc_buf[ADC_BUF_LEN - 1] * 0.8) >= 3000.00f) {
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <startLeakWatchdogThread+0x4c>
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <startLeakWatchdogThread+0x80>)
 8001e78:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb51 	bl	8000524 <__aeabi_i2d>
 8001e82:	a311      	add	r3, pc, #68	; (adr r3, 8001ec8 <startLeakWatchdogThread+0x70>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fbb6 	bl	80005f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a30e      	add	r3, pc, #56	; (adr r3, 8001ed0 <startLeakWatchdogThread+0x78>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fe33 	bl	8000b04 <__aeabi_dcmpge>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <startLeakWatchdogThread+0x62>
			lockout = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
			printf("[!LeakWatchDogThread] Leak detedted.\r\n");
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <startLeakWatchdogThread+0x84>)
 8001eaa:	f00b ffe5 	bl	800de78 <puts>
			CAN_Transmit_Intrim(empack);
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eb6:	f7ff fae1 	bl	800147c <CAN_Transmit_Intrim>
		//				osDelay(100);
		//
		//			}
		//		}
		// Else transmit if message queue has request for data.
		osDelay(100);
 8001eba:	2064      	movs	r0, #100	; 0x64
 8001ebc:	f007 fdea 	bl	8009a94 <osDelay>
		if (lockout || (adc_buf[ADC_BUF_LEN - 1] * 0.8) >= 3000.00f) {
 8001ec0:	e7d6      	b.n	8001e70 <startLeakWatchdogThread+0x18>
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	9999999a 	.word	0x9999999a
 8001ecc:	3fe99999 	.word	0x3fe99999
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40a77000 	.word	0x40a77000
 8001ed8:	2000032c 	.word	0x2000032c
 8001edc:	0801180c 	.word	0x0801180c

08001ee0 <startSensorCalibrateThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorCalibrateThread */
void startSensorCalibrateThread(void *argument)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSensorCalibrateThread */
	IntrimPacket empack;
	empack.rtr_type = CAN_RTR_DATA;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
	empack.id = RESPOND_EMERGENCY_JERMA_ALERT;
 8001eec:	2301      	movs	r3, #1
 8001eee:	81bb      	strh	r3, [r7, #12]
	empack.dlc = 4;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	73bb      	strb	r3, [r7, #14]
	empack.id = RESPOND_EMERGENCY_JERMA_ALERT;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(calibrateSensorHandle, osWaitForever);
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <startSensorCalibrateThread+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	4618      	mov	r0, r3
 8001f02:	f007 ff79 	bl	8009df8 <osSemaphoreAcquire>
		//		osDelay(1000);
		//		system_state = H2_SYSTEM_STATE_INACTIVE;

		//		if (h2_conc_ppm > 1) {
		//		response_packet.rtr_type = CAN_RTR_DATA;
		CAN_Transmit_Intrim(empack);
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f0e:	f7ff fab5 	bl	800147c <CAN_Transmit_Intrim>
		osSemaphoreAcquire(calibrateSensorHandle, osWaitForever);
 8001f12:	e7f1      	b.n	8001ef8 <startSensorCalibrateThread+0x18>
 8001f14:	20001ea8 	.word	0x20001ea8

08001f18 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a39      	ldr	r2, [pc, #228]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b37      	ldr	r3, [pc, #220]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a33      	ldr	r2, [pc, #204]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b31      	ldr	r3, [pc, #196]	; (8002018 <MX_GPIO_Init+0x100>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BEEPER_Pin|CAN_STBY_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f248 0120 	movw	r1, #32800	; 0x8020
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f004 fc16 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_PWM_Pin|LED_D2_PWM_Pin|LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2138      	movs	r1, #56	; 0x38
 8001f70:	482a      	ldr	r0, [pc, #168]	; (800201c <MX_GPIO_Init+0x104>)
 8001f72:	f004 fc11 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = H2_TARE_Pin;
 8001f76:	2310      	movs	r3, #16
 8001f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(H2_TARE_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8c:	f004 fa9a 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEPER_Pin;
 8001f90:	2320      	movs	r3, #32
 8001f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BEEPER_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f004 fa8b 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f004 fa79 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fee:	f004 fa69 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_D1_PWM_Pin|LED_D2_PWM_Pin|LED_D3_PWM_Pin;
 8001ff2:	2338      	movs	r3, #56	; 0x38
 8001ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_GPIO_Init+0x104>)
 800200a:	f004 fa5b 	bl	80064c4 <HAL_GPIO_Init>

}
 800200e:	bf00      	nop
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	48000400 	.word	0x48000400

08002020 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C1_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C1_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C1_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C1_Init+0x74>)
 800205c:	f004 fbb4 	bl	80067c8 <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002066:	f000 f90f 	bl	8002288 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C1_Init+0x74>)
 800206e:	f005 fa05 	bl	800747c <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002078:	f000 f906 	bl	8002288 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C1_Init+0x74>)
 8002080:	f005 fa47 	bl	8007512 <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f8fd 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001f0c 	.word	0x20001f0c
 8002098:	40005400 	.word	0x40005400
 800209c:	10909cec 	.word	0x10909cec

080020a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09e      	sub	sp, #120	; 0x78
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2254      	movs	r2, #84	; 0x54
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00b fff3 	bl	800e0ac <memset>
  if(i2cHandle->Instance==I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_I2C_MspInit+0xa8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d137      	bne.n	8002140 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 f993 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020e8:	f000 f8ce 	bl	8002288 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_I2C_MspInit+0xac>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_I2C_MspInit+0xac>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_I2C_MspInit+0xac>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002104:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002108:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210a:	2312      	movs	r3, #18
 800210c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002116:	2304      	movs	r3, #4
 8002118:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f004 f9ce 	bl	80064c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_I2C_MspInit+0xac>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_I2C_MspInit+0xac>)
 800212e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002132:	6593      	str	r3, [r2, #88]	; 0x58
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_I2C_MspInit+0xac>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002140:	bf00      	nop
 8002142:	3778      	adds	r7, #120	; 0x78
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40005400 	.word	0x40005400
 800214c:	40021000 	.word	0x40021000

08002150 <_write>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	b29a      	uxth	r2, r3
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <_write+0x28>)
 8002168:	f006 ff04 	bl	8008f74 <HAL_UART_Transmit>
	return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200023b8 	.word	0x200023b8

0800217c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002180:	f002 f8d9 	bl	8004336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002184:	f000 f816 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002188:	f7ff fec6 	bl	8001f18 <MX_GPIO_Init>
  MX_DMA_Init();
 800218c:	f7ff f958 	bl	8001440 <MX_DMA_Init>
  MX_CAN1_Init();
 8002190:	f7ff f8d4 	bl	800133c <MX_CAN1_Init>
  MX_I2C1_Init();
 8002194:	f7ff ff44 	bl	8002020 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002198:	f000 fd26 	bl	8002be8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800219c:	f7fe ffd6 	bl	800114c <MX_ADC1_Init>
//	HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID,
//			&DMATransferComplete);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80021a0:	f007 fb9c 	bl	80098dc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80021a4:	f7ff fab8 	bl	8001718 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021a8:	f007 fbbc 	bl	8009924 <osKernelStart>
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		raw = HAL_ADC_GetValue(&hadc1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, 1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

		HAL_Delay(100);
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	f002 f8fb 	bl	80043a8 <HAL_Delay>
 80021b2:	e7fb      	b.n	80021ac <main+0x30>

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	2244      	movs	r2, #68	; 0x44
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00b ff72 	bl	800e0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021da:	f005 f9f5 	bl	80075c8 <HAL_PWREx_ControlVoltageScaling>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021e4:	f000 f850 	bl	8002288 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2302      	movs	r3, #2
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f6:	2303      	movs	r3, #3
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80021fe:	2314      	movs	r3, #20
 8002200:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002202:	2307      	movs	r3, #7
 8002204:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002206:	2302      	movs	r3, #2
 8002208:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800220a:	2302      	movs	r3, #2
 800220c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fa2e 	bl	8007674 <HAL_RCC_OscConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800221e:	f000 f833 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002222:	230f      	movs	r3, #15
 8002224:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002226:	2303      	movs	r3, #3
 8002228:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	2104      	movs	r1, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f005 fe2e 	bl	8007e9c <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002246:	f000 f81f 	bl	8002288 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_16);
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 8002252:	2000      	movs	r0, #0
 8002254:	f005 ff22 	bl	800809c <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002258:	f006 f84a 	bl	80082f0 <HAL_RCC_EnableCSS>
}
 800225c:	bf00      	nop
 800225e:	3758      	adds	r7, #88	; 0x58
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002276:	f002 f877 	bl	8004368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>

08002292 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2301      	movs	r3, #1
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	2200      	movs	r2, #0
 80022bc:	2178      	movs	r1, #120	; 0x78
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <ssd1306_WriteCommand+0x2c>)
 80022c0:	f004 fcfc 	bl	8006cbc <HAL_I2C_Mem_Write>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20001f0c 	.word	0x20001f0c

080022d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f04f 32ff 	mov.w	r2, #4294967295
 80022e2:	9202      	str	r2, [sp, #8]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	2178      	movs	r1, #120	; 0x78
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <ssd1306_WriteData+0x30>)
 80022f2:	f004 fce3 	bl	8006cbc <HAL_I2C_Mem_Write>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20001f0c 	.word	0x20001f0c

08002304 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002308:	f7ff ffc3 	bl	8002292 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800230c:	2064      	movs	r0, #100	; 0x64
 800230e:	f002 f84b 	bl	80043a8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002312:	2000      	movs	r0, #0
 8002314:	f000 fa3a 	bl	800278c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002318:	2020      	movs	r0, #32
 800231a:	f7ff ffc1 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff ffbe 	bl	80022a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002324:	20b0      	movs	r0, #176	; 0xb0
 8002326:	f7ff ffbb 	bl	80022a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800232a:	20c8      	movs	r0, #200	; 0xc8
 800232c:	f7ff ffb8 	bl	80022a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff ffb5 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002336:	2010      	movs	r0, #16
 8002338:	f7ff ffb2 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800233c:	2040      	movs	r0, #64	; 0x40
 800233e:	f7ff ffaf 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002342:	20ff      	movs	r0, #255	; 0xff
 8002344:	f000 fa0e 	bl	8002764 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002348:	20a1      	movs	r0, #161	; 0xa1
 800234a:	f7ff ffa9 	bl	80022a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800234e:	20a6      	movs	r0, #166	; 0xa6
 8002350:	f7ff ffa6 	bl	80022a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002354:	20a8      	movs	r0, #168	; 0xa8
 8002356:	f7ff ffa3 	bl	80022a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800235a:	203f      	movs	r0, #63	; 0x3f
 800235c:	f7ff ffa0 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002360:	20a4      	movs	r0, #164	; 0xa4
 8002362:	f7ff ff9d 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002366:	20d3      	movs	r0, #211	; 0xd3
 8002368:	f7ff ff9a 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ff97 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002372:	20d5      	movs	r0, #213	; 0xd5
 8002374:	f7ff ff94 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002378:	20f0      	movs	r0, #240	; 0xf0
 800237a:	f7ff ff91 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800237e:	20d9      	movs	r0, #217	; 0xd9
 8002380:	f7ff ff8e 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002384:	2022      	movs	r0, #34	; 0x22
 8002386:	f7ff ff8b 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800238a:	20da      	movs	r0, #218	; 0xda
 800238c:	f7ff ff88 	bl	80022a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002390:	2012      	movs	r0, #18
 8002392:	f7ff ff85 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002396:	20db      	movs	r0, #219	; 0xdb
 8002398:	f7ff ff82 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800239c:	2020      	movs	r0, #32
 800239e:	f7ff ff7f 	bl	80022a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80023a2:	208d      	movs	r0, #141	; 0x8d
 80023a4:	f7ff ff7c 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80023a8:	2014      	movs	r0, #20
 80023aa:	f7ff ff79 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80023ae:	2001      	movs	r0, #1
 80023b0:	f000 f9ec 	bl	800278c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f000 f80f 	bl	80023d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80023ba:	f000 f825 	bl	8002408 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <ssd1306_Init+0xd0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <ssd1306_Init+0xd0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80023ca:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <ssd1306_Init+0xd0>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	711a      	strb	r2, [r3, #4]
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20002360 	.word	0x20002360

080023d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <ssd1306_Fill+0x14>
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <ssd1306_Fill+0x16>
 80023ec:	23ff      	movs	r3, #255	; 0xff
 80023ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f2:	4619      	mov	r1, r3
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <ssd1306_Fill+0x2c>)
 80023f6:	f00b fe59 	bl	800e0ac <memset>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20001f60 	.word	0x20001f60

08002408 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800240e:	2300      	movs	r3, #0
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	e016      	b.n	8002442 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	3b50      	subs	r3, #80	; 0x50
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff40 	bl	80022a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff ff3d 	bl	80022a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002426:	2010      	movs	r0, #16
 8002428:	f7ff ff3a 	bl	80022a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	01db      	lsls	r3, r3, #7
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <ssd1306_UpdateScreen+0x4c>)
 8002432:	4413      	add	r3, r2
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff4a 	bl	80022d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	3301      	adds	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b07      	cmp	r3, #7
 8002446:	d9e5      	bls.n	8002414 <ssd1306_UpdateScreen+0xc>
    }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20001f60 	.word	0x20001f60

08002458 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	460b      	mov	r3, r1
 8002464:	71bb      	strb	r3, [r7, #6]
 8002466:	4613      	mov	r3, r2
 8002468:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db3d      	blt.n	80024ee <ssd1306_DrawPixel+0x96>
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	2b3f      	cmp	r3, #63	; 0x3f
 8002476:	d83a      	bhi.n	80024ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002478:	797b      	ldrb	r3, [r7, #5]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d11a      	bne.n	80024b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	79bb      	ldrb	r3, [r7, #6]
 8002482:	08db      	lsrs	r3, r3, #3
 8002484:	b2d8      	uxtb	r0, r3
 8002486:	4603      	mov	r3, r0
 8002488:	01db      	lsls	r3, r3, #7
 800248a:	4413      	add	r3, r2
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <ssd1306_DrawPixel+0xa4>)
 800248e:	5cd3      	ldrb	r3, [r2, r3]
 8002490:	b25a      	sxtb	r2, r3
 8002492:	79bb      	ldrb	r3, [r7, #6]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b259      	sxtb	r1, r3
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	4603      	mov	r3, r0
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	4413      	add	r3, r2
 80024ac:	b2c9      	uxtb	r1, r1
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <ssd1306_DrawPixel+0xa4>)
 80024b0:	54d1      	strb	r1, [r2, r3]
 80024b2:	e01d      	b.n	80024f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	79bb      	ldrb	r3, [r7, #6]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	b2d8      	uxtb	r0, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4413      	add	r3, r2
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <ssd1306_DrawPixel+0xa4>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	b25a      	sxtb	r2, r3
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	4013      	ands	r3, r2
 80024dc:	b259      	sxtb	r1, r3
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	4603      	mov	r3, r0
 80024e2:	01db      	lsls	r3, r3, #7
 80024e4:	4413      	add	r3, r2
 80024e6:	b2c9      	uxtb	r1, r1
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <ssd1306_DrawPixel+0xa4>)
 80024ea:	54d1      	strb	r1, [r2, r3]
 80024ec:	e000      	b.n	80024f0 <ssd1306_DrawPixel+0x98>
        return;
 80024ee:	bf00      	nop
    }
}
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20001f60 	.word	0x20001f60

08002500 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4604      	mov	r4, r0
 8002508:	1d38      	adds	r0, r7, #4
 800250a:	e880 0006 	stmia.w	r0, {r1, r2}
 800250e:	461a      	mov	r2, r3
 8002510:	4623      	mov	r3, r4
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	4613      	mov	r3, r2
 8002516:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b1f      	cmp	r3, #31
 800251c:	d902      	bls.n	8002524 <ssd1306_WriteChar+0x24>
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b7e      	cmp	r3, #126	; 0x7e
 8002522:	d901      	bls.n	8002528 <ssd1306_WriteChar+0x28>
        return 0;
 8002524:	2300      	movs	r3, #0
 8002526:	e06d      	b.n	8002604 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <ssd1306_WriteChar+0x10c>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	793b      	ldrb	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	dc06      	bgt.n	8002544 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <ssd1306_WriteChar+0x10c>)
 8002538:	885b      	ldrh	r3, [r3, #2]
 800253a:	461a      	mov	r2, r3
 800253c:	797b      	ldrb	r3, [r7, #5]
 800253e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	dd01      	ble.n	8002548 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002544:	2300      	movs	r3, #0
 8002546:	e05d      	b.n	8002604 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	e04c      	b.n	80025e8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3b20      	subs	r3, #32
 8002554:	7979      	ldrb	r1, [r7, #5]
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4619      	mov	r1, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	440b      	add	r3, r1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e034      	b.n	80025d8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <ssd1306_WriteChar+0x10c>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4413      	add	r3, r2
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <ssd1306_WriteChar+0x10c>)
 800258e:	885b      	ldrh	r3, [r3, #2]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4413      	add	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	7bba      	ldrb	r2, [r7, #14]
 800259c:	4619      	mov	r1, r3
 800259e:	f7ff ff5b 	bl	8002458 <ssd1306_DrawPixel>
 80025a2:	e016      	b.n	80025d2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <ssd1306_WriteChar+0x10c>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b2d8      	uxtb	r0, r3
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <ssd1306_WriteChar+0x10c>)
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b2d9      	uxtb	r1, r3
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	f7ff ff43 	bl	8002458 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	793b      	ldrb	r3, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4293      	cmp	r3, r2
 80025e0:	d3c5      	bcc.n	800256e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	797b      	ldrb	r3, [r7, #5]
 80025ea:	461a      	mov	r2, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d3ad      	bcc.n	800254e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <ssd1306_WriteChar+0x10c>)
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	793b      	ldrb	r3, [r7, #4]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b03      	ldr	r3, [pc, #12]	; (800260c <ssd1306_WriteChar+0x10c>)
 8002600:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	20002360 	.word	0x20002360

08002610 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	1d38      	adds	r0, r7, #4
 800261a:	e880 0006 	stmia.w	r0, {r1, r2}
 800261e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002620:	e012      	b.n	8002648 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	7818      	ldrb	r0, [r3, #0]
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	1d3a      	adds	r2, r7, #4
 800262a:	ca06      	ldmia	r2, {r1, r2}
 800262c:	f7ff ff68 	bl	8002500 <ssd1306_WriteChar>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d002      	beq.n	8002642 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	e008      	b.n	8002654 <ssd1306_WriteString+0x44>
        }
        str++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e8      	bne.n	8002622 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	460a      	mov	r2, r1
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <ssd1306_SetCursor+0x2c>)
 8002672:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002674:	79bb      	ldrb	r3, [r7, #6]
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <ssd1306_SetCursor+0x2c>)
 800267a:	805a      	strh	r2, [r3, #2]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20002360 	.word	0x20002360

0800268c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4623      	mov	r3, r4
 800269c:	71fb      	strb	r3, [r7, #7]
 800269e:	4603      	mov	r3, r0
 80026a0:	71bb      	strb	r3, [r7, #6]
 80026a2:	460b      	mov	r3, r1
 80026a4:	717b      	strb	r3, [r7, #5]
 80026a6:	4613      	mov	r3, r2
 80026a8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80026aa:	797a      	ldrb	r2, [r7, #5]
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfb8      	it	lt
 80026b4:	425b      	neglt	r3, r3
 80026b6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80026b8:	793a      	ldrb	r2, [r7, #4]
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bfb8      	it	lt
 80026c2:	425b      	neglt	r3, r3
 80026c4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80026c6:	79fa      	ldrb	r2, [r7, #7]
 80026c8:	797b      	ldrb	r3, [r7, #5]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d201      	bcs.n	80026d2 <ssd1306_Line+0x46>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e001      	b.n	80026d6 <ssd1306_Line+0x4a>
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80026d8:	79ba      	ldrb	r2, [r7, #6]
 80026da:	793b      	ldrb	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d201      	bcs.n	80026e4 <ssd1306_Line+0x58>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e001      	b.n	80026e8 <ssd1306_Line+0x5c>
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80026f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80026f6:	7939      	ldrb	r1, [r7, #4]
 80026f8:	797b      	ldrb	r3, [r7, #5]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff feac 	bl	8002458 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002700:	e024      	b.n	800274c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002702:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002706:	79b9      	ldrb	r1, [r7, #6]
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fea4 	bl	8002458 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	425b      	negs	r3, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	dd08      	ble.n	8002732 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4413      	add	r3, r2
 8002730:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	429a      	cmp	r2, r3
 8002738:	da08      	bge.n	800274c <ssd1306_Line+0xc0>
            error += deltaX;
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	79bb      	ldrb	r3, [r7, #6]
 8002748:	4413      	add	r3, r2
 800274a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	797b      	ldrb	r3, [r7, #5]
 8002750:	429a      	cmp	r2, r3
 8002752:	d1d6      	bne.n	8002702 <ssd1306_Line+0x76>
 8002754:	79ba      	ldrb	r2, [r7, #6]
 8002756:	793b      	ldrb	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1d2      	bne.n	8002702 <ssd1306_Line+0x76>
        }
    }
    return;
 800275c:	bf00      	nop
}
 800275e:	3724      	adds	r7, #36	; 0x24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800276e:	2381      	movs	r3, #129	; 0x81
 8002770:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fd93 	bl	80022a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fd8f 	bl	80022a0 <ssd1306_WriteCommand>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800279c:	23af      	movs	r3, #175	; 0xaf
 800279e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <ssd1306_SetDisplayOn+0x38>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	715a      	strb	r2, [r3, #5]
 80027a6:	e004      	b.n	80027b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027a8:	23ae      	movs	r3, #174	; 0xae
 80027aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <ssd1306_SetDisplayOn+0x38>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fd73 	bl	80022a0 <ssd1306_WriteCommand>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20002360 	.word	0x20002360

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_MspInit+0x4c>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_MspInit+0x4c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6613      	str	r3, [r2, #96]	; 0x60
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_MspInit+0x4c>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_MspInit+0x4c>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_MspInit+0x4c>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_MspInit+0x4c>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	210f      	movs	r1, #15
 8002802:	f06f 0001 	mvn.w	r0, #1
 8002806:	f003 fc3b 	bl	8006080 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_InitTick+0xc8>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <HAL_InitTick+0xc8>)
 800282c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002830:	6613      	str	r3, [r2, #96]	; 0x60
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_InitTick+0xc8>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800283e:	f107 020c 	add.w	r2, r7, #12
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f005 fd1f 	bl	800828c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800284e:	f005 fd07 	bl	8008260 <HAL_RCC_GetPCLK2Freq>
 8002852:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_InitTick+0xcc>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0c9b      	lsrs	r3, r3, #18
 800285e:	3b01      	subs	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_InitTick+0xd0>)
 8002864:	4a21      	ldr	r2, [pc, #132]	; (80028ec <HAL_InitTick+0xd4>)
 8002866:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_InitTick+0xd0>)
 800286a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800286e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_InitTick+0xd0>)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_InitTick+0xd0>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_InitTick+0xd0>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_InitTick+0xd0>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002888:	4817      	ldr	r0, [pc, #92]	; (80028e8 <HAL_InitTick+0xd0>)
 800288a:	f006 f8a5 	bl	80089d8 <HAL_TIM_Base_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11b      	bne.n	80028d4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800289c:	4812      	ldr	r0, [pc, #72]	; (80028e8 <HAL_InitTick+0xd0>)
 800289e:	f006 f8fd 	bl	8008a9c <HAL_TIM_Base_Start_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80028a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d111      	bne.n	80028d4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028b0:	2019      	movs	r0, #25
 80028b2:	f003 fc01 	bl	80060b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d808      	bhi.n	80028ce <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	2019      	movs	r0, #25
 80028c2:	f003 fbdd 	bl	8006080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_InitTick+0xd8>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e002      	b.n	80028d4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	431bde83 	.word	0x431bde83
 80028e8:	20002368 	.word	0x20002368
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	2000001c 	.word	0x2000001c

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80028f8:	f005 fd0a 	bl	8008310 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028fc:	e7fe      	b.n	80028fc <NMI_Handler+0x8>
	...

08002900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8002914:	2308      	movs	r3, #8
 8002916:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002918:	2301      	movs	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4839      	ldr	r0, [pc, #228]	; (8002a0c <HardFault_Handler+0x10c>)
 8002926:	f003 fdcd 	bl	80064c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 800292a:	2310      	movs	r3, #16
 800292c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4834      	ldr	r0, [pc, #208]	; (8002a0c <HardFault_Handler+0x10c>)
 800293c:	f003 fdc2 	bl	80064c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8002940:	2320      	movs	r3, #32
 8002942:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2301      	movs	r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	482e      	ldr	r0, [pc, #184]	; (8002a0c <HardFault_Handler+0x10c>)
 8002952:	f003 fdb7 	bl	80064c4 <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	e002      	b.n	8002962 <HardFault_Handler+0x62>
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	3301      	adds	r3, #1
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <HardFault_Handler+0x110>)
 8002966:	4293      	cmp	r3, r2
 8002968:	ddf8      	ble.n	800295c <HardFault_Handler+0x5c>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2108      	movs	r1, #8
 800296e:	4827      	ldr	r0, [pc, #156]	; (8002a0c <HardFault_Handler+0x10c>)
 8002970:	f003 ff12 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	e002      	b.n	8002980 <HardFault_Handler+0x80>
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	3301      	adds	r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HardFault_Handler+0x110>)
 8002984:	4293      	cmp	r3, r2
 8002986:	ddf8      	ble.n	800297a <HardFault_Handler+0x7a>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	2110      	movs	r1, #16
 800298c:	481f      	ldr	r0, [pc, #124]	; (8002a0c <HardFault_Handler+0x10c>)
 800298e:	f003 ff03 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	e002      	b.n	800299e <HardFault_Handler+0x9e>
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HardFault_Handler+0x110>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	ddf8      	ble.n	8002998 <HardFault_Handler+0x98>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2120      	movs	r1, #32
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <HardFault_Handler+0x10c>)
 80029ac:	f003 fef4 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	e002      	b.n	80029bc <HardFault_Handler+0xbc>
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	3301      	adds	r3, #1
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HardFault_Handler+0x110>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	ddf8      	ble.n	80029b6 <HardFault_Handler+0xb6>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2108      	movs	r1, #8
 80029c8:	4810      	ldr	r0, [pc, #64]	; (8002a0c <HardFault_Handler+0x10c>)
 80029ca:	f003 fee5 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e002      	b.n	80029da <HardFault_Handler+0xda>
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HardFault_Handler+0x110>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	ddf8      	ble.n	80029d4 <HardFault_Handler+0xd4>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2110      	movs	r1, #16
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <HardFault_Handler+0x10c>)
 80029e8:	f003 fed6 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e002      	b.n	80029f8 <HardFault_Handler+0xf8>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	3301      	adds	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HardFault_Handler+0x110>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	ddf8      	ble.n	80029f2 <HardFault_Handler+0xf2>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2120      	movs	r1, #32
 8002a04:	4801      	ldr	r0, [pc, #4]	; (8002a0c <HardFault_Handler+0x10c>)
 8002a06:	f003 fec7 	bl	8006798 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002a0a:	e7a4      	b.n	8002956 <HardFault_Handler+0x56>
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	0007a11f 	.word	0x0007a11f

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <BusFault_Handler+0x4>

08002a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <UsageFault_Handler+0x4>

08002a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <DMA1_Channel1_IRQHandler+0x10>)
 8002a3a:	f003 fc63 	bl	8006304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000280 	.word	0x20000280

08002a48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <CAN1_RX0_IRQHandler+0x10>)
 8002a4e:	f003 f858 	bl	8005b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200002c8 	.word	0x200002c8

08002a5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002a62:	f006 f86f 	bl	8008b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20002368 	.word	0x20002368

08002a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_kill>:

int _kill(int pid, int sig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a8a:	f00b fb61 	bl	800e150 <__errno>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2216      	movs	r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
  return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_exit>:

void _exit (int status)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe7 	bl	8002a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ab2:	e7fe      	b.n	8002ab2 <_exit+0x12>

08002ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ac6:	f3af 8000 	nop.w
 8002aca:	4601      	mov	r1, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	b2ca      	uxtb	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf0      	blt.n	8002ac6 <_read+0x12>
  }

  return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_close>:
  }
  return len;
}

int _close(int file)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b16:	605a      	str	r2, [r3, #4]
  return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_isatty>:

int _isatty(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f00b fae2 	bl	800e150 <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20010000 	.word	0x20010000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	200023b4 	.word	0x200023b4
 8002bc0:	20003e98 	.word	0x20003e98

08002bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <MX_USART1_UART_Init+0x5c>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c2c:	f006 f954 	bl	8008ed8 <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c36:	f7ff fb27 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200023b8 	.word	0x200023b8
 8002c44:	40013800 	.word	0x40013800

08002c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b09e      	sub	sp, #120	; 0x78
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	2254      	movs	r2, #84	; 0x54
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00b fa1f 	bl	800e0ac <memset>
  if(uartHandle->Instance==USART1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_UART_MspInit+0xa4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d135      	bne.n	8002ce4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fbbf 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c90:	f7ff fafa 	bl	8002288 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc4:	23c0      	movs	r3, #192	; 0xc0
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_UART_MspInit+0xac>)
 8002ce0:	f003 fbf0 	bl	80064c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3778      	adds	r7, #120	; 0x78
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	48000400 	.word	0x48000400

08002cf8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8002d00:	2305      	movs	r3, #5
 8002d02:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f001 facb 	bl	80042a4 <null_ptr_check>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d133      	bne.n	8002d82 <bme280_init+0x8a>
		while (try_count) {
 8002d1a:	e028      	b.n	8002d6e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002d1c:	f107 010d 	add.w	r1, r7, #13
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	20d0      	movs	r0, #208	; 0xd0
 8002d26:	f000 f832 	bl	8002d8e <bme280_get_regs>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d114      	bne.n	8002d60 <bme280_init+0x68>
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d111      	bne.n	8002d60 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8002d3c:	7b7a      	ldrb	r2, [r7, #13]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f978 	bl	8003038 <bme280_soft_reset>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d110      	bne.n	8002d76 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 f919 	bl	8003f8c <get_calib_data>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8002d5e:	e00a      	b.n	8002d76 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2001      	movs	r0, #1
 8002d66:	4798      	blx	r3
			--try_count;
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8002d6e:	7bbb      	ldrb	r3, [r7, #14]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1d3      	bne.n	8002d1c <bme280_init+0x24>
 8002d74:	e000      	b.n	8002d78 <bme280_init+0x80>
				break;
 8002d76:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8002d7e:	23fe      	movs	r3, #254	; 0xfe
 8002d80:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8002d8e:	b590      	push	{r4, r7, lr}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	4603      	mov	r3, r0
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 fa7f 	bl	80042a4 <null_ptr_check>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8002daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d117      	bne.n	8002de2 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	789b      	ldrb	r3, [r3, #2]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685c      	ldr	r4, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7858      	ldrb	r0, [r3, #1]
 8002dca:	89bb      	ldrh	r3, [r7, #12]
 8002dcc:	7bf9      	ldrb	r1, [r7, #15]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	47a0      	blx	r4
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8002dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8002dde:	23fc      	movs	r3, #252	; 0xfc
 8002de0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}

08002dee <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8002dee:	b590      	push	{r4, r7, lr}
 8002df0:	b08d      	sub	sp, #52	; 0x34
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	d901      	bls.n	8002e08 <bme280_set_regs+0x1a>
		len = 10;
 8002e04:	230a      	movs	r3, #10
 8002e06:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002e08:	6838      	ldr	r0, [r7, #0]
 8002e0a:	f001 fa4b 	bl	80042a4 <null_ptr_check>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8002e14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d156      	bne.n	8002eca <bme280_set_regs+0xdc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d053      	beq.n	8002eca <bme280_set_regs+0xdc>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d050      	beq.n	8002eca <bme280_set_regs+0xdc>
		if (len != 0) {
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d049      	beq.n	8002ec2 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	789b      	ldrb	r3, [r3, #2]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d01a      	beq.n	8002e72 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e011      	b.n	8002e68 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	440b      	add	r3, r1
 8002e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e62:	3301      	adds	r3, #1
 8002e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e68:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3e8      	bcc.n	8002e44 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d90d      	bls.n	8002e94 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f107 0114 	add.w	r1, r7, #20
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f001 f8c8 	bl	8004016 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e92:	e001      	b.n	8002e98 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689c      	ldr	r4, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7858      	ldrb	r0, [r3, #1]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ea6:	f107 0214 	add.w	r2, r7, #20
 8002eaa:	47a0      	blx	r4
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8002eb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8002eba:	23fc      	movs	r3, #252	; 0xfc
 8002ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8002ec0:	e007      	b.n	8002ed2 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8002ec2:	23fd      	movs	r3, #253	; 0xfd
 8002ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8002ec8:	e003      	b.n	8002ed2 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8002eca:	23ff      	movs	r3, #255	; 0xff
 8002ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ed0:	e000      	b.n	8002ed4 <bme280_set_regs+0xe6>
		if (len != 0) {
 8002ed2:	bf00      	nop
	}


	return rslt;
 8002ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3734      	adds	r7, #52	; 0x34
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}

08002ee0 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002eec:	6838      	ldr	r0, [r7, #0]
 8002eee:	f001 f9d9 	bl	80042a4 <null_ptr_check>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d13f      	bne.n	8002f7e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8002efe:	f107 030e 	add.w	r3, r7, #14
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f874 	bl	8002ff2 <bme280_get_sensor_mode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <bme280_set_sensor_settings+0x46>
 8002f16:	7bbb      	ldrb	r3, [r7, #14]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8002f1c:	6838      	ldr	r0, [r7, #0]
 8002f1e:	f000 fb36 	bl	800358e <put_device_to_sleep>
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d127      	bne.n	8002f7e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2007      	movs	r0, #7
 8002f34:	f001 f99a 	bl	800426c <are_settings_changed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f972 	bl	8003232 <set_osr_settings>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d111      	bne.n	8002f7e <bme280_set_sensor_settings+0x9e>
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	2018      	movs	r0, #24
 8002f60:	f001 f984 	bl	800426c <are_settings_changed>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f9f9 	bl	800336c <set_filter_standby_settings>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	6039      	str	r1, [r7, #0]
 8002f94:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	f001 f984 	bl	80042a4 <null_ptr_check>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8002fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11e      	bne.n	8002fe6 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8002fa8:	f107 030e 	add.w	r3, r7, #14
 8002fac:	6839      	ldr	r1, [r7, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f81f 	bl	8002ff2 <bme280_get_sensor_mode>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8002fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <bme280_set_sensor_mode+0x46>
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f000 fae1 	bl	800358e <put_device_to_sleep>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 faa3 	bl	8003528 <write_power_mode>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002ffc:	6838      	ldr	r0, [r7, #0]
 8002ffe:	f001 f951 	bl	80042a4 <null_ptr_check>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10e      	bne.n	800302c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	20f4      	movs	r0, #244	; 0xf4
 8003016:	f7ff feba 	bl	8002d8e <bme280_get_regs>
 800301a:	4603      	mov	r3, r0
 800301c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800302c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003040:	23e0      	movs	r3, #224	; 0xe0
 8003042:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003044:	23b6      	movs	r3, #182	; 0xb6
 8003046:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 f92b 	bl	80042a4 <null_ptr_check>
 800304e:	4603      	mov	r3, r0
 8003050:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800305a:	f107 010d 	add.w	r1, r7, #13
 800305e:	f107 000e 	add.w	r0, r7, #14
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f7ff fec2 	bl	8002dee <bme280_set_regs>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2002      	movs	r0, #2
 8003074:	4798      	blx	r3
	}

	return rslt;
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	; 0x28
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f8fd 	bl	80042a4 <null_ptr_check>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80030b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d124      	bne.n	8003102 <bme280_get_sensor_data+0x80>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d021      	beq.n	8003102 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80030be:	f107 011c 	add.w	r1, r7, #28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2208      	movs	r2, #8
 80030c6:	20f7      	movs	r0, #247	; 0xf7
 80030c8:	f7ff fe61 	bl	8002d8e <bme280_get_regs>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80030d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80030da:	f107 0210 	add.w	r2, r7, #16
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f815 	bl	8003114 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3310      	adds	r3, #16
 80030ee:	f107 0110 	add.w	r1, r7, #16
 80030f2:	7bf8      	ldrb	r0, [r7, #15]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	f000 f853 	bl	80031a0 <bme280_compensate_data>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003100:	e002      	b.n	8003108 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003102:	23ff      	movs	r3, #255	; 0xff
 8003104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	031b      	lsls	r3, r3, #12
 8003124:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3301      	adds	r3, #1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3302      	adds	r3, #2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	b2db      	uxtb	r3, r3
 800313a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	431a      	orrs	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3303      	adds	r3, #3
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3305      	adds	r3, #5
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	b2db      	uxtb	r3, r3
 8003168:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	431a      	orrs	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3306      	adds	r3, #6
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3307      	adds	r3, #7
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d033      	beq.n	8003222 <bme280_compensate_data+0x82>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d030      	beq.n	8003222 <bme280_compensate_data+0x82>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02d      	beq.n	8003222 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80031e2:	6839      	ldr	r1, [r7, #0]
 80031e4:	68b8      	ldr	r0, [r7, #8]
 80031e6:	f000 fa1f 	bl	8003628 <compensate_temperature>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	68b8      	ldr	r0, [r7, #8]
 80031fe:	f000 fa75 	bl	80036ec <compensate_pressure>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003212:	6839      	ldr	r1, [r7, #0]
 8003214:	68b8      	ldr	r0, [r7, #8]
 8003216:	f000 fe0d 	bl	8003e34 <compensate_humidity>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8003220:	e001      	b.n	8003226 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003222:	23ff      	movs	r3, #255	; 0xff
 8003224:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f000 f815 	bl	8003280 <set_osr_humidity_settings>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f842 	bl	80032f4 <set_osr_press_temp_settings>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800328a:	23f2      	movs	r3, #242	; 0xf2
 800328c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	789b      	ldrb	r3, [r3, #2]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	b2db      	uxtb	r3, r3
 8003298:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800329a:	f107 010e 	add.w	r1, r7, #14
 800329e:	f107 000c 	add.w	r0, r7, #12
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f7ff fda2 	bl	8002dee <bme280_set_regs>
 80032aa:	4603      	mov	r3, r0
 80032ac:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d118      	bne.n	80032e8 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80032b6:	23f4      	movs	r3, #244	; 0xf4
 80032b8:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80032ba:	7b38      	ldrb	r0, [r7, #12]
 80032bc:	f107 010d 	add.w	r1, r7, #13
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f7ff fd63 	bl	8002d8e <bme280_get_regs>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80032cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80032d4:	f107 010d 	add.w	r1, r7, #13
 80032d8:	f107 000c 	add.w	r0, r7, #12
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	f7ff fd85 	bl	8002dee <bme280_set_regs>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80032e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003302:	23f4      	movs	r3, #244	; 0xf4
 8003304:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003306:	7db8      	ldrb	r0, [r7, #22]
 8003308:	f107 0115 	add.w	r1, r7, #21
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f7ff fd3d 	bl	8002d8e <bme280_get_regs>
 8003314:	4603      	mov	r3, r0
 8003316:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11f      	bne.n	8003360 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800332a:	f107 0315 	add.w	r3, r7, #21
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f88e 	bl	8003452 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003340:	f107 0315 	add.w	r3, r7, #21
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f8a0 	bl	800348c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800334c:	f107 0115 	add.w	r1, r7, #21
 8003350:	f107 0016 	add.w	r0, r7, #22
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f7ff fd49 	bl	8002dee <bme280_set_regs>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800337a:	23f5      	movs	r3, #245	; 0xf5
 800337c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800337e:	7db8      	ldrb	r0, [r7, #22]
 8003380:	f107 0115 	add.w	r1, r7, #21
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f7ff fd01 	bl	8002d8e <bme280_get_regs>
 800338c:	4603      	mov	r3, r0
 800338e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11f      	bne.n	80033d8 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80033a2:	f107 0315 	add.w	r3, r7, #21
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f81b 	bl	80033e4 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80033b8:	f107 0315 	add.w	r3, r7, #21
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f82d 	bl	800341e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80033c4:	f107 0115 	add.w	r1, r7, #21
 80033c8:	f107 0016 	add.w	r0, r7, #22
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f7ff fd0d 	bl	8002dee <bme280_set_regs>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80033d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	f023 031c 	bic.w	r3, r3, #28
 80033f8:	b25a      	sxtb	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	b25b      	sxtb	r3, r3
 8003402:	f003 031c 	and.w	r3, r3, #28
 8003406:	b25b      	sxtb	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b25b      	sxtb	r3, r3
 800340c:	b2da      	uxtb	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	701a      	strb	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	b25a      	sxtb	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	791b      	ldrb	r3, [r3, #4]
 8003438:	015b      	lsls	r3, r3, #5
 800343a:	b25b      	sxtb	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b25b      	sxtb	r3, r3
 8003440:	b2da      	uxtb	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	701a      	strb	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b25b      	sxtb	r3, r3
 8003462:	f023 031c 	bic.w	r3, r3, #28
 8003466:	b25a      	sxtb	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	b25b      	sxtb	r3, r3
 8003470:	f003 031c 	and.w	r3, r3, #28
 8003474:	b25b      	sxtb	r3, r3
 8003476:	4313      	orrs	r3, r2
 8003478:	b25b      	sxtb	r3, r3
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b25b      	sxtb	r3, r3
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	b25a      	sxtb	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	4313      	orrs	r3, r2
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	701a      	strb	r2, [r3, #0]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3302      	adds	r3, #2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	109b      	asrs	r3, r3, #2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3302      	adds	r3, #2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3303      	adds	r3, #3
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	109b      	asrs	r3, r3, #2
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	b2da      	uxtb	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3303      	adds	r3, #3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2da      	uxtb	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	711a      	strb	r2, [r3, #4]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8003534:	23f4      	movs	r3, #244	; 0xf4
 8003536:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8003538:	7bb8      	ldrb	r0, [r7, #14]
 800353a:	f107 010d 	add.w	r1, r7, #13
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	f7ff fc24 	bl	8002d8e <bme280_get_regs>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d117      	bne.n	8003582 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	b25a      	sxtb	r2, r3
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	b25b      	sxtb	r3, r3
 8003566:	4313      	orrs	r3, r2
 8003568:	b25b      	sxtb	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800356e:	f107 010d 	add.w	r1, r7, #13
 8003572:	f107 000e 	add.w	r0, r7, #14
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	f7ff fc38 	bl	8002dee <bme280_set_regs>
 800357e:	4603      	mov	r3, r0
 8003580:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8003596:	f107 0110 	add.w	r1, r7, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	20f2      	movs	r0, #242	; 0xf2
 80035a0:	f7ff fbf5 	bl	8002d8e <bme280_get_regs>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80035a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d118      	bne.n	80035e2 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80035b0:	f107 0208 	add.w	r2, r7, #8
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff80 	bl	80034c0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fd39 	bl	8003038 <bme280_soft_reset>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80035ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f808 	bl	80035ee <reload_device_settings>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80035e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	201f      	movs	r0, #31
 80035fe:	f7ff fe18 	bl	8003232 <set_osr_settings>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	201f      	movs	r0, #31
 8003614:	f7ff feaa 	bl	800336c <set_filter_standby_settings>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800361c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <compensate_temperature+0xc0>)
 8003634:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8003636:	f242 1334 	movw	r3, #8500	; 0x2134
 800363a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	0052      	lsls	r2, r2, #1
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003652:	461a      	mov	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	da01      	bge.n	8003662 <compensate_temperature+0x3a>
 800365e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003662:	12db      	asrs	r3, r3, #11
 8003664:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	fb03 f303 	mul.w	r3, r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	da01      	bge.n	8003682 <compensate_temperature+0x5a>
 800367e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003682:	131b      	asrs	r3, r3, #12
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	da02      	bge.n	800369a <compensate_temperature+0x72>
 8003694:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8003698:	333f      	adds	r3, #63	; 0x3f
 800369a:	139b      	asrs	r3, r3, #14
 800369c:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	441a      	add	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	3380      	adds	r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	da00      	bge.n	80036ba <compensate_temperature+0x92>
 80036b8:	33ff      	adds	r3, #255	; 0xff
 80036ba:	121b      	asrs	r3, r3, #8
 80036bc:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	da02      	bge.n	80036cc <compensate_temperature+0xa4>
		temperature = temperature_min;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e005      	b.n	80036d8 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dd01      	ble.n	80036d8 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	61fb      	str	r3, [r7, #28]

	return temperature;
 80036d8:	69fb      	ldr	r3, [r7, #28]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	fffff060 	.word	0xfffff060

080036ec <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80036ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f0:	b0ea      	sub	sp, #424	; 0x1a8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80036f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80036fc:	4bbf      	ldr	r3, [pc, #764]	; (80039fc <compensate_pressure+0x310>)
 80036fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 8003702:	4bbf      	ldr	r3, [pc, #764]	; (8003a00 <compensate_pressure+0x314>)
 8003704:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8003708:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	17da      	asrs	r2, r3, #31
 8003710:	4698      	mov	r8, r3
 8003712:	4691      	mov	r9, r2
 8003714:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8003718:	f149 3bff 	adc.w	fp, r9, #4294967295
 800371c:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8003720:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003724:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003728:	fb03 f102 	mul.w	r1, r3, r2
 800372c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003730:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	18ca      	adds	r2, r1, r3
 800373a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800373e:	fba3 4503 	umull	r4, r5, r3, r3
 8003742:	1953      	adds	r3, r2, r5
 8003744:	461d      	mov	r5, r3
 8003746:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800374a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800374e:	b21b      	sxth	r3, r3
 8003750:	17da      	asrs	r2, r3, #31
 8003752:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003756:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800375a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800375e:	4603      	mov	r3, r0
 8003760:	fb03 f205 	mul.w	r2, r3, r5
 8003764:	460b      	mov	r3, r1
 8003766:	fb04 f303 	mul.w	r3, r4, r3
 800376a:	4413      	add	r3, r2
 800376c:	4602      	mov	r2, r0
 800376e:	fba4 1202 	umull	r1, r2, r4, r2
 8003772:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003776:	460a      	mov	r2, r1
 8003778:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800377c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003780:	4413      	add	r3, r2
 8003782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003786:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800378a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800378e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8003792:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003796:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800379a:	b21b      	sxth	r3, r3
 800379c:	17da      	asrs	r2, r3, #31
 800379e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037aa:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80037ae:	462a      	mov	r2, r5
 80037b0:	fb02 f203 	mul.w	r2, r2, r3
 80037b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80037b8:	4621      	mov	r1, r4
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	441a      	add	r2, r3
 80037c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037c4:	4621      	mov	r1, r4
 80037c6:	fba3 1301 	umull	r1, r3, r3, r1
 80037ca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80037ce:	460b      	mov	r3, r1
 80037d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80037d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80037ea:	462b      	mov	r3, r5
 80037ec:	0459      	lsls	r1, r3, #17
 80037ee:	4623      	mov	r3, r4
 80037f0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80037f4:	4623      	mov	r3, r4
 80037f6:	0458      	lsls	r0, r3, #17
 80037f8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80037fc:	1814      	adds	r4, r2, r0
 80037fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003802:	414b      	adcs	r3, r1
 8003804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003808:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800380c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8003810:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003814:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003818:	b21b      	sxth	r3, r3
 800381a:	17da      	asrs	r2, r3, #31
 800381c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003820:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003830:	00d9      	lsls	r1, r3, #3
 8003832:	2000      	movs	r0, #0
 8003834:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003838:	1814      	adds	r4, r2, r0
 800383a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800383e:	414b      	adcs	r3, r1
 8003840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003844:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003848:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 800384c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003850:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003854:	fb03 f102 	mul.w	r1, r3, r2
 8003858:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800385c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	18ca      	adds	r2, r1, r3
 8003866:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800386a:	fba3 1303 	umull	r1, r3, r3, r3
 800386e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003872:	460b      	mov	r3, r1
 8003874:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003878:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003882:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003886:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800388a:	b21b      	sxth	r3, r3
 800388c:	17da      	asrs	r2, r3, #31
 800388e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003892:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003896:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800389a:	462b      	mov	r3, r5
 800389c:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 80038a0:	4642      	mov	r2, r8
 80038a2:	fb02 f203 	mul.w	r2, r2, r3
 80038a6:	464b      	mov	r3, r9
 80038a8:	4621      	mov	r1, r4
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	4622      	mov	r2, r4
 80038b2:	4641      	mov	r1, r8
 80038b4:	fba2 1201 	umull	r1, r2, r2, r1
 80038b8:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80038bc:	460a      	mov	r2, r1
 80038be:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 80038c2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80038c6:	4413      	add	r3, r2
 80038c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038cc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da09      	bge.n	80038e8 <compensate_pressure+0x1fc>
 80038d4:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80038d8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80038dc:	f143 0300 	adc.w	r3, r3, #0
 80038e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0a10      	lsrs	r0, r2, #8
 80038f2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80038f6:	1219      	asrs	r1, r3, #8
 80038f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80038fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003900:	b21b      	sxth	r3, r3
 8003902:	17da      	asrs	r2, r3, #31
 8003904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003908:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800390c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003910:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003914:	464a      	mov	r2, r9
 8003916:	fb02 f203 	mul.w	r2, r2, r3
 800391a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800391e:	4644      	mov	r4, r8
 8003920:	fb04 f303 	mul.w	r3, r4, r3
 8003924:	441a      	add	r2, r3
 8003926:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800392a:	4644      	mov	r4, r8
 800392c:	fba3 4304 	umull	r4, r3, r3, r4
 8003930:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003934:	4623      	mov	r3, r4
 8003936:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800393a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8003950:	464c      	mov	r4, r9
 8003952:	0323      	lsls	r3, r4, #12
 8003954:	4644      	mov	r4, r8
 8003956:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800395a:	4644      	mov	r4, r8
 800395c:	0322      	lsls	r2, r4, #12
 800395e:	1884      	adds	r4, r0, r2
 8003960:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003964:	eb41 0303 	adc.w	r3, r1, r3
 8003968:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800396c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003970:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397c:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8003980:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003984:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003988:	1884      	adds	r4, r0, r2
 800398a:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800398e:	eb41 0303 	adc.w	r3, r1, r3
 8003992:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003996:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800399a:	88db      	ldrh	r3, [r3, #6]
 800399c:	b29b      	uxth	r3, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039a4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80039a8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80039ac:	462b      	mov	r3, r5
 80039ae:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80039b2:	4642      	mov	r2, r8
 80039b4:	fb02 f203 	mul.w	r2, r2, r3
 80039b8:	464b      	mov	r3, r9
 80039ba:	4621      	mov	r1, r4
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	4622      	mov	r2, r4
 80039c4:	4641      	mov	r1, r8
 80039c6:	fba2 1201 	umull	r1, r2, r2, r1
 80039ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80039ce:	460a      	mov	r2, r1
 80039d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80039d8:	4413      	add	r3, r2
 80039da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039de:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da0e      	bge.n	8003a04 <compensate_pressure+0x318>
 80039e6:	1e51      	subs	r1, r2, #1
 80039e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80039ec:	f143 0301 	adc.w	r3, r3, #1
 80039f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80039f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039f8:	e004      	b.n	8003a04 <compensate_pressure+0x318>
 80039fa:	bf00      	nop
 80039fc:	002dc6c0 	.word	0x002dc6c0
 8003a00:	00a7d8c0 	.word	0x00a7d8c0
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	1058      	asrs	r0, r3, #1
 8003a0e:	17d9      	asrs	r1, r3, #31
 8003a10:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8003a14:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f000 81fc 	beq.w	8003e16 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8003a1e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a2e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a32:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003a36:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8003a3a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	07d9      	lsls	r1, r3, #31
 8003a48:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8003a4c:	07d0      	lsls	r0, r2, #31
 8003a4e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003a52:	1a84      	subs	r4, r0, r2
 8003a54:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8003a58:	eb61 0303 	sbc.w	r3, r1, r3
 8003a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a60:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a64:	4622      	mov	r2, r4
 8003a66:	462b      	mov	r3, r5
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	67b9      	str	r1, [r7, #120]	; 0x78
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a70:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003a74:	4621      	mov	r1, r4
 8003a76:	1851      	adds	r1, r2, r1
 8003a78:	6739      	str	r1, [r7, #112]	; 0x70
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	414b      	adcs	r3, r1
 8003a7e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4641      	mov	r1, r8
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	1889      	adds	r1, r1, r2
 8003a9e:	66b9      	str	r1, [r7, #104]	; 0x68
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	eb43 0101 	adc.w	r1, r3, r1
 8003aa6:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	008b      	lsls	r3, r1, #2
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abe:	4641      	mov	r1, r8
 8003ac0:	008a      	lsls	r2, r1, #2
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4622      	mov	r2, r4
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ace:	460b      	mov	r3, r1
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	eb42 0303 	adc.w	r3, r2, r3
 8003ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	4622      	mov	r2, r4
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b00:	462b      	mov	r3, r5
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b0c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b14:	f7fd f898 	bl	8000c48 <__aeabi_ldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8003b20:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003b24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003b28:	b21b      	sxth	r3, r3
 8003b2a:	17da      	asrs	r2, r3, #31
 8003b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b30:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b34:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da08      	bge.n	8003b4e <compensate_pressure+0x462>
 8003b3c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8003b40:	1851      	adds	r1, r2, r1
 8003b42:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b44:	f143 0300 	adc.w	r3, r3, #0
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0b50      	lsrs	r0, r2, #13
 8003b58:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003b5c:	1359      	asrs	r1, r3, #13
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b66:	4629      	mov	r1, r5
 8003b68:	fb02 f001 	mul.w	r0, r2, r1
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	fb01 f103 	mul.w	r1, r1, r3
 8003b72:	4401      	add	r1, r0
 8003b74:	4620      	mov	r0, r4
 8003b76:	fba0 2302 	umull	r2, r3, r0, r2
 8003b7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003b7e:	4613      	mov	r3, r2
 8003b80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003b84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b88:	18cb      	adds	r3, r1, r3
 8003b8a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003b8e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da08      	bge.n	8003ba8 <compensate_pressure+0x4bc>
 8003b96:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6539      	str	r1, [r7, #80]	; 0x50
 8003b9e:	f143 0300 	adc.w	r3, r3, #0
 8003ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	0b50      	lsrs	r0, r2, #13
 8003bb2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003bb6:	1359      	asrs	r1, r3, #13
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	fb02 f001 	mul.w	r0, r2, r1
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	fb01 f103 	mul.w	r1, r1, r3
 8003bcc:	4401      	add	r1, r0
 8003bce:	4620      	mov	r0, r4
 8003bd0:	fba0 2302 	umull	r2, r3, r0, r2
 8003bd4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003bde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003be2:	18cb      	adds	r3, r1, r3
 8003be4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003be8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	da08      	bge.n	8003c02 <compensate_pressure+0x516>
 8003bf0:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8003bf4:	1851      	adds	r1, r2, r1
 8003bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bf8:	f143 0300 	adc.w	r3, r3, #0
 8003bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	0e50      	lsrs	r0, r2, #25
 8003c0c:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8003c10:	1659      	asrs	r1, r3, #25
 8003c12:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8003c16:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003c1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	17da      	asrs	r2, r3, #31
 8003c22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c26:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c2a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c2e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003c32:	462a      	mov	r2, r5
 8003c34:	fb02 f203 	mul.w	r2, r2, r3
 8003c38:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	441a      	add	r2, r3
 8003c44:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c48:	4621      	mov	r1, r4
 8003c4a:	fba3 1301 	umull	r1, r3, r3, r1
 8003c4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003c52:	460b      	mov	r3, r1
 8003c54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003c58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003c62:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da07      	bge.n	8003c7a <compensate_pressure+0x58e>
 8003c6a:	4971      	ldr	r1, [pc, #452]	; (8003e30 <compensate_pressure+0x744>)
 8003c6c:	1851      	adds	r1, r2, r1
 8003c6e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c70:	f143 0300 	adc.w	r3, r3, #0
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
 8003c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	0cd0      	lsrs	r0, r2, #19
 8003c84:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8003c88:	14d9      	asrs	r1, r3, #19
 8003c8a:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8003c8e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003c92:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003c96:	1884      	adds	r4, r0, r2
 8003c98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003c9c:	eb41 0303 	adc.w	r3, r1, r3
 8003ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ca8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003cac:	4621      	mov	r1, r4
 8003cae:	1889      	adds	r1, r1, r2
 8003cb0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	eb43 0101 	adc.w	r1, r3, r1
 8003cba:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8003cbe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da07      	bge.n	8003cd6 <compensate_pressure+0x5ea>
 8003cc6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8003cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ccc:	f143 0300 	adc.w	r3, r3, #0
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	0a10      	lsrs	r0, r2, #8
 8003ce0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003ce4:	1219      	asrs	r1, r3, #8
 8003ce6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003cea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	17da      	asrs	r2, r3, #31
 8003cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d06:	464c      	mov	r4, r9
 8003d08:	0123      	lsls	r3, r4, #4
 8003d0a:	4644      	mov	r4, r8
 8003d0c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003d10:	4644      	mov	r4, r8
 8003d12:	0122      	lsls	r2, r4, #4
 8003d14:	1884      	adds	r4, r0, r2
 8003d16:	633c      	str	r4, [r7, #48]	; 0x30
 8003d18:	eb41 0303 	adc.w	r3, r1, r3
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d22:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8003d26:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003d2a:	0fd9      	lsrs	r1, r3, #31
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d30:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d32:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003d36:	4621      	mov	r1, r4
 8003d38:	1889      	adds	r1, r1, r2
 8003d3a:	6239      	str	r1, [r7, #32]
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	eb43 0101 	adc.w	r1, r3, r1
 8003d42:	6279      	str	r1, [r7, #36]	; 0x24
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d50:	4621      	mov	r1, r4
 8003d52:	084a      	lsrs	r2, r1, #1
 8003d54:	4629      	mov	r1, r5
 8003d56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	104b      	asrs	r3, r1, #1
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	1894      	adds	r4, r2, r2
 8003d68:	61bc      	str	r4, [r7, #24]
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d72:	1814      	adds	r4, r2, r0
 8003d74:	613c      	str	r4, [r7, #16]
 8003d76:	414b      	adcs	r3, r1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003d86:	464c      	mov	r4, r9
 8003d88:	0163      	lsls	r3, r4, #5
 8003d8a:	4644      	mov	r4, r8
 8003d8c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003d90:	4644      	mov	r4, r8
 8003d92:	0162      	lsls	r2, r4, #5
 8003d94:	4644      	mov	r4, r8
 8003d96:	18a4      	adds	r4, r4, r2
 8003d98:	60bc      	str	r4, [r7, #8]
 8003d9a:	464c      	mov	r4, r9
 8003d9c:	eb43 0404 	adc.w	r4, r3, r4
 8003da0:	60fc      	str	r4, [r7, #12]
 8003da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003da6:	4623      	mov	r3, r4
 8003da8:	181b      	adds	r3, r3, r0
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dae:	462b      	mov	r3, r5
 8003db0:	eb41 0303 	adc.w	r3, r1, r3
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da07      	bge.n	8003dd0 <compensate_pressure+0x6e4>
 8003dc0:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	f143 0300 	adc.w	r3, r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	09d0      	lsrs	r0, r2, #7
 8003dda:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003dde:	11d9      	asrs	r1, r3, #7
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 8003dea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003dee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d204      	bcs.n	8003e00 <compensate_pressure+0x714>
			pressure = pressure_min;
 8003df6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003dfe:	e00e      	b.n	8003e1e <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8003e00:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003e04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d908      	bls.n	8003e1e <compensate_pressure+0x732>
			pressure = pressure_max;
 8003e0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003e10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e14:	e003      	b.n	8003e1e <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8003e16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 8003e1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2e:	bf00      	nop
 8003e30:	0007ffff 	.word	0x0007ffff

08003e34 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b08b      	sub	sp, #44	; 0x2c
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8003e3e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003e42:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003e4c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	039b      	lsls	r3, r3, #14
 8003e54:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003e5c:	051b      	lsls	r3, r3, #20
 8003e5e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003e66:	461a      	mov	r2, r3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da02      	bge.n	8003e88 <compensate_humidity+0x54>
 8003e82:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003e86:	337f      	adds	r3, #127	; 0x7f
 8003e88:	13db      	asrs	r3, r3, #15
 8003e8a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8003e92:	461a      	mov	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da01      	bge.n	8003ea2 <compensate_humidity+0x6e>
 8003e9e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ea2:	129b      	asrs	r3, r3, #10
 8003ea4:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7f1b      	ldrb	r3, [r3, #28]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da01      	bge.n	8003eba <compensate_humidity+0x86>
 8003eb6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003eba:	12db      	asrs	r3, r3, #11
 8003ebc:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da01      	bge.n	8003ed2 <compensate_humidity+0x9e>
 8003ece:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ed2:	129b      	asrs	r3, r3, #10
 8003ed4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003ed8:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da02      	bge.n	8003ef6 <compensate_humidity+0xc2>
 8003ef0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8003ef4:	333f      	adds	r3, #63	; 0x3f
 8003ef6:	139b      	asrs	r3, r3, #14
 8003ef8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da02      	bge.n	8003f10 <compensate_humidity+0xdc>
 8003f0a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003f0e:	337f      	adds	r3, #127	; 0x7f
 8003f10:	13db      	asrs	r3, r3, #15
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da02      	bge.n	8003f20 <compensate_humidity+0xec>
 8003f1a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003f1e:	337f      	adds	r3, #127	; 0x7f
 8003f20:	13db      	asrs	r3, r3, #15
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da00      	bge.n	8003f2c <compensate_humidity+0xf8>
 8003f2a:	337f      	adds	r3, #127	; 0x7f
 8003f2c:	11db      	asrs	r3, r3, #7
 8003f2e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	7e1b      	ldrb	r3, [r3, #24]
 8003f34:	461a      	mov	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da00      	bge.n	8003f42 <compensate_humidity+0x10e>
 8003f40:	330f      	adds	r3, #15
 8003f42:	111b      	asrs	r3, r3, #4
 8003f44:	425b      	negs	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f54:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8003f5c:	bfa8      	it	ge
 8003f5e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8003f62:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da01      	bge.n	8003f6e <compensate_humidity+0x13a>
 8003f6a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003f6e:	131b      	asrs	r3, r3, #12
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d901      	bls.n	8003f7e <compensate_humidity+0x14a>
		humidity = humidity_max;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	372c      	adds	r7, #44	; 0x2c
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8003f94:	2388      	movs	r3, #136	; 0x88
 8003f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	f107 0310 	add.w	r3, r7, #16
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8003fb0:	f107 010c 	add.w	r1, r7, #12
 8003fb4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	221a      	movs	r2, #26
 8003fbc:	f7fe fee7 	bl	8002d8e <bme280_get_regs>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8003fc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11d      	bne.n	800400a <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f84a 	bl	800406e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8003fda:	23e1      	movs	r3, #225	; 0xe1
 8003fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8003fe0:	f107 010c 	add.w	r1, r7, #12
 8003fe4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2207      	movs	r2, #7
 8003fec:	f7fe fecf 	bl	8002d8e <bme280_get_regs>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8003ffe:	f107 030c 	add.w	r3, r7, #12
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f8e2 	bl	80041ce <parse_humidity_calib_data>
		}
	}

	return rslt;
 800400a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800400e:	4618      	mov	r0, r3
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
 8004028:	e016      	b.n	8004058 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	441a      	add	r2, r3
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	440b      	add	r3, r1
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	441a      	add	r2, r3
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4619      	mov	r1, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	440b      	add	r3, r1
 800404e:	7812      	ldrb	r2, [r2, #0]
 8004050:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	3301      	adds	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
 8004058:	7dfa      	ldrb	r2, [r7, #23]
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3e4      	bcc.n	800402a <interleave_reg_addr+0x14>
	}
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	3310      	adds	r3, #16
 800407c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3301      	adds	r3, #1
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	b21a      	sxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21b      	sxth	r3, r3
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3303      	adds	r3, #3
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b21a      	sxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3302      	adds	r3, #2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b21a      	sxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3305      	adds	r3, #5
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3307      	adds	r3, #7
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	b21a      	sxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3306      	adds	r3, #6
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b21b      	sxth	r3, r3
 80040de:	4313      	orrs	r3, r2
 80040e0:	b21b      	sxth	r3, r3
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3309      	adds	r3, #9
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3308      	adds	r3, #8
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b21a      	sxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	330b      	adds	r3, #11
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	b21a      	sxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	330a      	adds	r3, #10
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	b21a      	sxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	330d      	adds	r3, #13
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	b21a      	sxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	330c      	adds	r3, #12
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b21b      	sxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b21a      	sxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	330f      	adds	r3, #15
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	b21a      	sxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	330e      	adds	r3, #14
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b21b      	sxth	r3, r3
 8004148:	4313      	orrs	r3, r2
 800414a:	b21a      	sxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3311      	adds	r3, #17
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	b21a      	sxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3310      	adds	r3, #16
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b21a      	sxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3313      	adds	r3, #19
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	b21a      	sxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3312      	adds	r3, #18
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21a      	sxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3315      	adds	r3, #21
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b21a      	sxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3314      	adds	r3, #20
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b21a      	sxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3317      	adds	r3, #23
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3316      	adds	r3, #22
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b21b      	sxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3319      	adds	r3, #25
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	761a      	strb	r2, [r3, #24]

}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b087      	sub	sp, #28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3310      	adds	r3, #16
 80041dc:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3301      	adds	r3, #1
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b21b      	sxth	r3, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3302      	adds	r3, #2
 80041fa:	781a      	ldrb	r2, [r3, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3303      	adds	r3, #3
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b25b      	sxtb	r3, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	b29b      	uxth	r3, r3
 800420e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b21b      	sxth	r3, r3
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800421e:	8a7a      	ldrh	r2, [r7, #18]
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	b21a      	sxth	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3305      	adds	r3, #5
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b25b      	sxtb	r3, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	b29b      	uxth	r3, r3
 8004238:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	b2db      	uxtb	r3, r3
 8004244:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004246:	89fa      	ldrh	r2, [r7, #14]
 8004248:	89bb      	ldrh	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	b21a      	sxth	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3306      	adds	r3, #6
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25a      	sxtb	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	460a      	mov	r2, r1
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	4613      	mov	r3, r2
 800427a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004280:	79fa      	ldrb	r2, [r7, #7]
 8004282:	79bb      	ldrb	r3, [r7, #6]
 8004284:	4013      	ands	r3, r2
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e001      	b.n	8004296 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <null_ptr_check+0x26>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <null_ptr_check+0x26>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <null_ptr_check+0x26>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80042ca:	23ff      	movs	r3, #255	; 0xff
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e001      	b.n	80042d4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042e8:	f7fe fc6c 	bl	8002bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ee:	490d      	ldr	r1, [pc, #52]	; (8004324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <LoopForever+0xe>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f4:	e002      	b.n	80042fc <LoopCopyDataInit>

080042f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fa:	3304      	adds	r3, #4

080042fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004300:	d3f9      	bcc.n	80042f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <LoopForever+0x16>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004308:	e001      	b.n	800430e <LoopFillZerobss>

0800430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430c:	3204      	adds	r2, #4

0800430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004310:	d3fb      	bcc.n	800430a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004312:	f009 ff23 	bl	800e15c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004316:	f7fd ff31 	bl	800217c <main>

0800431a <LoopForever>:

LoopForever:
    b LoopForever
 800431a:	e7fe      	b.n	800431a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800431c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004328:	080124c8 	.word	0x080124c8
  ldr r2, =_sbss
 800432c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004330:	20003e94 	.word	0x20003e94

08004334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC1_IRQHandler>

08004336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004340:	2003      	movs	r0, #3
 8004342:	f001 fe92 	bl	800606a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004346:	200f      	movs	r0, #15
 8004348:	f7fe fa66 	bl	8002818 <HAL_InitTick>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	71fb      	strb	r3, [r7, #7]
 8004356:	e001      	b.n	800435c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004358:	f7fe fa36 	bl	80027c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800435c:	79fb      	ldrb	r3, [r7, #7]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_IncTick+0x20>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_IncTick+0x24>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4413      	add	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_IncTick+0x24>)
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000020 	.word	0x20000020
 800438c:	2000243c 	.word	0x2000243c

08004390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return uwTick;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_GetTick+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000243c 	.word	0x2000243c

080043a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b0:	f7ff ffee 	bl	8004390 <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d005      	beq.n	80043ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_Delay+0x44>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043ce:	bf00      	nop
 80043d0:	f7ff ffde 	bl	8004390 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d8f7      	bhi.n	80043d0 <HAL_Delay+0x28>
  {
  }
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000020 	.word	0x20000020

080043f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3360      	adds	r3, #96	; 0x60
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <LL_ADC_SetOffset+0x44>)
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	4313      	orrs	r3, r2
 8004488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	03fff000 	.word	0x03fff000

080044a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3360      	adds	r3, #96	; 0x60
 80044ae:	461a      	mov	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3360      	adds	r3, #96	; 0x60
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3330      	adds	r3, #48	; 0x30
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	4413      	add	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	211f      	movs	r1, #31
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0e9b      	lsrs	r3, r3, #26
 8004560:	f003 011f 	and.w	r1, r3, #31
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	431a      	orrs	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3314      	adds	r3, #20
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0e5b      	lsrs	r3, r3, #25
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	4413      	add	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	0d1b      	lsrs	r3, r3, #20
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2107      	movs	r1, #7
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	401a      	ands	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0d1b      	lsrs	r3, r3, #20
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0318 	and.w	r3, r3, #24
 80045fa:	4908      	ldr	r1, [pc, #32]	; (800461c <LL_ADC_SetChannelSingleDiff+0x44>)
 80045fc:	40d9      	lsrs	r1, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	400b      	ands	r3, r1
 8004602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004606:	431a      	orrs	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	0007ffff 	.word	0x0007ffff

08004620 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6093      	str	r3, [r2, #8]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004658:	d101      	bne.n	800465e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800467c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004680:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a8:	d101      	bne.n	80046ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <LL_ADC_IsEnabled+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_ADC_IsEnabled+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800471a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d101      	bne.n	800474a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d101      	bne.n	8004770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e12c      	b.n	80049f4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fc fd33 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff3f 	bl	8004644 <LL_ADC_IsDeepPowerDownEnabled>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff25 	bl	8004620 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ff5a 	bl	8004694 <LL_ADC_IsInternalRegulatorEnabled>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d115      	bne.n	8004812 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff ff3e 	bl	800466c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f0:	4b82      	ldr	r3, [pc, #520]	; (80049fc <HAL_ADC_Init+0x27c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	4a82      	ldr	r2, [pc, #520]	; (8004a00 <HAL_ADC_Init+0x280>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	3301      	adds	r3, #1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004804:	e002      	b.n	800480c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	3b01      	subs	r3, #1
 800480a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f9      	bne.n	8004806 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff3c 	bl	8004694 <LL_ADC_IsInternalRegulatorEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f043 0210 	orr.w	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff75 	bl	8004732 <LL_ADC_REG_IsConversionOngoing>
 8004848:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 80c5 	bne.w	80049e2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80c1 	bne.w	80049e2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004868:	f043 0202 	orr.w	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff35 	bl	80046e4 <LL_ADC_IsEnabled>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004880:	4860      	ldr	r0, [pc, #384]	; (8004a04 <HAL_ADC_Init+0x284>)
 8004882:	f7ff ff2f 	bl	80046e4 <LL_ADC_IsEnabled>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	485d      	ldr	r0, [pc, #372]	; (8004a08 <HAL_ADC_Init+0x288>)
 8004894:	f7ff fdac 	bl	80043f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7e5b      	ldrb	r3, [r3, #25]
 800489c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80048a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80048ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d106      	bne.n	80048d4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	3b01      	subs	r3, #1
 80048cc:	045b      	lsls	r3, r3, #17
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <HAL_ADC_Init+0x28c>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	430b      	orrs	r3, r1
 8004902:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff12 	bl	8004732 <LL_ADC_REG_IsConversionOngoing>
 800490e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff1f 	bl	8004758 <LL_ADC_INJ_IsConversionOngoing>
 800491a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13d      	bne.n	800499e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d13a      	bne.n	800499e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800492c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004934:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004944:	f023 0302 	bic.w	r3, r3, #2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	430b      	orrs	r3, r1
 8004950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004958:	2b01      	cmp	r3, #1
 800495a:	d118      	bne.n	800498e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800497e:	430a      	orrs	r2, r1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	611a      	str	r2, [r3, #16]
 800498c:	e007      	b.n	800499e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10c      	bne.n	80049c0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f023 010f 	bic.w	r1, r3, #15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
 80049be:	e007      	b.n	80049d0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 020f 	bic.w	r2, r2, #15
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f023 0303 	bic.w	r3, r3, #3
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
 80049e0:	e007      	b.n	80049f2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	f043 0210 	orr.w	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000018 	.word	0x20000018
 8004a00:	053e2d63 	.word	0x053e2d63
 8004a04:	50040000 	.word	0x50040000
 8004a08:	50040300 	.word	0x50040300
 8004a0c:	fff0c007 	.word	0xfff0c007

08004a10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fe86 	bl	8004732 <LL_ADC_REG_IsConversionOngoing>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d167      	bne.n	8004afc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_Start_DMA+0x2a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e063      	b.n	8004b02 <HAL_ADC_Start_DMA+0xf2>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fc66 	bl	8005314 <ADC_Enable>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d14f      	bne.n	8004af2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f023 0206 	bic.w	r2, r3, #6
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a7e:	e002      	b.n	8004a86 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <HAL_ADC_Start_DMA+0xfc>)
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_ADC_Start_DMA+0x100>)
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <HAL_ADC_Start_DMA+0x104>)
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	221c      	movs	r2, #28
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0210 	orr.w	r2, r2, #16
 8004abc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3340      	adds	r3, #64	; 0x40
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f001 fbb1 	bl	8006244 <HAL_DMA_Start_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe0d 	bl	800470a <LL_ADC_REG_StartConversion>
 8004af0:	e006      	b.n	8004b00 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004afa:	e001      	b.n	8004b00 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08005421 	.word	0x08005421
 8004b10:	080054f9 	.word	0x080054f9
 8004b14:	08005515 	.word	0x08005515

08004b18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b0b6      	sub	sp, #216	; 0xd8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x22>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e3b9      	b.n	80052ea <HAL_ADC_ConfigChannel+0x796>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fdd5 	bl	8004732 <LL_ADC_REG_IsConversionOngoing>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 839e 	bne.w	80052cc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d824      	bhi.n	8004be2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	3b02      	subs	r3, #2
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d81b      	bhi.n	8004bda <HAL_ADC_ConfigChannel+0x86>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_ADC_ConfigChannel+0x54>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc1 	.word	0x08004bc1
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bd1 	.word	0x08004bd1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	220c      	movs	r2, #12
 8004bbc:	605a      	str	r2, [r3, #4]
          break;
 8004bbe:	e010      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2212      	movs	r2, #18
 8004bc4:	605a      	str	r2, [r3, #4]
          break;
 8004bc6:	e00c      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2218      	movs	r2, #24
 8004bcc:	605a      	str	r2, [r3, #4]
          break;
 8004bce:	e008      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd6:	605a      	str	r2, [r3, #4]
          break;
 8004bd8:	e003      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2206      	movs	r2, #6
 8004bde:	605a      	str	r2, [r3, #4]
          break;
 8004be0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7ff fc9a 	bl	8004528 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fd9a 	bl	8004732 <LL_ADC_REG_IsConversionOngoing>
 8004bfe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fda6 	bl	8004758 <LL_ADC_INJ_IsConversionOngoing>
 8004c0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 81a6 	bne.w	8004f66 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 81a1 	bne.w	8004f66 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f7ff fca5 	bl	8004580 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d00a      	beq.n	8004c6e <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6919      	ldr	r1, [r3, #16]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c68:	f7ff fbf6 	bl	8004458 <LL_ADC_SetOffset>
 8004c6c:	e17b      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fc13 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x146>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fc08 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	0e9b      	lsrs	r3, r3, #26
 8004c94:	f003 021f 	and.w	r2, r3, #31
 8004c98:	e01e      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x184>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fbfd 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	e004      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x19c>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0e9b      	lsrs	r3, r3, #26
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	e018      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x1ce>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e004      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8004d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d106      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fbcc 	bl	80044cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fbb0 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x20c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fba5 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004d56:	4603      	mov	r3, r0
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	f003 021f 	and.w	r2, r3, #31
 8004d5e:	e01e      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x24a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb9a 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	e004      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8004d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d105      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x262>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0e9b      	lsrs	r3, r3, #26
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	e018      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x294>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004dda:	2320      	movs	r3, #32
 8004ddc:	e004      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de2:	fab3 f383 	clz	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d106      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb69 	bl	80044cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2102      	movs	r1, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fb4d 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x2d2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fb42 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	0e9b      	lsrs	r3, r3, #26
 8004e20:	f003 021f 	and.w	r2, r3, #31
 8004e24:	e01e      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x310>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fb37 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004e54:	2320      	movs	r3, #32
 8004e56:	e004      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x328>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0e9b      	lsrs	r3, r3, #26
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	e016      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x356>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	e004      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d106      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fb08 	bl	80044cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2103      	movs	r1, #3
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff faec 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x394>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2103      	movs	r1, #3
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fae1 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	f003 021f 	and.w	r2, r3, #31
 8004ee6:	e017      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x3c4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2103      	movs	r1, #3
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fad6 	bl	80044a0 <LL_ADC_GetOffsetChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	e003      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f10:	fab3 f383 	clz	r3, r3
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x3dc>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	0e9b      	lsrs	r3, r3, #26
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	e011      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x400>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004f48:	2320      	movs	r3, #32
 8004f4a:	e003      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d106      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2103      	movs	r1, #3
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fab3 	bl	80044cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fbba 	bl	80046e4 <LL_ADC_IsEnabled>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 8140 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f7ff fb27 	bl	80045d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4a8f      	ldr	r2, [pc, #572]	; (80051cc <HAL_ADC_ConfigChannel+0x678>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	f040 8131 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x46a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	0e9b      	lsrs	r3, r3, #26
 8004fac:	3301      	adds	r3, #1
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2b09      	cmp	r3, #9
 8004fb4:	bf94      	ite	ls
 8004fb6:	2301      	movls	r3, #1
 8004fb8:	2300      	movhi	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e019      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x49e>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	e003      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2b09      	cmp	r3, #9
 8004fea:	bf94      	ite	ls
 8004fec:	2301      	movls	r3, #1
 8004fee:	2300      	movhi	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d079      	beq.n	80050ea <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x4be>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	0e9b      	lsrs	r3, r3, #26
 8005008:	3301      	adds	r3, #1
 800500a:	069b      	lsls	r3, r3, #26
 800500c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005010:	e015      	b.n	800503e <HAL_ADC_ConfigChannel+0x4ea>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e003      	b.n	8005036 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800502e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3301      	adds	r3, #1
 8005038:	069b      	lsls	r3, r3, #26
 800503a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <HAL_ADC_ConfigChannel+0x50a>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	0e9b      	lsrs	r3, r3, #26
 8005050:	3301      	adds	r3, #1
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2101      	movs	r1, #1
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	e017      	b.n	800508e <HAL_ADC_ConfigChannel+0x53a>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800506c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 800507a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	3301      	adds	r3, #1
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2101      	movs	r1, #1
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	ea42 0103 	orr.w	r1, r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x560>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	0e9b      	lsrs	r3, r3, #26
 80050a4:	3301      	adds	r3, #1
 80050a6:	f003 021f 	and.w	r2, r3, #31
 80050aa:	4613      	mov	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	051b      	lsls	r3, r3, #20
 80050b2:	e018      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x592>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e003      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	3301      	adds	r3, #1
 80050da:	f003 021f 	and.w	r2, r3, #31
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e6:	430b      	orrs	r3, r1
 80050e8:	e081      	b.n	80051ee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x5b2>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0e9b      	lsrs	r3, r3, #26
 80050fc:	3301      	adds	r3, #1
 80050fe:	069b      	lsls	r3, r3, #26
 8005100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005104:	e015      	b.n	8005132 <HAL_ADC_ConfigChannel+0x5de>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e003      	b.n	800512a <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	3301      	adds	r3, #1
 800512c:	069b      	lsls	r3, r3, #26
 800512e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x5fe>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0e9b      	lsrs	r3, r3, #26
 8005144:	3301      	adds	r3, #1
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	e017      	b.n	8005182 <HAL_ADC_ConfigChannel+0x62e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	61fb      	str	r3, [r7, #28]
  return result;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800516a:	2320      	movs	r3, #32
 800516c:	e003      	b.n	8005176 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	ea42 0103 	orr.w	r1, r2, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x65a>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	0e9b      	lsrs	r3, r3, #26
 8005198:	3301      	adds	r3, #1
 800519a:	f003 021f 	and.w	r2, r3, #31
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	3b1e      	subs	r3, #30
 80051a6:	051b      	lsls	r3, r3, #20
 80051a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051ac:	e01e      	b.n	80051ec <HAL_ADC_ConfigChannel+0x698>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	613b      	str	r3, [r7, #16]
  return result;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80051c6:	2320      	movs	r3, #32
 80051c8:	e006      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x684>
 80051ca:	bf00      	nop
 80051cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	3301      	adds	r3, #1
 80051da:	f003 021f 	and.w	r2, r3, #31
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	3b1e      	subs	r3, #30
 80051e6:	051b      	lsls	r3, r3, #20
 80051e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ec:	430b      	orrs	r3, r1
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	6892      	ldr	r2, [r2, #8]
 80051f2:	4619      	mov	r1, r3
 80051f4:	f7ff f9c4 	bl	8004580 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_ADC_ConfigChannel+0x7a0>)
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d06c      	beq.n	80052de <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005204:	483c      	ldr	r0, [pc, #240]	; (80052f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8005206:	f7ff f919 	bl	800443c <LL_ADC_GetCommonPathInternalCh>
 800520a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_ADC_ConfigChannel+0x7a8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d127      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d121      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a35      	ldr	r2, [pc, #212]	; (8005300 <HAL_ADC_ConfigChannel+0x7ac>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d157      	bne.n	80052de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005236:	4619      	mov	r1, r3
 8005238:	482f      	ldr	r0, [pc, #188]	; (80052f8 <HAL_ADC_ConfigChannel+0x7a4>)
 800523a:	f7ff f8ec 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_ADC_ConfigChannel+0x7b0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	4a30      	ldr	r2, [pc, #192]	; (8005308 <HAL_ADC_ConfigChannel+0x7b4>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005258:	e002      	b.n	8005260 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f9      	bne.n	800525a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005266:	e03a      	b.n	80052de <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <HAL_ADC_ConfigChannel+0x7b8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d113      	bne.n	800529a <HAL_ADC_ConfigChannel+0x746>
 8005272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10d      	bne.n	800529a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_ADC_ConfigChannel+0x7ac>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d12a      	bne.n	80052de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800528c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005290:	4619      	mov	r1, r3
 8005292:	4819      	ldr	r0, [pc, #100]	; (80052f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8005294:	f7ff f8bf 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005298:	e021      	b.n	80052de <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_ADC_ConfigChannel+0x7bc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d11c      	bne.n	80052de <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a12      	ldr	r2, [pc, #72]	; (8005300 <HAL_ADC_ConfigChannel+0x7ac>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d111      	bne.n	80052de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052c2:	4619      	mov	r1, r3
 80052c4:	480c      	ldr	r0, [pc, #48]	; (80052f8 <HAL_ADC_ConfigChannel+0x7a4>)
 80052c6:	f7ff f8a6 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
 80052ca:	e008      	b.n	80052de <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80052e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	37d8      	adds	r7, #216	; 0xd8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	80080000 	.word	0x80080000
 80052f8:	50040300 	.word	0x50040300
 80052fc:	c7520000 	.word	0xc7520000
 8005300:	50040000 	.word	0x50040000
 8005304:	20000018 	.word	0x20000018
 8005308:	053e2d63 	.word	0x053e2d63
 800530c:	cb840000 	.word	0xcb840000
 8005310:	80000001 	.word	0x80000001

08005314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f9dd 	bl	80046e4 <LL_ADC_IsEnabled>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d169      	bne.n	8005404 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	4b36      	ldr	r3, [pc, #216]	; (8005410 <ADC_Enable+0xfc>)
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f043 0210 	orr.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e055      	b.n	8005406 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff f9ac 	bl	80046bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005364:	482b      	ldr	r0, [pc, #172]	; (8005414 <ADC_Enable+0x100>)
 8005366:	f7ff f869 	bl	800443c <LL_ADC_GetCommonPathInternalCh>
 800536a:	4603      	mov	r3, r0
 800536c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <ADC_Enable+0x104>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	099b      	lsrs	r3, r3, #6
 800537a:	4a28      	ldr	r2, [pc, #160]	; (800541c <ADC_Enable+0x108>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800538e:	e002      	b.n	8005396 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	3b01      	subs	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f9      	bne.n	8005390 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800539c:	f7fe fff8 	bl	8004390 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053a2:	e028      	b.n	80053f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff f99b 	bl	80046e4 <LL_ADC_IsEnabled>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f97f 	bl	80046bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053be:	f7fe ffe7 	bl	8004390 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d914      	bls.n	80053f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d00d      	beq.n	80053f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	f043 0210 	orr.w	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	f043 0201 	orr.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e007      	b.n	8005406 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d1cf      	bne.n	80053a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	8000003f 	.word	0x8000003f
 8005414:	50040300 	.word	0x50040300
 8005418:	20000018 	.word	0x20000018
 800541c:	053e2d63 	.word	0x053e2d63

08005420 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d14b      	bne.n	80054d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d021      	beq.n	8005498 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff f852 	bl	8004502 <LL_ADC_REG_IsTriggerSourceSWStart>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d032      	beq.n	80054ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d12b      	bne.n	80054ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11f      	bne.n	80054ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
 8005496:	e018      	b.n	80054ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d111      	bne.n	80054ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff fb24 	bl	8004b18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054d0:	e00e      	b.n	80054f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fb2e 	bl	8004b40 <HAL_ADC_ErrorCallback>
}
 80054e4:	e004      	b.n	80054f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff fb10 	bl	8004b2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f043 0204 	orr.w	r2, r3, #4
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fb00 	bl	8004b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0ed      	b.n	8005736 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb ff1e 	bl	80013a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800557c:	f7fe ff08 	bl	8004390 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005582:	e012      	b.n	80055aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005584:	f7fe ff04 	bl	8004390 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b0a      	cmp	r3, #10
 8005590:	d90b      	bls.n	80055aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2205      	movs	r2, #5
 80055a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0c5      	b.n	8005736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0e5      	beq.n	8005584 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0202 	bic.w	r2, r2, #2
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055c8:	f7fe fee2 	bl	8004390 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80055ce:	e012      	b.n	80055f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055d0:	f7fe fede 	bl	8004390 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b0a      	cmp	r3, #10
 80055dc:	d90b      	bls.n	80055f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2205      	movs	r2, #5
 80055ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e09f      	b.n	8005736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e5      	bne.n	80055d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7e1b      	ldrb	r3, [r3, #24]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d108      	bne.n	800561e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e007      	b.n	800562e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7e5b      	ldrb	r3, [r3, #25]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d108      	bne.n	8005648 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e007      	b.n	8005658 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005656:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7e9b      	ldrb	r3, [r3, #26]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d108      	bne.n	8005672 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0220 	orr.w	r2, r2, #32
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e007      	b.n	8005682 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0220 	bic.w	r2, r2, #32
 8005680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7edb      	ldrb	r3, [r3, #27]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d108      	bne.n	800569c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0210 	bic.w	r2, r2, #16
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e007      	b.n	80056ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0210 	orr.w	r2, r2, #16
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7f1b      	ldrb	r3, [r3, #28]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d108      	bne.n	80056c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e007      	b.n	80056d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0208 	bic.w	r2, r2, #8
 80056d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7f5b      	ldrb	r3, [r3, #29]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d108      	bne.n	80056f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0204 	orr.w	r2, r2, #4
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e007      	b.n	8005700 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0204 	bic.w	r2, r2, #4
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	ea42 0103 	orr.w	r1, r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800573e:	b480      	push	{r7}
 8005740:	b089      	sub	sp, #36	; 0x24
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005752:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800575c:	7ffb      	ldrb	r3, [r7, #31]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d003      	beq.n	800576a <HAL_CAN_AddTxMessage+0x2c>
 8005762:	7ffb      	ldrb	r3, [r7, #31]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f040 80ad 	bne.w	80058c4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8095 	beq.w	80058b4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	0e1b      	lsrs	r3, r3, #24
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005794:	2201      	movs	r2, #1
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	409a      	lsls	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	6809      	ldr	r1, [r1, #0]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3318      	adds	r3, #24
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	440b      	add	r3, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e00f      	b.n	80057e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80057d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3318      	adds	r3, #24
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	440b      	add	r3, r1
 80057e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3318      	adds	r3, #24
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	440b      	add	r3, r1
 80057f2:	3304      	adds	r3, #4
 80057f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	7d1b      	ldrb	r3, [r3, #20]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d111      	bne.n	8005822 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	3318      	adds	r3, #24
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	3304      	adds	r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	6811      	ldr	r1, [r2, #0]
 8005812:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3318      	adds	r3, #24
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	440b      	add	r3, r1
 800581e:	3304      	adds	r3, #4
 8005820:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3307      	adds	r3, #7
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	061a      	lsls	r2, r3, #24
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3306      	adds	r3, #6
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3305      	adds	r3, #5
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	4313      	orrs	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	3204      	adds	r2, #4
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	4610      	mov	r0, r2
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	6811      	ldr	r1, [r2, #0]
 800584a:	ea43 0200 	orr.w	r2, r3, r0
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	440b      	add	r3, r1
 8005854:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005858:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3303      	adds	r3, #3
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	061a      	lsls	r2, r3, #24
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3302      	adds	r3, #2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3301      	adds	r3, #1
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	4313      	orrs	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	4610      	mov	r0, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	6811      	ldr	r1, [r2, #0]
 8005880:	ea43 0200 	orr.w	r2, r3, r0
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	440b      	add	r3, r1
 800588a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800588e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3318      	adds	r3, #24
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4413      	add	r3, r2
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6811      	ldr	r1, [r2, #0]
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	3318      	adds	r3, #24
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	440b      	add	r3, r1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e00e      	b.n	80058d2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e006      	b.n	80058d2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3724      	adds	r7, #36	; 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80058de:	b480      	push	{r7}
 80058e0:	b087      	sub	sp, #28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d003      	beq.n	8005902 <HAL_CAN_GetRxMessage+0x24>
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f040 80f3 	bne.w	8005ae8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10e      	bne.n	8005926 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d116      	bne.n	8005944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e0e7      	b.n	8005af6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d107      	bne.n	8005944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0d8      	b.n	8005af6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	331b      	adds	r3, #27
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	4413      	add	r3, r2
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0204 	and.w	r2, r3, #4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10c      	bne.n	800597c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	331b      	adds	r3, #27
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	4413      	add	r3, r2
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0d5b      	lsrs	r3, r3, #21
 8005972:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e00b      	b.n	8005994 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	331b      	adds	r3, #27
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	4413      	add	r3, r2
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	331b      	adds	r3, #27
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0202 	and.w	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	331b      	adds	r3, #27
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4413      	add	r3, r2
 80059b6:	3304      	adds	r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	331b      	adds	r3, #27
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	331b      	adds	r3, #27
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	4413      	add	r3, r2
 80059e6:	3304      	adds	r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0a1a      	lsrs	r2, r3, #8
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0c1a      	lsrs	r2, r3, #16
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3302      	adds	r3, #2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0e1a      	lsrs	r2, r3, #24
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3303      	adds	r3, #3
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	0a1a      	lsrs	r2, r3, #8
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	3305      	adds	r3, #5
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0c1a      	lsrs	r2, r3, #16
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3306      	adds	r3, #6
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	0e1a      	lsrs	r2, r3, #24
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	3307      	adds	r3, #7
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	e007      	b.n	8005ae4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0220 	orr.w	r2, r2, #32
 8005ae2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e006      	b.n	8005af6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	; 0x28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d07c      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fb fda1 	bl	80016ac <HAL_CAN_TxMailbox0CompleteCallback>
 8005b6a:	e016      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e00c      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
 8005b92:	e002      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f96b 	bl	8005e70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d024      	beq.n	8005bee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fb fd85 	bl	80016c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8005bbe:	e016      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	e00c      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e002      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f94b 	bl	8005e84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d024      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fb fd69 	bl	80016e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005c12:	e016      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	e00c      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e002      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f92b 	bl	8005e98 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2210      	movs	r2, #16
 8005c64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2208      	movs	r2, #8
 8005c80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f912 	bl	8005eac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fcbf 	bl	8001624 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8ea 	bl	8005ec0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fb fcc7 	bl	8001698 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2210      	movs	r2, #16
 8005d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f8d4 	bl	8005ed4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8cd 	bl	8005ee8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d07b      	beq.n	8005e50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d072      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d043      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03e      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd0:	2b60      	cmp	r3, #96	; 0x60
 8005dd2:	d02b      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x32a>
 8005dd4:	2b60      	cmp	r3, #96	; 0x60
 8005dd6:	d82e      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005dd8:	2b50      	cmp	r3, #80	; 0x50
 8005dda:	d022      	beq.n	8005e22 <HAL_CAN_IRQHandler+0x320>
 8005ddc:	2b50      	cmp	r3, #80	; 0x50
 8005dde:	d82a      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d019      	beq.n	8005e18 <HAL_CAN_IRQHandler+0x316>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d826      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d010      	beq.n	8005e0e <HAL_CAN_IRQHandler+0x30c>
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d822      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d002      	beq.n	8005dfa <HAL_CAN_IRQHandler+0x2f8>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d005      	beq.n	8005e04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005df8:	e01d      	b.n	8005e36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e02:	e019      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f043 0310 	orr.w	r3, r3, #16
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e0c:	e014      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	f043 0320 	orr.w	r3, r3, #32
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e16:	e00f      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e20:	e00a      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e2a:	e005      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e34:	e000      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            break;
 8005e36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f84a 	bl	8005efc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <__NVIC_SetPriorityGrouping+0x44>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f42:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <__NVIC_SetPriorityGrouping+0x44>)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	60d3      	str	r3, [r2, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000ed00 	.word	0xe000ed00

08005f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <__NVIC_GetPriorityGrouping+0x18>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	f003 0307 	and.w	r3, r3, #7
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db0b      	blt.n	8005f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	f003 021f 	and.w	r2, r3, #31
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <__NVIC_EnableIRQ+0x38>)
 8005f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2001      	movs	r0, #1
 8005f96:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000e100 	.word	0xe000e100

08005fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	6039      	str	r1, [r7, #0]
 8005fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db0a      	blt.n	8005fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	490c      	ldr	r1, [pc, #48]	; (8005ffc <__NVIC_SetPriority+0x4c>)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	0112      	lsls	r2, r2, #4
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd8:	e00a      	b.n	8005ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4908      	ldr	r1, [pc, #32]	; (8006000 <__NVIC_SetPriority+0x50>)
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	3b04      	subs	r3, #4
 8005fe8:	0112      	lsls	r2, r2, #4
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	440b      	add	r3, r1
 8005fee:	761a      	strb	r2, [r3, #24]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000e100 	.word	0xe000e100
 8006000:	e000ed00 	.word	0xe000ed00

08006004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f1c3 0307 	rsb	r3, r3, #7
 800601e:	2b04      	cmp	r3, #4
 8006020:	bf28      	it	cs
 8006022:	2304      	movcs	r3, #4
 8006024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3304      	adds	r3, #4
 800602a:	2b06      	cmp	r3, #6
 800602c:	d902      	bls.n	8006034 <NVIC_EncodePriority+0x30>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3b03      	subs	r3, #3
 8006032:	e000      	b.n	8006036 <NVIC_EncodePriority+0x32>
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006038:	f04f 32ff 	mov.w	r2, #4294967295
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	401a      	ands	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800604c:	f04f 31ff 	mov.w	r1, #4294967295
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	43d9      	mvns	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800605c:	4313      	orrs	r3, r2
         );
}
 800605e:	4618      	mov	r0, r3
 8006060:	3724      	adds	r7, #36	; 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff ff4c 	bl	8005f10 <__NVIC_SetPriorityGrouping>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006092:	f7ff ff61 	bl	8005f58 <__NVIC_GetPriorityGrouping>
 8006096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	6978      	ldr	r0, [r7, #20]
 800609e:	f7ff ffb1 	bl	8006004 <NVIC_EncodePriority>
 80060a2:	4602      	mov	r2, r0
 80060a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ff80 	bl	8005fb0 <__NVIC_SetPriority>
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ff54 	bl	8005f74 <__NVIC_EnableIRQ>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e098      	b.n	8006218 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <HAL_DMA_Init+0x150>)
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d80f      	bhi.n	8006112 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	4b4b      	ldr	r3, [pc, #300]	; (8006228 <HAL_DMA_Init+0x154>)
 80060fa:	4413      	add	r3, r2
 80060fc:	4a4b      	ldr	r2, [pc, #300]	; (800622c <HAL_DMA_Init+0x158>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	009a      	lsls	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a48      	ldr	r2, [pc, #288]	; (8006230 <HAL_DMA_Init+0x15c>)
 800610e:	641a      	str	r2, [r3, #64]	; 0x40
 8006110:	e00e      	b.n	8006130 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	4b46      	ldr	r3, [pc, #280]	; (8006234 <HAL_DMA_Init+0x160>)
 800611a:	4413      	add	r3, r2
 800611c:	4a43      	ldr	r2, [pc, #268]	; (800622c <HAL_DMA_Init+0x158>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	091b      	lsrs	r3, r3, #4
 8006124:	009a      	lsls	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a42      	ldr	r2, [pc, #264]	; (8006238 <HAL_DMA_Init+0x164>)
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618a:	d039      	beq.n	8006200 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	4a27      	ldr	r2, [pc, #156]	; (8006230 <HAL_DMA_Init+0x15c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d11a      	bne.n	80061cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006196:	4b29      	ldr	r3, [pc, #164]	; (800623c <HAL_DMA_Init+0x168>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f003 031c 	and.w	r3, r3, #28
 80061a2:	210f      	movs	r1, #15
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	4924      	ldr	r1, [pc, #144]	; (800623c <HAL_DMA_Init+0x168>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061b0:	4b22      	ldr	r3, [pc, #136]	; (800623c <HAL_DMA_Init+0x168>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f003 031c 	and.w	r3, r3, #28
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	491d      	ldr	r1, [pc, #116]	; (800623c <HAL_DMA_Init+0x168>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
 80061ca:	e019      	b.n	8006200 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061cc:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <HAL_DMA_Init+0x16c>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	f003 031c 	and.w	r3, r3, #28
 80061d8:	210f      	movs	r1, #15
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	4917      	ldr	r1, [pc, #92]	; (8006240 <HAL_DMA_Init+0x16c>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <HAL_DMA_Init+0x16c>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6859      	ldr	r1, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f003 031c 	and.w	r3, r3, #28
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	4911      	ldr	r1, [pc, #68]	; (8006240 <HAL_DMA_Init+0x16c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40020407 	.word	0x40020407
 8006228:	bffdfff8 	.word	0xbffdfff8
 800622c:	cccccccd 	.word	0xcccccccd
 8006230:	40020000 	.word	0x40020000
 8006234:	bffdfbf8 	.word	0xbffdfbf8
 8006238:	40020400 	.word	0x40020400
 800623c:	400200a8 	.word	0x400200a8
 8006240:	400204a8 	.word	0x400204a8

08006244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_DMA_Start_IT+0x20>
 8006260:	2302      	movs	r3, #2
 8006262:	e04b      	b.n	80062fc <HAL_DMA_Start_IT+0xb8>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d13a      	bne.n	80062ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f8e0 	bl	8006462 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 020e 	orr.w	r2, r2, #14
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e00f      	b.n	80062dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0204 	bic.w	r2, r2, #4
 80062ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 020a 	orr.w	r2, r2, #10
 80062da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e005      	b.n	80062fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
 80062f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	f003 031c 	and.w	r3, r3, #28
 8006324:	2204      	movs	r2, #4
 8006326:	409a      	lsls	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d026      	beq.n	800637e <HAL_DMA_IRQHandler+0x7a>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d021      	beq.n	800637e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	f003 021c 	and.w	r2, r3, #28
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2104      	movs	r1, #4
 8006366:	fa01 f202 	lsl.w	r2, r1, r2
 800636a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	d071      	beq.n	8006458 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800637c:	e06c      	b.n	8006458 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f003 031c 	and.w	r3, r3, #28
 8006386:	2202      	movs	r2, #2
 8006388:	409a      	lsls	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02e      	beq.n	80063f0 <HAL_DMA_IRQHandler+0xec>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d029      	beq.n	80063f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 020a 	bic.w	r2, r2, #10
 80063b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f003 021c 	and.w	r2, r3, #28
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2102      	movs	r1, #2
 80063d0:	fa01 f202 	lsl.w	r2, r1, r2
 80063d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d038      	beq.n	8006458 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80063ee:	e033      	b.n	8006458 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f003 031c 	and.w	r3, r3, #28
 80063f8:	2208      	movs	r2, #8
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02a      	beq.n	800645a <HAL_DMA_IRQHandler+0x156>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d025      	beq.n	800645a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 020e 	bic.w	r2, r2, #14
 800641c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f003 021c 	and.w	r2, r3, #28
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f202 	lsl.w	r2, r1, r2
 8006430:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006458:	bf00      	nop
 800645a:	bf00      	nop
}
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006474:	f003 021c 	and.w	r2, r3, #28
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f202 	lsl.w	r2, r1, r2
 8006482:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b10      	cmp	r3, #16
 8006492:	d108      	bne.n	80064a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064a4:	e007      	b.n	80064b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064d2:	e148      	b.n	8006766 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	2101      	movs	r1, #1
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 813a 	beq.w	8006760 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d005      	beq.n	8006504 <HAL_GPIO_Init+0x40>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d130      	bne.n	8006566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	2203      	movs	r2, #3
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800653a:	2201      	movs	r2, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4013      	ands	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	f003 0201 	and.w	r2, r3, #1
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d017      	beq.n	80065a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	2203      	movs	r2, #3
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d123      	bne.n	80065f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	08da      	lsrs	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3208      	adds	r2, #8
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	220f      	movs	r2, #15
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	08da      	lsrs	r2, r3, #3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3208      	adds	r2, #8
 80065f0:	6939      	ldr	r1, [r7, #16]
 80065f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	2203      	movs	r2, #3
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	43db      	mvns	r3, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4013      	ands	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8094 	beq.w	8006760 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006638:	4b52      	ldr	r3, [pc, #328]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	4a51      	ldr	r2, [pc, #324]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6613      	str	r3, [r2, #96]	; 0x60
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006650:	4a4d      	ldr	r2, [pc, #308]	; (8006788 <HAL_GPIO_Init+0x2c4>)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	3302      	adds	r3, #2
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	220f      	movs	r2, #15
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4013      	ands	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800667a:	d00d      	beq.n	8006698 <HAL_GPIO_Init+0x1d4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a43      	ldr	r2, [pc, #268]	; (800678c <HAL_GPIO_Init+0x2c8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <HAL_GPIO_Init+0x1d0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a42      	ldr	r2, [pc, #264]	; (8006790 <HAL_GPIO_Init+0x2cc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_GPIO_Init+0x1cc>
 800668c:	2302      	movs	r3, #2
 800668e:	e004      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006690:	2307      	movs	r3, #7
 8006692:	e002      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006698:	2300      	movs	r3, #0
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f002 0203 	and.w	r2, r2, #3
 80066a0:	0092      	lsls	r2, r2, #2
 80066a2:	4093      	lsls	r3, r2
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80066aa:	4937      	ldr	r1, [pc, #220]	; (8006788 <HAL_GPIO_Init+0x2c4>)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	3302      	adds	r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066b8:	4b36      	ldr	r3, [pc, #216]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	43db      	mvns	r3, r3
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4013      	ands	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066dc:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066e2:	4b2c      	ldr	r3, [pc, #176]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4013      	ands	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006706:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800670c:	4b21      	ldr	r3, [pc, #132]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	43db      	mvns	r3, r3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4013      	ands	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006730:	4a18      	ldr	r2, [pc, #96]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006736:	4b17      	ldr	r3, [pc, #92]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	43db      	mvns	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3301      	adds	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f aeaf 	bne.w	80064d4 <HAL_GPIO_Init+0x10>
  }
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40021000 	.word	0x40021000
 8006788:	40010000 	.word	0x40010000
 800678c:	48000400 	.word	0x48000400
 8006790:	48000800 	.word	0x48000800
 8006794:	40010400 	.word	0x40010400

08006798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
 80067a4:	4613      	mov	r3, r2
 80067a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067a8:	787b      	ldrb	r3, [r7, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ae:	887a      	ldrh	r2, [r7, #2]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067b4:	e002      	b.n	80067bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e081      	b.n	80068de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb fc56 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	; 0x24
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800683e:	609a      	str	r2, [r3, #8]
 8006840:	e006      	b.n	8006850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800684e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d104      	bne.n	8006862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69d9      	ldr	r1, [r3, #28]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	461a      	mov	r2, r3
 80068f4:	460b      	mov	r3, r1
 80068f6:	817b      	strh	r3, [r7, #10]
 80068f8:	4613      	mov	r3, r2
 80068fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	f040 80da 	bne.w	8006abe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_I2C_Master_Transmit+0x30>
 8006914:	2302      	movs	r3, #2
 8006916:	e0d3      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006920:	f7fd fd36 	bl	8004390 <HAL_GetTick>
 8006924:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2319      	movs	r3, #25
 800692c:	2201      	movs	r2, #1
 800692e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fb4e 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e0be      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2221      	movs	r2, #33	; 0x21
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2210      	movs	r2, #16
 800694e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	893a      	ldrh	r2, [r7, #8]
 8006962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	2bff      	cmp	r3, #255	; 0xff
 8006972:	d90e      	bls.n	8006992 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697e:	b2da      	uxtb	r2, r3
 8006980:	8979      	ldrh	r1, [r7, #10]
 8006982:	4b51      	ldr	r3, [pc, #324]	; (8006ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fd44 	bl	8007418 <I2C_TransferConfig>
 8006990:	e06c      	b.n	8006a6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	8979      	ldrh	r1, [r7, #10]
 80069a4:	4b48      	ldr	r3, [pc, #288]	; (8006ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fd33 	bl	8007418 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80069b2:	e05b      	b.n	8006a6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	6a39      	ldr	r1, [r7, #32]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fb4b 	bl	8007054 <I2C_WaitOnTXISFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e07b      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d034      	beq.n	8006a6c <HAL_I2C_Master_Transmit+0x184>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d130      	bne.n	8006a6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fadd 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e04d      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2bff      	cmp	r3, #255	; 0xff
 8006a2c:	d90e      	bls.n	8006a4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	8979      	ldrh	r1, [r7, #10]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fce7 	bl	8007418 <I2C_TransferConfig>
 8006a4a:	e00f      	b.n	8006a6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	8979      	ldrh	r1, [r7, #10]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fcd6 	bl	8007418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d19e      	bne.n	80069b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fb2a 	bl	80070d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e01a      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_I2C_Master_Transmit+0x1e4>)
 8006a9e:	400b      	ands	r3, r1
 8006aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	80002000 	.word	0x80002000
 8006acc:	fe00e800 	.word	0xfe00e800

08006ad0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	461a      	mov	r2, r3
 8006adc:	460b      	mov	r3, r1
 8006ade:	817b      	strh	r3, [r7, #10]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	f040 80db 	bne.w	8006ca8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_I2C_Master_Receive+0x30>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e0d4      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b08:	f7fd fc42 	bl	8004390 <HAL_GetTick>
 8006b0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	2319      	movs	r3, #25
 8006b14:	2201      	movs	r2, #1
 8006b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fa5a 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e0bf      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2222      	movs	r2, #34	; 0x22
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2210      	movs	r2, #16
 8006b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	893a      	ldrh	r2, [r7, #8]
 8006b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2bff      	cmp	r3, #255	; 0xff
 8006b5a:	d90e      	bls.n	8006b7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	8979      	ldrh	r1, [r7, #10]
 8006b6a:	4b52      	ldr	r3, [pc, #328]	; (8006cb4 <HAL_I2C_Master_Receive+0x1e4>)
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fc50 	bl	8007418 <I2C_TransferConfig>
 8006b78:	e06d      	b.n	8006c56 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	8979      	ldrh	r1, [r7, #10]
 8006b8c:	4b49      	ldr	r3, [pc, #292]	; (8006cb4 <HAL_I2C_Master_Receive+0x1e4>)
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fc3f 	bl	8007418 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b9a:	e05c      	b.n	8006c56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	6a39      	ldr	r1, [r7, #32]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fad3 	bl	800714c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e07c      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d034      	beq.n	8006c56 <HAL_I2C_Master_Receive+0x186>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d130      	bne.n	8006c56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f9e8 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e04d      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2bff      	cmp	r3, #255	; 0xff
 8006c16:	d90e      	bls.n	8006c36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fbf2 	bl	8007418 <I2C_TransferConfig>
 8006c34:	e00f      	b.n	8006c56 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	8979      	ldrh	r1, [r7, #10]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fbe1 	bl	8007418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d19d      	bne.n	8006b9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	6a39      	ldr	r1, [r7, #32]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fa35 	bl	80070d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e01a      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <HAL_I2C_Master_Receive+0x1e8>)
 8006c88:	400b      	ands	r3, r1
 8006c8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	80002400 	.word	0x80002400
 8006cb8:	fe00e800 	.word	0xfe00e800

08006cbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	817b      	strh	r3, [r7, #10]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	813b      	strh	r3, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	f040 80f9 	bne.w	8006ed6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x34>
 8006cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0ed      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_I2C_Mem_Write+0x4e>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0e6      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d12:	f7fd fb3d 	bl	8004390 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2319      	movs	r3, #25
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f955 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0d1      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2221      	movs	r2, #33	; 0x21
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d5c:	88f8      	ldrh	r0, [r7, #6]
 8006d5e:	893a      	ldrh	r2, [r7, #8]
 8006d60:	8979      	ldrh	r1, [r7, #10]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f8b9 	bl	8006ee4 <I2C_RequestMemoryWrite>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0a9      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2bff      	cmp	r3, #255	; 0xff
 8006d8c:	d90e      	bls.n	8006dac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	22ff      	movs	r2, #255	; 0xff
 8006d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	8979      	ldrh	r1, [r7, #10]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fb37 	bl	8007418 <I2C_TransferConfig>
 8006daa:	e00f      	b.n	8006dcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	8979      	ldrh	r1, [r7, #10]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fb26 	bl	8007418 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f93f 	bl	8007054 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e07b      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d034      	beq.n	8006e84 <HAL_I2C_Mem_Write+0x1c8>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d130      	bne.n	8006e84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f8d1 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e04d      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d90e      	bls.n	8006e64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	8979      	ldrh	r1, [r7, #10]
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fadb 	bl	8007418 <I2C_TransferConfig>
 8006e62:	e00f      	b.n	8006e84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	8979      	ldrh	r1, [r7, #10]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 faca 	bl	8007418 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d19e      	bne.n	8006dcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f91e 	bl	80070d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e01a      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <HAL_I2C_Mem_Write+0x224>)
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e000      	b.n	8006ed8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006ed6:	2302      	movs	r3, #2
  }
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	fe00e800 	.word	0xfe00e800

08006ee4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	4608      	mov	r0, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	817b      	strh	r3, [r7, #10]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	813b      	strh	r3, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	8979      	ldrh	r1, [r7, #10]
 8006f04:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <I2C_RequestMemoryWrite+0xa4>)
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fa83 	bl	8007418 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	69b9      	ldr	r1, [r7, #24]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f89c 	bl	8007054 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e02c      	b.n	8006f80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f2c:	893b      	ldrh	r3, [r7, #8]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
 8006f36:	e015      	b.n	8006f64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f38:	893b      	ldrh	r3, [r7, #8]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f882 	bl	8007054 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e012      	b.n	8006f80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5a:	893b      	ldrh	r3, [r7, #8]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f830 	bl	8006fd4 <I2C_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	80002000 	.word	0x80002000

08006f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d103      	bne.n	8006faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d007      	beq.n	8006fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	619a      	str	r2, [r3, #24]
  }
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fe4:	e022      	b.n	800702c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d01e      	beq.n	800702c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fd f9cf 	bl	8004390 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d113      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e00f      	b.n	800704c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4013      	ands	r3, r2
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	bf0c      	ite	eq
 800703c:	2301      	moveq	r3, #1
 800703e:	2300      	movne	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	429a      	cmp	r2, r3
 8007048:	d0cd      	beq.n	8006fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007060:	e02c      	b.n	80070bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f8ea 	bl	8007240 <I2C_IsErrorOccurred>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e02a      	b.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d01e      	beq.n	80070bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fd f987 	bl	8004390 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d113      	bne.n	80070bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e007      	b.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d1cb      	bne.n	8007062 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e0:	e028      	b.n	8007134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f8aa 	bl	8007240 <I2C_IsErrorOccurred>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e026      	b.n	8007144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f6:	f7fd f94b 	bl	8004390 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d113      	bne.n	8007134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e007      	b.n	8007144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b20      	cmp	r3, #32
 8007140:	d1cf      	bne.n	80070e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007158:	e064      	b.n	8007224 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f86e 	bl	8007240 <I2C_IsErrorOccurred>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e062      	b.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b20      	cmp	r3, #32
 800717a:	d138      	bne.n	80071ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b04      	cmp	r3, #4
 8007188:	d105      	bne.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e04e      	b.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d107      	bne.n	80071b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2210      	movs	r2, #16
 80071aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2204      	movs	r2, #4
 80071b0:	645a      	str	r2, [r3, #68]	; 0x44
 80071b2:	e002      	b.n	80071ba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2220      	movs	r2, #32
 80071c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6859      	ldr	r1, [r3, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b1b      	ldr	r3, [pc, #108]	; (800723c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80071ce:	400b      	ands	r3, r1
 80071d0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e022      	b.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ee:	f7fd f8cf 	bl	8004390 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d302      	bcc.n	8007204 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e007      	b.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d193      	bne.n	800715a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	fe00e800 	.word	0xfe00e800

08007240 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d075      	beq.n	8007358 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2210      	movs	r2, #16
 8007272:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007274:	e056      	b.n	8007324 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d052      	beq.n	8007324 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7fd f887 	bl	8004390 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <I2C_IsErrorOccurred+0x54>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d147      	bne.n	8007324 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	d12e      	bne.n	8007316 <I2C_IsErrorOccurred+0xd6>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072be:	d02a      	beq.n	8007316 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80072c0:	7cfb      	ldrb	r3, [r7, #19]
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d027      	beq.n	8007316 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072d6:	f7fd f85b 	bl	8004390 <HAL_GetTick>
 80072da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072dc:	e01b      	b.n	8007316 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072de:	f7fd f857 	bl	8004390 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b19      	cmp	r3, #25
 80072ea:	d914      	bls.n	8007316 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	f043 0220 	orr.w	r2, r3, #32
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b20      	cmp	r3, #32
 8007322:	d1dc      	bne.n	80072de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b20      	cmp	r3, #32
 8007330:	d003      	beq.n	800733a <I2C_IsErrorOccurred+0xfa>
 8007332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007336:	2b00      	cmp	r3, #0
 8007338:	d09d      	beq.n	8007276 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800733a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2220      	movs	r2, #32
 8007348:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	f043 0304 	orr.w	r3, r3, #4
 8007350:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800737a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	f043 0308 	orr.w	r3, r3, #8
 8007392:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800739c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80073c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01c      	beq.n	8007408 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fddc 	bl	8006f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <I2C_IsErrorOccurred+0x1d4>)
 80073e0:	400b      	ands	r3, r1
 80073e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800740c:	4618      	mov	r0, r3
 800740e:	3728      	adds	r7, #40	; 0x28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	fe00e800 	.word	0xfe00e800

08007418 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	817b      	strh	r3, [r7, #10]
 8007426:	4613      	mov	r3, r2
 8007428:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800742a:	897b      	ldrh	r3, [r7, #10]
 800742c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007430:	7a7b      	ldrb	r3, [r7, #9]
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007438:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	4313      	orrs	r3, r2
 8007442:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007446:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	0d5b      	lsrs	r3, r3, #21
 8007452:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <I2C_TransferConfig+0x60>)
 8007458:	430b      	orrs	r3, r1
 800745a:	43db      	mvns	r3, r3
 800745c:	ea02 0103 	and.w	r1, r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	03ff63ff 	.word	0x03ff63ff

0800747c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b20      	cmp	r3, #32
 8007490:	d138      	bne.n	8007504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800749c:	2302      	movs	r3, #2
 800749e:	e032      	b.n	8007506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2224      	movs	r2, #36	; 0x24
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e000      	b.n	8007506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007504:	2302      	movs	r3, #2
  }
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b20      	cmp	r3, #32
 8007526:	d139      	bne.n	800759c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007532:	2302      	movs	r3, #2
 8007534:	e033      	b.n	800759e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2224      	movs	r2, #36	; 0x24
 8007542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	e000      	b.n	800759e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40007000 	.word	0x40007000

080075c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d6:	d130      	bne.n	800763a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80075d8:	4b23      	ldr	r3, [pc, #140]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e4:	d038      	beq.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075ee:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075f6:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2232      	movs	r2, #50	; 0x32
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	4a1b      	ldr	r2, [pc, #108]	; (8007670 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0c9b      	lsrs	r3, r3, #18
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800760c:	e002      	b.n	8007614 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b01      	subs	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007614:	4b14      	ldr	r3, [pc, #80]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007620:	d102      	bne.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f2      	bne.n	800760e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007634:	d110      	bne.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e00f      	b.n	800765a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007646:	d007      	beq.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007650:	4a05      	ldr	r2, [pc, #20]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007656:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40007000 	.word	0x40007000
 800766c:	20000018 	.word	0x20000018
 8007670:	431bde83 	.word	0x431bde83

08007674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f000 bc02 	b.w	8007e8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007688:	4b96      	ldr	r3, [pc, #600]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 030c 	and.w	r3, r3, #12
 8007690:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007692:	4b94      	ldr	r3, [pc, #592]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80e4 	beq.w	8007872 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <HAL_RCC_OscConfig+0x4c>
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	f040 808b 	bne.w	80077ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	f040 8087 	bne.w	80077ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076c0:	4b88      	ldr	r3, [pc, #544]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCC_OscConfig+0x64>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e3d9      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	4b81      	ldr	r3, [pc, #516]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_RCC_OscConfig+0x7e>
 80076e8:	4b7e      	ldr	r3, [pc, #504]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f0:	e005      	b.n	80076fe <HAL_RCC_OscConfig+0x8a>
 80076f2:	4b7c      	ldr	r3, [pc, #496]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f8:	091b      	lsrs	r3, r3, #4
 80076fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076fe:	4293      	cmp	r3, r2
 8007700:	d223      	bcs.n	800774a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fe1e 	bl	8008348 <RCC_SetFlashLatencyFromMSIRange>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e3ba      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007716:	4b73      	ldr	r3, [pc, #460]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a72      	ldr	r2, [pc, #456]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800771c:	f043 0308 	orr.w	r3, r3, #8
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	4b70      	ldr	r3, [pc, #448]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	496d      	ldr	r1, [pc, #436]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007730:	4313      	orrs	r3, r2
 8007732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007734:	4b6b      	ldr	r3, [pc, #428]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	4968      	ldr	r1, [pc, #416]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007744:	4313      	orrs	r3, r2
 8007746:	604b      	str	r3, [r1, #4]
 8007748:	e025      	b.n	8007796 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800774a:	4b66      	ldr	r3, [pc, #408]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a65      	ldr	r2, [pc, #404]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4b63      	ldr	r3, [pc, #396]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	4960      	ldr	r1, [pc, #384]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007764:	4313      	orrs	r3, r2
 8007766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007768:	4b5e      	ldr	r3, [pc, #376]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	495b      	ldr	r1, [pc, #364]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007778:	4313      	orrs	r3, r2
 800777a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fdde 	bl	8008348 <RCC_SetFlashLatencyFromMSIRange>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e37a      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007796:	f000 fcb5 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 800779a:	4602      	mov	r2, r0
 800779c:	4b51      	ldr	r3, [pc, #324]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	4950      	ldr	r1, [pc, #320]	; (80078e8 <HAL_RCC_OscConfig+0x274>)
 80077a8:	5ccb      	ldrb	r3, [r1, r3]
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	fa22 f303 	lsr.w	r3, r2, r3
 80077b2:	4a4e      	ldr	r2, [pc, #312]	; (80078ec <HAL_RCC_OscConfig+0x278>)
 80077b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80077b6:	4b4e      	ldr	r3, [pc, #312]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fb f82c 	bl	8002818 <HAL_InitTick>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d052      	beq.n	8007870 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	e35e      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d032      	beq.n	800783c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077d6:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a42      	ldr	r2, [pc, #264]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077e2:	f7fc fdd5 	bl	8004390 <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077ea:	f7fc fdd1 	bl	8004390 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e347      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077fc:	4b39      	ldr	r3, [pc, #228]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f0      	beq.n	80077ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007808:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a35      	ldr	r2, [pc, #212]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800780e:	f043 0308 	orr.w	r3, r3, #8
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	4b33      	ldr	r3, [pc, #204]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	4930      	ldr	r1, [pc, #192]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007826:	4b2f      	ldr	r3, [pc, #188]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	492b      	ldr	r1, [pc, #172]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007836:	4313      	orrs	r3, r2
 8007838:	604b      	str	r3, [r1, #4]
 800783a:	e01a      	b.n	8007872 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007848:	f7fc fda2 	bl	8004390 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007850:	f7fc fd9e 	bl	8004390 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e314      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x1dc>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d073      	beq.n	8007966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b08      	cmp	r3, #8
 8007882:	d005      	beq.n	8007890 <HAL_RCC_OscConfig+0x21c>
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d10e      	bne.n	80078a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b03      	cmp	r3, #3
 800788e:	d10b      	bne.n	80078a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007890:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d063      	beq.n	8007964 <HAL_RCC_OscConfig+0x2f0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d15f      	bne.n	8007964 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e2f1      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d106      	bne.n	80078c0 <HAL_RCC_OscConfig+0x24c>
 80078b2:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e025      	b.n	800790c <HAL_RCC_OscConfig+0x298>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c8:	d114      	bne.n	80078f4 <HAL_RCC_OscConfig+0x280>
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a02      	ldr	r2, [pc, #8]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e013      	b.n	800790c <HAL_RCC_OscConfig+0x298>
 80078e4:	40021000 	.word	0x40021000
 80078e8:	080120c8 	.word	0x080120c8
 80078ec:	20000018 	.word	0x20000018
 80078f0:	2000001c 	.word	0x2000001c
 80078f4:	4ba0      	ldr	r3, [pc, #640]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a9f      	ldr	r2, [pc, #636]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80078fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	4b9d      	ldr	r3, [pc, #628]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a9c      	ldr	r2, [pc, #624]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800790a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fc fd3c 	bl	8004390 <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800791c:	f7fc fd38 	bl	8004390 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b64      	cmp	r3, #100	; 0x64
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e2ae      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792e:	4b92      	ldr	r3, [pc, #584]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0f0      	beq.n	800791c <HAL_RCC_OscConfig+0x2a8>
 800793a:	e014      	b.n	8007966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fc fd28 	bl	8004390 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007944:	f7fc fd24 	bl	8004390 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	; 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e29a      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007956:	4b88      	ldr	r3, [pc, #544]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x2d0>
 8007962:	e000      	b.n	8007966 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d060      	beq.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d005      	beq.n	8007984 <HAL_RCC_OscConfig+0x310>
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d119      	bne.n	80079b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d116      	bne.n	80079b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007984:	4b7c      	ldr	r3, [pc, #496]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_RCC_OscConfig+0x328>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e277      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799c:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	061b      	lsls	r3, r3, #24
 80079aa:	4973      	ldr	r1, [pc, #460]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079b0:	e040      	b.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d023      	beq.n	8007a02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ba:	4b6f      	ldr	r3, [pc, #444]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a6e      	ldr	r2, [pc, #440]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c6:	f7fc fce3 	bl	8004390 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ce:	f7fc fcdf 	bl	8004390 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e255      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e0:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0f0      	beq.n	80079ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ec:	4b62      	ldr	r3, [pc, #392]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	495f      	ldr	r1, [pc, #380]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]
 8007a00:	e018      	b.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a02:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a5c      	ldr	r2, [pc, #368]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0e:	f7fc fcbf 	bl	8004390 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a16:	f7fc fcbb 	bl	8004390 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e231      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a28:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d03c      	beq.n	8007aba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01c      	beq.n	8007a82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a48:	4b4b      	ldr	r3, [pc, #300]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a4e:	4a4a      	ldr	r2, [pc, #296]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a58:	f7fc fc9a 	bl	8004390 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a60:	f7fc fc96 	bl	8004390 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e20c      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a72:	4b41      	ldr	r3, [pc, #260]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ef      	beq.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
 8007a80:	e01b      	b.n	8007aba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a82:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a88:	4a3b      	ldr	r2, [pc, #236]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fc fc7d 	bl	8004390 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9a:	f7fc fc79 	bl	8004390 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e1ef      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007aac:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ef      	bne.n	8007a9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80a6 	beq.w	8007c14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007acc:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007adc:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ae4:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007af0:	2301      	movs	r3, #1
 8007af2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af4:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d118      	bne.n	8007b32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b00:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1d      	ldr	r2, [pc, #116]	; (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b0c:	f7fc fc40 	bl	8004390 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b14:	f7fc fc3c 	bl	8004390 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e1b2      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b26:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d108      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4d8>
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b40:	4a0d      	ldr	r2, [pc, #52]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b4a:	e029      	b.n	8007ba0 <HAL_RCC_OscConfig+0x52c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d115      	bne.n	8007b80 <HAL_RCC_OscConfig+0x50c>
 8007b54:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b5c:	f043 0304 	orr.w	r3, r3, #4
 8007b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b64:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	4a03      	ldr	r2, [pc, #12]	; (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b74:	e014      	b.n	8007ba0 <HAL_RCC_OscConfig+0x52c>
 8007b76:	bf00      	nop
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	40007000 	.word	0x40007000
 8007b80:	4b9a      	ldr	r3, [pc, #616]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b86:	4a99      	ldr	r2, [pc, #612]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b90:	4b96      	ldr	r3, [pc, #600]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	4a95      	ldr	r2, [pc, #596]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007b98:	f023 0304 	bic.w	r3, r3, #4
 8007b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d016      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fc fbf2 	bl	8004390 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bae:	e00a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb0:	f7fc fbee 	bl	8004390 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e162      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc6:	4b89      	ldr	r3, [pc, #548]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0ed      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x53c>
 8007bd4:	e015      	b.n	8007c02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd6:	f7fc fbdb 	bl	8004390 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bdc:	e00a      	b.n	8007bf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bde:	f7fc fbd7 	bl	8004390 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e14b      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bf4:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1ed      	bne.n	8007bde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d105      	bne.n	8007c14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c08:	4b78      	ldr	r3, [pc, #480]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0c:	4a77      	ldr	r2, [pc, #476]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d03c      	beq.n	8007c9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01c      	beq.n	8007c62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c28:	4b70      	ldr	r3, [pc, #448]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c2e:	4a6f      	ldr	r2, [pc, #444]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c38:	f7fc fbaa 	bl	8004390 <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c40:	f7fc fba6 	bl	8004390 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e11c      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c52:	4b66      	ldr	r3, [pc, #408]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0ef      	beq.n	8007c40 <HAL_RCC_OscConfig+0x5cc>
 8007c60:	e01b      	b.n	8007c9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c62:	4b62      	ldr	r3, [pc, #392]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c68:	4a60      	ldr	r2, [pc, #384]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c72:	f7fc fb8d 	bl	8004390 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c7a:	f7fc fb89 	bl	8004390 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e0ff      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c8c:	4b57      	ldr	r3, [pc, #348]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1ef      	bne.n	8007c7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80f3 	beq.w	8007e8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f040 80c9 	bne.w	8007e40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007cae:	4b4f      	ldr	r3, [pc, #316]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f003 0203 	and.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d12c      	bne.n	8007d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d123      	bne.n	8007d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d11b      	bne.n	8007d1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d113      	bne.n	8007d1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	3b01      	subs	r3, #1
 8007d02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d109      	bne.n	8007d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	3b01      	subs	r3, #1
 8007d16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d06b      	beq.n	8007df4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b0c      	cmp	r3, #12
 8007d20:	d062      	beq.n	8007de8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007d22:	4b32      	ldr	r3, [pc, #200]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e0ac      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007d32:	4b2e      	ldr	r3, [pc, #184]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2d      	ldr	r2, [pc, #180]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d3e:	f7fc fb27 	bl	8004390 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d46:	f7fc fb23 	bl	8004390 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e099      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d58:	4b24      	ldr	r3, [pc, #144]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f0      	bne.n	8007d46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d64:	4b21      	ldr	r3, [pc, #132]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <HAL_RCC_OscConfig+0x77c>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d74:	3a01      	subs	r2, #1
 8007d76:	0112      	lsls	r2, r2, #4
 8007d78:	4311      	orrs	r1, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d7e:	0212      	lsls	r2, r2, #8
 8007d80:	4311      	orrs	r1, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d86:	0852      	lsrs	r2, r2, #1
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	0552      	lsls	r2, r2, #21
 8007d8c:	4311      	orrs	r1, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d92:	0852      	lsrs	r2, r2, #1
 8007d94:	3a01      	subs	r2, #1
 8007d96:	0652      	lsls	r2, r2, #25
 8007d98:	4311      	orrs	r1, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d9e:	06d2      	lsls	r2, r2, #27
 8007da0:	430a      	orrs	r2, r1
 8007da2:	4912      	ldr	r1, [pc, #72]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007db4:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a0c      	ldr	r2, [pc, #48]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007dc0:	f7fc fae6 	bl	8004390 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc8:	f7fc fae2 	bl	8004390 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e058      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dda:	4b04      	ldr	r3, [pc, #16]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007de6:	e050      	b.n	8007e8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e04f      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
 8007dec:	40021000 	.word	0x40021000
 8007df0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df4:	4b27      	ldr	r3, [pc, #156]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d144      	bne.n	8007e8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007e00:	4b24      	ldr	r3, [pc, #144]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a23      	ldr	r2, [pc, #140]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e0c:	4b21      	ldr	r3, [pc, #132]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4a20      	ldr	r2, [pc, #128]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e18:	f7fc faba 	bl	8004390 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e20:	f7fc fab6 	bl	8004390 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e02c      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e32:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0f0      	beq.n	8007e20 <HAL_RCC_OscConfig+0x7ac>
 8007e3e:	e024      	b.n	8007e8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b0c      	cmp	r3, #12
 8007e44:	d01f      	beq.n	8007e86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fc fa9d 	bl	8004390 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e5a:	f7fc fa99 	bl	8004390 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e00f      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	4905      	ldr	r1, [pc, #20]	; (8007e94 <HAL_RCC_OscConfig+0x820>)
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <HAL_RCC_OscConfig+0x824>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	60cb      	str	r3, [r1, #12]
 8007e84:	e001      	b.n	8007e8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40021000 	.word	0x40021000
 8007e98:	feeefffc 	.word	0xfeeefffc

08007e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0e7      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eb0:	4b75      	ldr	r3, [pc, #468]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d910      	bls.n	8007ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ebe:	4b72      	ldr	r3, [pc, #456]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f023 0207 	bic.w	r2, r3, #7
 8007ec6:	4970      	ldr	r1, [pc, #448]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ece:	4b6e      	ldr	r3, [pc, #440]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0cf      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	4b66      	ldr	r3, [pc, #408]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d908      	bls.n	8007f0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007efc:	4b63      	ldr	r3, [pc, #396]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	4960      	ldr	r1, [pc, #384]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d04c      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d107      	bne.n	8007f32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f22:	4b5a      	ldr	r3, [pc, #360]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d121      	bne.n	8007f72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e0a6      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d107      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f3a:	4b54      	ldr	r3, [pc, #336]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d115      	bne.n	8007f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e09a      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f52:	4b4e      	ldr	r3, [pc, #312]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e08e      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f62:	4b4a      	ldr	r3, [pc, #296]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e086      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f72:	4b46      	ldr	r3, [pc, #280]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f023 0203 	bic.w	r2, r3, #3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	4943      	ldr	r1, [pc, #268]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f84:	f7fc fa04 	bl	8004390 <HAL_GetTick>
 8007f88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8a:	e00a      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8c:	f7fc fa00 	bl	8004390 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e06e      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa2:	4b3a      	ldr	r3, [pc, #232]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 020c 	and.w	r2, r3, #12
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d1eb      	bne.n	8007f8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	4b31      	ldr	r3, [pc, #196]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d208      	bcs.n	8007fe2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fd0:	4b2e      	ldr	r3, [pc, #184]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	492b      	ldr	r1, [pc, #172]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe2:	4b29      	ldr	r3, [pc, #164]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d210      	bcs.n	8008012 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff0:	4b25      	ldr	r3, [pc, #148]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f023 0207 	bic.w	r2, r3, #7
 8007ff8:	4923      	ldr	r1, [pc, #140]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008000:	4b21      	ldr	r3, [pc, #132]	; (8008088 <HAL_RCC_ClockConfig+0x1ec>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d001      	beq.n	8008012 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e036      	b.n	8008080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d008      	beq.n	8008030 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	4918      	ldr	r1, [pc, #96]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 800802c:	4313      	orrs	r3, r2
 800802e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800803c:	4b13      	ldr	r3, [pc, #76]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4910      	ldr	r1, [pc, #64]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 800804c:	4313      	orrs	r3, r2
 800804e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008050:	f000 f858 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 8008054:	4602      	mov	r2, r0
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <HAL_RCC_ClockConfig+0x1f0>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	091b      	lsrs	r3, r3, #4
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	490b      	ldr	r1, [pc, #44]	; (8008090 <HAL_RCC_ClockConfig+0x1f4>)
 8008062:	5ccb      	ldrb	r3, [r1, r3]
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
 800806c:	4a09      	ldr	r2, [pc, #36]	; (8008094 <HAL_RCC_ClockConfig+0x1f8>)
 800806e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008070:	4b09      	ldr	r3, [pc, #36]	; (8008098 <HAL_RCC_ClockConfig+0x1fc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f7fa fbcf 	bl	8002818 <HAL_InitTick>
 800807a:	4603      	mov	r3, r0
 800807c:	72fb      	strb	r3, [r7, #11]

  return status;
 800807e:	7afb      	ldrb	r3, [r7, #11]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40022000 	.word	0x40022000
 800808c:	40021000 	.word	0x40021000
 8008090:	080120c8 	.word	0x080120c8
 8008094:	20000018 	.word	0x20000018
 8008098:	2000001c 	.word	0x2000001c

0800809c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_RCC_MCOConfig+0x64>)
 80080aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ac:	4a14      	ldr	r2, [pc, #80]	; (8008100 <HAL_RCC_MCOConfig+0x64>)
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080b4:	4b12      	ldr	r3, [pc, #72]	; (8008100 <HAL_RCC_MCOConfig+0x64>)
 80080b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80080c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c6:	2302      	movs	r3, #2
 80080c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080ca:	2302      	movs	r3, #2
 80080cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	4619      	mov	r1, r3
 80080dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080e0:	f7fe f9f0 	bl	80064c4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <HAL_RCC_MCOConfig+0x64>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	430b      	orrs	r3, r1
 80080f2:	4903      	ldr	r1, [pc, #12]	; (8008100 <HAL_RCC_MCOConfig+0x64>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	608b      	str	r3, [r1, #8]
}
 80080f8:	bf00      	nop
 80080fa:	3728      	adds	r7, #40	; 0x28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40021000 	.word	0x40021000

08008104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	; 0x24
 8008108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	2300      	movs	r3, #0
 8008110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008112:	4b3e      	ldr	r3, [pc, #248]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
 800811a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800811c:	4b3b      	ldr	r3, [pc, #236]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d005      	beq.n	8008138 <HAL_RCC_GetSysClockFreq+0x34>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	2b0c      	cmp	r3, #12
 8008130:	d121      	bne.n	8008176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d11e      	bne.n	8008176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008138:	4b34      	ldr	r3, [pc, #208]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d107      	bne.n	8008154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008144:	4b31      	ldr	r3, [pc, #196]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 8008146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	e005      	b.n	8008160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008154:	4b2d      	ldr	r3, [pc, #180]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	091b      	lsrs	r3, r3, #4
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008160:	4a2b      	ldr	r2, [pc, #172]	; (8008210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008174:	e00a      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d102      	bne.n	8008182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <HAL_RCC_GetSysClockFreq+0x110>)
 800817e:	61bb      	str	r3, [r7, #24]
 8008180:	e004      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d101      	bne.n	800818c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008188:	4b23      	ldr	r3, [pc, #140]	; (8008218 <HAL_RCC_GetSysClockFreq+0x114>)
 800818a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b0c      	cmp	r3, #12
 8008190:	d134      	bne.n	80081fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008192:	4b1e      	ldr	r3, [pc, #120]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d003      	beq.n	80081aa <HAL_RCC_GetSysClockFreq+0xa6>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d003      	beq.n	80081b0 <HAL_RCC_GetSysClockFreq+0xac>
 80081a8:	e005      	b.n	80081b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <HAL_RCC_GetSysClockFreq+0x110>)
 80081ac:	617b      	str	r3, [r7, #20]
      break;
 80081ae:	e005      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081b0:	4b19      	ldr	r3, [pc, #100]	; (8008218 <HAL_RCC_GetSysClockFreq+0x114>)
 80081b2:	617b      	str	r3, [r7, #20]
      break;
 80081b4:	e002      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	617b      	str	r3, [r7, #20]
      break;
 80081ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081bc:	4b13      	ldr	r3, [pc, #76]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	3301      	adds	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80081ca:	4b10      	ldr	r3, [pc, #64]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	fb03 f202 	mul.w	r2, r3, r2
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <HAL_RCC_GetSysClockFreq+0x108>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	0e5b      	lsrs	r3, r3, #25
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	3301      	adds	r3, #1
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80081fc:	69bb      	ldr	r3, [r7, #24]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3724      	adds	r7, #36	; 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40021000 	.word	0x40021000
 8008210:	080120e0 	.word	0x080120e0
 8008214:	00f42400 	.word	0x00f42400
 8008218:	007a1200 	.word	0x007a1200

0800821c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008220:	4b03      	ldr	r3, [pc, #12]	; (8008230 <HAL_RCC_GetHCLKFreq+0x14>)
 8008222:	681b      	ldr	r3, [r3, #0]
}
 8008224:	4618      	mov	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20000018 	.word	0x20000018

08008234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008238:	f7ff fff0 	bl	800821c <HAL_RCC_GetHCLKFreq>
 800823c:	4602      	mov	r2, r0
 800823e:	4b06      	ldr	r3, [pc, #24]	; (8008258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	4904      	ldr	r1, [pc, #16]	; (800825c <HAL_RCC_GetPCLK1Freq+0x28>)
 800824a:	5ccb      	ldrb	r3, [r1, r3]
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	40021000 	.word	0x40021000
 800825c:	080120d8 	.word	0x080120d8

08008260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008264:	f7ff ffda 	bl	800821c <HAL_RCC_GetHCLKFreq>
 8008268:	4602      	mov	r2, r0
 800826a:	4b06      	ldr	r3, [pc, #24]	; (8008284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	0adb      	lsrs	r3, r3, #11
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	4904      	ldr	r1, [pc, #16]	; (8008288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008276:	5ccb      	ldrb	r3, [r1, r3]
 8008278:	f003 031f 	and.w	r3, r3, #31
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40021000 	.word	0x40021000
 8008288:	080120d8 	.word	0x080120d8

0800828c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	220f      	movs	r2, #15
 800829a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800829c:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <HAL_RCC_GetClockConfig+0x5c>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0203 	and.w	r2, r3, #3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <HAL_RCC_GetClockConfig+0x5c>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <HAL_RCC_GetClockConfig+0x5c>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <HAL_RCC_GetClockConfig+0x5c>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	08db      	lsrs	r3, r3, #3
 80082c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80082ce:	4b07      	ldr	r3, [pc, #28]	; (80082ec <HAL_RCC_GetClockConfig+0x60>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0207 	and.w	r2, r3, #7
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40021000 	.word	0x40021000
 80082ec:	40022000 	.word	0x40022000

080082f0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <HAL_RCC_EnableCSS+0x1c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a04      	ldr	r2, [pc, #16]	; (800830c <HAL_RCC_EnableCSS+0x1c>)
 80082fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082fe:	6013      	str	r3, [r2, #0]
}
 8008300:	bf00      	nop
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40021000 	.word	0x40021000

08008310 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008320:	d105      	bne.n	800832e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008322:	f000 f809 	bl	8008338 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008326:	4b03      	ldr	r3, [pc, #12]	; (8008334 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800832c:	621a      	str	r2, [r3, #32]
  }
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40021000 	.word	0x40021000

08008338 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008354:	4b2a      	ldr	r3, [pc, #168]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008360:	f7ff f924 	bl	80075ac <HAL_PWREx_GetVoltageRange>
 8008364:	6178      	str	r0, [r7, #20]
 8008366:	e014      	b.n	8008392 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800836a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836c:	4a24      	ldr	r2, [pc, #144]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800836e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008372:	6593      	str	r3, [r2, #88]	; 0x58
 8008374:	4b22      	ldr	r3, [pc, #136]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008380:	f7ff f914 	bl	80075ac <HAL_PWREx_GetVoltageRange>
 8008384:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838a:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800838c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008390:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008398:	d10b      	bne.n	80083b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d919      	bls.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2ba0      	cmp	r3, #160	; 0xa0
 80083a4:	d902      	bls.n	80083ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80083a6:	2302      	movs	r3, #2
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	e013      	b.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80083ac:	2301      	movs	r3, #1
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	e010      	b.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b80      	cmp	r3, #128	; 0x80
 80083b6:	d902      	bls.n	80083be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80083b8:	2303      	movs	r3, #3
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	e00a      	b.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d102      	bne.n	80083ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80083c4:	2302      	movs	r3, #2
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e004      	b.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b70      	cmp	r3, #112	; 0x70
 80083ce:	d101      	bne.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80083d0:	2301      	movs	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f023 0207 	bic.w	r2, r3, #7
 80083dc:	4909      	ldr	r1, [pc, #36]	; (8008404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80083e4:	4b07      	ldr	r3, [pc, #28]	; (8008404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d001      	beq.n	80083f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40021000 	.word	0x40021000
 8008404:	40022000 	.word	0x40022000

08008408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008410:	2300      	movs	r3, #0
 8008412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008414:	2300      	movs	r3, #0
 8008416:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008420:	2b00      	cmp	r3, #0
 8008422:	d031      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800842c:	d01a      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800842e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008432:	d814      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800843c:	d10f      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800843e:	4b5d      	ldr	r3, [pc, #372]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	4a5c      	ldr	r2, [pc, #368]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008448:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800844a:	e00c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f9ce 	bl	80087f4 <RCCEx_PLLSAI1_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	74fb      	strb	r3, [r7, #19]
      break;
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008466:	7cfb      	ldrb	r3, [r7, #19]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10b      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800846c:	4b51      	ldr	r3, [pc, #324]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	494e      	ldr	r1, [pc, #312]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008482:	e001      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 809e 	beq.w	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800849a:	4b46      	ldr	r3, [pc, #280]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084b0:	4b40      	ldr	r3, [pc, #256]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80084b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b4:	4a3f      	ldr	r2, [pc, #252]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80084b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ba:	6593      	str	r3, [r2, #88]	; 0x58
 80084bc:	4b3d      	ldr	r3, [pc, #244]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c4:	60bb      	str	r3, [r7, #8]
 80084c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084c8:	2301      	movs	r3, #1
 80084ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084cc:	4b3a      	ldr	r3, [pc, #232]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a39      	ldr	r2, [pc, #228]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80084d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084d8:	f7fb ff5a 	bl	8004390 <HAL_GetTick>
 80084dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084de:	e009      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e0:	f7fb ff56 	bl	8004390 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d902      	bls.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	74fb      	strb	r3, [r7, #19]
        break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084f4:	4b30      	ldr	r3, [pc, #192]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ef      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d15a      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01e      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	429a      	cmp	r2, r3
 8008520:	d019      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008522:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800852e:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008534:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800854e:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d016      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fb ff16 	bl	8004390 <HAL_GetTick>
 8008564:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008566:	e00b      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008568:	f7fb ff12 	bl	8004390 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	f241 3288 	movw	r2, #5000	; 0x1388
 8008576:	4293      	cmp	r3, r2
 8008578:	d902      	bls.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	74fb      	strb	r3, [r7, #19]
            break;
 800857e:	e006      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008580:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0ec      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800858e:	7cfb      	ldrb	r3, [r7, #19]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	4904      	ldr	r1, [pc, #16]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80085aa:	e009      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085ac:	7cfb      	ldrb	r3, [r7, #19]
 80085ae:	74bb      	strb	r3, [r7, #18]
 80085b0:	e006      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80085b2:	bf00      	nop
 80085b4:	40021000 	.word	0x40021000
 80085b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	7cfb      	ldrb	r3, [r7, #19]
 80085be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085c0:	7c7b      	ldrb	r3, [r7, #17]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d105      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085c6:	4b8a      	ldr	r3, [pc, #552]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	4a89      	ldr	r2, [pc, #548]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80085cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085de:	4b84      	ldr	r3, [pc, #528]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e4:	f023 0203 	bic.w	r2, r3, #3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	4980      	ldr	r1, [pc, #512]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008600:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008606:	f023 020c 	bic.w	r2, r3, #12
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	4978      	ldr	r1, [pc, #480]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008622:	4b73      	ldr	r3, [pc, #460]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008628:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	496f      	ldr	r1, [pc, #444]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008644:	4b6a      	ldr	r3, [pc, #424]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	4967      	ldr	r1, [pc, #412]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008666:	4b62      	ldr	r3, [pc, #392]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	495e      	ldr	r1, [pc, #376]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008688:	4b59      	ldr	r3, [pc, #356]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800868a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4956      	ldr	r1, [pc, #344]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008698:	4313      	orrs	r3, r2
 800869a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086aa:	4b51      	ldr	r3, [pc, #324]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	494d      	ldr	r1, [pc, #308]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d028      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086cc:	4b48      	ldr	r3, [pc, #288]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	4945      	ldr	r1, [pc, #276]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ea:	d106      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086ec:	4b40      	ldr	r3, [pc, #256]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	4a3f      	ldr	r2, [pc, #252]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f6:	60d3      	str	r3, [r2, #12]
 80086f8:	e011      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008702:	d10c      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3304      	adds	r3, #4
 8008708:	2101      	movs	r1, #1
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f872 	bl	80087f4 <RCCEx_PLLSAI1_Config>
 8008710:	4603      	mov	r3, r0
 8008712:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008714:	7cfb      	ldrb	r3, [r7, #19]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800871a:	7cfb      	ldrb	r3, [r7, #19]
 800871c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d028      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008738:	492d      	ldr	r1, [pc, #180]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008748:	d106      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800874a:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4a28      	ldr	r2, [pc, #160]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008754:	60d3      	str	r3, [r2, #12]
 8008756:	e011      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008760:	d10c      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	2101      	movs	r1, #1
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f843 	bl	80087f4 <RCCEx_PLLSAI1_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008772:	7cfb      	ldrb	r3, [r7, #19]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008778:	7cfb      	ldrb	r3, [r7, #19]
 800877a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01c      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008788:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800878a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008796:	4916      	ldr	r1, [pc, #88]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008798:	4313      	orrs	r3, r2
 800879a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a6:	d10c      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f820 	bl	80087f4 <RCCEx_PLLSAI1_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80087b8:	7cfb      	ldrb	r3, [r7, #19]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80087be:	7cfb      	ldrb	r3, [r7, #19]
 80087c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087ce:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80087e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40021000 	.word	0x40021000

080087f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008802:	4b74      	ldr	r3, [pc, #464]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d018      	beq.n	8008840 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800880e:	4b71      	ldr	r3, [pc, #452]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f003 0203 	and.w	r2, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d10d      	bne.n	800883a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
       ||
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008826:	4b6b      	ldr	r3, [pc, #428]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	091b      	lsrs	r3, r3, #4
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
       ||
 8008836:	429a      	cmp	r2, r3
 8008838:	d047      	beq.n	80088ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	e044      	b.n	80088ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b03      	cmp	r3, #3
 8008846:	d018      	beq.n	800887a <RCCEx_PLLSAI1_Config+0x86>
 8008848:	2b03      	cmp	r3, #3
 800884a:	d825      	bhi.n	8008898 <RCCEx_PLLSAI1_Config+0xa4>
 800884c:	2b01      	cmp	r3, #1
 800884e:	d002      	beq.n	8008856 <RCCEx_PLLSAI1_Config+0x62>
 8008850:	2b02      	cmp	r3, #2
 8008852:	d009      	beq.n	8008868 <RCCEx_PLLSAI1_Config+0x74>
 8008854:	e020      	b.n	8008898 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008856:	4b5f      	ldr	r3, [pc, #380]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11d      	bne.n	800889e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008866:	e01a      	b.n	800889e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008868:	4b5a      	ldr	r3, [pc, #360]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008870:	2b00      	cmp	r3, #0
 8008872:	d116      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008878:	e013      	b.n	80088a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800887a:	4b56      	ldr	r3, [pc, #344]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10f      	bne.n	80088a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008886:	4b53      	ldr	r3, [pc, #332]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008896:	e006      	b.n	80088a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
      break;
 800889c:	e004      	b.n	80088a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80088a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10d      	bne.n	80088ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80088ae:	4b49      	ldr	r3, [pc, #292]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	3b01      	subs	r3, #1
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	430b      	orrs	r3, r1
 80088c4:	4943      	ldr	r1, [pc, #268]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d17c      	bne.n	80089ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088d0:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a3f      	ldr	r2, [pc, #252]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088dc:	f7fb fd58 	bl	8004390 <HAL_GetTick>
 80088e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088e2:	e009      	b.n	80088f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088e4:	f7fb fd54 	bl	8004390 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d902      	bls.n	80088f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	73fb      	strb	r3, [r7, #15]
        break;
 80088f6:	e005      	b.n	8008904 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088f8:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ef      	bne.n	80088e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d15f      	bne.n	80089ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d110      	bne.n	8008932 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008910:	4b30      	ldr	r3, [pc, #192]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6892      	ldr	r2, [r2, #8]
 8008920:	0211      	lsls	r1, r2, #8
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68d2      	ldr	r2, [r2, #12]
 8008926:	06d2      	lsls	r2, r2, #27
 8008928:	430a      	orrs	r2, r1
 800892a:	492a      	ldr	r1, [pc, #168]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
 8008930:	e027      	b.n	8008982 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d112      	bne.n	800895e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008938:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6892      	ldr	r2, [r2, #8]
 8008948:	0211      	lsls	r1, r2, #8
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6912      	ldr	r2, [r2, #16]
 800894e:	0852      	lsrs	r2, r2, #1
 8008950:	3a01      	subs	r2, #1
 8008952:	0552      	lsls	r2, r2, #21
 8008954:	430a      	orrs	r2, r1
 8008956:	491f      	ldr	r1, [pc, #124]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008958:	4313      	orrs	r3, r2
 800895a:	610b      	str	r3, [r1, #16]
 800895c:	e011      	b.n	8008982 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800895e:	4b1d      	ldr	r3, [pc, #116]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008966:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6892      	ldr	r2, [r2, #8]
 800896e:	0211      	lsls	r1, r2, #8
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6952      	ldr	r2, [r2, #20]
 8008974:	0852      	lsrs	r2, r2, #1
 8008976:	3a01      	subs	r2, #1
 8008978:	0652      	lsls	r2, r2, #25
 800897a:	430a      	orrs	r2, r1
 800897c:	4915      	ldr	r1, [pc, #84]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800897e:	4313      	orrs	r3, r2
 8008980:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008988:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800898c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898e:	f7fb fcff 	bl	8004390 <HAL_GetTick>
 8008992:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008994:	e009      	b.n	80089aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008996:	f7fb fcfb 	bl	8004390 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d902      	bls.n	80089aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	73fb      	strb	r3, [r7, #15]
          break;
 80089a8:	e005      	b.n	80089b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089aa:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0ef      	beq.n	8008996 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	4903      	ldr	r1, [pc, #12]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40021000 	.word	0x40021000

080089d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e049      	b.n	8008a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f841 	bl	8008a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f000 f9dc 	bl	8008dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d001      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e03b      	b.n	8008b2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a19      	ldr	r2, [pc, #100]	; (8008b38 <HAL_TIM_Base_Start_IT+0x9c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIM_Base_Start_IT+0x4e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ade:	d004      	beq.n	8008aea <HAL_TIM_Base_Start_IT+0x4e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <HAL_TIM_Base_Start_IT+0xa0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d115      	bne.n	8008b16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <HAL_TIM_Base_Start_IT+0xa4>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b06      	cmp	r3, #6
 8008afa:	d015      	beq.n	8008b28 <HAL_TIM_Base_Start_IT+0x8c>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b02:	d011      	beq.n	8008b28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f042 0201 	orr.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b14:	e008      	b.n	8008b28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f042 0201 	orr.w	r2, r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e000      	b.n	8008b2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	00010007 	.word	0x00010007

08008b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d122      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d11b      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f06f 0202 	mvn.w	r2, #2
 8008b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f905 	bl	8008d96 <HAL_TIM_IC_CaptureCallback>
 8008b8c:	e005      	b.n	8008b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f8f7 	bl	8008d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f908 	bl	8008daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d122      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d11b      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f06f 0204 	mvn.w	r2, #4
 8008bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f8db 	bl	8008d96 <HAL_TIM_IC_CaptureCallback>
 8008be0:	e005      	b.n	8008bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8cd 	bl	8008d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f8de 	bl	8008daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0308 	and.w	r3, r3, #8
 8008bfe:	2b08      	cmp	r3, #8
 8008c00:	d122      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d11b      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f06f 0208 	mvn.w	r2, #8
 8008c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2204      	movs	r2, #4
 8008c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f8b1 	bl	8008d96 <HAL_TIM_IC_CaptureCallback>
 8008c34:	e005      	b.n	8008c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f8a3 	bl	8008d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f8b4 	bl	8008daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0310 	and.w	r3, r3, #16
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d122      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d11b      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f06f 0210 	mvn.w	r2, #16
 8008c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2208      	movs	r2, #8
 8008c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f887 	bl	8008d96 <HAL_TIM_IC_CaptureCallback>
 8008c88:	e005      	b.n	8008c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f879 	bl	8008d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f88a 	bl	8008daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d10e      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d107      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0201 	mvn.w	r2, #1
 8008cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7f9 face 	bl	8002264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d10e      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8de 	bl	8008eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d02:	d10e      	bne.n	8008d22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b80      	cmp	r3, #128	; 0x80
 8008d10:	d107      	bne.n	8008d22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8d1 	bl	8008ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d10e      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d107      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f838 	bl	8008dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0320 	and.w	r3, r3, #32
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d10e      	bne.n	8008d7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d107      	bne.n	8008d7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f06f 0220 	mvn.w	r2, #32
 8008d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f891 	bl	8008e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
	...

08008dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2a      	ldr	r2, [pc, #168]	; (8008e90 <TIM_Base_SetConfig+0xbc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_Base_SetConfig+0x20>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df2:	d108      	bne.n	8008e06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a21      	ldr	r2, [pc, #132]	; (8008e90 <TIM_Base_SetConfig+0xbc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00b      	beq.n	8008e26 <TIM_Base_SetConfig+0x52>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e14:	d007      	beq.n	8008e26 <TIM_Base_SetConfig+0x52>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <TIM_Base_SetConfig+0xc0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_Base_SetConfig+0x52>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <TIM_Base_SetConfig+0xc4>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d108      	bne.n	8008e38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a0c      	ldr	r2, [pc, #48]	; (8008e90 <TIM_Base_SetConfig+0xbc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d007      	beq.n	8008e74 <TIM_Base_SetConfig+0xa0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a0b      	ldr	r2, [pc, #44]	; (8008e94 <TIM_Base_SetConfig+0xc0>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d003      	beq.n	8008e74 <TIM_Base_SetConfig+0xa0>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a0a      	ldr	r2, [pc, #40]	; (8008e98 <TIM_Base_SetConfig+0xc4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d103      	bne.n	8008e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	691a      	ldr	r2, [r3, #16]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	615a      	str	r2, [r3, #20]
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40012c00 	.word	0x40012c00
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400

08008e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e040      	b.n	8008f6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7f9 fea4 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2224      	movs	r2, #36	; 0x24
 8008f04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0201 	bic.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f8c0 	bl	800909c <UART_SetConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d101      	bne.n	8008f26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e022      	b.n	8008f6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fae0 	bl	80094f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fb67 	bl	8009638 <UART_CheckIdleState>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	f040 8082 	bne.w	8009092 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <HAL_UART_Transmit+0x26>
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e07a      	b.n	8009094 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <HAL_UART_Transmit+0x38>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e073      	b.n	8009094 <HAL_UART_Transmit+0x120>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2221      	movs	r2, #33	; 0x21
 8008fc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fc2:	f7fb f9e5 	bl	8004390 <HAL_GetTick>
 8008fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	88fa      	ldrh	r2, [r7, #6]
 8008fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe0:	d108      	bne.n	8008ff4 <HAL_UART_Transmit+0x80>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	e003      	b.n	8008ffc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009004:	e02d      	b.n	8009062 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	2180      	movs	r1, #128	; 0x80
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fb5a 	bl	80096ca <UART_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e039      	b.n	8009094 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	881a      	ldrh	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009032:	b292      	uxth	r2, r2
 8009034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	3302      	adds	r3, #2
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e008      	b.n	8009050 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	b292      	uxth	r2, r2
 8009048:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3301      	adds	r3, #1
 800904e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1cb      	bne.n	8009006 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2200      	movs	r2, #0
 8009076:	2140      	movs	r1, #64	; 0x40
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fb26 	bl	80096ca <UART_WaitOnFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e005      	b.n	8009094 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	e000      	b.n	8009094 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009092:	2302      	movs	r3, #2
  }
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800909c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090a0:	b08a      	sub	sp, #40	; 0x28
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4bb4      	ldr	r3, [pc, #720]	; (800939c <UART_SetConfig+0x300>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	6812      	ldr	r2, [r2, #0]
 80090d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d4:	430b      	orrs	r3, r1
 80090d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4aa9      	ldr	r2, [pc, #676]	; (80093a0 <UART_SetConfig+0x304>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009104:	4313      	orrs	r3, r2
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009118:	430a      	orrs	r2, r1
 800911a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4aa0      	ldr	r2, [pc, #640]	; (80093a4 <UART_SetConfig+0x308>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d126      	bne.n	8009174 <UART_SetConfig+0xd8>
 8009126:	4ba0      	ldr	r3, [pc, #640]	; (80093a8 <UART_SetConfig+0x30c>)
 8009128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	2b03      	cmp	r3, #3
 8009132:	d81b      	bhi.n	800916c <UART_SetConfig+0xd0>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <UART_SetConfig+0xa0>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	0800914d 	.word	0x0800914d
 8009140:	0800915d 	.word	0x0800915d
 8009144:	08009155 	.word	0x08009155
 8009148:	08009165 	.word	0x08009165
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009152:	e080      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009154:	2302      	movs	r3, #2
 8009156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800915a:	e07c      	b.n	8009256 <UART_SetConfig+0x1ba>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009162:	e078      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800916a:	e074      	b.n	8009256 <UART_SetConfig+0x1ba>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009172:	e070      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a8c      	ldr	r2, [pc, #560]	; (80093ac <UART_SetConfig+0x310>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d138      	bne.n	80091f0 <UART_SetConfig+0x154>
 800917e:	4b8a      	ldr	r3, [pc, #552]	; (80093a8 <UART_SetConfig+0x30c>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009184:	f003 030c 	and.w	r3, r3, #12
 8009188:	2b0c      	cmp	r3, #12
 800918a:	d82d      	bhi.n	80091e8 <UART_SetConfig+0x14c>
 800918c:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <UART_SetConfig+0xf8>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091c9 	.word	0x080091c9
 8009198:	080091e9 	.word	0x080091e9
 800919c:	080091e9 	.word	0x080091e9
 80091a0:	080091e9 	.word	0x080091e9
 80091a4:	080091d9 	.word	0x080091d9
 80091a8:	080091e9 	.word	0x080091e9
 80091ac:	080091e9 	.word	0x080091e9
 80091b0:	080091e9 	.word	0x080091e9
 80091b4:	080091d1 	.word	0x080091d1
 80091b8:	080091e9 	.word	0x080091e9
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ce:	e042      	b.n	8009256 <UART_SetConfig+0x1ba>
 80091d0:	2302      	movs	r3, #2
 80091d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091d6:	e03e      	b.n	8009256 <UART_SetConfig+0x1ba>
 80091d8:	2304      	movs	r3, #4
 80091da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091de:	e03a      	b.n	8009256 <UART_SetConfig+0x1ba>
 80091e0:	2308      	movs	r3, #8
 80091e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091e6:	e036      	b.n	8009256 <UART_SetConfig+0x1ba>
 80091e8:	2310      	movs	r3, #16
 80091ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ee:	e032      	b.n	8009256 <UART_SetConfig+0x1ba>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a6a      	ldr	r2, [pc, #424]	; (80093a0 <UART_SetConfig+0x304>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d12a      	bne.n	8009250 <UART_SetConfig+0x1b4>
 80091fa:	4b6b      	ldr	r3, [pc, #428]	; (80093a8 <UART_SetConfig+0x30c>)
 80091fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009200:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009208:	d01a      	beq.n	8009240 <UART_SetConfig+0x1a4>
 800920a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800920e:	d81b      	bhi.n	8009248 <UART_SetConfig+0x1ac>
 8009210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009214:	d00c      	beq.n	8009230 <UART_SetConfig+0x194>
 8009216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800921a:	d815      	bhi.n	8009248 <UART_SetConfig+0x1ac>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <UART_SetConfig+0x18c>
 8009220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009224:	d008      	beq.n	8009238 <UART_SetConfig+0x19c>
 8009226:	e00f      	b.n	8009248 <UART_SetConfig+0x1ac>
 8009228:	2300      	movs	r3, #0
 800922a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800922e:	e012      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009230:	2302      	movs	r3, #2
 8009232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009236:	e00e      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009238:	2304      	movs	r3, #4
 800923a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800923e:	e00a      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009240:	2308      	movs	r3, #8
 8009242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009246:	e006      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009248:	2310      	movs	r3, #16
 800924a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800924e:	e002      	b.n	8009256 <UART_SetConfig+0x1ba>
 8009250:	2310      	movs	r3, #16
 8009252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a51      	ldr	r2, [pc, #324]	; (80093a0 <UART_SetConfig+0x304>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d17a      	bne.n	8009356 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009264:	2b08      	cmp	r3, #8
 8009266:	d824      	bhi.n	80092b2 <UART_SetConfig+0x216>
 8009268:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0x1d4>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	08009295 	.word	0x08009295
 8009274:	080092b3 	.word	0x080092b3
 8009278:	0800929d 	.word	0x0800929d
 800927c:	080092b3 	.word	0x080092b3
 8009280:	080092a3 	.word	0x080092a3
 8009284:	080092b3 	.word	0x080092b3
 8009288:	080092b3 	.word	0x080092b3
 800928c:	080092b3 	.word	0x080092b3
 8009290:	080092ab 	.word	0x080092ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009294:	f7fe ffce 	bl	8008234 <HAL_RCC_GetPCLK1Freq>
 8009298:	61f8      	str	r0, [r7, #28]
        break;
 800929a:	e010      	b.n	80092be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800929c:	4b44      	ldr	r3, [pc, #272]	; (80093b0 <UART_SetConfig+0x314>)
 800929e:	61fb      	str	r3, [r7, #28]
        break;
 80092a0:	e00d      	b.n	80092be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092a2:	f7fe ff2f 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 80092a6:	61f8      	str	r0, [r7, #28]
        break;
 80092a8:	e009      	b.n	80092be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ae:	61fb      	str	r3, [r7, #28]
        break;
 80092b0:	e005      	b.n	80092be <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80092bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8107 	beq.w	80094d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d305      	bcc.n	80092e2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d903      	bls.n	80092ea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092e8:	e0f4      	b.n	80094d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	2200      	movs	r2, #0
 80092ee:	461c      	mov	r4, r3
 80092f0:	4615      	mov	r5, r2
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	022b      	lsls	r3, r5, #8
 80092fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009300:	0222      	lsls	r2, r4, #8
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6849      	ldr	r1, [r1, #4]
 8009306:	0849      	lsrs	r1, r1, #1
 8009308:	2000      	movs	r0, #0
 800930a:	4688      	mov	r8, r1
 800930c:	4681      	mov	r9, r0
 800930e:	eb12 0a08 	adds.w	sl, r2, r8
 8009312:	eb43 0b09 	adc.w	fp, r3, r9
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009324:	4650      	mov	r0, sl
 8009326:	4659      	mov	r1, fp
 8009328:	f7f7 fcde 	bl	8000ce8 <__aeabi_uldivmod>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4613      	mov	r3, r2
 8009332:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800933a:	d308      	bcc.n	800934e <UART_SetConfig+0x2b2>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009342:	d204      	bcs.n	800934e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	60da      	str	r2, [r3, #12]
 800934c:	e0c2      	b.n	80094d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009354:	e0be      	b.n	80094d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935e:	d16a      	bne.n	8009436 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009364:	2b08      	cmp	r3, #8
 8009366:	d834      	bhi.n	80093d2 <UART_SetConfig+0x336>
 8009368:	a201      	add	r2, pc, #4	; (adr r2, 8009370 <UART_SetConfig+0x2d4>)
 800936a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936e:	bf00      	nop
 8009370:	08009395 	.word	0x08009395
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093bd 	.word	0x080093bd
 800937c:	080093d3 	.word	0x080093d3
 8009380:	080093c3 	.word	0x080093c3
 8009384:	080093d3 	.word	0x080093d3
 8009388:	080093d3 	.word	0x080093d3
 800938c:	080093d3 	.word	0x080093d3
 8009390:	080093cb 	.word	0x080093cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009394:	f7fe ff4e 	bl	8008234 <HAL_RCC_GetPCLK1Freq>
 8009398:	61f8      	str	r0, [r7, #28]
        break;
 800939a:	e020      	b.n	80093de <UART_SetConfig+0x342>
 800939c:	efff69f3 	.word	0xefff69f3
 80093a0:	40008000 	.word	0x40008000
 80093a4:	40013800 	.word	0x40013800
 80093a8:	40021000 	.word	0x40021000
 80093ac:	40004400 	.word	0x40004400
 80093b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b4:	f7fe ff54 	bl	8008260 <HAL_RCC_GetPCLK2Freq>
 80093b8:	61f8      	str	r0, [r7, #28]
        break;
 80093ba:	e010      	b.n	80093de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093bc:	4b4c      	ldr	r3, [pc, #304]	; (80094f0 <UART_SetConfig+0x454>)
 80093be:	61fb      	str	r3, [r7, #28]
        break;
 80093c0:	e00d      	b.n	80093de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093c2:	f7fe fe9f 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 80093c6:	61f8      	str	r0, [r7, #28]
        break;
 80093c8:	e009      	b.n	80093de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ce:	61fb      	str	r3, [r7, #28]
        break;
 80093d0:	e005      	b.n	80093de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80093dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d077      	beq.n	80094d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	005a      	lsls	r2, r3, #1
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	085b      	lsrs	r3, r3, #1
 80093ee:	441a      	add	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b0f      	cmp	r3, #15
 80093fe:	d916      	bls.n	800942e <UART_SetConfig+0x392>
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009406:	d212      	bcs.n	800942e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f023 030f 	bic.w	r3, r3, #15
 8009410:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	b29b      	uxth	r3, r3
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	b29a      	uxth	r2, r3
 800941e:	8afb      	ldrh	r3, [r7, #22]
 8009420:	4313      	orrs	r3, r2
 8009422:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	8afa      	ldrh	r2, [r7, #22]
 800942a:	60da      	str	r2, [r3, #12]
 800942c:	e052      	b.n	80094d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009434:	e04e      	b.n	80094d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800943a:	2b08      	cmp	r3, #8
 800943c:	d827      	bhi.n	800948e <UART_SetConfig+0x3f2>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <UART_SetConfig+0x3a8>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009469 	.word	0x08009469
 8009448:	08009471 	.word	0x08009471
 800944c:	08009479 	.word	0x08009479
 8009450:	0800948f 	.word	0x0800948f
 8009454:	0800947f 	.word	0x0800947f
 8009458:	0800948f 	.word	0x0800948f
 800945c:	0800948f 	.word	0x0800948f
 8009460:	0800948f 	.word	0x0800948f
 8009464:	08009487 	.word	0x08009487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009468:	f7fe fee4 	bl	8008234 <HAL_RCC_GetPCLK1Freq>
 800946c:	61f8      	str	r0, [r7, #28]
        break;
 800946e:	e014      	b.n	800949a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009470:	f7fe fef6 	bl	8008260 <HAL_RCC_GetPCLK2Freq>
 8009474:	61f8      	str	r0, [r7, #28]
        break;
 8009476:	e010      	b.n	800949a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009478:	4b1d      	ldr	r3, [pc, #116]	; (80094f0 <UART_SetConfig+0x454>)
 800947a:	61fb      	str	r3, [r7, #28]
        break;
 800947c:	e00d      	b.n	800949a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800947e:	f7fe fe41 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 8009482:	61f8      	str	r0, [r7, #28]
        break;
 8009484:	e009      	b.n	800949a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948a:	61fb      	str	r3, [r7, #28]
        break;
 800948c:	e005      	b.n	800949a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009498:	bf00      	nop
    }

    if (pclk != 0U)
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d019      	beq.n	80094d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	085a      	lsrs	r2, r3, #1
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	441a      	add	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	2b0f      	cmp	r3, #15
 80094b8:	d909      	bls.n	80094ce <UART_SetConfig+0x432>
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c0:	d205      	bcs.n	80094ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60da      	str	r2, [r3, #12]
 80094cc:	e002      	b.n	80094d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80094e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3728      	adds	r7, #40	; 0x28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094ee:	bf00      	nop
 80094f0:	00f42400 	.word	0x00f42400

080094f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01a      	beq.n	800960a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095f2:	d10a      	bne.n	800960a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009648:	f7fa fea2 	bl	8004390 <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b08      	cmp	r3, #8
 800965a:	d10e      	bne.n	800967a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800965c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f82d 	bl	80096ca <UART_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e023      	b.n	80096c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d10e      	bne.n	80096a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f817 	bl	80096ca <UART_WaitOnFlagUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e00d      	b.n	80096c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2220      	movs	r2, #32
 80096b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b09c      	sub	sp, #112	; 0x70
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	603b      	str	r3, [r7, #0]
 80096d6:	4613      	mov	r3, r2
 80096d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096da:	e0a5      	b.n	8009828 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	f000 80a1 	beq.w	8009828 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e6:	f7fa fe53 	bl	8004390 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d302      	bcc.n	80096fc <UART_WaitOnFlagUntilTimeout+0x32>
 80096f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d13e      	bne.n	800977a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800970a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009710:	667b      	str	r3, [r7, #100]	; 0x64
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800971a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800971c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	663b      	str	r3, [r7, #96]	; 0x60
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3308      	adds	r3, #8
 800974c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800974e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800975c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e5      	bne.n	800972e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e067      	b.n	800984a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d04f      	beq.n	8009828 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009796:	d147      	bne.n	8009828 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
 80097c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e6      	bne.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3308      	adds	r3, #8
 80097da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	613b      	str	r3, [r7, #16]
   return(result);
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f023 0301 	bic.w	r3, r3, #1
 80097ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097f4:	623a      	str	r2, [r7, #32]
 80097f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	69f9      	ldr	r1, [r7, #28]
 80097fa:	6a3a      	ldr	r2, [r7, #32]
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	61bb      	str	r3, [r7, #24]
   return(result);
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e5      	bne.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2220      	movs	r2, #32
 800980c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e010      	b.n	800984a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69da      	ldr	r2, [r3, #28]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4013      	ands	r3, r2
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	429a      	cmp	r2, r3
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	429a      	cmp	r2, r3
 8009844:	f43f af4a 	beq.w	80096dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3770      	adds	r7, #112	; 0x70
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <__NVIC_SetPriority>:
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009864:	2b00      	cmp	r3, #0
 8009866:	db0a      	blt.n	800987e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	490c      	ldr	r1, [pc, #48]	; (80098a0 <__NVIC_SetPriority+0x4c>)
 800986e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009872:	0112      	lsls	r2, r2, #4
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	440b      	add	r3, r1
 8009878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800987c:	e00a      	b.n	8009894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	4908      	ldr	r1, [pc, #32]	; (80098a4 <__NVIC_SetPriority+0x50>)
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	3b04      	subs	r3, #4
 800988c:	0112      	lsls	r2, r2, #4
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	440b      	add	r3, r1
 8009892:	761a      	strb	r2, [r3, #24]
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	e000e100 	.word	0xe000e100
 80098a4:	e000ed00 	.word	0xe000ed00

080098a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <SysTick_Handler+0x1c>)
 80098ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098b0:	f002 fbf0 	bl	800c094 <xTaskGetSchedulerState>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d001      	beq.n	80098be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098ba:	f003 fad5 	bl	800ce68 <xPortSysTickHandler>
  }
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	e000e010 	.word	0xe000e010

080098c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098cc:	2100      	movs	r1, #0
 80098ce:	f06f 0004 	mvn.w	r0, #4
 80098d2:	f7ff ffbf 	bl	8009854 <__NVIC_SetPriority>
#endif
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e2:	f3ef 8305 	mrs	r3, IPSR
 80098e6:	603b      	str	r3, [r7, #0]
  return(result);
 80098e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098ee:	f06f 0305 	mvn.w	r3, #5
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e00c      	b.n	8009910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098f6:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <osKernelInitialize+0x44>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d105      	bne.n	800990a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <osKernelInitialize+0x44>)
 8009900:	2201      	movs	r2, #1
 8009902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009904:	2300      	movs	r3, #0
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	e002      	b.n	8009910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800990a:	f04f 33ff 	mov.w	r3, #4294967295
 800990e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009910:	687b      	ldr	r3, [r7, #4]
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	20002440 	.word	0x20002440

08009924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992a:	f3ef 8305 	mrs	r3, IPSR
 800992e:	603b      	str	r3, [r7, #0]
  return(result);
 8009930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009936:	f06f 0305 	mvn.w	r3, #5
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	e010      	b.n	8009960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800993e:	4b0b      	ldr	r3, [pc, #44]	; (800996c <osKernelStart+0x48>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d109      	bne.n	800995a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009946:	f7ff ffbf 	bl	80098c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800994a:	4b08      	ldr	r3, [pc, #32]	; (800996c <osKernelStart+0x48>)
 800994c:	2202      	movs	r2, #2
 800994e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009950:	f001 ff24 	bl	800b79c <vTaskStartScheduler>
      stat = osOK;
 8009954:	2300      	movs	r3, #0
 8009956:	607b      	str	r3, [r7, #4]
 8009958:	e002      	b.n	8009960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009960:	687b      	ldr	r3, [r7, #4]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20002440 	.word	0x20002440

08009970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	; 0x38
 8009974:	af04      	add	r7, sp, #16
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009980:	f3ef 8305 	mrs	r3, IPSR
 8009984:	617b      	str	r3, [r7, #20]
  return(result);
 8009986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009988:	2b00      	cmp	r3, #0
 800998a:	d17e      	bne.n	8009a8a <osThreadNew+0x11a>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d07b      	beq.n	8009a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009992:	2380      	movs	r3, #128	; 0x80
 8009994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009996:	2318      	movs	r3, #24
 8009998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d045      	beq.n	8009a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <osThreadNew+0x48>
        name = attr->name;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <osThreadNew+0x6e>
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2b38      	cmp	r3, #56	; 0x38
 80099d0:	d805      	bhi.n	80099de <osThreadNew+0x6e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <osThreadNew+0x72>
        return (NULL);
 80099de:	2300      	movs	r3, #0
 80099e0:	e054      	b.n	8009a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	089b      	lsrs	r3, r3, #2
 80099f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <osThreadNew+0xa8>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	2b5b      	cmp	r3, #91	; 0x5b
 8009a00:	d90a      	bls.n	8009a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <osThreadNew+0xa8>
        mem = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	e010      	b.n	8009a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10c      	bne.n	8009a3a <osThreadNew+0xca>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <osThreadNew+0xca>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <osThreadNew+0xca>
          mem = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61bb      	str	r3, [r7, #24]
 8009a34:	e001      	b.n	8009a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d110      	bne.n	8009a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a48:	9202      	str	r2, [sp, #8]
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f001 fcca 	bl	800b3f0 <xTaskCreateStatic>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	e013      	b.n	8009a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d110      	bne.n	8009a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	f107 0310 	add.w	r3, r7, #16
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f001 fd15 	bl	800b4aa <xTaskCreate>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d001      	beq.n	8009a8a <osThreadNew+0x11a>
            hTask = NULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a8a:	693b      	ldr	r3, [r7, #16]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3728      	adds	r7, #40	; 0x28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a9c:	f3ef 8305 	mrs	r3, IPSR
 8009aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <osDelay+0x1c>
    stat = osErrorISR;
 8009aa8:	f06f 0305 	mvn.w	r3, #5
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	e007      	b.n	8009ac0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 fe3a 	bl	800b734 <vTaskDelay>
    }
  }

  return (stat);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b088      	sub	sp, #32
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad6:	f3ef 8305 	mrs	r3, IPSR
 8009ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8009adc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d174      	bne.n	8009bcc <osMutexNew+0x102>
    if (attr != NULL) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	e001      	b.n	8009af4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <osMutexNew+0x3a>
      rmtx = 1U;
 8009afe:	2301      	movs	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e001      	b.n	8009b08 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f003 0308 	and.w	r3, r3, #8
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d15c      	bne.n	8009bcc <osMutexNew+0x102>
      mem = -1;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d015      	beq.n	8009b4a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <osMutexNew+0x6a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8009b2c:	d902      	bls.n	8009b34 <osMutexNew+0x6a>
          mem = 1;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	613b      	str	r3, [r7, #16]
 8009b32:	e00c      	b.n	8009b4e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d108      	bne.n	8009b4e <osMutexNew+0x84>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d104      	bne.n	8009b4e <osMutexNew+0x84>
            mem = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	e001      	b.n	8009b4e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d112      	bne.n	8009b7a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	2004      	movs	r0, #4
 8009b62:	f000 fd5a 	bl	800a61a <xQueueCreateMutexStatic>
 8009b66:	61f8      	str	r0, [r7, #28]
 8009b68:	e016      	b.n	8009b98 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	2001      	movs	r0, #1
 8009b72:	f000 fd52 	bl	800a61a <xQueueCreateMutexStatic>
 8009b76:	61f8      	str	r0, [r7, #28]
 8009b78:	e00e      	b.n	8009b98 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009b86:	2004      	movs	r0, #4
 8009b88:	f000 fd2f 	bl	800a5ea <xQueueCreateMutex>
 8009b8c:	61f8      	str	r0, [r7, #28]
 8009b8e:	e003      	b.n	8009b98 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009b90:	2001      	movs	r0, #1
 8009b92:	f000 fd2a 	bl	800a5ea <xQueueCreateMutex>
 8009b96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <osMutexNew+0xee>
        if (attr != NULL) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <osMutexNew+0xe2>
          name = attr->name;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e001      	b.n	8009bb0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009bb0:	68f9      	ldr	r1, [r7, #12]
 8009bb2:	69f8      	ldr	r0, [r7, #28]
 8009bb4:	f001 fb94 	bl	800b2e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d006      	beq.n	8009bcc <osMutexNew+0x102>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f043 0301 	orr.w	r3, r3, #1
 8009bca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b086      	sub	sp, #24
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f023 0301 	bic.w	r3, r3, #1
 8009be6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf4:	f3ef 8305 	mrs	r3, IPSR
 8009bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bfa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009c00:	f06f 0305 	mvn.w	r3, #5
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e02c      	b.n	8009c62 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d103      	bne.n	8009c16 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009c0e:	f06f 0303 	mvn.w	r3, #3
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	e025      	b.n	8009c62 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d011      	beq.n	8009c40 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6938      	ldr	r0, [r7, #16]
 8009c20:	f000 fd4a 	bl	800a6b8 <xQueueTakeMutexRecursive>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d01b      	beq.n	8009c62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009c30:	f06f 0301 	mvn.w	r3, #1
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	e014      	b.n	8009c62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009c38:	f06f 0302 	mvn.w	r3, #2
 8009c3c:	617b      	str	r3, [r7, #20]
 8009c3e:	e010      	b.n	8009c62 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6938      	ldr	r0, [r7, #16]
 8009c44:	f001 f852 	bl	800acec <xQueueSemaphoreTake>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d009      	beq.n	8009c62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009c54:	f06f 0301 	mvn.w	r3, #1
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	e002      	b.n	8009c62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009c5c:	f06f 0302 	mvn.w	r3, #2
 8009c60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009c62:	697b      	ldr	r3, [r7, #20]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f023 0301 	bic.w	r3, r3, #1
 8009c7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c88:	f3ef 8305 	mrs	r3, IPSR
 8009c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <osMutexRelease+0x30>
    stat = osErrorISR;
 8009c94:	f06f 0305 	mvn.w	r3, #5
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e01f      	b.n	8009cdc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009ca2:	f06f 0303 	mvn.w	r3, #3
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e018      	b.n	8009cdc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d009      	beq.n	8009cc4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009cb0:	6938      	ldr	r0, [r7, #16]
 8009cb2:	f000 fccd 	bl	800a650 <xQueueGiveMutexRecursive>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d00f      	beq.n	8009cdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8009cbc:	f06f 0302 	mvn.w	r3, #2
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e00b      	b.n	8009cdc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2100      	movs	r1, #0
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f000 fd94 	bl	800a7f8 <xQueueGenericSend>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d002      	beq.n	8009cdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8009cd6:	f06f 0302 	mvn.w	r3, #2
 8009cda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009cdc:	697b      	ldr	r3, [r7, #20]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b08a      	sub	sp, #40	; 0x28
 8009cea:	af02      	add	r7, sp, #8
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cf6:	f3ef 8305 	mrs	r3, IPSR
 8009cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8009cfc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d175      	bne.n	8009dee <osSemaphoreNew+0x108>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d072      	beq.n	8009dee <osSemaphoreNew+0x108>
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d86e      	bhi.n	8009dee <osSemaphoreNew+0x108>
    mem = -1;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d015      	beq.n	8009d48 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <osSemaphoreNew+0x4c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	2b4f      	cmp	r3, #79	; 0x4f
 8009d2a:	d902      	bls.n	8009d32 <osSemaphoreNew+0x4c>
        mem = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	61bb      	str	r3, [r7, #24]
 8009d30:	e00c      	b.n	8009d4c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d108      	bne.n	8009d4c <osSemaphoreNew+0x66>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d104      	bne.n	8009d4c <osSemaphoreNew+0x66>
          mem = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61bb      	str	r3, [r7, #24]
 8009d46:	e001      	b.n	8009d4c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d52:	d04c      	beq.n	8009dee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d128      	bne.n	8009dac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d10a      	bne.n	8009d76 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2203      	movs	r2, #3
 8009d66:	9200      	str	r2, [sp, #0]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f000 fb4d 	bl	800a40c <xQueueGenericCreateStatic>
 8009d72:	61f8      	str	r0, [r7, #28]
 8009d74:	e005      	b.n	8009d82 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d76:	2203      	movs	r2, #3
 8009d78:	2100      	movs	r1, #0
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	f000 fbbe 	bl	800a4fc <xQueueGenericCreate>
 8009d80:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d022      	beq.n	8009dce <osSemaphoreNew+0xe8>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01f      	beq.n	8009dce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2200      	movs	r2, #0
 8009d92:	2100      	movs	r1, #0
 8009d94:	69f8      	ldr	r0, [r7, #28]
 8009d96:	f000 fd2f 	bl	800a7f8 <xQueueGenericSend>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d016      	beq.n	8009dce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009da0:	69f8      	ldr	r0, [r7, #28]
 8009da2:	f001 f952 	bl	800b04a <vQueueDelete>
            hSemaphore = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	e010      	b.n	8009dce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d108      	bne.n	8009dc4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fcb2 	bl	800a724 <xQueueCreateCountingSemaphoreStatic>
 8009dc0:	61f8      	str	r0, [r7, #28]
 8009dc2:	e004      	b.n	8009dce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 fce3 	bl	800a792 <xQueueCreateCountingSemaphore>
 8009dcc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00c      	beq.n	8009dee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	617b      	str	r3, [r7, #20]
 8009de0:	e001      	b.n	8009de6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009de6:	6979      	ldr	r1, [r7, #20]
 8009de8:	69f8      	ldr	r0, [r7, #28]
 8009dea:	f001 fa79 	bl	800b2e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009dee:	69fb      	ldr	r3, [r7, #28]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3720      	adds	r7, #32
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009e10:	f06f 0303 	mvn.w	r3, #3
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	e039      	b.n	8009e8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e18:	f3ef 8305 	mrs	r3, IPSR
 8009e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d022      	beq.n	8009e6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009e2a:	f06f 0303 	mvn.w	r3, #3
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e02c      	b.n	8009e8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6938      	ldr	r0, [r7, #16]
 8009e40:	f001 f860 	bl	800af04 <xQueueReceiveFromISR>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d003      	beq.n	8009e52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009e4a:	f06f 0302 	mvn.w	r3, #2
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	e01c      	b.n	8009e8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d019      	beq.n	8009e8c <osSemaphoreAcquire+0x94>
 8009e58:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <osSemaphoreAcquire+0xa0>)
 8009e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	e010      	b.n	8009e8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6938      	ldr	r0, [r7, #16]
 8009e6e:	f000 ff3d 	bl	800acec <xQueueSemaphoreTake>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d009      	beq.n	8009e8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009e7e:	f06f 0301 	mvn.w	r3, #1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e002      	b.n	8009e8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009e86:	f06f 0302 	mvn.w	r3, #2
 8009e8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e8c:	697b      	ldr	r3, [r7, #20]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	; 0x28
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eac:	f3ef 8305 	mrs	r3, IPSR
 8009eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8009eb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d15f      	bne.n	8009f78 <osMessageQueueNew+0xdc>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d05c      	beq.n	8009f78 <osMessageQueueNew+0xdc>
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d059      	beq.n	8009f78 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d029      	beq.n	8009f24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d012      	beq.n	8009efe <osMessageQueueNew+0x62>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	2b4f      	cmp	r3, #79	; 0x4f
 8009ede:	d90e      	bls.n	8009efe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00a      	beq.n	8009efe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	695a      	ldr	r2, [r3, #20]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	fb01 f303 	mul.w	r3, r1, r3
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d302      	bcc.n	8009efe <osMessageQueueNew+0x62>
        mem = 1;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	e014      	b.n	8009f28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d110      	bne.n	8009f28 <osMessageQueueNew+0x8c>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10c      	bne.n	8009f28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d108      	bne.n	8009f28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <osMessageQueueNew+0x8c>
          mem = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	e001      	b.n	8009f28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10b      	bne.n	8009f46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	2100      	movs	r1, #0
 8009f38:	9100      	str	r1, [sp, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fa65 	bl	800a40c <xQueueGenericCreateStatic>
 8009f42:	61f8      	str	r0, [r7, #28]
 8009f44:	e008      	b.n	8009f58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	68b9      	ldr	r1, [r7, #8]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fad3 	bl	800a4fc <xQueueGenericCreate>
 8009f56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00c      	beq.n	8009f78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	617b      	str	r3, [r7, #20]
 8009f6a:	e001      	b.n	8009f70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009f70:	6979      	ldr	r1, [r7, #20]
 8009f72:	69f8      	ldr	r0, [r7, #28]
 8009f74:	f001 f9b4 	bl	800b2e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009f78:	69fb      	ldr	r3, [r7, #28]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	4613      	mov	r3, r2
 8009f92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f9c:	f3ef 8305 	mrs	r3, IPSR
 8009fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8009fa2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d028      	beq.n	8009ffa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <osMessageQueuePut+0x36>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <osMessageQueuePut+0x36>
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009fba:	f06f 0303 	mvn.w	r3, #3
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	e038      	b.n	800a034 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009fc6:	f107 0210 	add.w	r2, r7, #16
 8009fca:	2300      	movs	r3, #0
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	69b8      	ldr	r0, [r7, #24]
 8009fd0:	f000 fd10 	bl	800a9f4 <xQueueGenericSendFromISR>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d003      	beq.n	8009fe2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009fda:	f06f 0302 	mvn.w	r3, #2
 8009fde:	61fb      	str	r3, [r7, #28]
 8009fe0:	e028      	b.n	800a034 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d025      	beq.n	800a034 <osMessageQueuePut+0xb0>
 8009fe8:	4b15      	ldr	r3, [pc, #84]	; (800a040 <osMessageQueuePut+0xbc>)
 8009fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	e01c      	b.n	800a034 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <osMessageQueuePut+0x82>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a006:	f06f 0303 	mvn.w	r3, #3
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e012      	b.n	800a034 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a00e:	2300      	movs	r3, #0
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	69b8      	ldr	r0, [r7, #24]
 800a016:	f000 fbef 	bl	800a7f8 <xQueueGenericSend>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d009      	beq.n	800a034 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a026:	f06f 0301 	mvn.w	r3, #1
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	e002      	b.n	800a034 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a02e:	f06f 0302 	mvn.w	r3, #2
 800a032:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a034:	69fb      	ldr	r3, [r7, #28]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a056:	2300      	movs	r3, #0
 800a058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a05a:	f3ef 8305 	mrs	r3, IPSR
 800a05e:	617b      	str	r3, [r7, #20]
  return(result);
 800a060:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a062:	2b00      	cmp	r3, #0
 800a064:	d028      	beq.n	800a0b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <osMessageQueueGet+0x34>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <osMessageQueueGet+0x34>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a078:	f06f 0303 	mvn.w	r3, #3
 800a07c:	61fb      	str	r3, [r7, #28]
 800a07e:	e037      	b.n	800a0f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a084:	f107 0310 	add.w	r3, r7, #16
 800a088:	461a      	mov	r2, r3
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	69b8      	ldr	r0, [r7, #24]
 800a08e:	f000 ff39 	bl	800af04 <xQueueReceiveFromISR>
 800a092:	4603      	mov	r3, r0
 800a094:	2b01      	cmp	r3, #1
 800a096:	d003      	beq.n	800a0a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a098:	f06f 0302 	mvn.w	r3, #2
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	e027      	b.n	800a0f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d024      	beq.n	800a0f0 <osMessageQueueGet+0xac>
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <osMessageQueueGet+0xb8>)
 800a0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	e01b      	b.n	800a0f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <osMessageQueueGet+0x80>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d103      	bne.n	800a0cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a0c4:	f06f 0303 	mvn.w	r3, #3
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e011      	b.n	800a0f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	69b8      	ldr	r0, [r7, #24]
 800a0d2:	f000 fd2b 	bl	800ab2c <xQueueReceive>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d009      	beq.n	800a0f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a0e2:	f06f 0301 	mvn.w	r3, #1
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	e002      	b.n	800a0f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a0ea:	f06f 0302 	mvn.w	r3, #2
 800a0ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a0f0:	69fb      	ldr	r3, [r7, #28]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	; 0x28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
 800a116:	e023      	b.n	800a160 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a118:	f3ef 8305 	mrs	r3, IPSR
 800a11c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a11e:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800a120:	2b00      	cmp	r3, #0
 800a122:	d019      	beq.n	800a158 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a124:	f3ef 8211 	mrs	r2, BASEPRI
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	613a      	str	r2, [r7, #16]
 800a13a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a13c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800a13e:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a156:	e003      	b.n	800a160 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800a158:	6a38      	ldr	r0, [r7, #32]
 800a15a:	f000 ff53 	bl	800b004 <uxQueueSpacesAvailable>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a162:	4618      	mov	r0, r3
 800a164:	3728      	adds	r7, #40	; 0x28
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4a07      	ldr	r2, [pc, #28]	; (800a198 <vApplicationGetIdleTaskMemory+0x2c>)
 800a17c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a06      	ldr	r2, [pc, #24]	; (800a19c <vApplicationGetIdleTaskMemory+0x30>)
 800a182:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2280      	movs	r2, #128	; 0x80
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20002444 	.word	0x20002444
 800a19c:	200024a0 	.word	0x200024a0

0800a1a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a07      	ldr	r2, [pc, #28]	; (800a1cc <vApplicationGetTimerTaskMemory+0x2c>)
 800a1b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a06      	ldr	r2, [pc, #24]	; (800a1d0 <vApplicationGetTimerTaskMemory+0x30>)
 800a1b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1be:	601a      	str	r2, [r3, #0]
}
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	200026a0 	.word	0x200026a0
 800a1d0:	200026fc 	.word	0x200026fc

0800a1d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f103 0208 	add.w	r2, r3, #8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 0208 	add.w	r2, r3, #8
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f103 0208 	add.w	r2, r3, #8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d103      	bne.n	800a296 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e00c      	b.n	800a2b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3308      	adds	r3, #8
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e002      	b.n	800a2a4 <vListInsert+0x2e>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d2f6      	bcs.n	800a29e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6892      	ldr	r2, [r2, #8]
 800a2fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6852      	ldr	r2, [r2, #4]
 800a308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d103      	bne.n	800a31c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	1e5a      	subs	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xQueueGenericReset+0x2a>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	60bb      	str	r3, [r7, #8]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a366:	f002 fced 	bl	800cd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a372:	68f9      	ldr	r1, [r7, #12]
 800a374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	441a      	add	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	3b01      	subs	r3, #1
 800a398:	68f9      	ldr	r1, [r7, #12]
 800a39a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	441a      	add	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	22ff      	movs	r2, #255	; 0xff
 800a3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	22ff      	movs	r2, #255	; 0xff
 800a3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d114      	bne.n	800a3e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01a      	beq.n	800a3fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3310      	adds	r3, #16
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fc95 	bl	800bcf8 <xTaskRemoveFromEventList>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3d4:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <xQueueGenericReset+0xcc>)
 800a3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	e009      	b.n	800a3fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fef2 	bl	800a1d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3324      	adds	r3, #36	; 0x24
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff feed 	bl	800a1d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3fa:	f002 fcd3 	bl	800cda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3fe:	2301      	movs	r3, #1
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08e      	sub	sp, #56	; 0x38
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <xQueueGenericCreateStatic+0x52>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xQueueGenericCreateStatic+0x56>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueGenericCreateStatic+0x58>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	623b      	str	r3, [r7, #32]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <xQueueGenericCreateStatic+0x7e>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <xQueueGenericCreateStatic+0x82>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <xQueueGenericCreateStatic+0x84>
 800a48e:	2300      	movs	r3, #0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	61fb      	str	r3, [r7, #28]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4aa:	2350      	movs	r3, #80	; 0x50
 800a4ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b50      	cmp	r3, #80	; 0x50
 800a4b2:	d00a      	beq.n	800a4ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61bb      	str	r3, [r7, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00d      	beq.n	800a4f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f83f 	bl	800a570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3730      	adds	r7, #48	; 0x30
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af02      	add	r7, sp, #8
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	613b      	str	r3, [r7, #16]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	fb02 f303 	mul.w	r3, r2, r3
 800a52e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	3350      	adds	r3, #80	; 0x50
 800a534:	4618      	mov	r0, r3
 800a536:	f002 fd27 	bl	800cf88 <pvPortMalloc>
 800a53a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d011      	beq.n	800a566 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	3350      	adds	r3, #80	; 0x50
 800a54a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a554:	79fa      	ldrb	r2, [r7, #7]
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 f805 	bl	800a570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a566:	69bb      	ldr	r3, [r7, #24]
	}
 800a568:	4618      	mov	r0, r3
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d103      	bne.n	800a58c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e002      	b.n	800a592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a59e:	2101      	movs	r1, #1
 800a5a0:	69b8      	ldr	r0, [r7, #24]
 800a5a2:	f7ff fecb 	bl	800a33c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00e      	beq.n	800a5e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f90b 	bl	800a7f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6939      	ldr	r1, [r7, #16]
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff ff7a 	bl	800a4fc <xQueueGenericCreate>
 800a608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff ffd3 	bl	800a5b6 <prvInitialiseMutex>

		return xNewQueue;
 800a610:	68fb      	ldr	r3, [r7, #12]
	}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b088      	sub	sp, #32
 800a61e:	af02      	add	r7, sp, #8
 800a620:	4603      	mov	r3, r0
 800a622:	6039      	str	r1, [r7, #0]
 800a624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	6939      	ldr	r1, [r7, #16]
 800a638:	6978      	ldr	r0, [r7, #20]
 800a63a:	f7ff fee7 	bl	800a40c <xQueueGenericCreateStatic>
 800a63e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff ffb8 	bl	800a5b6 <prvInitialiseMutex>

		return xNewQueue;
 800a646:	68fb      	ldr	r3, [r7, #12]
	}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60fb      	str	r3, [r7, #12]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	689c      	ldr	r4, [r3, #8]
 800a67c:	f001 fcfa 	bl	800c074 <xTaskGetCurrentTaskHandle>
 800a680:	4603      	mov	r3, r0
 800a682:	429c      	cmp	r4, r3
 800a684:	d111      	bne.n	800a6aa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	1e5a      	subs	r2, r3, #1
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d105      	bne.n	800a6a4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a698:	2300      	movs	r3, #0
 800a69a:	2200      	movs	r2, #0
 800a69c:	2100      	movs	r1, #0
 800a69e:	6938      	ldr	r0, [r7, #16]
 800a6a0:	f000 f8aa 	bl	800a7f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	e001      	b.n	800a6ae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a6ae:	697b      	ldr	r3, [r7, #20]
	}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	371c      	adds	r7, #28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd90      	pop	{r4, r7, pc}

0800a6b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a6b8:	b590      	push	{r4, r7, lr}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	689c      	ldr	r4, [r3, #8]
 800a6e6:	f001 fcc5 	bl	800c074 <xTaskGetCurrentTaskHandle>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	d107      	bne.n	800a700 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	e00c      	b.n	800a71a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6938      	ldr	r0, [r7, #16]
 800a704:	f000 faf2 	bl	800acec <xQueueSemaphoreTake>
 800a708:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a71a:	697b      	ldr	r3, [r7, #20]
	}
 800a71c:	4618      	mov	r0, r3
 800a71e:	371c      	adds	r7, #28
 800a720:	46bd      	mov	sp, r7
 800a722:	bd90      	pop	{r4, r7, pc}

0800a724 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08a      	sub	sp, #40	; 0x28
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	61bb      	str	r3, [r7, #24]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	429a      	cmp	r2, r3
 800a752:	d90a      	bls.n	800a76a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	617b      	str	r3, [r7, #20]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a76a:	2302      	movs	r3, #2
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	2100      	movs	r1, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7ff fe49 	bl	800a40c <xQueueGenericCreateStatic>
 800a77a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a788:	69fb      	ldr	r3, [r7, #28]
	}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a792:	b580      	push	{r7, lr}
 800a794:	b086      	sub	sp, #24
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	613b      	str	r3, [r7, #16]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d90a      	bls.n	800a7d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	60fb      	str	r3, [r7, #12]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	2100      	movs	r1, #0
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe8e 	bl	800a4fc <xQueueGenericCreate>
 800a7e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7ee:	697b      	ldr	r3, [r7, #20]
	}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	; 0x38
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a806:	2300      	movs	r3, #0
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <xQueueGenericSend+0x32>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <xQueueGenericSend+0x40>
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <xQueueGenericSend+0x44>
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <xQueueGenericSend+0x46>
 800a83c:	2300      	movs	r3, #0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <xQueueGenericSend+0x60>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d103      	bne.n	800a866 <xQueueGenericSend+0x6e>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d101      	bne.n	800a86a <xQueueGenericSend+0x72>
 800a866:	2301      	movs	r3, #1
 800a868:	e000      	b.n	800a86c <xQueueGenericSend+0x74>
 800a86a:	2300      	movs	r3, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <xQueueGenericSend+0x8e>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	623b      	str	r3, [r7, #32]
}
 800a882:	bf00      	nop
 800a884:	e7fe      	b.n	800a884 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a886:	f001 fc05 	bl	800c094 <xTaskGetSchedulerState>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <xQueueGenericSend+0x9e>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <xQueueGenericSend+0xa2>
 800a896:	2301      	movs	r3, #1
 800a898:	e000      	b.n	800a89c <xQueueGenericSend+0xa4>
 800a89a:	2300      	movs	r3, #0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	61fb      	str	r3, [r7, #28]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8b6:	f002 fa45 	bl	800cd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d302      	bcc.n	800a8cc <xQueueGenericSend+0xd4>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d129      	bne.n	800a920 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d2:	f000 fbf5 	bl	800b0c0 <prvCopyDataToQueue>
 800a8d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d010      	beq.n	800a902 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	3324      	adds	r3, #36	; 0x24
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f001 fa07 	bl	800bcf8 <xTaskRemoveFromEventList>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d013      	beq.n	800a918 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8f0:	4b3f      	ldr	r3, [pc, #252]	; (800a9f0 <xQueueGenericSend+0x1f8>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	e00a      	b.n	800a918 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d007      	beq.n	800a918 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a908:	4b39      	ldr	r3, [pc, #228]	; (800a9f0 <xQueueGenericSend+0x1f8>)
 800a90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a918:	f002 fa44 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e063      	b.n	800a9e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d103      	bne.n	800a92e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a926:	f002 fa3d 	bl	800cda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	e05c      	b.n	800a9e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a934:	f107 0314 	add.w	r3, r7, #20
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 fa41 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a942:	f002 fa2f 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a946:	f000 ff8f 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a94a:	f002 f9fb 	bl	800cd44 <vPortEnterCritical>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d103      	bne.n	800a964 <xQueueGenericSend+0x16c>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a970:	d103      	bne.n	800a97a <xQueueGenericSend+0x182>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a97a:	f002 fa13 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a97e:	1d3a      	adds	r2, r7, #4
 800a980:	f107 0314 	add.w	r3, r7, #20
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f001 fa30 	bl	800bdec <xTaskCheckForTimeOut>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d124      	bne.n	800a9dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a994:	f000 fc8c 	bl	800b2b0 <prvIsQueueFull>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d018      	beq.n	800a9d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	3310      	adds	r3, #16
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 f956 	bl	800bc58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ae:	f000 fc17 	bl	800b1e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9b2:	f000 ff67 	bl	800b884 <xTaskResumeAll>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f47f af7c 	bne.w	800a8b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9be:	4b0c      	ldr	r3, [pc, #48]	; (800a9f0 <xQueueGenericSend+0x1f8>)
 800a9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	e772      	b.n	800a8b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d2:	f000 fc05 	bl	800b1e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9d6:	f000 ff55 	bl	800b884 <xTaskResumeAll>
 800a9da:	e76c      	b.n	800a8b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9de:	f000 fbff 	bl	800b1e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9e2:	f000 ff4f 	bl	800b884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3738      	adds	r7, #56	; 0x38
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b090      	sub	sp, #64	; 0x40
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d103      	bne.n	800aa30 <xQueueGenericSendFromISR+0x3c>
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <xQueueGenericSendFromISR+0x40>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <xQueueGenericSendFromISR+0x42>
 800aa34:	2300      	movs	r3, #0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d103      	bne.n	800aa5e <xQueueGenericSendFromISR+0x6a>
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <xQueueGenericSendFromISR+0x6e>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <xQueueGenericSendFromISR+0x70>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	623b      	str	r3, [r7, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa7e:	f002 fa43 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800aa82:	f3ef 8211 	mrs	r2, BASEPRI
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	61fa      	str	r2, [r7, #28]
 800aa98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <xQueueGenericSendFromISR+0xbc>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d12f      	bne.n	800ab10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac6:	f000 fafb 	bl	800b0c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aaca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad2:	d112      	bne.n	800aafa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d016      	beq.n	800ab0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	3324      	adds	r3, #36	; 0x24
 800aae0:	4618      	mov	r0, r3
 800aae2:	f001 f909 	bl	800bcf8 <xTaskRemoveFromEventList>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	e007      	b.n	800ab0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aafa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aafe:	3301      	adds	r3, #1
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	b25a      	sxtb	r2, r3
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab0e:	e001      	b.n	800ab14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f383 8811 	msr	BASEPRI, r3
}
 800ab1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3740      	adds	r7, #64	; 0x40
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08c      	sub	sp, #48	; 0x30
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10a      	bne.n	800ab5c <xQueueReceive+0x30>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	623b      	str	r3, [r7, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <xQueueReceive+0x3e>
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <xQueueReceive+0x42>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <xQueueReceive+0x44>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <xQueueReceive+0x5e>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	61fb      	str	r3, [r7, #28]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab8a:	f001 fa83 	bl	800c094 <xTaskGetSchedulerState>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <xQueueReceive+0x6e>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <xQueueReceive+0x72>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <xQueueReceive+0x74>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xQueueReceive+0x8e>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	61bb      	str	r3, [r7, #24]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abba:	f002 f8c3 	bl	800cd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d01f      	beq.n	800ac0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abce:	f000 fae1 	bl	800b194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	1e5a      	subs	r2, r3, #1
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00f      	beq.n	800ac02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	3310      	adds	r3, #16
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 f886 	bl	800bcf8 <xTaskRemoveFromEventList>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abf2:	4b3d      	ldr	r3, [pc, #244]	; (800ace8 <xQueueReceive+0x1bc>)
 800abf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac02:	f002 f8cf 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e069      	b.n	800acde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d103      	bne.n	800ac18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac10:	f002 f8c8 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e062      	b.n	800acde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d106      	bne.n	800ac2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac1e:	f107 0310 	add.w	r3, r7, #16
 800ac22:	4618      	mov	r0, r3
 800ac24:	f001 f8cc 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac2c:	f002 f8ba 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac30:	f000 fe1a 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac34:	f002 f886 	bl	800cd44 <vPortEnterCritical>
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac3e:	b25b      	sxtb	r3, r3
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d103      	bne.n	800ac4e <xQueueReceive+0x122>
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac54:	b25b      	sxtb	r3, r3
 800ac56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5a:	d103      	bne.n	800ac64 <xQueueReceive+0x138>
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac64:	f002 f89e 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac68:	1d3a      	adds	r2, r7, #4
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 f8bb 	bl	800bdec <xTaskCheckForTimeOut>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d123      	bne.n	800acc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac7e:	f000 fb01 	bl	800b284 <prvIsQueueEmpty>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d017      	beq.n	800acb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8a:	3324      	adds	r3, #36	; 0x24
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 ffe1 	bl	800bc58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac98:	f000 faa2 	bl	800b1e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac9c:	f000 fdf2 	bl	800b884 <xTaskResumeAll>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d189      	bne.n	800abba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <xQueueReceive+0x1bc>)
 800aca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	e780      	b.n	800abba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acba:	f000 fa91 	bl	800b1e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acbe:	f000 fde1 	bl	800b884 <xTaskResumeAll>
 800acc2:	e77a      	b.n	800abba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc6:	f000 fa8b 	bl	800b1e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acca:	f000 fddb 	bl	800b884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd0:	f000 fad8 	bl	800b284 <prvIsQueueEmpty>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f43f af6f 	beq.w	800abba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3730      	adds	r7, #48	; 0x30
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	; 0x38
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	623b      	str	r3, [r7, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	61fb      	str	r3, [r7, #28]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3c:	f001 f9aa 	bl	800c094 <xTaskGetSchedulerState>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <xQueueSemaphoreTake+0x60>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <xQueueSemaphoreTake+0x64>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e000      	b.n	800ad52 <xQueueSemaphoreTake+0x66>
 800ad50:	2300      	movs	r3, #0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10a      	bne.n	800ad6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	61bb      	str	r3, [r7, #24]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad6c:	f001 ffea 	bl	800cd44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d024      	beq.n	800adc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d104      	bne.n	800ad96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad8c:	f001 faf8 	bl	800c380 <pvTaskIncrementMutexHeldCount>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00f      	beq.n	800adbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	3310      	adds	r3, #16
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 ffa8 	bl	800bcf8 <xTaskRemoveFromEventList>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adae:	4b54      	ldr	r3, [pc, #336]	; (800af00 <xQueueSemaphoreTake+0x214>)
 800adb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adbe:	f001 fff1 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e097      	b.n	800aef6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d111      	bne.n	800adf0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	617b      	str	r3, [r7, #20]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ade8:	f001 ffdc 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adec:	2300      	movs	r3, #0
 800adee:	e082      	b.n	800aef6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 ffe0 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae00:	2301      	movs	r3, #1
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae04:	f001 ffce 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae08:	f000 fd2e 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae0c:	f001 ff9a 	bl	800cd44 <vPortEnterCritical>
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae16:	b25b      	sxtb	r3, r3
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d103      	bne.n	800ae26 <xQueueSemaphoreTake+0x13a>
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae2c:	b25b      	sxtb	r3, r3
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d103      	bne.n	800ae3c <xQueueSemaphoreTake+0x150>
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae3c:	f001 ffb2 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae40:	463a      	mov	r2, r7
 800ae42:	f107 030c 	add.w	r3, r7, #12
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 ffcf 	bl	800bdec <xTaskCheckForTimeOut>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d132      	bne.n	800aeba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae56:	f000 fa15 	bl	800b284 <prvIsQueueEmpty>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d026      	beq.n	800aeae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d109      	bne.n	800ae7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae68:	f001 ff6c 	bl	800cd44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f001 f92d 	bl	800c0d0 <xTaskPriorityInherit>
 800ae76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae78:	f001 ff94 	bl	800cda4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	3324      	adds	r3, #36	; 0x24
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fee7 	bl	800bc58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae8c:	f000 f9a8 	bl	800b1e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae90:	f000 fcf8 	bl	800b884 <xTaskResumeAll>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f47f af68 	bne.w	800ad6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae9c:	4b18      	ldr	r3, [pc, #96]	; (800af00 <xQueueSemaphoreTake+0x214>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	e75e      	b.n	800ad6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aeae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeb0:	f000 f996 	bl	800b1e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeb4:	f000 fce6 	bl	800b884 <xTaskResumeAll>
 800aeb8:	e758      	b.n	800ad6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aeba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aebc:	f000 f990 	bl	800b1e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aec0:	f000 fce0 	bl	800b884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aec6:	f000 f9dd 	bl	800b284 <prvIsQueueEmpty>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f43f af4d 	beq.w	800ad6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00d      	beq.n	800aef4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aed8:	f001 ff34 	bl	800cd44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aede:	f000 f8d7 	bl	800b090 <prvGetDisinheritPriorityAfterTimeout>
 800aee2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 f9c6 	bl	800c27c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aef0:	f001 ff58 	bl	800cda4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3738      	adds	r7, #56	; 0x38
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	e000ed04 	.word	0xe000ed04

0800af04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	; 0x38
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	623b      	str	r3, [r7, #32]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d103      	bne.n	800af3e <xQueueReceiveFromISR+0x3a>
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <xQueueReceiveFromISR+0x3e>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <xQueueReceiveFromISR+0x40>
 800af42:	2300      	movs	r3, #0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	61fb      	str	r3, [r7, #28]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af5e:	f001 ffd3 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800af62:	f3ef 8211 	mrs	r2, BASEPRI
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	61ba      	str	r2, [r7, #24]
 800af78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d02f      	beq.n	800afea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af98:	f000 f8fc 	bl	800b194 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	1e5a      	subs	r2, r3, #1
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afac:	d112      	bne.n	800afd4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d016      	beq.n	800afe4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	3310      	adds	r3, #16
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fe9c 	bl	800bcf8 <xTaskRemoveFromEventList>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00e      	beq.n	800afe4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	e007      	b.n	800afe4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800afd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afd8:	3301      	adds	r3, #1
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	b25a      	sxtb	r2, r3
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800afe4:	2301      	movs	r3, #1
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
 800afe8:	e001      	b.n	800afee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800afea:	2300      	movs	r3, #0
 800afec:	637b      	str	r3, [r7, #52]	; 0x34
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f383 8811 	msr	BASEPRI, r3
}
 800aff8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800affc:	4618      	mov	r0, r3
 800affe:	3738      	adds	r7, #56	; 0x38
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10a      	bne.n	800b02c <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60fb      	str	r3, [r7, #12]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800b02c:	f001 fe8a 	bl	800cd44 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b03c:	f001 feb2 	bl	800cda4 <vPortExitCritical>

	return uxReturn;
 800b040:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <vQueueDelete+0x28>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60bb      	str	r3, [r7, #8]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 f95e 	bl	800b334 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f002 f84c 	bl	800d120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	e001      	b.n	800b0b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
	}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10d      	bne.n	800b0fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d14d      	bne.n	800b182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 f858 	bl	800c1a0 <xTaskPriorityDisinherit>
 800b0f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	609a      	str	r2, [r3, #8]
 800b0f8:	e043      	b.n	800b182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d119      	bne.n	800b134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6858      	ldr	r0, [r3, #4]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	461a      	mov	r2, r3
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	f003 f84d 	bl	800e1aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	441a      	add	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	429a      	cmp	r2, r3
 800b128:	d32b      	bcc.n	800b182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	605a      	str	r2, [r3, #4]
 800b132:	e026      	b.n	800b182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	68d8      	ldr	r0, [r3, #12]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13c:	461a      	mov	r2, r3
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	f003 f833 	bl	800e1aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	425b      	negs	r3, r3
 800b14e:	441a      	add	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d207      	bcs.n	800b170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	689a      	ldr	r2, [r3, #8]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b168:	425b      	negs	r3, r3
 800b16a:	441a      	add	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d105      	bne.n	800b182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	3b01      	subs	r3, #1
 800b180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b18a:	697b      	ldr	r3, [r7, #20]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d018      	beq.n	800b1d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	441a      	add	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d303      	bcc.n	800b1c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68d9      	ldr	r1, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6838      	ldr	r0, [r7, #0]
 800b1d4:	f002 ffe9 	bl	800e1aa <memcpy>
	}
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1e8:	f001 fdac 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1f4:	e011      	b.n	800b21a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d012      	beq.n	800b224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3324      	adds	r3, #36	; 0x24
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fd78 	bl	800bcf8 <xTaskRemoveFromEventList>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b20e:	f000 fe4f 	bl	800beb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	3b01      	subs	r3, #1
 800b216:	b2db      	uxtb	r3, r3
 800b218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dce9      	bgt.n	800b1f6 <prvUnlockQueue+0x16>
 800b222:	e000      	b.n	800b226 <prvUnlockQueue+0x46>
					break;
 800b224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	22ff      	movs	r2, #255	; 0xff
 800b22a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b22e:	f001 fdb9 	bl	800cda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b232:	f001 fd87 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b23c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b23e:	e011      	b.n	800b264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d012      	beq.n	800b26e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3310      	adds	r3, #16
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 fd53 	bl	800bcf8 <xTaskRemoveFromEventList>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b258:	f000 fe2a 	bl	800beb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	3b01      	subs	r3, #1
 800b260:	b2db      	uxtb	r3, r3
 800b262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dce9      	bgt.n	800b240 <prvUnlockQueue+0x60>
 800b26c:	e000      	b.n	800b270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b26e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	22ff      	movs	r2, #255	; 0xff
 800b274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b278:	f001 fd94 	bl	800cda4 <vPortExitCritical>
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b28c:	f001 fd5a 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d102      	bne.n	800b29e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b298:	2301      	movs	r3, #1
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	e001      	b.n	800b2a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2a2:	f001 fd7f 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2b8:	f001 fd44 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d102      	bne.n	800b2ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e001      	b.n	800b2d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2d2:	f001 fd67 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	e014      	b.n	800b31a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2f0:	4a0f      	ldr	r2, [pc, #60]	; (800b330 <vQueueAddToRegistry+0x50>)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10b      	bne.n	800b314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b2fc:	490c      	ldr	r1, [pc, #48]	; (800b330 <vQueueAddToRegistry+0x50>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b306:	4a0a      	ldr	r2, [pc, #40]	; (800b330 <vQueueAddToRegistry+0x50>)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	4413      	add	r3, r2
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b312:	e006      	b.n	800b322 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b07      	cmp	r3, #7
 800b31e:	d9e7      	bls.n	800b2f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	20002afc 	.word	0x20002afc

0800b334 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e016      	b.n	800b370 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <vQueueUnregisterQueue+0x50>)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	4413      	add	r3, r2
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d10b      	bne.n	800b36a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b352:	4a0c      	ldr	r2, [pc, #48]	; (800b384 <vQueueUnregisterQueue+0x50>)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2100      	movs	r1, #0
 800b358:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b35c:	4a09      	ldr	r2, [pc, #36]	; (800b384 <vQueueUnregisterQueue+0x50>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	00db      	lsls	r3, r3, #3
 800b362:	4413      	add	r3, r2
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
				break;
 800b368:	e006      	b.n	800b378 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b07      	cmp	r3, #7
 800b374:	d9e5      	bls.n	800b342 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	20002afc 	.word	0x20002afc

0800b388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b398:	f001 fcd4 	bl	800cd44 <vPortEnterCritical>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a2:	b25b      	sxtb	r3, r3
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d103      	bne.n	800b3b2 <vQueueWaitForMessageRestricted+0x2a>
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3b8:	b25b      	sxtb	r3, r3
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3be:	d103      	bne.n	800b3c8 <vQueueWaitForMessageRestricted+0x40>
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3c8:	f001 fcec 	bl	800cda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3324      	adds	r3, #36	; 0x24
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fc5f 	bl	800bca0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3e2:	6978      	ldr	r0, [r7, #20]
 800b3e4:	f7ff fefc 	bl	800b1e0 <prvUnlockQueue>
	}
 800b3e8:	bf00      	nop
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08e      	sub	sp, #56	; 0x38
 800b3f4:	af04      	add	r7, sp, #16
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	623b      	str	r3, [r7, #32]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <xTaskCreateStatic+0x46>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	61fb      	str	r3, [r7, #28]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b436:	235c      	movs	r3, #92	; 0x5c
 800b438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b5c      	cmp	r3, #92	; 0x5c
 800b43e:	d00a      	beq.n	800b456 <xTaskCreateStatic+0x66>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	61bb      	str	r3, [r7, #24]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b456:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d01e      	beq.n	800b49c <xTaskCreateStatic+0xac>
 800b45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01b      	beq.n	800b49c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b46c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	2202      	movs	r2, #2
 800b472:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b476:	2300      	movs	r3, #0
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	f107 0314 	add.w	r3, r7, #20
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f850 	bl	800b534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b496:	f000 f8dd 	bl	800b654 <prvAddNewTaskToReadyList>
 800b49a:	e001      	b.n	800b4a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4a0:	697b      	ldr	r3, [r7, #20]
	}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3728      	adds	r7, #40	; 0x28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b08c      	sub	sp, #48	; 0x30
 800b4ae:	af04      	add	r7, sp, #16
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	603b      	str	r3, [r7, #0]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4ba:	88fb      	ldrh	r3, [r7, #6]
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 fd62 	bl	800cf88 <pvPortMalloc>
 800b4c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00e      	beq.n	800b4ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4cc:	205c      	movs	r0, #92	; 0x5c
 800b4ce:	f001 fd5b 	bl	800cf88 <pvPortMalloc>
 800b4d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30
 800b4e0:	e005      	b.n	800b4ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4e2:	6978      	ldr	r0, [r7, #20]
 800b4e4:	f001 fe1c 	bl	800d120 <vPortFree>
 800b4e8:	e001      	b.n	800b4ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d017      	beq.n	800b524 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4fc:	88fa      	ldrh	r2, [r7, #6]
 800b4fe:	2300      	movs	r3, #0
 800b500:	9303      	str	r3, [sp, #12]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68b9      	ldr	r1, [r7, #8]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f80e 	bl	800b534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b518:	69f8      	ldr	r0, [r7, #28]
 800b51a:	f000 f89b 	bl	800b654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b51e:	2301      	movs	r3, #1
 800b520:	61bb      	str	r3, [r7, #24]
 800b522:	e002      	b.n	800b52a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b52a:	69bb      	ldr	r3, [r7, #24]
	}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	461a      	mov	r2, r3
 800b54c:	21a5      	movs	r1, #165	; 0xa5
 800b54e:	f002 fdad 	bl	800e0ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b55c:	3b01      	subs	r3, #1
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	f023 0307 	bic.w	r3, r3, #7
 800b56a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	f003 0307 	and.w	r3, r3, #7
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	617b      	str	r3, [r7, #20]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01f      	beq.n	800b5d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b592:	2300      	movs	r3, #0
 800b594:	61fb      	str	r3, [r7, #28]
 800b596:	e012      	b.n	800b5be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	4413      	add	r3, r2
 800b59e:	7819      	ldrb	r1, [r3, #0]
 800b5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3334      	adds	r3, #52	; 0x34
 800b5a8:	460a      	mov	r2, r1
 800b5aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d006      	beq.n	800b5c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b0f      	cmp	r3, #15
 800b5c2:	d9e9      	bls.n	800b598 <prvInitialiseNewTask+0x64>
 800b5c4:	e000      	b.n	800b5c8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b5c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5d0:	e003      	b.n	800b5da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	2b37      	cmp	r3, #55	; 0x37
 800b5de:	d901      	bls.n	800b5e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5e0:	2337      	movs	r3, #55	; 0x37
 800b5e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fe0a 	bl	800a214 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	3318      	adds	r3, #24
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe fe05 	bl	800a214 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b61e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	2200      	movs	r2, #0
 800b624:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	68f9      	ldr	r1, [r7, #12]
 800b632:	69b8      	ldr	r0, [r7, #24]
 800b634:	f001 fa5a 	bl	800caec <pxPortInitialiseStack>
 800b638:	4602      	mov	r2, r0
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b64a:	bf00      	nop
 800b64c:	3720      	adds	r7, #32
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b65c:	f001 fb72 	bl	800cd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b660:	4b2d      	ldr	r3, [pc, #180]	; (800b718 <prvAddNewTaskToReadyList+0xc4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	4a2c      	ldr	r2, [pc, #176]	; (800b718 <prvAddNewTaskToReadyList+0xc4>)
 800b668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b66a:	4b2c      	ldr	r3, [pc, #176]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b672:	4a2a      	ldr	r2, [pc, #168]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b678:	4b27      	ldr	r3, [pc, #156]	; (800b718 <prvAddNewTaskToReadyList+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d110      	bne.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b680:	f000 fc3a 	bl	800bef8 <prvInitialiseTaskLists>
 800b684:	e00d      	b.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b686:	4b26      	ldr	r3, [pc, #152]	; (800b720 <prvAddNewTaskToReadyList+0xcc>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d109      	bne.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b68e:	4b23      	ldr	r3, [pc, #140]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	429a      	cmp	r2, r3
 800b69a:	d802      	bhi.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b69c:	4a1f      	ldr	r2, [pc, #124]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6a2:	4b20      	ldr	r3, [pc, #128]	; (800b724 <prvAddNewTaskToReadyList+0xd0>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	4a1e      	ldr	r2, [pc, #120]	; (800b724 <prvAddNewTaskToReadyList+0xd0>)
 800b6aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6ac:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <prvAddNewTaskToReadyList+0xd0>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b8:	4b1b      	ldr	r3, [pc, #108]	; (800b728 <prvAddNewTaskToReadyList+0xd4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d903      	bls.n	800b6c8 <prvAddNewTaskToReadyList+0x74>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	4a18      	ldr	r2, [pc, #96]	; (800b728 <prvAddNewTaskToReadyList+0xd4>)
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4a15      	ldr	r2, [pc, #84]	; (800b72c <prvAddNewTaskToReadyList+0xd8>)
 800b6d6:	441a      	add	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fe fda5 	bl	800a22e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6e4:	f001 fb5e 	bl	800cda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6e8:	4b0d      	ldr	r3, [pc, #52]	; (800b720 <prvAddNewTaskToReadyList+0xcc>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00e      	beq.n	800b70e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d207      	bcs.n	800b70e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6fe:	4b0c      	ldr	r3, [pc, #48]	; (800b730 <prvAddNewTaskToReadyList+0xdc>)
 800b700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b70e:	bf00      	nop
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20003010 	.word	0x20003010
 800b71c:	20002b3c 	.word	0x20002b3c
 800b720:	2000301c 	.word	0x2000301c
 800b724:	2000302c 	.word	0x2000302c
 800b728:	20003018 	.word	0x20003018
 800b72c:	20002b40 	.word	0x20002b40
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d017      	beq.n	800b776 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <vTaskDelay+0x60>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <vTaskDelay+0x30>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	60bb      	str	r3, [r7, #8]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b764:	f000 f880 	bl	800b868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b768:	2100      	movs	r1, #0
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fe1c 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b770:	f000 f888 	bl	800b884 <xTaskResumeAll>
 800b774:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d107      	bne.n	800b78c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <vTaskDelay+0x64>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20003038 	.word	0x20003038
 800b798:	e000ed04 	.word	0xe000ed04

0800b79c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7aa:	463a      	mov	r2, r7
 800b7ac:	1d39      	adds	r1, r7, #4
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fcda 	bl	800a16c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	9202      	str	r2, [sp, #8]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	4921      	ldr	r1, [pc, #132]	; (800b850 <vTaskStartScheduler+0xb4>)
 800b7cc:	4821      	ldr	r0, [pc, #132]	; (800b854 <vTaskStartScheduler+0xb8>)
 800b7ce:	f7ff fe0f 	bl	800b3f0 <xTaskCreateStatic>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4a20      	ldr	r2, [pc, #128]	; (800b858 <vTaskStartScheduler+0xbc>)
 800b7d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7d8:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <vTaskStartScheduler+0xbc>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e001      	b.n	800b7ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d102      	bne.n	800b7f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b7f0:	f000 fe2e 	bl	800c450 <xTimerCreateTimerTask>
 800b7f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d116      	bne.n	800b82a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	613b      	str	r3, [r7, #16]
}
 800b80e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b810:	4b12      	ldr	r3, [pc, #72]	; (800b85c <vTaskStartScheduler+0xc0>)
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b818:	4b11      	ldr	r3, [pc, #68]	; (800b860 <vTaskStartScheduler+0xc4>)
 800b81a:	2201      	movs	r2, #1
 800b81c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b81e:	4b11      	ldr	r3, [pc, #68]	; (800b864 <vTaskStartScheduler+0xc8>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b824:	f001 f9ec 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b828:	e00e      	b.n	800b848 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d10a      	bne.n	800b848 <vTaskStartScheduler+0xac>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60fb      	str	r3, [r7, #12]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <vTaskStartScheduler+0xaa>
}
 800b848:	bf00      	nop
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	08011834 	.word	0x08011834
 800b854:	0800bec9 	.word	0x0800bec9
 800b858:	20003034 	.word	0x20003034
 800b85c:	20003030 	.word	0x20003030
 800b860:	2000301c 	.word	0x2000301c
 800b864:	20003014 	.word	0x20003014

0800b868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b86c:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vTaskSuspendAll+0x18>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	4a03      	ldr	r2, [pc, #12]	; (800b880 <vTaskSuspendAll+0x18>)
 800b874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b876:	bf00      	nop
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	20003038 	.word	0x20003038

0800b884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b892:	4b42      	ldr	r3, [pc, #264]	; (800b99c <xTaskResumeAll+0x118>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	603b      	str	r3, [r7, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8b0:	f001 fa48 	bl	800cd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8b4:	4b39      	ldr	r3, [pc, #228]	; (800b99c <xTaskResumeAll+0x118>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	4a38      	ldr	r2, [pc, #224]	; (800b99c <xTaskResumeAll+0x118>)
 800b8bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8be:	4b37      	ldr	r3, [pc, #220]	; (800b99c <xTaskResumeAll+0x118>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d162      	bne.n	800b98c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8c6:	4b36      	ldr	r3, [pc, #216]	; (800b9a0 <xTaskResumeAll+0x11c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d05e      	beq.n	800b98c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ce:	e02f      	b.n	800b930 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d0:	4b34      	ldr	r3, [pc, #208]	; (800b9a4 <xTaskResumeAll+0x120>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3318      	adds	r3, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fd03 	bl	800a2e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fcfe 	bl	800a2e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f0:	4b2d      	ldr	r3, [pc, #180]	; (800b9a8 <xTaskResumeAll+0x124>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d903      	bls.n	800b900 <xTaskResumeAll+0x7c>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <xTaskResumeAll+0x124>)
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4a27      	ldr	r2, [pc, #156]	; (800b9ac <xTaskResumeAll+0x128>)
 800b90e:	441a      	add	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3304      	adds	r3, #4
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7fe fc89 	bl	800a22e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4b23      	ldr	r3, [pc, #140]	; (800b9b0 <xTaskResumeAll+0x12c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	429a      	cmp	r2, r3
 800b928:	d302      	bcc.n	800b930 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b92a:	4b22      	ldr	r3, [pc, #136]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b92c:	2201      	movs	r2, #1
 800b92e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <xTaskResumeAll+0x120>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1cb      	bne.n	800b8d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b93e:	f000 fb79 	bl	800c034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b942:	4b1d      	ldr	r3, [pc, #116]	; (800b9b8 <xTaskResumeAll+0x134>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d010      	beq.n	800b970 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b94e:	f000 f847 	bl	800b9e0 <xTaskIncrementTick>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b958:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f1      	bne.n	800b94e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <xTaskResumeAll+0x134>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b970:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b978:	2301      	movs	r3, #1
 800b97a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <xTaskResumeAll+0x138>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b98c:	f001 fa0a 	bl	800cda4 <vPortExitCritical>

	return xAlreadyYielded;
 800b990:	68bb      	ldr	r3, [r7, #8]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20003038 	.word	0x20003038
 800b9a0:	20003010 	.word	0x20003010
 800b9a4:	20002fd0 	.word	0x20002fd0
 800b9a8:	20003018 	.word	0x20003018
 800b9ac:	20002b40 	.word	0x20002b40
 800b9b0:	20002b3c 	.word	0x20002b3c
 800b9b4:	20003024 	.word	0x20003024
 800b9b8:	20003020 	.word	0x20003020
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <xTaskGetTickCount+0x1c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9cc:	687b      	ldr	r3, [r7, #4]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20003014 	.word	0x20003014

0800b9e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ea:	4b4f      	ldr	r3, [pc, #316]	; (800bb28 <xTaskIncrementTick+0x148>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f040 808f 	bne.w	800bb12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9f4:	4b4d      	ldr	r3, [pc, #308]	; (800bb2c <xTaskIncrementTick+0x14c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9fc:	4a4b      	ldr	r2, [pc, #300]	; (800bb2c <xTaskIncrementTick+0x14c>)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d120      	bne.n	800ba4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba08:	4b49      	ldr	r3, [pc, #292]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	603b      	str	r3, [r7, #0]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <xTaskIncrementTick+0x46>
 800ba28:	4b41      	ldr	r3, [pc, #260]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]
 800ba2e:	4b41      	ldr	r3, [pc, #260]	; (800bb34 <xTaskIncrementTick+0x154>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a3f      	ldr	r2, [pc, #252]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	4a3f      	ldr	r2, [pc, #252]	; (800bb34 <xTaskIncrementTick+0x154>)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	4b3e      	ldr	r3, [pc, #248]	; (800bb38 <xTaskIncrementTick+0x158>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	4a3d      	ldr	r2, [pc, #244]	; (800bb38 <xTaskIncrementTick+0x158>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	f000 faf5 	bl	800c034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba4a:	4b3c      	ldr	r3, [pc, #240]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d349      	bcc.n	800bae8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba54:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d104      	bne.n	800ba68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
 800ba64:	601a      	str	r2, [r3, #0]
					break;
 800ba66:	e03f      	b.n	800bae8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba68:	4b31      	ldr	r3, [pc, #196]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d203      	bcs.n	800ba88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba80:	4a2e      	ldr	r2, [pc, #184]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba86:	e02f      	b.n	800bae8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fe fc2b 	bl	800a2e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	3318      	adds	r3, #24
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe fc22 	bl	800a2e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <xTaskIncrementTick+0x160>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d903      	bls.n	800bab8 <xTaskIncrementTick+0xd8>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <xTaskIncrementTick+0x160>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <xTaskIncrementTick+0x164>)
 800bac6:	441a      	add	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fbad 	bl	800a22e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <xTaskIncrementTick+0x168>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	429a      	cmp	r2, r3
 800bae0:	d3b8      	bcc.n	800ba54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bae6:	e7b5      	b.n	800ba54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bae8:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <xTaskIncrementTick+0x168>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4915      	ldr	r1, [pc, #84]	; (800bb44 <xTaskIncrementTick+0x164>)
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	440b      	add	r3, r1
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d901      	bls.n	800bb04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb04:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <xTaskIncrementTick+0x16c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d007      	beq.n	800bb1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	e004      	b.n	800bb1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <xTaskIncrementTick+0x170>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	4a0d      	ldr	r2, [pc, #52]	; (800bb50 <xTaskIncrementTick+0x170>)
 800bb1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb1c:	697b      	ldr	r3, [r7, #20]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20003038 	.word	0x20003038
 800bb2c:	20003014 	.word	0x20003014
 800bb30:	20002fc8 	.word	0x20002fc8
 800bb34:	20002fcc 	.word	0x20002fcc
 800bb38:	20003028 	.word	0x20003028
 800bb3c:	20003030 	.word	0x20003030
 800bb40:	20003018 	.word	0x20003018
 800bb44:	20002b40 	.word	0x20002b40
 800bb48:	20002b3c 	.word	0x20002b3c
 800bb4c:	20003024 	.word	0x20003024
 800bb50:	20003020 	.word	0x20003020

0800bb54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb5a:	4b3a      	ldr	r3, [pc, #232]	; (800bc44 <vTaskSwitchContext+0xf0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb62:	4b39      	ldr	r3, [pc, #228]	; (800bc48 <vTaskSwitchContext+0xf4>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb68:	e068      	b.n	800bc3c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800bb6a:	4b37      	ldr	r3, [pc, #220]	; (800bc48 <vTaskSwitchContext+0xf4>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bb70:	4b36      	ldr	r3, [pc, #216]	; (800bc4c <vTaskSwitchContext+0xf8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d111      	bne.n	800bbac <vTaskSwitchContext+0x58>
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d10b      	bne.n	800bbac <vTaskSwitchContext+0x58>
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	3308      	adds	r3, #8
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d105      	bne.n	800bbac <vTaskSwitchContext+0x58>
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	330c      	adds	r3, #12
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d008      	beq.n	800bbbe <vTaskSwitchContext+0x6a>
 800bbac:	4b27      	ldr	r3, [pc, #156]	; (800bc4c <vTaskSwitchContext+0xf8>)
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	4b26      	ldr	r3, [pc, #152]	; (800bc4c <vTaskSwitchContext+0xf8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3334      	adds	r3, #52	; 0x34
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7f5 fda1 	bl	8001700 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbbe:	4b24      	ldr	r3, [pc, #144]	; (800bc50 <vTaskSwitchContext+0xfc>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	e010      	b.n	800bbe8 <vTaskSwitchContext+0x94>
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10a      	bne.n	800bbe2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	607b      	str	r3, [r7, #4]
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <vTaskSwitchContext+0x8c>
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	491a      	ldr	r1, [pc, #104]	; (800bc54 <vTaskSwitchContext+0x100>)
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	440b      	add	r3, r1
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0e4      	beq.n	800bbc6 <vTaskSwitchContext+0x72>
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4a13      	ldr	r2, [pc, #76]	; (800bc54 <vTaskSwitchContext+0x100>)
 800bc08:	4413      	add	r3, r2
 800bc0a:	60bb      	str	r3, [r7, #8]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	605a      	str	r2, [r3, #4]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d104      	bne.n	800bc2c <vTaskSwitchContext+0xd8>
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	605a      	str	r2, [r3, #4]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	4a06      	ldr	r2, [pc, #24]	; (800bc4c <vTaskSwitchContext+0xf8>)
 800bc34:	6013      	str	r3, [r2, #0]
 800bc36:	4a06      	ldr	r2, [pc, #24]	; (800bc50 <vTaskSwitchContext+0xfc>)
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	6013      	str	r3, [r2, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20003038 	.word	0x20003038
 800bc48:	20003024 	.word	0x20003024
 800bc4c:	20002b3c 	.word	0x20002b3c
 800bc50:	20003018 	.word	0x20003018
 800bc54:	20002b40 	.word	0x20002b40

0800bc58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60fb      	str	r3, [r7, #12]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc7e:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <vTaskPlaceOnEventList+0x44>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3318      	adds	r3, #24
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fe faf5 	bl	800a276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	6838      	ldr	r0, [r7, #0]
 800bc90:	f000 fb8a 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20002b3c 	.word	0x20002b3c

0800bca0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10a      	bne.n	800bcc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	617b      	str	r3, [r7, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3318      	adds	r3, #24
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f7fe faac 	bl	800a22e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bce0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	68b8      	ldr	r0, [r7, #8]
 800bce6:	f000 fb5f 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
	}
 800bcea:	bf00      	nop
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20002b3c 	.word	0x20002b3c

0800bcf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	3318      	adds	r3, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fadd 	bl	800a2e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd2e:	4b1e      	ldr	r3, [pc, #120]	; (800bda8 <xTaskRemoveFromEventList+0xb0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d11d      	bne.n	800bd72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fe fad4 	bl	800a2e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <xTaskRemoveFromEventList+0xb4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d903      	bls.n	800bd54 <xTaskRemoveFromEventList+0x5c>
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	4a16      	ldr	r2, [pc, #88]	; (800bdac <xTaskRemoveFromEventList+0xb4>)
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <xTaskRemoveFromEventList+0xb8>)
 800bd62:	441a      	add	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f7fe fa5f 	bl	800a22e <vListInsertEnd>
 800bd70:	e005      	b.n	800bd7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3318      	adds	r3, #24
 800bd76:	4619      	mov	r1, r3
 800bd78:	480e      	ldr	r0, [pc, #56]	; (800bdb4 <xTaskRemoveFromEventList+0xbc>)
 800bd7a:	f7fe fa58 	bl	800a22e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd82:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <xTaskRemoveFromEventList+0xc0>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d905      	bls.n	800bd98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd90:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <xTaskRemoveFromEventList+0xc4>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	e001      	b.n	800bd9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd9c:	697b      	ldr	r3, [r7, #20]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20003038 	.word	0x20003038
 800bdac:	20003018 	.word	0x20003018
 800bdb0:	20002b40 	.word	0x20002b40
 800bdb4:	20002fd0 	.word	0x20002fd0
 800bdb8:	20002b3c 	.word	0x20002b3c
 800bdbc:	20003024 	.word	0x20003024

0800bdc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <vTaskInternalSetTimeOutState+0x24>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <vTaskInternalSetTimeOutState+0x28>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	605a      	str	r2, [r3, #4]
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	20003028 	.word	0x20003028
 800bde8:	20003014 	.word	0x20003014

0800bdec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	613b      	str	r3, [r7, #16]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60fb      	str	r3, [r7, #12]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be2e:	f000 ff89 	bl	800cd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be32:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <xTaskCheckForTimeOut+0xbc>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d102      	bne.n	800be52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e023      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <xTaskCheckForTimeOut+0xc0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d007      	beq.n	800be6e <xTaskCheckForTimeOut+0x82>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	429a      	cmp	r2, r3
 800be66:	d302      	bcc.n	800be6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	61fb      	str	r3, [r7, #28]
 800be6c:	e015      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	429a      	cmp	r2, r3
 800be76:	d20b      	bcs.n	800be90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff ff9b 	bl	800bdc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	61fb      	str	r3, [r7, #28]
 800be8e:	e004      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be96:	2301      	movs	r3, #1
 800be98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be9a:	f000 ff83 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800be9e:	69fb      	ldr	r3, [r7, #28]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20003014 	.word	0x20003014
 800beac:	20003028 	.word	0x20003028

0800beb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800beb4:	4b03      	ldr	r3, [pc, #12]	; (800bec4 <vTaskMissedYield+0x14>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	601a      	str	r2, [r3, #0]
}
 800beba:	bf00      	nop
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	20003024 	.word	0x20003024

0800bec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bed0:	f000 f852 	bl	800bf78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bed4:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <prvIdleTask+0x28>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d9f9      	bls.n	800bed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <prvIdleTask+0x2c>)
 800bede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800beec:	e7f0      	b.n	800bed0 <prvIdleTask+0x8>
 800beee:	bf00      	nop
 800bef0:	20002b40 	.word	0x20002b40
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	e00c      	b.n	800bf1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4a12      	ldr	r2, [pc, #72]	; (800bf58 <prvInitialiseTaskLists+0x60>)
 800bf10:	4413      	add	r3, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe f95e 	bl	800a1d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b37      	cmp	r3, #55	; 0x37
 800bf22:	d9ef      	bls.n	800bf04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf24:	480d      	ldr	r0, [pc, #52]	; (800bf5c <prvInitialiseTaskLists+0x64>)
 800bf26:	f7fe f955 	bl	800a1d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf2a:	480d      	ldr	r0, [pc, #52]	; (800bf60 <prvInitialiseTaskLists+0x68>)
 800bf2c:	f7fe f952 	bl	800a1d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf30:	480c      	ldr	r0, [pc, #48]	; (800bf64 <prvInitialiseTaskLists+0x6c>)
 800bf32:	f7fe f94f 	bl	800a1d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf36:	480c      	ldr	r0, [pc, #48]	; (800bf68 <prvInitialiseTaskLists+0x70>)
 800bf38:	f7fe f94c 	bl	800a1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf3c:	480b      	ldr	r0, [pc, #44]	; (800bf6c <prvInitialiseTaskLists+0x74>)
 800bf3e:	f7fe f949 	bl	800a1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf42:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <prvInitialiseTaskLists+0x78>)
 800bf44:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <prvInitialiseTaskLists+0x64>)
 800bf46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <prvInitialiseTaskLists+0x7c>)
 800bf4a:	4a05      	ldr	r2, [pc, #20]	; (800bf60 <prvInitialiseTaskLists+0x68>)
 800bf4c:	601a      	str	r2, [r3, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20002b40 	.word	0x20002b40
 800bf5c:	20002fa0 	.word	0x20002fa0
 800bf60:	20002fb4 	.word	0x20002fb4
 800bf64:	20002fd0 	.word	0x20002fd0
 800bf68:	20002fe4 	.word	0x20002fe4
 800bf6c:	20002ffc 	.word	0x20002ffc
 800bf70:	20002fc8 	.word	0x20002fc8
 800bf74:	20002fcc 	.word	0x20002fcc

0800bf78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf7e:	e019      	b.n	800bfb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf80:	f000 fee0 	bl	800cd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf84:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <prvCheckTasksWaitingTermination+0x50>)
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe f9a9 	bl	800a2e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf96:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <prvCheckTasksWaitingTermination+0x54>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	4a0b      	ldr	r2, [pc, #44]	; (800bfcc <prvCheckTasksWaitingTermination+0x54>)
 800bf9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	4a0a      	ldr	r2, [pc, #40]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfaa:	f000 fefb 	bl	800cda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f810 	bl	800bfd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfb4:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e1      	bne.n	800bf80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20002fe4 	.word	0x20002fe4
 800bfcc:	20003010 	.word	0x20003010
 800bfd0:	20002ff8 	.word	0x20002ff8

0800bfd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d108      	bne.n	800bff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 f898 	bl	800d120 <vPortFree>
				vPortFree( pxTCB );
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 f895 	bl	800d120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bff6:	e018      	b.n	800c02a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d103      	bne.n	800c00a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 f88c 	bl	800d120 <vPortFree>
	}
 800c008:	e00f      	b.n	800c02a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c010:	2b02      	cmp	r3, #2
 800c012:	d00a      	beq.n	800c02a <prvDeleteTCB+0x56>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	60fb      	str	r3, [r7, #12]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <prvDeleteTCB+0x54>
	}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c046:	f04f 32ff 	mov.w	r2, #4294967295
 800c04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c04c:	e008      	b.n	800c060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	4a04      	ldr	r2, [pc, #16]	; (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c05e:	6013      	str	r3, [r2, #0]
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	20002fc8 	.word	0x20002fc8
 800c070:	20003030 	.word	0x20003030

0800c074 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c07a:	4b05      	ldr	r3, [pc, #20]	; (800c090 <xTaskGetCurrentTaskHandle+0x1c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c080:	687b      	ldr	r3, [r7, #4]
	}
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	20002b3c 	.word	0x20002b3c

0800c094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c09a:	4b0b      	ldr	r3, [pc, #44]	; (800c0c8 <xTaskGetSchedulerState+0x34>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	e008      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a8:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <xTaskGetSchedulerState+0x38>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	e001      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ba:	687b      	ldr	r3, [r7, #4]
	}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	2000301c 	.word	0x2000301c
 800c0cc:	20003038 	.word	0x20003038

0800c0d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d051      	beq.n	800c18a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	4b2a      	ldr	r3, [pc, #168]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d241      	bcs.n	800c178 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	db06      	blt.n	800c10a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fc:	4b25      	ldr	r3, [pc, #148]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6959      	ldr	r1, [r3, #20]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4a1f      	ldr	r2, [pc, #124]	; (800c198 <xTaskPriorityInherit+0xc8>)
 800c11c:	4413      	add	r3, r2
 800c11e:	4299      	cmp	r1, r3
 800c120:	d122      	bne.n	800c168 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	3304      	adds	r3, #4
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe f8de 	bl	800a2e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c12c:	4b19      	ldr	r3, [pc, #100]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13a:	4b18      	ldr	r3, [pc, #96]	; (800c19c <xTaskPriorityInherit+0xcc>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d903      	bls.n	800c14a <xTaskPriorityInherit+0x7a>
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	4a15      	ldr	r2, [pc, #84]	; (800c19c <xTaskPriorityInherit+0xcc>)
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4a10      	ldr	r2, [pc, #64]	; (800c198 <xTaskPriorityInherit+0xc8>)
 800c158:	441a      	add	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7fe f864 	bl	800a22e <vListInsertEnd>
 800c166:	e004      	b.n	800c172 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	e008      	b.n	800c18a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	429a      	cmp	r2, r3
 800c184:	d201      	bcs.n	800c18a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c186:	2301      	movs	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c18a:	68fb      	ldr	r3, [r7, #12]
	}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20002b3c 	.word	0x20002b3c
 800c198:	20002b40 	.word	0x20002b40
 800c19c:	20003018 	.word	0x20003018

0800c1a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d056      	beq.n	800c264 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1b6:	4b2e      	ldr	r3, [pc, #184]	; (800c270 <xTaskPriorityDisinherit+0xd0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d00a      	beq.n	800c1d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60bb      	str	r3, [r7, #8]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f8:	1e5a      	subs	r2, r3, #1
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c206:	429a      	cmp	r2, r3
 800c208:	d02c      	beq.n	800c264 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d128      	bne.n	800c264 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe f866 	bl	800a2e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <xTaskPriorityDisinherit+0xd4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d903      	bls.n	800c244 <xTaskPriorityDisinherit+0xa4>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	4a0c      	ldr	r2, [pc, #48]	; (800c274 <xTaskPriorityDisinherit+0xd4>)
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4a09      	ldr	r2, [pc, #36]	; (800c278 <xTaskPriorityDisinherit+0xd8>)
 800c252:	441a      	add	r2, r3
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	3304      	adds	r3, #4
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7fd ffe7 	bl	800a22e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c260:	2301      	movs	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c264:	697b      	ldr	r3, [r7, #20]
	}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20002b3c 	.word	0x20002b3c
 800c274:	20003018 	.word	0x20003018
 800c278:	20002b40 	.word	0x20002b40

0800c27c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c28a:	2301      	movs	r3, #1
 800c28c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d06a      	beq.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10a      	bne.n	800c2b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d902      	bls.n	800c2c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e002      	b.n	800c2c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d04b      	beq.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d146      	bne.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2dc:	4b25      	ldr	r3, [pc, #148]	; (800c374 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d10a      	bne.n	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	60bb      	str	r3, [r7, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	69fa      	ldr	r2, [r7, #28]
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	db04      	blt.n	800c31a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	6959      	ldr	r1, [r3, #20]
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4a13      	ldr	r2, [pc, #76]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c32a:	4413      	add	r3, r2
 800c32c:	4299      	cmp	r1, r3
 800c32e:	d11c      	bne.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	3304      	adds	r3, #4
 800c334:	4618      	mov	r0, r3
 800c336:	f7fd ffd7 	bl	800a2e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d903      	bls.n	800c34e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34a:	4a0c      	ldr	r2, [pc, #48]	; (800c37c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a07      	ldr	r2, [pc, #28]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c35c:	441a      	add	r2, r3
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7fd ff62 	bl	800a22e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c36a:	bf00      	nop
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20002b3c 	.word	0x20002b3c
 800c378:	20002b40 	.word	0x20002b40
 800c37c:	20003018 	.word	0x20003018

0800c380 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c380:	b480      	push	{r7}
 800c382:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c384:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d004      	beq.n	800c396 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c38c:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c392:	3201      	adds	r2, #1
 800c394:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c398:	681b      	ldr	r3, [r3, #0]
	}
 800c39a:	4618      	mov	r0, r3
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	20002b3c 	.word	0x20002b3c

0800c3a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3b2:	4b21      	ldr	r3, [pc, #132]	; (800c438 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	4b20      	ldr	r3, [pc, #128]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fd ff92 	bl	800a2e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d10a      	bne.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d2:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4819      	ldr	r0, [pc, #100]	; (800c440 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3dc:	f7fd ff27 	bl	800a22e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3e0:	e026      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d209      	bcs.n	800c40e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7fd ff35 	bl	800a276 <vListInsert>
}
 800c40c:	e010      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3304      	adds	r3, #4
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fd ff2b 	bl	800a276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d202      	bcs.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c42a:	4a08      	ldr	r2, [pc, #32]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20003014 	.word	0x20003014
 800c43c:	20002b3c 	.word	0x20002b3c
 800c440:	20002ffc 	.word	0x20002ffc
 800c444:	20002fcc 	.word	0x20002fcc
 800c448:	20002fc8 	.word	0x20002fc8
 800c44c:	20003030 	.word	0x20003030

0800c450 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c45a:	f000 fb07 	bl	800ca6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c45e:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <xTimerCreateTimerTask+0x80>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d021      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fd fe91 	bl	800a1a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	9202      	str	r2, [sp, #8]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	2302      	movs	r3, #2
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2300      	movs	r3, #0
 800c48e:	460a      	mov	r2, r1
 800c490:	4910      	ldr	r1, [pc, #64]	; (800c4d4 <xTimerCreateTimerTask+0x84>)
 800c492:	4811      	ldr	r0, [pc, #68]	; (800c4d8 <xTimerCreateTimerTask+0x88>)
 800c494:	f7fe ffac 	bl	800b3f0 <xTaskCreateStatic>
 800c498:	4603      	mov	r3, r0
 800c49a:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c49c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4c6:	697b      	ldr	r3, [r7, #20]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000306c 	.word	0x2000306c
 800c4d4:	0801183c 	.word	0x0801183c
 800c4d8:	0800c615 	.word	0x0800c615
 800c4dc:	20003070 	.word	0x20003070

0800c4e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08a      	sub	sp, #40	; 0x28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	623b      	str	r3, [r7, #32]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c50e:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <xTimerGenericCommand+0x98>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d02a      	beq.n	800c56c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2b05      	cmp	r3, #5
 800c526:	dc18      	bgt.n	800c55a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c528:	f7ff fdb4 	bl	800c094 <xTaskGetSchedulerState>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d109      	bne.n	800c546 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <xTimerGenericCommand+0x98>)
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f107 0110 	add.w	r1, r7, #16
 800c53a:	2300      	movs	r3, #0
 800c53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53e:	f7fe f95b 	bl	800a7f8 <xQueueGenericSend>
 800c542:	6278      	str	r0, [r7, #36]	; 0x24
 800c544:	e012      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c546:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <xTimerGenericCommand+0x98>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f107 0110 	add.w	r1, r7, #16
 800c54e:	2300      	movs	r3, #0
 800c550:	2200      	movs	r2, #0
 800c552:	f7fe f951 	bl	800a7f8 <xQueueGenericSend>
 800c556:	6278      	str	r0, [r7, #36]	; 0x24
 800c558:	e008      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <xTimerGenericCommand+0x98>)
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f107 0110 	add.w	r1, r7, #16
 800c562:	2300      	movs	r3, #0
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	f7fe fa45 	bl	800a9f4 <xQueueGenericSendFromISR>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3728      	adds	r7, #40	; 0x28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	2000306c 	.word	0x2000306c

0800c57c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af02      	add	r7, sp, #8
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c586:	4b22      	ldr	r3, [pc, #136]	; (800c610 <prvProcessExpiredTimer+0x94>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3304      	adds	r3, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f7fd fea7 	bl	800a2e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d022      	beq.n	800c5ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	699a      	ldr	r2, [r3, #24]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	18d1      	adds	r1, r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	6978      	ldr	r0, [r7, #20]
 800c5b6:	f000 f8d1 	bl	800c75c <prvInsertTimerInActiveList>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01f      	beq.n	800c600 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f7ff ff88 	bl	800c4e0 <xTimerGenericCommand>
 800c5d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d113      	bne.n	800c600 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	60fb      	str	r3, [r7, #12]
}
 800c5ea:	bf00      	nop
 800c5ec:	e7fe      	b.n	800c5ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	6978      	ldr	r0, [r7, #20]
 800c606:	4798      	blx	r3
}
 800c608:	bf00      	nop
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20003064 	.word	0x20003064

0800c614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c61c:	f107 0308 	add.w	r3, r7, #8
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f857 	bl	800c6d4 <prvGetNextExpireTime>
 800c626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f803 	bl	800c638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c632:	f000 f8d5 	bl	800c7e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c636:	e7f1      	b.n	800c61c <prvTimerTask+0x8>

0800c638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c642:	f7ff f911 	bl	800b868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 f866 	bl	800c71c <prvSampleTimeNow>
 800c650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d130      	bne.n	800c6ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	d806      	bhi.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c666:	f7ff f90d 	bl	800b884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c66a:	68f9      	ldr	r1, [r7, #12]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff ff85 	bl	800c57c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c672:	e024      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d008      	beq.n	800c68c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c67a:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <prvProcessTimerOrBlockTask+0x90>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <prvProcessTimerOrBlockTask+0x50>
 800c684:	2301      	movs	r3, #1
 800c686:	e000      	b.n	800c68a <prvProcessTimerOrBlockTask+0x52>
 800c688:	2300      	movs	r3, #0
 800c68a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c68c:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <prvProcessTimerOrBlockTask+0x94>)
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	f7fe fe75 	bl	800b388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c69e:	f7ff f8f1 	bl	800b884 <xTaskResumeAll>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <prvProcessTimerOrBlockTask+0x98>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
}
 800c6b8:	e001      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6ba:	f7ff f8e3 	bl	800b884 <xTaskResumeAll>
}
 800c6be:	bf00      	nop
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20003068 	.word	0x20003068
 800c6cc:	2000306c 	.word	0x2000306c
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <prvGetNextExpireTime+0x16>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	e000      	b.n	800c6ec <prvGetNextExpireTime+0x18>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d105      	bne.n	800c704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e001      	b.n	800c708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20003064 	.word	0x20003064

0800c71c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c724:	f7ff f94c 	bl	800b9c0 <xTaskGetTickCount>
 800c728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	429a      	cmp	r2, r3
 800c732:	d205      	bcs.n	800c740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c734:	f000 f936 	bl	800c9a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e002      	b.n	800c746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c746:	4a04      	ldr	r2, [pc, #16]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20003074 	.word	0x20003074

0800c75c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d812      	bhi.n	800c7a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d302      	bcc.n	800c796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c790:	2301      	movs	r3, #1
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	e01b      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c796:	4b10      	ldr	r3, [pc, #64]	; (800c7d8 <prvInsertTimerInActiveList+0x7c>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fd fd68 	bl	800a276 <vListInsert>
 800c7a6:	e012      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d206      	bcs.n	800c7be <prvInsertTimerInActiveList+0x62>
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d302      	bcc.n	800c7be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	e007      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <prvInsertTimerInActiveList+0x80>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7fd fd54 	bl	800a276 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7ce:	697b      	ldr	r3, [r7, #20]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20003068 	.word	0x20003068
 800c7dc:	20003064 	.word	0x20003064

0800c7e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08e      	sub	sp, #56	; 0x38
 800c7e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e6:	e0ca      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da18      	bge.n	800c820 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ee:	1d3b      	adds	r3, r7, #4
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c816:	6850      	ldr	r0, [r2, #4]
 800c818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c81a:	6892      	ldr	r2, [r2, #8]
 800c81c:	4611      	mov	r1, r2
 800c81e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f2c0 80ab 	blt.w	800c97e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d004      	beq.n	800c83e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd fd55 	bl	800a2e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c83e:	463b      	mov	r3, r7
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff ff6b 	bl	800c71c <prvSampleTimeNow>
 800c846:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b09      	cmp	r3, #9
 800c84c:	f200 8096 	bhi.w	800c97c <prvProcessReceivedCommands+0x19c>
 800c850:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <prvProcessReceivedCommands+0x78>)
 800c852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c856:	bf00      	nop
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c881 	.word	0x0800c881
 800c860:	0800c881 	.word	0x0800c881
 800c864:	0800c8f5 	.word	0x0800c8f5
 800c868:	0800c909 	.word	0x0800c909
 800c86c:	0800c953 	.word	0x0800c953
 800c870:	0800c881 	.word	0x0800c881
 800c874:	0800c881 	.word	0x0800c881
 800c878:	0800c8f5 	.word	0x0800c8f5
 800c87c:	0800c909 	.word	0x0800c909
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	18d1      	adds	r1, r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a0:	f7ff ff5c 	bl	800c75c <prvInsertTimerInActiveList>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d069      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d05e      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	441a      	add	r2, r3
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d2:	f7ff fe05 	bl	800c4e0 <xTimerGenericCommand>
 800c8d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d14f      	bne.n	800c97e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	61bb      	str	r3, [r7, #24]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c906:	e03a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	617b      	str	r3, [r7, #20]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	18d1      	adds	r1, r2, r3
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c94c:	f7ff ff06 	bl	800c75c <prvInsertTimerInActiveList>
					break;
 800c950:	e015      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c958:	f003 0302 	and.w	r3, r3, #2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c962:	f000 fbdd 	bl	800d120 <vPortFree>
 800c966:	e00a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96e:	f023 0301 	bic.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c97a:	e000      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c97c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97e:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <prvProcessReceivedCommands+0x1c0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	1d39      	adds	r1, r7, #4
 800c984:	2200      	movs	r2, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe f8d0 	bl	800ab2c <xQueueReceive>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f47f af2a 	bne.w	800c7e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	3730      	adds	r7, #48	; 0x30
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000306c 	.word	0x2000306c

0800c9a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9aa:	e048      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fc8f 	bl	800a2e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d02e      	beq.n	800ca3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d90e      	bls.n	800ca10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fd fc34 	bl	800a276 <vListInsert>
 800ca0e:	e016      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fd60 	bl	800c4e0 <xTimerGenericCommand>
 800ca20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	603b      	str	r3, [r7, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1b1      	bne.n	800c9ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca56:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6013      	str	r3, [r2, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20003064 	.word	0x20003064
 800ca68:	20003068 	.word	0x20003068

0800ca6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca72:	f000 f967 	bl	800cd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d120      	bne.n	800cac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca7e:	4814      	ldr	r0, [pc, #80]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca80:	f7fd fba8 	bl	800a1d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca84:	4813      	ldr	r0, [pc, #76]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca86:	f7fd fba5 	bl	800a1d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca8a:	4b13      	ldr	r3, [pc, #76]	; (800cad8 <prvCheckForValidListAndQueue+0x6c>)
 800ca8c:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca90:	4b12      	ldr	r3, [pc, #72]	; (800cadc <prvCheckForValidListAndQueue+0x70>)
 800ca92:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <prvCheckForValidListAndQueue+0x74>)
 800ca9c:	4a11      	ldr	r2, [pc, #68]	; (800cae4 <prvCheckForValidListAndQueue+0x78>)
 800ca9e:	2110      	movs	r1, #16
 800caa0:	200a      	movs	r0, #10
 800caa2:	f7fd fcb3 	bl	800a40c <xQueueGenericCreateStatic>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4a08      	ldr	r2, [pc, #32]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	490b      	ldr	r1, [pc, #44]	; (800cae8 <prvCheckForValidListAndQueue+0x7c>)
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fc10 	bl	800b2e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cac0:	f000 f970 	bl	800cda4 <vPortExitCritical>
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2000306c 	.word	0x2000306c
 800cad0:	2000303c 	.word	0x2000303c
 800cad4:	20003050 	.word	0x20003050
 800cad8:	20003064 	.word	0x20003064
 800cadc:	20003068 	.word	0x20003068
 800cae0:	20003118 	.word	0x20003118
 800cae4:	20003078 	.word	0x20003078
 800cae8:	08011844 	.word	0x08011844

0800caec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3b04      	subs	r3, #4
 800cafc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f023 0201 	bic.w	r2, r3, #1
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb1c:	4a0c      	ldr	r2, [pc, #48]	; (800cb50 <pxPortInitialiseStack+0x64>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b14      	subs	r3, #20
 800cb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3b04      	subs	r3, #4
 800cb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f06f 0202 	mvn.w	r2, #2
 800cb3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b20      	subs	r3, #32
 800cb40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	0800cb55 	.word	0x0800cb55

0800cb54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5e:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <prvTaskExitError+0x54>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb66:	d00a      	beq.n	800cb7e <prvTaskExitError+0x2a>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	e7fe      	b.n	800cb7c <prvTaskExitError+0x28>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	60bb      	str	r3, [r7, #8]
}
 800cb90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb92:	bf00      	nop
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0fc      	beq.n	800cb94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	20000024 	.word	0x20000024
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20002b3c 	.word	0x20002b3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b46      	ldr	r3, [pc, #280]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a46      	ldr	r2, [pc, #280]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc26:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3f      	ldr	r2, [pc, #252]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc46:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xPortStartScheduler+0x130>)
 800cc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc74:	e009      	b.n	800cc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4a2d      	ldr	r2, [pc, #180]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b80      	cmp	r3, #128	; 0x80
 800cc94:	d0ef      	beq.n	800cc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0307 	rsb	r3, r3, #7
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d00a      	beq.n	800ccb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccca:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <xPortStartScheduler+0x134>)
 800cccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccee:	f000 f8dd 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <xPortStartScheduler+0x13c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf8:	f000 f8fc 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <xPortStartScheduler+0x140>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <xPortStartScheduler+0x140>)
 800cd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd08:	f7ff ff66 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd0c:	f7fe ff22 	bl	800bb54 <vTaskSwitchContext>
	prvTaskExitError();
 800cd10:	f7ff ff20 	bl	800cb54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed00 	.word	0xe000ed00
 800cd24:	410fc271 	.word	0x410fc271
 800cd28:	410fc270 	.word	0x410fc270
 800cd2c:	e000e400 	.word	0xe000e400
 800cd30:	20003168 	.word	0x20003168
 800cd34:	2000316c 	.word	0x2000316c
 800cd38:	e000ed20 	.word	0xe000ed20
 800cd3c:	20000024 	.word	0x20000024
 800cd40:	e000ef34 	.word	0xe000ef34

0800cd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	607b      	str	r3, [r7, #4]
}
 800cd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <vPortEnterCritical+0x5c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <vPortEnterCritical+0x4a>
	}
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	20000024 	.word	0x20000024
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <vPortExitCritical+0x24>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	607b      	str	r3, [r7, #4]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d105      	bne.n	800cde6 <vPortExitCritical+0x42>
 800cdda:	2300      	movs	r3, #0
 800cddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f383 8811 	msr	BASEPRI, r3
}
 800cde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000024 	.word	0x20000024
	...

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe fe90 	bl	800bb54 <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	20002b3c 	.word	0x20002b3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fdad 	bl	800b9e0 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	20000018 	.word	0x20000018
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d914      	bls.n	800cf44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <vPortValidateInterruptPriority+0x70>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20a      	bcs.n	800cf44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d90a      	bls.n	800cf6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <vPortValidateInterruptPriority+0x60>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	e000e3f0 	.word	0xe000e3f0
 800cf7c:	20003168 	.word	0x20003168
 800cf80:	e000ed0c 	.word	0xe000ed0c
 800cf84:	2000316c 	.word	0x2000316c

0800cf88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf94:	f7fe fc68 	bl	800b868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf98:	4b5b      	ldr	r3, [pc, #364]	; (800d108 <pvPortMalloc+0x180>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa0:	f000 f920 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa4:	4b59      	ldr	r3, [pc, #356]	; (800d10c <pvPortMalloc+0x184>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8093 	bne.w	800d0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01d      	beq.n	800cff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d06e      	beq.n	800d0d8 <pvPortMalloc+0x150>
 800cffa:	4b45      	ldr	r3, [pc, #276]	; (800d110 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d869      	bhi.n	800d0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d004:	4b43      	ldr	r3, [pc, #268]	; (800d114 <pvPortMalloc+0x18c>)
 800d006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d008:	4b42      	ldr	r3, [pc, #264]	; (800d114 <pvPortMalloc+0x18c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	e004      	b.n	800d01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <pvPortMalloc+0xa4>
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f1      	bne.n	800d010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <pvPortMalloc+0x180>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d032:	429a      	cmp	r2, r3
 800d034:	d050      	beq.n	800d0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2208      	movs	r2, #8
 800d03c:	4413      	add	r3, r2
 800d03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2308      	movs	r3, #8
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	d91f      	bls.n	800d098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <pvPortMalloc+0xf8>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	613b      	str	r3, [r7, #16]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f000 f908 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pvPortMalloc+0x188>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	; (800d110 <pvPortMalloc+0x188>)
 800d0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <pvPortMalloc+0x188>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <pvPortMalloc+0x190>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d203      	bcs.n	800d0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <pvPortMalloc+0x188>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <pvPortMalloc+0x190>)
 800d0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x184>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x194>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4a11      	ldr	r2, [pc, #68]	; (800d11c <pvPortMalloc+0x194>)
 800d0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0d8:	f7fe fbd4 	bl	800b884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <pvPortMalloc+0x174>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60fb      	str	r3, [r7, #12]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <pvPortMalloc+0x172>
	return pvReturn;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	; 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20003d30 	.word	0x20003d30
 800d10c:	20003d44 	.word	0x20003d44
 800d110:	20003d34 	.word	0x20003d34
 800d114:	20003d28 	.word	0x20003d28
 800d118:	20003d38 	.word	0x20003d38
 800d11c:	20003d3c 	.word	0x20003d3c

0800d120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d04d      	beq.n	800d1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d132:	2308      	movs	r3, #8
 800d134:	425b      	negs	r3, r3
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vPortFree+0xb8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vPortFree+0x44>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <vPortFree+0x62>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <vPortFree+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01e      	beq.n	800d1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11a      	bne.n	800d1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <vPortFree+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1a8:	f7fe fb5e 	bl	800b868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <vPortFree+0xbc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <vPortFree+0xbc>)
 800d1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f000 f874 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xc0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xc0>)
 800d1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ca:	f7fe fb5b 	bl	800b884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20003d44 	.word	0x20003d44
 800d1dc:	20003d34 	.word	0x20003d34
 800d1e0:	20003d40 	.word	0x20003d40

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20003170 	.word	0x20003170
 800d294:	20003d28 	.word	0x20003d28
 800d298:	20003d30 	.word	0x20003d30
 800d29c:	20003d38 	.word	0x20003d38
 800d2a0:	20003d34 	.word	0x20003d34
 800d2a4:	20003d44 	.word	0x20003d44

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20003d28 	.word	0x20003d28
 800d358:	20003d30 	.word	0x20003d30

0800d35c <__cvt>:
 800d35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d360:	ec55 4b10 	vmov	r4, r5, d0
 800d364:	2d00      	cmp	r5, #0
 800d366:	460e      	mov	r6, r1
 800d368:	4619      	mov	r1, r3
 800d36a:	462b      	mov	r3, r5
 800d36c:	bfbb      	ittet	lt
 800d36e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d372:	461d      	movlt	r5, r3
 800d374:	2300      	movge	r3, #0
 800d376:	232d      	movlt	r3, #45	; 0x2d
 800d378:	700b      	strb	r3, [r1, #0]
 800d37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d37c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d380:	4691      	mov	r9, r2
 800d382:	f023 0820 	bic.w	r8, r3, #32
 800d386:	bfbc      	itt	lt
 800d388:	4622      	movlt	r2, r4
 800d38a:	4614      	movlt	r4, r2
 800d38c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d390:	d005      	beq.n	800d39e <__cvt+0x42>
 800d392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d396:	d100      	bne.n	800d39a <__cvt+0x3e>
 800d398:	3601      	adds	r6, #1
 800d39a:	2102      	movs	r1, #2
 800d39c:	e000      	b.n	800d3a0 <__cvt+0x44>
 800d39e:	2103      	movs	r1, #3
 800d3a0:	ab03      	add	r3, sp, #12
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	ab02      	add	r3, sp, #8
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	ec45 4b10 	vmov	d0, r4, r5
 800d3ac:	4653      	mov	r3, sl
 800d3ae:	4632      	mov	r2, r6
 800d3b0:	f000 ff92 	bl	800e2d8 <_dtoa_r>
 800d3b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	d102      	bne.n	800d3c2 <__cvt+0x66>
 800d3bc:	f019 0f01 	tst.w	r9, #1
 800d3c0:	d022      	beq.n	800d408 <__cvt+0xac>
 800d3c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3c6:	eb07 0906 	add.w	r9, r7, r6
 800d3ca:	d110      	bne.n	800d3ee <__cvt+0x92>
 800d3cc:	783b      	ldrb	r3, [r7, #0]
 800d3ce:	2b30      	cmp	r3, #48	; 0x30
 800d3d0:	d10a      	bne.n	800d3e8 <__cvt+0x8c>
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	4629      	mov	r1, r5
 800d3da:	f7f3 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3de:	b918      	cbnz	r0, 800d3e8 <__cvt+0x8c>
 800d3e0:	f1c6 0601 	rsb	r6, r6, #1
 800d3e4:	f8ca 6000 	str.w	r6, [sl]
 800d3e8:	f8da 3000 	ldr.w	r3, [sl]
 800d3ec:	4499      	add	r9, r3
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	f7f3 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3fa:	b108      	cbz	r0, 800d400 <__cvt+0xa4>
 800d3fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800d400:	2230      	movs	r2, #48	; 0x30
 800d402:	9b03      	ldr	r3, [sp, #12]
 800d404:	454b      	cmp	r3, r9
 800d406:	d307      	bcc.n	800d418 <__cvt+0xbc>
 800d408:	9b03      	ldr	r3, [sp, #12]
 800d40a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d40c:	1bdb      	subs	r3, r3, r7
 800d40e:	4638      	mov	r0, r7
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	b004      	add	sp, #16
 800d414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d418:	1c59      	adds	r1, r3, #1
 800d41a:	9103      	str	r1, [sp, #12]
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	e7f0      	b.n	800d402 <__cvt+0xa6>

0800d420 <__exponent>:
 800d420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d422:	4603      	mov	r3, r0
 800d424:	2900      	cmp	r1, #0
 800d426:	bfb8      	it	lt
 800d428:	4249      	neglt	r1, r1
 800d42a:	f803 2b02 	strb.w	r2, [r3], #2
 800d42e:	bfb4      	ite	lt
 800d430:	222d      	movlt	r2, #45	; 0x2d
 800d432:	222b      	movge	r2, #43	; 0x2b
 800d434:	2909      	cmp	r1, #9
 800d436:	7042      	strb	r2, [r0, #1]
 800d438:	dd2a      	ble.n	800d490 <__exponent+0x70>
 800d43a:	f10d 0207 	add.w	r2, sp, #7
 800d43e:	4617      	mov	r7, r2
 800d440:	260a      	movs	r6, #10
 800d442:	4694      	mov	ip, r2
 800d444:	fb91 f5f6 	sdiv	r5, r1, r6
 800d448:	fb06 1415 	mls	r4, r6, r5, r1
 800d44c:	3430      	adds	r4, #48	; 0x30
 800d44e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d452:	460c      	mov	r4, r1
 800d454:	2c63      	cmp	r4, #99	; 0x63
 800d456:	f102 32ff 	add.w	r2, r2, #4294967295
 800d45a:	4629      	mov	r1, r5
 800d45c:	dcf1      	bgt.n	800d442 <__exponent+0x22>
 800d45e:	3130      	adds	r1, #48	; 0x30
 800d460:	f1ac 0402 	sub.w	r4, ip, #2
 800d464:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d468:	1c41      	adds	r1, r0, #1
 800d46a:	4622      	mov	r2, r4
 800d46c:	42ba      	cmp	r2, r7
 800d46e:	d30a      	bcc.n	800d486 <__exponent+0x66>
 800d470:	f10d 0209 	add.w	r2, sp, #9
 800d474:	eba2 020c 	sub.w	r2, r2, ip
 800d478:	42bc      	cmp	r4, r7
 800d47a:	bf88      	it	hi
 800d47c:	2200      	movhi	r2, #0
 800d47e:	4413      	add	r3, r2
 800d480:	1a18      	subs	r0, r3, r0
 800d482:	b003      	add	sp, #12
 800d484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d486:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d48a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d48e:	e7ed      	b.n	800d46c <__exponent+0x4c>
 800d490:	2330      	movs	r3, #48	; 0x30
 800d492:	3130      	adds	r1, #48	; 0x30
 800d494:	7083      	strb	r3, [r0, #2]
 800d496:	70c1      	strb	r1, [r0, #3]
 800d498:	1d03      	adds	r3, r0, #4
 800d49a:	e7f1      	b.n	800d480 <__exponent+0x60>

0800d49c <_printf_float>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	ed2d 8b02 	vpush	{d8}
 800d4a4:	b08d      	sub	sp, #52	; 0x34
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d4ac:	4616      	mov	r6, r2
 800d4ae:	461f      	mov	r7, r3
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	f000 fe03 	bl	800e0bc <_localeconv_r>
 800d4b6:	f8d0 a000 	ldr.w	sl, [r0]
 800d4ba:	4650      	mov	r0, sl
 800d4bc:	f7f2 fed8 	bl	8000270 <strlen>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	9305      	str	r3, [sp, #20]
 800d4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d4cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d4d0:	3307      	adds	r3, #7
 800d4d2:	f023 0307 	bic.w	r3, r3, #7
 800d4d6:	f103 0208 	add.w	r2, r3, #8
 800d4da:	f8c8 2000 	str.w	r2, [r8]
 800d4de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4e6:	9307      	str	r3, [sp, #28]
 800d4e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d4ec:	ee08 0a10 	vmov	s16, r0
 800d4f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d4f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4f8:	4b9e      	ldr	r3, [pc, #632]	; (800d774 <_printf_float+0x2d8>)
 800d4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fe:	f7f3 fb15 	bl	8000b2c <__aeabi_dcmpun>
 800d502:	bb88      	cbnz	r0, 800d568 <_printf_float+0xcc>
 800d504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d508:	4b9a      	ldr	r3, [pc, #616]	; (800d774 <_printf_float+0x2d8>)
 800d50a:	f04f 32ff 	mov.w	r2, #4294967295
 800d50e:	f7f3 faef 	bl	8000af0 <__aeabi_dcmple>
 800d512:	bb48      	cbnz	r0, 800d568 <_printf_float+0xcc>
 800d514:	2200      	movs	r2, #0
 800d516:	2300      	movs	r3, #0
 800d518:	4640      	mov	r0, r8
 800d51a:	4649      	mov	r1, r9
 800d51c:	f7f3 fade 	bl	8000adc <__aeabi_dcmplt>
 800d520:	b110      	cbz	r0, 800d528 <_printf_float+0x8c>
 800d522:	232d      	movs	r3, #45	; 0x2d
 800d524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d528:	4a93      	ldr	r2, [pc, #588]	; (800d778 <_printf_float+0x2dc>)
 800d52a:	4b94      	ldr	r3, [pc, #592]	; (800d77c <_printf_float+0x2e0>)
 800d52c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d530:	bf94      	ite	ls
 800d532:	4690      	movls	r8, r2
 800d534:	4698      	movhi	r8, r3
 800d536:	2303      	movs	r3, #3
 800d538:	6123      	str	r3, [r4, #16]
 800d53a:	9b05      	ldr	r3, [sp, #20]
 800d53c:	f023 0304 	bic.w	r3, r3, #4
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	f04f 0900 	mov.w	r9, #0
 800d546:	9700      	str	r7, [sp, #0]
 800d548:	4633      	mov	r3, r6
 800d54a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d54c:	4621      	mov	r1, r4
 800d54e:	4628      	mov	r0, r5
 800d550:	f000 f9da 	bl	800d908 <_printf_common>
 800d554:	3001      	adds	r0, #1
 800d556:	f040 8090 	bne.w	800d67a <_printf_float+0x1de>
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295
 800d55e:	b00d      	add	sp, #52	; 0x34
 800d560:	ecbd 8b02 	vpop	{d8}
 800d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d568:	4642      	mov	r2, r8
 800d56a:	464b      	mov	r3, r9
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f3 fadc 	bl	8000b2c <__aeabi_dcmpun>
 800d574:	b140      	cbz	r0, 800d588 <_printf_float+0xec>
 800d576:	464b      	mov	r3, r9
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bfbc      	itt	lt
 800d57c:	232d      	movlt	r3, #45	; 0x2d
 800d57e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d582:	4a7f      	ldr	r2, [pc, #508]	; (800d780 <_printf_float+0x2e4>)
 800d584:	4b7f      	ldr	r3, [pc, #508]	; (800d784 <_printf_float+0x2e8>)
 800d586:	e7d1      	b.n	800d52c <_printf_float+0x90>
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d58e:	9206      	str	r2, [sp, #24]
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	d13f      	bne.n	800d614 <_printf_float+0x178>
 800d594:	2306      	movs	r3, #6
 800d596:	6063      	str	r3, [r4, #4]
 800d598:	9b05      	ldr	r3, [sp, #20]
 800d59a:	6861      	ldr	r1, [r4, #4]
 800d59c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	ab0a      	add	r3, sp, #40	; 0x28
 800d5a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d5aa:	ab09      	add	r3, sp, #36	; 0x24
 800d5ac:	ec49 8b10 	vmov	d0, r8, r9
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	6022      	str	r2, [r4, #0]
 800d5b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f7ff fecf 	bl	800d35c <__cvt>
 800d5be:	9b06      	ldr	r3, [sp, #24]
 800d5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5c2:	2b47      	cmp	r3, #71	; 0x47
 800d5c4:	4680      	mov	r8, r0
 800d5c6:	d108      	bne.n	800d5da <_printf_float+0x13e>
 800d5c8:	1cc8      	adds	r0, r1, #3
 800d5ca:	db02      	blt.n	800d5d2 <_printf_float+0x136>
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	dd41      	ble.n	800d656 <_printf_float+0x1ba>
 800d5d2:	f1ab 0302 	sub.w	r3, fp, #2
 800d5d6:	fa5f fb83 	uxtb.w	fp, r3
 800d5da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d5de:	d820      	bhi.n	800d622 <_printf_float+0x186>
 800d5e0:	3901      	subs	r1, #1
 800d5e2:	465a      	mov	r2, fp
 800d5e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d5e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d5ea:	f7ff ff19 	bl	800d420 <__exponent>
 800d5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5f0:	1813      	adds	r3, r2, r0
 800d5f2:	2a01      	cmp	r2, #1
 800d5f4:	4681      	mov	r9, r0
 800d5f6:	6123      	str	r3, [r4, #16]
 800d5f8:	dc02      	bgt.n	800d600 <_printf_float+0x164>
 800d5fa:	6822      	ldr	r2, [r4, #0]
 800d5fc:	07d2      	lsls	r2, r2, #31
 800d5fe:	d501      	bpl.n	800d604 <_printf_float+0x168>
 800d600:	3301      	adds	r3, #1
 800d602:	6123      	str	r3, [r4, #16]
 800d604:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d09c      	beq.n	800d546 <_printf_float+0xaa>
 800d60c:	232d      	movs	r3, #45	; 0x2d
 800d60e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d612:	e798      	b.n	800d546 <_printf_float+0xaa>
 800d614:	9a06      	ldr	r2, [sp, #24]
 800d616:	2a47      	cmp	r2, #71	; 0x47
 800d618:	d1be      	bne.n	800d598 <_printf_float+0xfc>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1bc      	bne.n	800d598 <_printf_float+0xfc>
 800d61e:	2301      	movs	r3, #1
 800d620:	e7b9      	b.n	800d596 <_printf_float+0xfa>
 800d622:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d626:	d118      	bne.n	800d65a <_printf_float+0x1be>
 800d628:	2900      	cmp	r1, #0
 800d62a:	6863      	ldr	r3, [r4, #4]
 800d62c:	dd0b      	ble.n	800d646 <_printf_float+0x1aa>
 800d62e:	6121      	str	r1, [r4, #16]
 800d630:	b913      	cbnz	r3, 800d638 <_printf_float+0x19c>
 800d632:	6822      	ldr	r2, [r4, #0]
 800d634:	07d0      	lsls	r0, r2, #31
 800d636:	d502      	bpl.n	800d63e <_printf_float+0x1a2>
 800d638:	3301      	adds	r3, #1
 800d63a:	440b      	add	r3, r1
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d640:	f04f 0900 	mov.w	r9, #0
 800d644:	e7de      	b.n	800d604 <_printf_float+0x168>
 800d646:	b913      	cbnz	r3, 800d64e <_printf_float+0x1b2>
 800d648:	6822      	ldr	r2, [r4, #0]
 800d64a:	07d2      	lsls	r2, r2, #31
 800d64c:	d501      	bpl.n	800d652 <_printf_float+0x1b6>
 800d64e:	3302      	adds	r3, #2
 800d650:	e7f4      	b.n	800d63c <_printf_float+0x1a0>
 800d652:	2301      	movs	r3, #1
 800d654:	e7f2      	b.n	800d63c <_printf_float+0x1a0>
 800d656:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d65c:	4299      	cmp	r1, r3
 800d65e:	db05      	blt.n	800d66c <_printf_float+0x1d0>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	6121      	str	r1, [r4, #16]
 800d664:	07d8      	lsls	r0, r3, #31
 800d666:	d5ea      	bpl.n	800d63e <_printf_float+0x1a2>
 800d668:	1c4b      	adds	r3, r1, #1
 800d66a:	e7e7      	b.n	800d63c <_printf_float+0x1a0>
 800d66c:	2900      	cmp	r1, #0
 800d66e:	bfd4      	ite	le
 800d670:	f1c1 0202 	rsble	r2, r1, #2
 800d674:	2201      	movgt	r2, #1
 800d676:	4413      	add	r3, r2
 800d678:	e7e0      	b.n	800d63c <_printf_float+0x1a0>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	055a      	lsls	r2, r3, #21
 800d67e:	d407      	bmi.n	800d690 <_printf_float+0x1f4>
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	4642      	mov	r2, r8
 800d684:	4631      	mov	r1, r6
 800d686:	4628      	mov	r0, r5
 800d688:	47b8      	blx	r7
 800d68a:	3001      	adds	r0, #1
 800d68c:	d12c      	bne.n	800d6e8 <_printf_float+0x24c>
 800d68e:	e764      	b.n	800d55a <_printf_float+0xbe>
 800d690:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d694:	f240 80e0 	bls.w	800d858 <_printf_float+0x3bc>
 800d698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d69c:	2200      	movs	r2, #0
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f7f3 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d034      	beq.n	800d712 <_printf_float+0x276>
 800d6a8:	4a37      	ldr	r2, [pc, #220]	; (800d788 <_printf_float+0x2ec>)
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	47b8      	blx	r7
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	f43f af51 	beq.w	800d55a <_printf_float+0xbe>
 800d6b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	db02      	blt.n	800d6c6 <_printf_float+0x22a>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	07d8      	lsls	r0, r3, #31
 800d6c4:	d510      	bpl.n	800d6e8 <_printf_float+0x24c>
 800d6c6:	ee18 3a10 	vmov	r3, s16
 800d6ca:	4652      	mov	r2, sl
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	47b8      	blx	r7
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	f43f af41 	beq.w	800d55a <_printf_float+0xbe>
 800d6d8:	f04f 0800 	mov.w	r8, #0
 800d6dc:	f104 091a 	add.w	r9, r4, #26
 800d6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	4543      	cmp	r3, r8
 800d6e6:	dc09      	bgt.n	800d6fc <_printf_float+0x260>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	079b      	lsls	r3, r3, #30
 800d6ec:	f100 8107 	bmi.w	800d8fe <_printf_float+0x462>
 800d6f0:	68e0      	ldr	r0, [r4, #12]
 800d6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f4:	4298      	cmp	r0, r3
 800d6f6:	bfb8      	it	lt
 800d6f8:	4618      	movlt	r0, r3
 800d6fa:	e730      	b.n	800d55e <_printf_float+0xc2>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	464a      	mov	r2, r9
 800d700:	4631      	mov	r1, r6
 800d702:	4628      	mov	r0, r5
 800d704:	47b8      	blx	r7
 800d706:	3001      	adds	r0, #1
 800d708:	f43f af27 	beq.w	800d55a <_printf_float+0xbe>
 800d70c:	f108 0801 	add.w	r8, r8, #1
 800d710:	e7e6      	b.n	800d6e0 <_printf_float+0x244>
 800d712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d714:	2b00      	cmp	r3, #0
 800d716:	dc39      	bgt.n	800d78c <_printf_float+0x2f0>
 800d718:	4a1b      	ldr	r2, [pc, #108]	; (800d788 <_printf_float+0x2ec>)
 800d71a:	2301      	movs	r3, #1
 800d71c:	4631      	mov	r1, r6
 800d71e:	4628      	mov	r0, r5
 800d720:	47b8      	blx	r7
 800d722:	3001      	adds	r0, #1
 800d724:	f43f af19 	beq.w	800d55a <_printf_float+0xbe>
 800d728:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d72c:	4313      	orrs	r3, r2
 800d72e:	d102      	bne.n	800d736 <_printf_float+0x29a>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	07d9      	lsls	r1, r3, #31
 800d734:	d5d8      	bpl.n	800d6e8 <_printf_float+0x24c>
 800d736:	ee18 3a10 	vmov	r3, s16
 800d73a:	4652      	mov	r2, sl
 800d73c:	4631      	mov	r1, r6
 800d73e:	4628      	mov	r0, r5
 800d740:	47b8      	blx	r7
 800d742:	3001      	adds	r0, #1
 800d744:	f43f af09 	beq.w	800d55a <_printf_float+0xbe>
 800d748:	f04f 0900 	mov.w	r9, #0
 800d74c:	f104 0a1a 	add.w	sl, r4, #26
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	425b      	negs	r3, r3
 800d754:	454b      	cmp	r3, r9
 800d756:	dc01      	bgt.n	800d75c <_printf_float+0x2c0>
 800d758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75a:	e792      	b.n	800d682 <_printf_float+0x1e6>
 800d75c:	2301      	movs	r3, #1
 800d75e:	4652      	mov	r2, sl
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	47b8      	blx	r7
 800d766:	3001      	adds	r0, #1
 800d768:	f43f aef7 	beq.w	800d55a <_printf_float+0xbe>
 800d76c:	f109 0901 	add.w	r9, r9, #1
 800d770:	e7ee      	b.n	800d750 <_printf_float+0x2b4>
 800d772:	bf00      	nop
 800d774:	7fefffff 	.word	0x7fefffff
 800d778:	08012110 	.word	0x08012110
 800d77c:	08012114 	.word	0x08012114
 800d780:	08012118 	.word	0x08012118
 800d784:	0801211c 	.word	0x0801211c
 800d788:	08012120 	.word	0x08012120
 800d78c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d78e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d790:	429a      	cmp	r2, r3
 800d792:	bfa8      	it	ge
 800d794:	461a      	movge	r2, r3
 800d796:	2a00      	cmp	r2, #0
 800d798:	4691      	mov	r9, r2
 800d79a:	dc37      	bgt.n	800d80c <_printf_float+0x370>
 800d79c:	f04f 0b00 	mov.w	fp, #0
 800d7a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7a4:	f104 021a 	add.w	r2, r4, #26
 800d7a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7aa:	9305      	str	r3, [sp, #20]
 800d7ac:	eba3 0309 	sub.w	r3, r3, r9
 800d7b0:	455b      	cmp	r3, fp
 800d7b2:	dc33      	bgt.n	800d81c <_printf_float+0x380>
 800d7b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	db3b      	blt.n	800d834 <_printf_float+0x398>
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	07da      	lsls	r2, r3, #31
 800d7c0:	d438      	bmi.n	800d834 <_printf_float+0x398>
 800d7c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d7c6:	eba2 0903 	sub.w	r9, r2, r3
 800d7ca:	9b05      	ldr	r3, [sp, #20]
 800d7cc:	1ad2      	subs	r2, r2, r3
 800d7ce:	4591      	cmp	r9, r2
 800d7d0:	bfa8      	it	ge
 800d7d2:	4691      	movge	r9, r2
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	dc35      	bgt.n	800d846 <_printf_float+0x3aa>
 800d7da:	f04f 0800 	mov.w	r8, #0
 800d7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7e2:	f104 0a1a 	add.w	sl, r4, #26
 800d7e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	eba3 0309 	sub.w	r3, r3, r9
 800d7f0:	4543      	cmp	r3, r8
 800d7f2:	f77f af79 	ble.w	800d6e8 <_printf_float+0x24c>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4652      	mov	r2, sl
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	f43f aeaa 	beq.w	800d55a <_printf_float+0xbe>
 800d806:	f108 0801 	add.w	r8, r8, #1
 800d80a:	e7ec      	b.n	800d7e6 <_printf_float+0x34a>
 800d80c:	4613      	mov	r3, r2
 800d80e:	4631      	mov	r1, r6
 800d810:	4642      	mov	r2, r8
 800d812:	4628      	mov	r0, r5
 800d814:	47b8      	blx	r7
 800d816:	3001      	adds	r0, #1
 800d818:	d1c0      	bne.n	800d79c <_printf_float+0x300>
 800d81a:	e69e      	b.n	800d55a <_printf_float+0xbe>
 800d81c:	2301      	movs	r3, #1
 800d81e:	4631      	mov	r1, r6
 800d820:	4628      	mov	r0, r5
 800d822:	9205      	str	r2, [sp, #20]
 800d824:	47b8      	blx	r7
 800d826:	3001      	adds	r0, #1
 800d828:	f43f ae97 	beq.w	800d55a <_printf_float+0xbe>
 800d82c:	9a05      	ldr	r2, [sp, #20]
 800d82e:	f10b 0b01 	add.w	fp, fp, #1
 800d832:	e7b9      	b.n	800d7a8 <_printf_float+0x30c>
 800d834:	ee18 3a10 	vmov	r3, s16
 800d838:	4652      	mov	r2, sl
 800d83a:	4631      	mov	r1, r6
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	d1be      	bne.n	800d7c2 <_printf_float+0x326>
 800d844:	e689      	b.n	800d55a <_printf_float+0xbe>
 800d846:	9a05      	ldr	r2, [sp, #20]
 800d848:	464b      	mov	r3, r9
 800d84a:	4442      	add	r2, r8
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	47b8      	blx	r7
 800d852:	3001      	adds	r0, #1
 800d854:	d1c1      	bne.n	800d7da <_printf_float+0x33e>
 800d856:	e680      	b.n	800d55a <_printf_float+0xbe>
 800d858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d85a:	2a01      	cmp	r2, #1
 800d85c:	dc01      	bgt.n	800d862 <_printf_float+0x3c6>
 800d85e:	07db      	lsls	r3, r3, #31
 800d860:	d53a      	bpl.n	800d8d8 <_printf_float+0x43c>
 800d862:	2301      	movs	r3, #1
 800d864:	4642      	mov	r2, r8
 800d866:	4631      	mov	r1, r6
 800d868:	4628      	mov	r0, r5
 800d86a:	47b8      	blx	r7
 800d86c:	3001      	adds	r0, #1
 800d86e:	f43f ae74 	beq.w	800d55a <_printf_float+0xbe>
 800d872:	ee18 3a10 	vmov	r3, s16
 800d876:	4652      	mov	r2, sl
 800d878:	4631      	mov	r1, r6
 800d87a:	4628      	mov	r0, r5
 800d87c:	47b8      	blx	r7
 800d87e:	3001      	adds	r0, #1
 800d880:	f43f ae6b 	beq.w	800d55a <_printf_float+0xbe>
 800d884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d888:	2200      	movs	r2, #0
 800d88a:	2300      	movs	r3, #0
 800d88c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d890:	f7f3 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d894:	b9d8      	cbnz	r0, 800d8ce <_printf_float+0x432>
 800d896:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d89a:	f108 0201 	add.w	r2, r8, #1
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b8      	blx	r7
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d10e      	bne.n	800d8c6 <_printf_float+0x42a>
 800d8a8:	e657      	b.n	800d55a <_printf_float+0xbe>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4652      	mov	r2, sl
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f ae50 	beq.w	800d55a <_printf_float+0xbe>
 800d8ba:	f108 0801 	add.w	r8, r8, #1
 800d8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4543      	cmp	r3, r8
 800d8c4:	dcf1      	bgt.n	800d8aa <_printf_float+0x40e>
 800d8c6:	464b      	mov	r3, r9
 800d8c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d8cc:	e6da      	b.n	800d684 <_printf_float+0x1e8>
 800d8ce:	f04f 0800 	mov.w	r8, #0
 800d8d2:	f104 0a1a 	add.w	sl, r4, #26
 800d8d6:	e7f2      	b.n	800d8be <_printf_float+0x422>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4642      	mov	r2, r8
 800d8dc:	e7df      	b.n	800d89e <_printf_float+0x402>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	464a      	mov	r2, r9
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	47b8      	blx	r7
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f43f ae36 	beq.w	800d55a <_printf_float+0xbe>
 800d8ee:	f108 0801 	add.w	r8, r8, #1
 800d8f2:	68e3      	ldr	r3, [r4, #12]
 800d8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8f6:	1a5b      	subs	r3, r3, r1
 800d8f8:	4543      	cmp	r3, r8
 800d8fa:	dcf0      	bgt.n	800d8de <_printf_float+0x442>
 800d8fc:	e6f8      	b.n	800d6f0 <_printf_float+0x254>
 800d8fe:	f04f 0800 	mov.w	r8, #0
 800d902:	f104 0919 	add.w	r9, r4, #25
 800d906:	e7f4      	b.n	800d8f2 <_printf_float+0x456>

0800d908 <_printf_common>:
 800d908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d90c:	4616      	mov	r6, r2
 800d90e:	4699      	mov	r9, r3
 800d910:	688a      	ldr	r2, [r1, #8]
 800d912:	690b      	ldr	r3, [r1, #16]
 800d914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d918:	4293      	cmp	r3, r2
 800d91a:	bfb8      	it	lt
 800d91c:	4613      	movlt	r3, r2
 800d91e:	6033      	str	r3, [r6, #0]
 800d920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d924:	4607      	mov	r7, r0
 800d926:	460c      	mov	r4, r1
 800d928:	b10a      	cbz	r2, 800d92e <_printf_common+0x26>
 800d92a:	3301      	adds	r3, #1
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	0699      	lsls	r1, r3, #26
 800d932:	bf42      	ittt	mi
 800d934:	6833      	ldrmi	r3, [r6, #0]
 800d936:	3302      	addmi	r3, #2
 800d938:	6033      	strmi	r3, [r6, #0]
 800d93a:	6825      	ldr	r5, [r4, #0]
 800d93c:	f015 0506 	ands.w	r5, r5, #6
 800d940:	d106      	bne.n	800d950 <_printf_common+0x48>
 800d942:	f104 0a19 	add.w	sl, r4, #25
 800d946:	68e3      	ldr	r3, [r4, #12]
 800d948:	6832      	ldr	r2, [r6, #0]
 800d94a:	1a9b      	subs	r3, r3, r2
 800d94c:	42ab      	cmp	r3, r5
 800d94e:	dc26      	bgt.n	800d99e <_printf_common+0x96>
 800d950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d954:	1e13      	subs	r3, r2, #0
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	bf18      	it	ne
 800d95a:	2301      	movne	r3, #1
 800d95c:	0692      	lsls	r2, r2, #26
 800d95e:	d42b      	bmi.n	800d9b8 <_printf_common+0xb0>
 800d960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d964:	4649      	mov	r1, r9
 800d966:	4638      	mov	r0, r7
 800d968:	47c0      	blx	r8
 800d96a:	3001      	adds	r0, #1
 800d96c:	d01e      	beq.n	800d9ac <_printf_common+0xa4>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	6922      	ldr	r2, [r4, #16]
 800d972:	f003 0306 	and.w	r3, r3, #6
 800d976:	2b04      	cmp	r3, #4
 800d978:	bf02      	ittt	eq
 800d97a:	68e5      	ldreq	r5, [r4, #12]
 800d97c:	6833      	ldreq	r3, [r6, #0]
 800d97e:	1aed      	subeq	r5, r5, r3
 800d980:	68a3      	ldr	r3, [r4, #8]
 800d982:	bf0c      	ite	eq
 800d984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d988:	2500      	movne	r5, #0
 800d98a:	4293      	cmp	r3, r2
 800d98c:	bfc4      	itt	gt
 800d98e:	1a9b      	subgt	r3, r3, r2
 800d990:	18ed      	addgt	r5, r5, r3
 800d992:	2600      	movs	r6, #0
 800d994:	341a      	adds	r4, #26
 800d996:	42b5      	cmp	r5, r6
 800d998:	d11a      	bne.n	800d9d0 <_printf_common+0xc8>
 800d99a:	2000      	movs	r0, #0
 800d99c:	e008      	b.n	800d9b0 <_printf_common+0xa8>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4652      	mov	r2, sl
 800d9a2:	4649      	mov	r1, r9
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	47c0      	blx	r8
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d103      	bne.n	800d9b4 <_printf_common+0xac>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b4:	3501      	adds	r5, #1
 800d9b6:	e7c6      	b.n	800d946 <_printf_common+0x3e>
 800d9b8:	18e1      	adds	r1, r4, r3
 800d9ba:	1c5a      	adds	r2, r3, #1
 800d9bc:	2030      	movs	r0, #48	; 0x30
 800d9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9c2:	4422      	add	r2, r4
 800d9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9cc:	3302      	adds	r3, #2
 800d9ce:	e7c7      	b.n	800d960 <_printf_common+0x58>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	47c0      	blx	r8
 800d9da:	3001      	adds	r0, #1
 800d9dc:	d0e6      	beq.n	800d9ac <_printf_common+0xa4>
 800d9de:	3601      	adds	r6, #1
 800d9e0:	e7d9      	b.n	800d996 <_printf_common+0x8e>
	...

0800d9e4 <_printf_i>:
 800d9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e8:	7e0f      	ldrb	r7, [r1, #24]
 800d9ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9ec:	2f78      	cmp	r7, #120	; 0x78
 800d9ee:	4691      	mov	r9, r2
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	469a      	mov	sl, r3
 800d9f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9fa:	d807      	bhi.n	800da0c <_printf_i+0x28>
 800d9fc:	2f62      	cmp	r7, #98	; 0x62
 800d9fe:	d80a      	bhi.n	800da16 <_printf_i+0x32>
 800da00:	2f00      	cmp	r7, #0
 800da02:	f000 80d4 	beq.w	800dbae <_printf_i+0x1ca>
 800da06:	2f58      	cmp	r7, #88	; 0x58
 800da08:	f000 80c0 	beq.w	800db8c <_printf_i+0x1a8>
 800da0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da14:	e03a      	b.n	800da8c <_printf_i+0xa8>
 800da16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da1a:	2b15      	cmp	r3, #21
 800da1c:	d8f6      	bhi.n	800da0c <_printf_i+0x28>
 800da1e:	a101      	add	r1, pc, #4	; (adr r1, 800da24 <_printf_i+0x40>)
 800da20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da91 	.word	0x0800da91
 800da2c:	0800da0d 	.word	0x0800da0d
 800da30:	0800da0d 	.word	0x0800da0d
 800da34:	0800da0d 	.word	0x0800da0d
 800da38:	0800da0d 	.word	0x0800da0d
 800da3c:	0800da91 	.word	0x0800da91
 800da40:	0800da0d 	.word	0x0800da0d
 800da44:	0800da0d 	.word	0x0800da0d
 800da48:	0800da0d 	.word	0x0800da0d
 800da4c:	0800da0d 	.word	0x0800da0d
 800da50:	0800db95 	.word	0x0800db95
 800da54:	0800dabd 	.word	0x0800dabd
 800da58:	0800db4f 	.word	0x0800db4f
 800da5c:	0800da0d 	.word	0x0800da0d
 800da60:	0800da0d 	.word	0x0800da0d
 800da64:	0800dbb7 	.word	0x0800dbb7
 800da68:	0800da0d 	.word	0x0800da0d
 800da6c:	0800dabd 	.word	0x0800dabd
 800da70:	0800da0d 	.word	0x0800da0d
 800da74:	0800da0d 	.word	0x0800da0d
 800da78:	0800db57 	.word	0x0800db57
 800da7c:	682b      	ldr	r3, [r5, #0]
 800da7e:	1d1a      	adds	r2, r3, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	602a      	str	r2, [r5, #0]
 800da84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da8c:	2301      	movs	r3, #1
 800da8e:	e09f      	b.n	800dbd0 <_printf_i+0x1ec>
 800da90:	6820      	ldr	r0, [r4, #0]
 800da92:	682b      	ldr	r3, [r5, #0]
 800da94:	0607      	lsls	r7, r0, #24
 800da96:	f103 0104 	add.w	r1, r3, #4
 800da9a:	6029      	str	r1, [r5, #0]
 800da9c:	d501      	bpl.n	800daa2 <_printf_i+0xbe>
 800da9e:	681e      	ldr	r6, [r3, #0]
 800daa0:	e003      	b.n	800daaa <_printf_i+0xc6>
 800daa2:	0646      	lsls	r6, r0, #25
 800daa4:	d5fb      	bpl.n	800da9e <_printf_i+0xba>
 800daa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800daaa:	2e00      	cmp	r6, #0
 800daac:	da03      	bge.n	800dab6 <_printf_i+0xd2>
 800daae:	232d      	movs	r3, #45	; 0x2d
 800dab0:	4276      	negs	r6, r6
 800dab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab6:	485a      	ldr	r0, [pc, #360]	; (800dc20 <_printf_i+0x23c>)
 800dab8:	230a      	movs	r3, #10
 800daba:	e012      	b.n	800dae2 <_printf_i+0xfe>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	6820      	ldr	r0, [r4, #0]
 800dac0:	1d19      	adds	r1, r3, #4
 800dac2:	6029      	str	r1, [r5, #0]
 800dac4:	0605      	lsls	r5, r0, #24
 800dac6:	d501      	bpl.n	800dacc <_printf_i+0xe8>
 800dac8:	681e      	ldr	r6, [r3, #0]
 800daca:	e002      	b.n	800dad2 <_printf_i+0xee>
 800dacc:	0641      	lsls	r1, r0, #25
 800dace:	d5fb      	bpl.n	800dac8 <_printf_i+0xe4>
 800dad0:	881e      	ldrh	r6, [r3, #0]
 800dad2:	4853      	ldr	r0, [pc, #332]	; (800dc20 <_printf_i+0x23c>)
 800dad4:	2f6f      	cmp	r7, #111	; 0x6f
 800dad6:	bf0c      	ite	eq
 800dad8:	2308      	moveq	r3, #8
 800dada:	230a      	movne	r3, #10
 800dadc:	2100      	movs	r1, #0
 800dade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dae2:	6865      	ldr	r5, [r4, #4]
 800dae4:	60a5      	str	r5, [r4, #8]
 800dae6:	2d00      	cmp	r5, #0
 800dae8:	bfa2      	ittt	ge
 800daea:	6821      	ldrge	r1, [r4, #0]
 800daec:	f021 0104 	bicge.w	r1, r1, #4
 800daf0:	6021      	strge	r1, [r4, #0]
 800daf2:	b90e      	cbnz	r6, 800daf8 <_printf_i+0x114>
 800daf4:	2d00      	cmp	r5, #0
 800daf6:	d04b      	beq.n	800db90 <_printf_i+0x1ac>
 800daf8:	4615      	mov	r5, r2
 800dafa:	fbb6 f1f3 	udiv	r1, r6, r3
 800dafe:	fb03 6711 	mls	r7, r3, r1, r6
 800db02:	5dc7      	ldrb	r7, [r0, r7]
 800db04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db08:	4637      	mov	r7, r6
 800db0a:	42bb      	cmp	r3, r7
 800db0c:	460e      	mov	r6, r1
 800db0e:	d9f4      	bls.n	800dafa <_printf_i+0x116>
 800db10:	2b08      	cmp	r3, #8
 800db12:	d10b      	bne.n	800db2c <_printf_i+0x148>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	07de      	lsls	r6, r3, #31
 800db18:	d508      	bpl.n	800db2c <_printf_i+0x148>
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	6861      	ldr	r1, [r4, #4]
 800db1e:	4299      	cmp	r1, r3
 800db20:	bfde      	ittt	le
 800db22:	2330      	movle	r3, #48	; 0x30
 800db24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db2c:	1b52      	subs	r2, r2, r5
 800db2e:	6122      	str	r2, [r4, #16]
 800db30:	f8cd a000 	str.w	sl, [sp]
 800db34:	464b      	mov	r3, r9
 800db36:	aa03      	add	r2, sp, #12
 800db38:	4621      	mov	r1, r4
 800db3a:	4640      	mov	r0, r8
 800db3c:	f7ff fee4 	bl	800d908 <_printf_common>
 800db40:	3001      	adds	r0, #1
 800db42:	d14a      	bne.n	800dbda <_printf_i+0x1f6>
 800db44:	f04f 30ff 	mov.w	r0, #4294967295
 800db48:	b004      	add	sp, #16
 800db4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	f043 0320 	orr.w	r3, r3, #32
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	4833      	ldr	r0, [pc, #204]	; (800dc24 <_printf_i+0x240>)
 800db58:	2778      	movs	r7, #120	; 0x78
 800db5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	6829      	ldr	r1, [r5, #0]
 800db62:	061f      	lsls	r7, r3, #24
 800db64:	f851 6b04 	ldr.w	r6, [r1], #4
 800db68:	d402      	bmi.n	800db70 <_printf_i+0x18c>
 800db6a:	065f      	lsls	r7, r3, #25
 800db6c:	bf48      	it	mi
 800db6e:	b2b6      	uxthmi	r6, r6
 800db70:	07df      	lsls	r7, r3, #31
 800db72:	bf48      	it	mi
 800db74:	f043 0320 	orrmi.w	r3, r3, #32
 800db78:	6029      	str	r1, [r5, #0]
 800db7a:	bf48      	it	mi
 800db7c:	6023      	strmi	r3, [r4, #0]
 800db7e:	b91e      	cbnz	r6, 800db88 <_printf_i+0x1a4>
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	f023 0320 	bic.w	r3, r3, #32
 800db86:	6023      	str	r3, [r4, #0]
 800db88:	2310      	movs	r3, #16
 800db8a:	e7a7      	b.n	800dadc <_printf_i+0xf8>
 800db8c:	4824      	ldr	r0, [pc, #144]	; (800dc20 <_printf_i+0x23c>)
 800db8e:	e7e4      	b.n	800db5a <_printf_i+0x176>
 800db90:	4615      	mov	r5, r2
 800db92:	e7bd      	b.n	800db10 <_printf_i+0x12c>
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	6826      	ldr	r6, [r4, #0]
 800db98:	6961      	ldr	r1, [r4, #20]
 800db9a:	1d18      	adds	r0, r3, #4
 800db9c:	6028      	str	r0, [r5, #0]
 800db9e:	0635      	lsls	r5, r6, #24
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	d501      	bpl.n	800dba8 <_printf_i+0x1c4>
 800dba4:	6019      	str	r1, [r3, #0]
 800dba6:	e002      	b.n	800dbae <_printf_i+0x1ca>
 800dba8:	0670      	lsls	r0, r6, #25
 800dbaa:	d5fb      	bpl.n	800dba4 <_printf_i+0x1c0>
 800dbac:	8019      	strh	r1, [r3, #0]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	4615      	mov	r5, r2
 800dbb4:	e7bc      	b.n	800db30 <_printf_i+0x14c>
 800dbb6:	682b      	ldr	r3, [r5, #0]
 800dbb8:	1d1a      	adds	r2, r3, #4
 800dbba:	602a      	str	r2, [r5, #0]
 800dbbc:	681d      	ldr	r5, [r3, #0]
 800dbbe:	6862      	ldr	r2, [r4, #4]
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7f2 fb04 	bl	80001d0 <memchr>
 800dbc8:	b108      	cbz	r0, 800dbce <_printf_i+0x1ea>
 800dbca:	1b40      	subs	r0, r0, r5
 800dbcc:	6060      	str	r0, [r4, #4]
 800dbce:	6863      	ldr	r3, [r4, #4]
 800dbd0:	6123      	str	r3, [r4, #16]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd8:	e7aa      	b.n	800db30 <_printf_i+0x14c>
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	462a      	mov	r2, r5
 800dbde:	4649      	mov	r1, r9
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	47d0      	blx	sl
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d0ad      	beq.n	800db44 <_printf_i+0x160>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	079b      	lsls	r3, r3, #30
 800dbec:	d413      	bmi.n	800dc16 <_printf_i+0x232>
 800dbee:	68e0      	ldr	r0, [r4, #12]
 800dbf0:	9b03      	ldr	r3, [sp, #12]
 800dbf2:	4298      	cmp	r0, r3
 800dbf4:	bfb8      	it	lt
 800dbf6:	4618      	movlt	r0, r3
 800dbf8:	e7a6      	b.n	800db48 <_printf_i+0x164>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	4649      	mov	r1, r9
 800dc00:	4640      	mov	r0, r8
 800dc02:	47d0      	blx	sl
 800dc04:	3001      	adds	r0, #1
 800dc06:	d09d      	beq.n	800db44 <_printf_i+0x160>
 800dc08:	3501      	adds	r5, #1
 800dc0a:	68e3      	ldr	r3, [r4, #12]
 800dc0c:	9903      	ldr	r1, [sp, #12]
 800dc0e:	1a5b      	subs	r3, r3, r1
 800dc10:	42ab      	cmp	r3, r5
 800dc12:	dcf2      	bgt.n	800dbfa <_printf_i+0x216>
 800dc14:	e7eb      	b.n	800dbee <_printf_i+0x20a>
 800dc16:	2500      	movs	r5, #0
 800dc18:	f104 0619 	add.w	r6, r4, #25
 800dc1c:	e7f5      	b.n	800dc0a <_printf_i+0x226>
 800dc1e:	bf00      	nop
 800dc20:	08012122 	.word	0x08012122
 800dc24:	08012133 	.word	0x08012133

0800dc28 <std>:
 800dc28:	2300      	movs	r3, #0
 800dc2a:	b510      	push	{r4, lr}
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc36:	6083      	str	r3, [r0, #8]
 800dc38:	8181      	strh	r1, [r0, #12]
 800dc3a:	6643      	str	r3, [r0, #100]	; 0x64
 800dc3c:	81c2      	strh	r2, [r0, #14]
 800dc3e:	6183      	str	r3, [r0, #24]
 800dc40:	4619      	mov	r1, r3
 800dc42:	2208      	movs	r2, #8
 800dc44:	305c      	adds	r0, #92	; 0x5c
 800dc46:	f000 fa31 	bl	800e0ac <memset>
 800dc4a:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <std+0x58>)
 800dc4c:	6263      	str	r3, [r4, #36]	; 0x24
 800dc4e:	4b0d      	ldr	r3, [pc, #52]	; (800dc84 <std+0x5c>)
 800dc50:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc52:	4b0d      	ldr	r3, [pc, #52]	; (800dc88 <std+0x60>)
 800dc54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc56:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <std+0x64>)
 800dc58:	6323      	str	r3, [r4, #48]	; 0x30
 800dc5a:	4b0d      	ldr	r3, [pc, #52]	; (800dc90 <std+0x68>)
 800dc5c:	6224      	str	r4, [r4, #32]
 800dc5e:	429c      	cmp	r4, r3
 800dc60:	d006      	beq.n	800dc70 <std+0x48>
 800dc62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dc66:	4294      	cmp	r4, r2
 800dc68:	d002      	beq.n	800dc70 <std+0x48>
 800dc6a:	33d0      	adds	r3, #208	; 0xd0
 800dc6c:	429c      	cmp	r4, r3
 800dc6e:	d105      	bne.n	800dc7c <std+0x54>
 800dc70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc78:	f000 ba94 	b.w	800e1a4 <__retarget_lock_init_recursive>
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	bf00      	nop
 800dc80:	0800dec9 	.word	0x0800dec9
 800dc84:	0800deeb 	.word	0x0800deeb
 800dc88:	0800df23 	.word	0x0800df23
 800dc8c:	0800df47 	.word	0x0800df47
 800dc90:	20003d48 	.word	0x20003d48

0800dc94 <stdio_exit_handler>:
 800dc94:	4a02      	ldr	r2, [pc, #8]	; (800dca0 <stdio_exit_handler+0xc>)
 800dc96:	4903      	ldr	r1, [pc, #12]	; (800dca4 <stdio_exit_handler+0x10>)
 800dc98:	4803      	ldr	r0, [pc, #12]	; (800dca8 <stdio_exit_handler+0x14>)
 800dc9a:	f000 b869 	b.w	800dd70 <_fwalk_sglue>
 800dc9e:	bf00      	nop
 800dca0:	20000028 	.word	0x20000028
 800dca4:	0800fdf9 	.word	0x0800fdf9
 800dca8:	20000034 	.word	0x20000034

0800dcac <cleanup_stdio>:
 800dcac:	6841      	ldr	r1, [r0, #4]
 800dcae:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <cleanup_stdio+0x34>)
 800dcb0:	4299      	cmp	r1, r3
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	d001      	beq.n	800dcbc <cleanup_stdio+0x10>
 800dcb8:	f002 f89e 	bl	800fdf8 <_fflush_r>
 800dcbc:	68a1      	ldr	r1, [r4, #8]
 800dcbe:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <cleanup_stdio+0x38>)
 800dcc0:	4299      	cmp	r1, r3
 800dcc2:	d002      	beq.n	800dcca <cleanup_stdio+0x1e>
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f002 f897 	bl	800fdf8 <_fflush_r>
 800dcca:	68e1      	ldr	r1, [r4, #12]
 800dccc:	4b06      	ldr	r3, [pc, #24]	; (800dce8 <cleanup_stdio+0x3c>)
 800dcce:	4299      	cmp	r1, r3
 800dcd0:	d004      	beq.n	800dcdc <cleanup_stdio+0x30>
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcd8:	f002 b88e 	b.w	800fdf8 <_fflush_r>
 800dcdc:	bd10      	pop	{r4, pc}
 800dcde:	bf00      	nop
 800dce0:	20003d48 	.word	0x20003d48
 800dce4:	20003db0 	.word	0x20003db0
 800dce8:	20003e18 	.word	0x20003e18

0800dcec <global_stdio_init.part.0>:
 800dcec:	b510      	push	{r4, lr}
 800dcee:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <global_stdio_init.part.0+0x30>)
 800dcf0:	4c0b      	ldr	r4, [pc, #44]	; (800dd20 <global_stdio_init.part.0+0x34>)
 800dcf2:	4a0c      	ldr	r2, [pc, #48]	; (800dd24 <global_stdio_init.part.0+0x38>)
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	f7ff ff94 	bl	800dc28 <std>
 800dd00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dd04:	2201      	movs	r2, #1
 800dd06:	2109      	movs	r1, #9
 800dd08:	f7ff ff8e 	bl	800dc28 <std>
 800dd0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dd10:	2202      	movs	r2, #2
 800dd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd16:	2112      	movs	r1, #18
 800dd18:	f7ff bf86 	b.w	800dc28 <std>
 800dd1c:	20003e80 	.word	0x20003e80
 800dd20:	20003d48 	.word	0x20003d48
 800dd24:	0800dc95 	.word	0x0800dc95

0800dd28 <__sfp_lock_acquire>:
 800dd28:	4801      	ldr	r0, [pc, #4]	; (800dd30 <__sfp_lock_acquire+0x8>)
 800dd2a:	f000 ba3c 	b.w	800e1a6 <__retarget_lock_acquire_recursive>
 800dd2e:	bf00      	nop
 800dd30:	20003e89 	.word	0x20003e89

0800dd34 <__sfp_lock_release>:
 800dd34:	4801      	ldr	r0, [pc, #4]	; (800dd3c <__sfp_lock_release+0x8>)
 800dd36:	f000 ba37 	b.w	800e1a8 <__retarget_lock_release_recursive>
 800dd3a:	bf00      	nop
 800dd3c:	20003e89 	.word	0x20003e89

0800dd40 <__sinit>:
 800dd40:	b510      	push	{r4, lr}
 800dd42:	4604      	mov	r4, r0
 800dd44:	f7ff fff0 	bl	800dd28 <__sfp_lock_acquire>
 800dd48:	6a23      	ldr	r3, [r4, #32]
 800dd4a:	b11b      	cbz	r3, 800dd54 <__sinit+0x14>
 800dd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd50:	f7ff bff0 	b.w	800dd34 <__sfp_lock_release>
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <__sinit+0x28>)
 800dd56:	6223      	str	r3, [r4, #32]
 800dd58:	4b04      	ldr	r3, [pc, #16]	; (800dd6c <__sinit+0x2c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1f5      	bne.n	800dd4c <__sinit+0xc>
 800dd60:	f7ff ffc4 	bl	800dcec <global_stdio_init.part.0>
 800dd64:	e7f2      	b.n	800dd4c <__sinit+0xc>
 800dd66:	bf00      	nop
 800dd68:	0800dcad 	.word	0x0800dcad
 800dd6c:	20003e80 	.word	0x20003e80

0800dd70 <_fwalk_sglue>:
 800dd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd74:	4607      	mov	r7, r0
 800dd76:	4688      	mov	r8, r1
 800dd78:	4614      	mov	r4, r2
 800dd7a:	2600      	movs	r6, #0
 800dd7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd80:	f1b9 0901 	subs.w	r9, r9, #1
 800dd84:	d505      	bpl.n	800dd92 <_fwalk_sglue+0x22>
 800dd86:	6824      	ldr	r4, [r4, #0]
 800dd88:	2c00      	cmp	r4, #0
 800dd8a:	d1f7      	bne.n	800dd7c <_fwalk_sglue+0xc>
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d907      	bls.n	800dda8 <_fwalk_sglue+0x38>
 800dd98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	d003      	beq.n	800dda8 <_fwalk_sglue+0x38>
 800dda0:	4629      	mov	r1, r5
 800dda2:	4638      	mov	r0, r7
 800dda4:	47c0      	blx	r8
 800dda6:	4306      	orrs	r6, r0
 800dda8:	3568      	adds	r5, #104	; 0x68
 800ddaa:	e7e9      	b.n	800dd80 <_fwalk_sglue+0x10>

0800ddac <iprintf>:
 800ddac:	b40f      	push	{r0, r1, r2, r3}
 800ddae:	b507      	push	{r0, r1, r2, lr}
 800ddb0:	4906      	ldr	r1, [pc, #24]	; (800ddcc <iprintf+0x20>)
 800ddb2:	ab04      	add	r3, sp, #16
 800ddb4:	6808      	ldr	r0, [r1, #0]
 800ddb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddba:	6881      	ldr	r1, [r0, #8]
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	f001 fe7b 	bl	800fab8 <_vfiprintf_r>
 800ddc2:	b003      	add	sp, #12
 800ddc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc8:	b004      	add	sp, #16
 800ddca:	4770      	bx	lr
 800ddcc:	20000080 	.word	0x20000080

0800ddd0 <_puts_r>:
 800ddd0:	6a03      	ldr	r3, [r0, #32]
 800ddd2:	b570      	push	{r4, r5, r6, lr}
 800ddd4:	6884      	ldr	r4, [r0, #8]
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	460e      	mov	r6, r1
 800ddda:	b90b      	cbnz	r3, 800dde0 <_puts_r+0x10>
 800dddc:	f7ff ffb0 	bl	800dd40 <__sinit>
 800dde0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dde2:	07db      	lsls	r3, r3, #31
 800dde4:	d405      	bmi.n	800ddf2 <_puts_r+0x22>
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	0598      	lsls	r0, r3, #22
 800ddea:	d402      	bmi.n	800ddf2 <_puts_r+0x22>
 800ddec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddee:	f000 f9da 	bl	800e1a6 <__retarget_lock_acquire_recursive>
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	0719      	lsls	r1, r3, #28
 800ddf6:	d513      	bpl.n	800de20 <_puts_r+0x50>
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	b18b      	cbz	r3, 800de20 <_puts_r+0x50>
 800ddfc:	3e01      	subs	r6, #1
 800ddfe:	68a3      	ldr	r3, [r4, #8]
 800de00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de04:	3b01      	subs	r3, #1
 800de06:	60a3      	str	r3, [r4, #8]
 800de08:	b9e9      	cbnz	r1, 800de46 <_puts_r+0x76>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da2e      	bge.n	800de6c <_puts_r+0x9c>
 800de0e:	4622      	mov	r2, r4
 800de10:	210a      	movs	r1, #10
 800de12:	4628      	mov	r0, r5
 800de14:	f000 f89b 	bl	800df4e <__swbuf_r>
 800de18:	3001      	adds	r0, #1
 800de1a:	d007      	beq.n	800de2c <_puts_r+0x5c>
 800de1c:	250a      	movs	r5, #10
 800de1e:	e007      	b.n	800de30 <_puts_r+0x60>
 800de20:	4621      	mov	r1, r4
 800de22:	4628      	mov	r0, r5
 800de24:	f000 f8d0 	bl	800dfc8 <__swsetup_r>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d0e7      	beq.n	800ddfc <_puts_r+0x2c>
 800de2c:	f04f 35ff 	mov.w	r5, #4294967295
 800de30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de32:	07da      	lsls	r2, r3, #31
 800de34:	d405      	bmi.n	800de42 <_puts_r+0x72>
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	059b      	lsls	r3, r3, #22
 800de3a:	d402      	bmi.n	800de42 <_puts_r+0x72>
 800de3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de3e:	f000 f9b3 	bl	800e1a8 <__retarget_lock_release_recursive>
 800de42:	4628      	mov	r0, r5
 800de44:	bd70      	pop	{r4, r5, r6, pc}
 800de46:	2b00      	cmp	r3, #0
 800de48:	da04      	bge.n	800de54 <_puts_r+0x84>
 800de4a:	69a2      	ldr	r2, [r4, #24]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	dc06      	bgt.n	800de5e <_puts_r+0x8e>
 800de50:	290a      	cmp	r1, #10
 800de52:	d004      	beq.n	800de5e <_puts_r+0x8e>
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	1c5a      	adds	r2, r3, #1
 800de58:	6022      	str	r2, [r4, #0]
 800de5a:	7019      	strb	r1, [r3, #0]
 800de5c:	e7cf      	b.n	800ddfe <_puts_r+0x2e>
 800de5e:	4622      	mov	r2, r4
 800de60:	4628      	mov	r0, r5
 800de62:	f000 f874 	bl	800df4e <__swbuf_r>
 800de66:	3001      	adds	r0, #1
 800de68:	d1c9      	bne.n	800ddfe <_puts_r+0x2e>
 800de6a:	e7df      	b.n	800de2c <_puts_r+0x5c>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	250a      	movs	r5, #10
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	6022      	str	r2, [r4, #0]
 800de74:	701d      	strb	r5, [r3, #0]
 800de76:	e7db      	b.n	800de30 <_puts_r+0x60>

0800de78 <puts>:
 800de78:	4b02      	ldr	r3, [pc, #8]	; (800de84 <puts+0xc>)
 800de7a:	4601      	mov	r1, r0
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	f7ff bfa7 	b.w	800ddd0 <_puts_r>
 800de82:	bf00      	nop
 800de84:	20000080 	.word	0x20000080

0800de88 <siprintf>:
 800de88:	b40e      	push	{r1, r2, r3}
 800de8a:	b500      	push	{lr}
 800de8c:	b09c      	sub	sp, #112	; 0x70
 800de8e:	ab1d      	add	r3, sp, #116	; 0x74
 800de90:	9002      	str	r0, [sp, #8]
 800de92:	9006      	str	r0, [sp, #24]
 800de94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de98:	4809      	ldr	r0, [pc, #36]	; (800dec0 <siprintf+0x38>)
 800de9a:	9107      	str	r1, [sp, #28]
 800de9c:	9104      	str	r1, [sp, #16]
 800de9e:	4909      	ldr	r1, [pc, #36]	; (800dec4 <siprintf+0x3c>)
 800dea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea4:	9105      	str	r1, [sp, #20]
 800dea6:	6800      	ldr	r0, [r0, #0]
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	a902      	add	r1, sp, #8
 800deac:	f001 fcdc 	bl	800f868 <_svfiprintf_r>
 800deb0:	9b02      	ldr	r3, [sp, #8]
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	b01c      	add	sp, #112	; 0x70
 800deb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800debc:	b003      	add	sp, #12
 800debe:	4770      	bx	lr
 800dec0:	20000080 	.word	0x20000080
 800dec4:	ffff0208 	.word	0xffff0208

0800dec8 <__sread>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	460c      	mov	r4, r1
 800decc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded0:	f000 f91a 	bl	800e108 <_read_r>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	bfab      	itete	ge
 800ded8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800deda:	89a3      	ldrhlt	r3, [r4, #12]
 800dedc:	181b      	addge	r3, r3, r0
 800dede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dee2:	bfac      	ite	ge
 800dee4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dee6:	81a3      	strhlt	r3, [r4, #12]
 800dee8:	bd10      	pop	{r4, pc}

0800deea <__swrite>:
 800deea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deee:	461f      	mov	r7, r3
 800def0:	898b      	ldrh	r3, [r1, #12]
 800def2:	05db      	lsls	r3, r3, #23
 800def4:	4605      	mov	r5, r0
 800def6:	460c      	mov	r4, r1
 800def8:	4616      	mov	r6, r2
 800defa:	d505      	bpl.n	800df08 <__swrite+0x1e>
 800defc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df00:	2302      	movs	r3, #2
 800df02:	2200      	movs	r2, #0
 800df04:	f000 f8ee 	bl	800e0e4 <_lseek_r>
 800df08:	89a3      	ldrh	r3, [r4, #12]
 800df0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df12:	81a3      	strh	r3, [r4, #12]
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	4628      	mov	r0, r5
 800df1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df1e:	f000 b905 	b.w	800e12c <_write_r>

0800df22 <__sseek>:
 800df22:	b510      	push	{r4, lr}
 800df24:	460c      	mov	r4, r1
 800df26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2a:	f000 f8db 	bl	800e0e4 <_lseek_r>
 800df2e:	1c43      	adds	r3, r0, #1
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	bf15      	itete	ne
 800df34:	6560      	strne	r0, [r4, #84]	; 0x54
 800df36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df3e:	81a3      	strheq	r3, [r4, #12]
 800df40:	bf18      	it	ne
 800df42:	81a3      	strhne	r3, [r4, #12]
 800df44:	bd10      	pop	{r4, pc}

0800df46 <__sclose>:
 800df46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4a:	f000 b8bb 	b.w	800e0c4 <_close_r>

0800df4e <__swbuf_r>:
 800df4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df50:	460e      	mov	r6, r1
 800df52:	4614      	mov	r4, r2
 800df54:	4605      	mov	r5, r0
 800df56:	b118      	cbz	r0, 800df60 <__swbuf_r+0x12>
 800df58:	6a03      	ldr	r3, [r0, #32]
 800df5a:	b90b      	cbnz	r3, 800df60 <__swbuf_r+0x12>
 800df5c:	f7ff fef0 	bl	800dd40 <__sinit>
 800df60:	69a3      	ldr	r3, [r4, #24]
 800df62:	60a3      	str	r3, [r4, #8]
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	071a      	lsls	r2, r3, #28
 800df68:	d525      	bpl.n	800dfb6 <__swbuf_r+0x68>
 800df6a:	6923      	ldr	r3, [r4, #16]
 800df6c:	b31b      	cbz	r3, 800dfb6 <__swbuf_r+0x68>
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	6922      	ldr	r2, [r4, #16]
 800df72:	1a98      	subs	r0, r3, r2
 800df74:	6963      	ldr	r3, [r4, #20]
 800df76:	b2f6      	uxtb	r6, r6
 800df78:	4283      	cmp	r3, r0
 800df7a:	4637      	mov	r7, r6
 800df7c:	dc04      	bgt.n	800df88 <__swbuf_r+0x3a>
 800df7e:	4621      	mov	r1, r4
 800df80:	4628      	mov	r0, r5
 800df82:	f001 ff39 	bl	800fdf8 <_fflush_r>
 800df86:	b9e0      	cbnz	r0, 800dfc2 <__swbuf_r+0x74>
 800df88:	68a3      	ldr	r3, [r4, #8]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	60a3      	str	r3, [r4, #8]
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	6022      	str	r2, [r4, #0]
 800df94:	701e      	strb	r6, [r3, #0]
 800df96:	6962      	ldr	r2, [r4, #20]
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d004      	beq.n	800dfa8 <__swbuf_r+0x5a>
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	07db      	lsls	r3, r3, #31
 800dfa2:	d506      	bpl.n	800dfb2 <__swbuf_r+0x64>
 800dfa4:	2e0a      	cmp	r6, #10
 800dfa6:	d104      	bne.n	800dfb2 <__swbuf_r+0x64>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f001 ff24 	bl	800fdf8 <_fflush_r>
 800dfb0:	b938      	cbnz	r0, 800dfc2 <__swbuf_r+0x74>
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f000 f805 	bl	800dfc8 <__swsetup_r>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d0d5      	beq.n	800df6e <__swbuf_r+0x20>
 800dfc2:	f04f 37ff 	mov.w	r7, #4294967295
 800dfc6:	e7f4      	b.n	800dfb2 <__swbuf_r+0x64>

0800dfc8 <__swsetup_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4b2a      	ldr	r3, [pc, #168]	; (800e074 <__swsetup_r+0xac>)
 800dfcc:	4605      	mov	r5, r0
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	b118      	cbz	r0, 800dfdc <__swsetup_r+0x14>
 800dfd4:	6a03      	ldr	r3, [r0, #32]
 800dfd6:	b90b      	cbnz	r3, 800dfdc <__swsetup_r+0x14>
 800dfd8:	f7ff feb2 	bl	800dd40 <__sinit>
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfe2:	0718      	lsls	r0, r3, #28
 800dfe4:	d422      	bmi.n	800e02c <__swsetup_r+0x64>
 800dfe6:	06d9      	lsls	r1, r3, #27
 800dfe8:	d407      	bmi.n	800dffa <__swsetup_r+0x32>
 800dfea:	2309      	movs	r3, #9
 800dfec:	602b      	str	r3, [r5, #0]
 800dfee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295
 800dff8:	e034      	b.n	800e064 <__swsetup_r+0x9c>
 800dffa:	0758      	lsls	r0, r3, #29
 800dffc:	d512      	bpl.n	800e024 <__swsetup_r+0x5c>
 800dffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e000:	b141      	cbz	r1, 800e014 <__swsetup_r+0x4c>
 800e002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e006:	4299      	cmp	r1, r3
 800e008:	d002      	beq.n	800e010 <__swsetup_r+0x48>
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 ff56 	bl	800eebc <_free_r>
 800e010:	2300      	movs	r3, #0
 800e012:	6363      	str	r3, [r4, #52]	; 0x34
 800e014:	89a3      	ldrh	r3, [r4, #12]
 800e016:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e01a:	81a3      	strh	r3, [r4, #12]
 800e01c:	2300      	movs	r3, #0
 800e01e:	6063      	str	r3, [r4, #4]
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	6023      	str	r3, [r4, #0]
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	f043 0308 	orr.w	r3, r3, #8
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	b94b      	cbnz	r3, 800e044 <__swsetup_r+0x7c>
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e03a:	d003      	beq.n	800e044 <__swsetup_r+0x7c>
 800e03c:	4621      	mov	r1, r4
 800e03e:	4628      	mov	r0, r5
 800e040:	f001 ff28 	bl	800fe94 <__smakebuf_r>
 800e044:	89a0      	ldrh	r0, [r4, #12]
 800e046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e04a:	f010 0301 	ands.w	r3, r0, #1
 800e04e:	d00a      	beq.n	800e066 <__swsetup_r+0x9e>
 800e050:	2300      	movs	r3, #0
 800e052:	60a3      	str	r3, [r4, #8]
 800e054:	6963      	ldr	r3, [r4, #20]
 800e056:	425b      	negs	r3, r3
 800e058:	61a3      	str	r3, [r4, #24]
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	b943      	cbnz	r3, 800e070 <__swsetup_r+0xa8>
 800e05e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e062:	d1c4      	bne.n	800dfee <__swsetup_r+0x26>
 800e064:	bd38      	pop	{r3, r4, r5, pc}
 800e066:	0781      	lsls	r1, r0, #30
 800e068:	bf58      	it	pl
 800e06a:	6963      	ldrpl	r3, [r4, #20]
 800e06c:	60a3      	str	r3, [r4, #8]
 800e06e:	e7f4      	b.n	800e05a <__swsetup_r+0x92>
 800e070:	2000      	movs	r0, #0
 800e072:	e7f7      	b.n	800e064 <__swsetup_r+0x9c>
 800e074:	20000080 	.word	0x20000080

0800e078 <memmove>:
 800e078:	4288      	cmp	r0, r1
 800e07a:	b510      	push	{r4, lr}
 800e07c:	eb01 0402 	add.w	r4, r1, r2
 800e080:	d902      	bls.n	800e088 <memmove+0x10>
 800e082:	4284      	cmp	r4, r0
 800e084:	4623      	mov	r3, r4
 800e086:	d807      	bhi.n	800e098 <memmove+0x20>
 800e088:	1e43      	subs	r3, r0, #1
 800e08a:	42a1      	cmp	r1, r4
 800e08c:	d008      	beq.n	800e0a0 <memmove+0x28>
 800e08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e096:	e7f8      	b.n	800e08a <memmove+0x12>
 800e098:	4402      	add	r2, r0
 800e09a:	4601      	mov	r1, r0
 800e09c:	428a      	cmp	r2, r1
 800e09e:	d100      	bne.n	800e0a2 <memmove+0x2a>
 800e0a0:	bd10      	pop	{r4, pc}
 800e0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0aa:	e7f7      	b.n	800e09c <memmove+0x24>

0800e0ac <memset>:
 800e0ac:	4402      	add	r2, r0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d100      	bne.n	800e0b6 <memset+0xa>
 800e0b4:	4770      	bx	lr
 800e0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ba:	e7f9      	b.n	800e0b0 <memset+0x4>

0800e0bc <_localeconv_r>:
 800e0bc:	4800      	ldr	r0, [pc, #0]	; (800e0c0 <_localeconv_r+0x4>)
 800e0be:	4770      	bx	lr
 800e0c0:	20000174 	.word	0x20000174

0800e0c4 <_close_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4d06      	ldr	r5, [pc, #24]	; (800e0e0 <_close_r+0x1c>)
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	602b      	str	r3, [r5, #0]
 800e0d0:	f7f4 fd0d 	bl	8002aee <_close>
 800e0d4:	1c43      	adds	r3, r0, #1
 800e0d6:	d102      	bne.n	800e0de <_close_r+0x1a>
 800e0d8:	682b      	ldr	r3, [r5, #0]
 800e0da:	b103      	cbz	r3, 800e0de <_close_r+0x1a>
 800e0dc:	6023      	str	r3, [r4, #0]
 800e0de:	bd38      	pop	{r3, r4, r5, pc}
 800e0e0:	20003e84 	.word	0x20003e84

0800e0e4 <_lseek_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4d07      	ldr	r5, [pc, #28]	; (800e104 <_lseek_r+0x20>)
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	4608      	mov	r0, r1
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	602a      	str	r2, [r5, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	f7f4 fd22 	bl	8002b3c <_lseek>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_lseek_r+0x1e>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_lseek_r+0x1e>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	20003e84 	.word	0x20003e84

0800e108 <_read_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4d07      	ldr	r5, [pc, #28]	; (800e128 <_read_r+0x20>)
 800e10c:	4604      	mov	r4, r0
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	2200      	movs	r2, #0
 800e114:	602a      	str	r2, [r5, #0]
 800e116:	461a      	mov	r2, r3
 800e118:	f7f4 fccc 	bl	8002ab4 <_read>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_read_r+0x1e>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_read_r+0x1e>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	20003e84 	.word	0x20003e84

0800e12c <_write_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4d07      	ldr	r5, [pc, #28]	; (800e14c <_write_r+0x20>)
 800e130:	4604      	mov	r4, r0
 800e132:	4608      	mov	r0, r1
 800e134:	4611      	mov	r1, r2
 800e136:	2200      	movs	r2, #0
 800e138:	602a      	str	r2, [r5, #0]
 800e13a:	461a      	mov	r2, r3
 800e13c:	f7f4 f808 	bl	8002150 <_write>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_write_r+0x1e>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_write_r+0x1e>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	20003e84 	.word	0x20003e84

0800e150 <__errno>:
 800e150:	4b01      	ldr	r3, [pc, #4]	; (800e158 <__errno+0x8>)
 800e152:	6818      	ldr	r0, [r3, #0]
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	20000080 	.word	0x20000080

0800e15c <__libc_init_array>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	4d0d      	ldr	r5, [pc, #52]	; (800e194 <__libc_init_array+0x38>)
 800e160:	4c0d      	ldr	r4, [pc, #52]	; (800e198 <__libc_init_array+0x3c>)
 800e162:	1b64      	subs	r4, r4, r5
 800e164:	10a4      	asrs	r4, r4, #2
 800e166:	2600      	movs	r6, #0
 800e168:	42a6      	cmp	r6, r4
 800e16a:	d109      	bne.n	800e180 <__libc_init_array+0x24>
 800e16c:	4d0b      	ldr	r5, [pc, #44]	; (800e19c <__libc_init_array+0x40>)
 800e16e:	4c0c      	ldr	r4, [pc, #48]	; (800e1a0 <__libc_init_array+0x44>)
 800e170:	f003 f922 	bl	80113b8 <_init>
 800e174:	1b64      	subs	r4, r4, r5
 800e176:	10a4      	asrs	r4, r4, #2
 800e178:	2600      	movs	r6, #0
 800e17a:	42a6      	cmp	r6, r4
 800e17c:	d105      	bne.n	800e18a <__libc_init_array+0x2e>
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
 800e180:	f855 3b04 	ldr.w	r3, [r5], #4
 800e184:	4798      	blx	r3
 800e186:	3601      	adds	r6, #1
 800e188:	e7ee      	b.n	800e168 <__libc_init_array+0xc>
 800e18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e18e:	4798      	blx	r3
 800e190:	3601      	adds	r6, #1
 800e192:	e7f2      	b.n	800e17a <__libc_init_array+0x1e>
 800e194:	080124c0 	.word	0x080124c0
 800e198:	080124c0 	.word	0x080124c0
 800e19c:	080124c0 	.word	0x080124c0
 800e1a0:	080124c4 	.word	0x080124c4

0800e1a4 <__retarget_lock_init_recursive>:
 800e1a4:	4770      	bx	lr

0800e1a6 <__retarget_lock_acquire_recursive>:
 800e1a6:	4770      	bx	lr

0800e1a8 <__retarget_lock_release_recursive>:
 800e1a8:	4770      	bx	lr

0800e1aa <memcpy>:
 800e1aa:	440a      	add	r2, r1
 800e1ac:	4291      	cmp	r1, r2
 800e1ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1b2:	d100      	bne.n	800e1b6 <memcpy+0xc>
 800e1b4:	4770      	bx	lr
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1c0:	4291      	cmp	r1, r2
 800e1c2:	d1f9      	bne.n	800e1b8 <memcpy+0xe>
 800e1c4:	bd10      	pop	{r4, pc}

0800e1c6 <quorem>:
 800e1c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ca:	6903      	ldr	r3, [r0, #16]
 800e1cc:	690c      	ldr	r4, [r1, #16]
 800e1ce:	42a3      	cmp	r3, r4
 800e1d0:	4607      	mov	r7, r0
 800e1d2:	db7e      	blt.n	800e2d2 <quorem+0x10c>
 800e1d4:	3c01      	subs	r4, #1
 800e1d6:	f101 0814 	add.w	r8, r1, #20
 800e1da:	f100 0514 	add.w	r5, r0, #20
 800e1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1fc:	d331      	bcc.n	800e262 <quorem+0x9c>
 800e1fe:	f04f 0e00 	mov.w	lr, #0
 800e202:	4640      	mov	r0, r8
 800e204:	46ac      	mov	ip, r5
 800e206:	46f2      	mov	sl, lr
 800e208:	f850 2b04 	ldr.w	r2, [r0], #4
 800e20c:	b293      	uxth	r3, r2
 800e20e:	fb06 e303 	mla	r3, r6, r3, lr
 800e212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e216:	0c1a      	lsrs	r2, r3, #16
 800e218:	b29b      	uxth	r3, r3
 800e21a:	ebaa 0303 	sub.w	r3, sl, r3
 800e21e:	f8dc a000 	ldr.w	sl, [ip]
 800e222:	fa13 f38a 	uxtah	r3, r3, sl
 800e226:	fb06 220e 	mla	r2, r6, lr, r2
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	9b00      	ldr	r3, [sp, #0]
 800e22e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e232:	b292      	uxth	r2, r2
 800e234:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e23c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e240:	4581      	cmp	r9, r0
 800e242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e246:	f84c 3b04 	str.w	r3, [ip], #4
 800e24a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e24e:	d2db      	bcs.n	800e208 <quorem+0x42>
 800e250:	f855 300b 	ldr.w	r3, [r5, fp]
 800e254:	b92b      	cbnz	r3, 800e262 <quorem+0x9c>
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	3b04      	subs	r3, #4
 800e25a:	429d      	cmp	r5, r3
 800e25c:	461a      	mov	r2, r3
 800e25e:	d32c      	bcc.n	800e2ba <quorem+0xf4>
 800e260:	613c      	str	r4, [r7, #16]
 800e262:	4638      	mov	r0, r7
 800e264:	f001 f9a6 	bl	800f5b4 <__mcmp>
 800e268:	2800      	cmp	r0, #0
 800e26a:	db22      	blt.n	800e2b2 <quorem+0xec>
 800e26c:	3601      	adds	r6, #1
 800e26e:	4629      	mov	r1, r5
 800e270:	2000      	movs	r0, #0
 800e272:	f858 2b04 	ldr.w	r2, [r8], #4
 800e276:	f8d1 c000 	ldr.w	ip, [r1]
 800e27a:	b293      	uxth	r3, r2
 800e27c:	1ac3      	subs	r3, r0, r3
 800e27e:	0c12      	lsrs	r2, r2, #16
 800e280:	fa13 f38c 	uxtah	r3, r3, ip
 800e284:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e292:	45c1      	cmp	r9, r8
 800e294:	f841 3b04 	str.w	r3, [r1], #4
 800e298:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e29c:	d2e9      	bcs.n	800e272 <quorem+0xac>
 800e29e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2a6:	b922      	cbnz	r2, 800e2b2 <quorem+0xec>
 800e2a8:	3b04      	subs	r3, #4
 800e2aa:	429d      	cmp	r5, r3
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	d30a      	bcc.n	800e2c6 <quorem+0x100>
 800e2b0:	613c      	str	r4, [r7, #16]
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	b003      	add	sp, #12
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ba:	6812      	ldr	r2, [r2, #0]
 800e2bc:	3b04      	subs	r3, #4
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	d1ce      	bne.n	800e260 <quorem+0x9a>
 800e2c2:	3c01      	subs	r4, #1
 800e2c4:	e7c9      	b.n	800e25a <quorem+0x94>
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	3b04      	subs	r3, #4
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	d1f0      	bne.n	800e2b0 <quorem+0xea>
 800e2ce:	3c01      	subs	r4, #1
 800e2d0:	e7eb      	b.n	800e2aa <quorem+0xe4>
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	e7ee      	b.n	800e2b4 <quorem+0xee>
	...

0800e2d8 <_dtoa_r>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	ed2d 8b04 	vpush	{d8-d9}
 800e2e0:	69c5      	ldr	r5, [r0, #28]
 800e2e2:	b093      	sub	sp, #76	; 0x4c
 800e2e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e2e8:	ec57 6b10 	vmov	r6, r7, d0
 800e2ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2f0:	9107      	str	r1, [sp, #28]
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800e2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800e2f8:	b975      	cbnz	r5, 800e318 <_dtoa_r+0x40>
 800e2fa:	2010      	movs	r0, #16
 800e2fc:	f000 fe2a 	bl	800ef54 <malloc>
 800e300:	4602      	mov	r2, r0
 800e302:	61e0      	str	r0, [r4, #28]
 800e304:	b920      	cbnz	r0, 800e310 <_dtoa_r+0x38>
 800e306:	4bae      	ldr	r3, [pc, #696]	; (800e5c0 <_dtoa_r+0x2e8>)
 800e308:	21ef      	movs	r1, #239	; 0xef
 800e30a:	48ae      	ldr	r0, [pc, #696]	; (800e5c4 <_dtoa_r+0x2ec>)
 800e30c:	f001 fe30 	bl	800ff70 <__assert_func>
 800e310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e314:	6005      	str	r5, [r0, #0]
 800e316:	60c5      	str	r5, [r0, #12]
 800e318:	69e3      	ldr	r3, [r4, #28]
 800e31a:	6819      	ldr	r1, [r3, #0]
 800e31c:	b151      	cbz	r1, 800e334 <_dtoa_r+0x5c>
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	604a      	str	r2, [r1, #4]
 800e322:	2301      	movs	r3, #1
 800e324:	4093      	lsls	r3, r2
 800e326:	608b      	str	r3, [r1, #8]
 800e328:	4620      	mov	r0, r4
 800e32a:	f000 ff07 	bl	800f13c <_Bfree>
 800e32e:	69e3      	ldr	r3, [r4, #28]
 800e330:	2200      	movs	r2, #0
 800e332:	601a      	str	r2, [r3, #0]
 800e334:	1e3b      	subs	r3, r7, #0
 800e336:	bfbb      	ittet	lt
 800e338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e33c:	9303      	strlt	r3, [sp, #12]
 800e33e:	2300      	movge	r3, #0
 800e340:	2201      	movlt	r2, #1
 800e342:	bfac      	ite	ge
 800e344:	f8c8 3000 	strge.w	r3, [r8]
 800e348:	f8c8 2000 	strlt.w	r2, [r8]
 800e34c:	4b9e      	ldr	r3, [pc, #632]	; (800e5c8 <_dtoa_r+0x2f0>)
 800e34e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e352:	ea33 0308 	bics.w	r3, r3, r8
 800e356:	d11b      	bne.n	800e390 <_dtoa_r+0xb8>
 800e358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e35a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e35e:	6013      	str	r3, [r2, #0]
 800e360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e364:	4333      	orrs	r3, r6
 800e366:	f000 8593 	beq.w	800ee90 <_dtoa_r+0xbb8>
 800e36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e36c:	b963      	cbnz	r3, 800e388 <_dtoa_r+0xb0>
 800e36e:	4b97      	ldr	r3, [pc, #604]	; (800e5cc <_dtoa_r+0x2f4>)
 800e370:	e027      	b.n	800e3c2 <_dtoa_r+0xea>
 800e372:	4b97      	ldr	r3, [pc, #604]	; (800e5d0 <_dtoa_r+0x2f8>)
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e37a:	6013      	str	r3, [r2, #0]
 800e37c:	9800      	ldr	r0, [sp, #0]
 800e37e:	b013      	add	sp, #76	; 0x4c
 800e380:	ecbd 8b04 	vpop	{d8-d9}
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	4b90      	ldr	r3, [pc, #576]	; (800e5cc <_dtoa_r+0x2f4>)
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	3303      	adds	r3, #3
 800e38e:	e7f3      	b.n	800e378 <_dtoa_r+0xa0>
 800e390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e394:	2200      	movs	r2, #0
 800e396:	ec51 0b17 	vmov	r0, r1, d7
 800e39a:	eeb0 8a47 	vmov.f32	s16, s14
 800e39e:	eef0 8a67 	vmov.f32	s17, s15
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f7f2 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3a8:	4681      	mov	r9, r0
 800e3aa:	b160      	cbz	r0, 800e3c6 <_dtoa_r+0xee>
 800e3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f000 8568 	beq.w	800ee8a <_dtoa_r+0xbb2>
 800e3ba:	4b86      	ldr	r3, [pc, #536]	; (800e5d4 <_dtoa_r+0x2fc>)
 800e3bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	e7da      	b.n	800e37c <_dtoa_r+0xa4>
 800e3c6:	aa10      	add	r2, sp, #64	; 0x40
 800e3c8:	a911      	add	r1, sp, #68	; 0x44
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800e3d0:	eef0 0a68 	vmov.f32	s1, s17
 800e3d4:	f001 f994 	bl	800f700 <__d2b>
 800e3d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3dc:	4682      	mov	sl, r0
 800e3de:	2d00      	cmp	r5, #0
 800e3e0:	d07f      	beq.n	800e4e2 <_dtoa_r+0x20a>
 800e3e2:	ee18 3a90 	vmov	r3, s17
 800e3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e3ee:	ec51 0b18 	vmov	r0, r1, d8
 800e3f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e3fe:	4619      	mov	r1, r3
 800e400:	2200      	movs	r2, #0
 800e402:	4b75      	ldr	r3, [pc, #468]	; (800e5d8 <_dtoa_r+0x300>)
 800e404:	f7f1 ff40 	bl	8000288 <__aeabi_dsub>
 800e408:	a367      	add	r3, pc, #412	; (adr r3, 800e5a8 <_dtoa_r+0x2d0>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f7f2 f8f3 	bl	80005f8 <__aeabi_dmul>
 800e412:	a367      	add	r3, pc, #412	; (adr r3, 800e5b0 <_dtoa_r+0x2d8>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f7f1 ff38 	bl	800028c <__adddf3>
 800e41c:	4606      	mov	r6, r0
 800e41e:	4628      	mov	r0, r5
 800e420:	460f      	mov	r7, r1
 800e422:	f7f2 f87f 	bl	8000524 <__aeabi_i2d>
 800e426:	a364      	add	r3, pc, #400	; (adr r3, 800e5b8 <_dtoa_r+0x2e0>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f7f2 f8e4 	bl	80005f8 <__aeabi_dmul>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4630      	mov	r0, r6
 800e436:	4639      	mov	r1, r7
 800e438:	f7f1 ff28 	bl	800028c <__adddf3>
 800e43c:	4606      	mov	r6, r0
 800e43e:	460f      	mov	r7, r1
 800e440:	f7f2 fb8a 	bl	8000b58 <__aeabi_d2iz>
 800e444:	2200      	movs	r2, #0
 800e446:	4683      	mov	fp, r0
 800e448:	2300      	movs	r3, #0
 800e44a:	4630      	mov	r0, r6
 800e44c:	4639      	mov	r1, r7
 800e44e:	f7f2 fb45 	bl	8000adc <__aeabi_dcmplt>
 800e452:	b148      	cbz	r0, 800e468 <_dtoa_r+0x190>
 800e454:	4658      	mov	r0, fp
 800e456:	f7f2 f865 	bl	8000524 <__aeabi_i2d>
 800e45a:	4632      	mov	r2, r6
 800e45c:	463b      	mov	r3, r7
 800e45e:	f7f2 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 800e462:	b908      	cbnz	r0, 800e468 <_dtoa_r+0x190>
 800e464:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e468:	f1bb 0f16 	cmp.w	fp, #22
 800e46c:	d857      	bhi.n	800e51e <_dtoa_r+0x246>
 800e46e:	4b5b      	ldr	r3, [pc, #364]	; (800e5dc <_dtoa_r+0x304>)
 800e470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	ec51 0b18 	vmov	r0, r1, d8
 800e47c:	f7f2 fb2e 	bl	8000adc <__aeabi_dcmplt>
 800e480:	2800      	cmp	r0, #0
 800e482:	d04e      	beq.n	800e522 <_dtoa_r+0x24a>
 800e484:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e488:	2300      	movs	r3, #0
 800e48a:	930c      	str	r3, [sp, #48]	; 0x30
 800e48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e48e:	1b5b      	subs	r3, r3, r5
 800e490:	1e5a      	subs	r2, r3, #1
 800e492:	bf45      	ittet	mi
 800e494:	f1c3 0301 	rsbmi	r3, r3, #1
 800e498:	9305      	strmi	r3, [sp, #20]
 800e49a:	2300      	movpl	r3, #0
 800e49c:	2300      	movmi	r3, #0
 800e49e:	9206      	str	r2, [sp, #24]
 800e4a0:	bf54      	ite	pl
 800e4a2:	9305      	strpl	r3, [sp, #20]
 800e4a4:	9306      	strmi	r3, [sp, #24]
 800e4a6:	f1bb 0f00 	cmp.w	fp, #0
 800e4aa:	db3c      	blt.n	800e526 <_dtoa_r+0x24e>
 800e4ac:	9b06      	ldr	r3, [sp, #24]
 800e4ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e4b2:	445b      	add	r3, fp
 800e4b4:	9306      	str	r3, [sp, #24]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9308      	str	r3, [sp, #32]
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b09      	cmp	r3, #9
 800e4be:	d868      	bhi.n	800e592 <_dtoa_r+0x2ba>
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	bfc4      	itt	gt
 800e4c4:	3b04      	subgt	r3, #4
 800e4c6:	9307      	strgt	r3, [sp, #28]
 800e4c8:	9b07      	ldr	r3, [sp, #28]
 800e4ca:	f1a3 0302 	sub.w	r3, r3, #2
 800e4ce:	bfcc      	ite	gt
 800e4d0:	2500      	movgt	r5, #0
 800e4d2:	2501      	movle	r5, #1
 800e4d4:	2b03      	cmp	r3, #3
 800e4d6:	f200 8085 	bhi.w	800e5e4 <_dtoa_r+0x30c>
 800e4da:	e8df f003 	tbb	[pc, r3]
 800e4de:	3b2e      	.short	0x3b2e
 800e4e0:	5839      	.short	0x5839
 800e4e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4e6:	441d      	add	r5, r3
 800e4e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4ec:	2b20      	cmp	r3, #32
 800e4ee:	bfc1      	itttt	gt
 800e4f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800e4f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e4fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e500:	bfd6      	itet	le
 800e502:	f1c3 0320 	rsble	r3, r3, #32
 800e506:	ea48 0003 	orrgt.w	r0, r8, r3
 800e50a:	fa06 f003 	lslle.w	r0, r6, r3
 800e50e:	f7f1 fff9 	bl	8000504 <__aeabi_ui2d>
 800e512:	2201      	movs	r2, #1
 800e514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e518:	3d01      	subs	r5, #1
 800e51a:	920e      	str	r2, [sp, #56]	; 0x38
 800e51c:	e76f      	b.n	800e3fe <_dtoa_r+0x126>
 800e51e:	2301      	movs	r3, #1
 800e520:	e7b3      	b.n	800e48a <_dtoa_r+0x1b2>
 800e522:	900c      	str	r0, [sp, #48]	; 0x30
 800e524:	e7b2      	b.n	800e48c <_dtoa_r+0x1b4>
 800e526:	9b05      	ldr	r3, [sp, #20]
 800e528:	eba3 030b 	sub.w	r3, r3, fp
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	f1cb 0300 	rsb	r3, fp, #0
 800e532:	9308      	str	r3, [sp, #32]
 800e534:	2300      	movs	r3, #0
 800e536:	930b      	str	r3, [sp, #44]	; 0x2c
 800e538:	e7bf      	b.n	800e4ba <_dtoa_r+0x1e2>
 800e53a:	2300      	movs	r3, #0
 800e53c:	9309      	str	r3, [sp, #36]	; 0x24
 800e53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e540:	2b00      	cmp	r3, #0
 800e542:	dc52      	bgt.n	800e5ea <_dtoa_r+0x312>
 800e544:	2301      	movs	r3, #1
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	9304      	str	r3, [sp, #16]
 800e54a:	461a      	mov	r2, r3
 800e54c:	920a      	str	r2, [sp, #40]	; 0x28
 800e54e:	e00b      	b.n	800e568 <_dtoa_r+0x290>
 800e550:	2301      	movs	r3, #1
 800e552:	e7f3      	b.n	800e53c <_dtoa_r+0x264>
 800e554:	2300      	movs	r3, #0
 800e556:	9309      	str	r3, [sp, #36]	; 0x24
 800e558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55a:	445b      	add	r3, fp
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	3301      	adds	r3, #1
 800e560:	2b01      	cmp	r3, #1
 800e562:	9304      	str	r3, [sp, #16]
 800e564:	bfb8      	it	lt
 800e566:	2301      	movlt	r3, #1
 800e568:	69e0      	ldr	r0, [r4, #28]
 800e56a:	2100      	movs	r1, #0
 800e56c:	2204      	movs	r2, #4
 800e56e:	f102 0614 	add.w	r6, r2, #20
 800e572:	429e      	cmp	r6, r3
 800e574:	d93d      	bls.n	800e5f2 <_dtoa_r+0x31a>
 800e576:	6041      	str	r1, [r0, #4]
 800e578:	4620      	mov	r0, r4
 800e57a:	f000 fd9f 	bl	800f0bc <_Balloc>
 800e57e:	9000      	str	r0, [sp, #0]
 800e580:	2800      	cmp	r0, #0
 800e582:	d139      	bne.n	800e5f8 <_dtoa_r+0x320>
 800e584:	4b16      	ldr	r3, [pc, #88]	; (800e5e0 <_dtoa_r+0x308>)
 800e586:	4602      	mov	r2, r0
 800e588:	f240 11af 	movw	r1, #431	; 0x1af
 800e58c:	e6bd      	b.n	800e30a <_dtoa_r+0x32>
 800e58e:	2301      	movs	r3, #1
 800e590:	e7e1      	b.n	800e556 <_dtoa_r+0x27e>
 800e592:	2501      	movs	r5, #1
 800e594:	2300      	movs	r3, #0
 800e596:	9307      	str	r3, [sp, #28]
 800e598:	9509      	str	r5, [sp, #36]	; 0x24
 800e59a:	f04f 33ff 	mov.w	r3, #4294967295
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	2312      	movs	r3, #18
 800e5a6:	e7d1      	b.n	800e54c <_dtoa_r+0x274>
 800e5a8:	636f4361 	.word	0x636f4361
 800e5ac:	3fd287a7 	.word	0x3fd287a7
 800e5b0:	8b60c8b3 	.word	0x8b60c8b3
 800e5b4:	3fc68a28 	.word	0x3fc68a28
 800e5b8:	509f79fb 	.word	0x509f79fb
 800e5bc:	3fd34413 	.word	0x3fd34413
 800e5c0:	08012151 	.word	0x08012151
 800e5c4:	08012168 	.word	0x08012168
 800e5c8:	7ff00000 	.word	0x7ff00000
 800e5cc:	0801214d 	.word	0x0801214d
 800e5d0:	08012144 	.word	0x08012144
 800e5d4:	08012121 	.word	0x08012121
 800e5d8:	3ff80000 	.word	0x3ff80000
 800e5dc:	08012258 	.word	0x08012258
 800e5e0:	080121c0 	.word	0x080121c0
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e8:	e7d7      	b.n	800e59a <_dtoa_r+0x2c2>
 800e5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	9304      	str	r3, [sp, #16]
 800e5f0:	e7ba      	b.n	800e568 <_dtoa_r+0x290>
 800e5f2:	3101      	adds	r1, #1
 800e5f4:	0052      	lsls	r2, r2, #1
 800e5f6:	e7ba      	b.n	800e56e <_dtoa_r+0x296>
 800e5f8:	69e3      	ldr	r3, [r4, #28]
 800e5fa:	9a00      	ldr	r2, [sp, #0]
 800e5fc:	601a      	str	r2, [r3, #0]
 800e5fe:	9b04      	ldr	r3, [sp, #16]
 800e600:	2b0e      	cmp	r3, #14
 800e602:	f200 80a8 	bhi.w	800e756 <_dtoa_r+0x47e>
 800e606:	2d00      	cmp	r5, #0
 800e608:	f000 80a5 	beq.w	800e756 <_dtoa_r+0x47e>
 800e60c:	f1bb 0f00 	cmp.w	fp, #0
 800e610:	dd38      	ble.n	800e684 <_dtoa_r+0x3ac>
 800e612:	4bc0      	ldr	r3, [pc, #768]	; (800e914 <_dtoa_r+0x63c>)
 800e614:	f00b 020f 	and.w	r2, fp, #15
 800e618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e61c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e620:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e624:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e628:	d019      	beq.n	800e65e <_dtoa_r+0x386>
 800e62a:	4bbb      	ldr	r3, [pc, #748]	; (800e918 <_dtoa_r+0x640>)
 800e62c:	ec51 0b18 	vmov	r0, r1, d8
 800e630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e634:	f7f2 f90a 	bl	800084c <__aeabi_ddiv>
 800e638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e63c:	f008 080f 	and.w	r8, r8, #15
 800e640:	2503      	movs	r5, #3
 800e642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e918 <_dtoa_r+0x640>
 800e646:	f1b8 0f00 	cmp.w	r8, #0
 800e64a:	d10a      	bne.n	800e662 <_dtoa_r+0x38a>
 800e64c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e650:	4632      	mov	r2, r6
 800e652:	463b      	mov	r3, r7
 800e654:	f7f2 f8fa 	bl	800084c <__aeabi_ddiv>
 800e658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e65c:	e02b      	b.n	800e6b6 <_dtoa_r+0x3de>
 800e65e:	2502      	movs	r5, #2
 800e660:	e7ef      	b.n	800e642 <_dtoa_r+0x36a>
 800e662:	f018 0f01 	tst.w	r8, #1
 800e666:	d008      	beq.n	800e67a <_dtoa_r+0x3a2>
 800e668:	4630      	mov	r0, r6
 800e66a:	4639      	mov	r1, r7
 800e66c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e670:	f7f1 ffc2 	bl	80005f8 <__aeabi_dmul>
 800e674:	3501      	adds	r5, #1
 800e676:	4606      	mov	r6, r0
 800e678:	460f      	mov	r7, r1
 800e67a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e67e:	f109 0908 	add.w	r9, r9, #8
 800e682:	e7e0      	b.n	800e646 <_dtoa_r+0x36e>
 800e684:	f000 809f 	beq.w	800e7c6 <_dtoa_r+0x4ee>
 800e688:	f1cb 0600 	rsb	r6, fp, #0
 800e68c:	4ba1      	ldr	r3, [pc, #644]	; (800e914 <_dtoa_r+0x63c>)
 800e68e:	4fa2      	ldr	r7, [pc, #648]	; (800e918 <_dtoa_r+0x640>)
 800e690:	f006 020f 	and.w	r2, r6, #15
 800e694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	ec51 0b18 	vmov	r0, r1, d8
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6a8:	1136      	asrs	r6, r6, #4
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	2502      	movs	r5, #2
 800e6ae:	2e00      	cmp	r6, #0
 800e6b0:	d17e      	bne.n	800e7b0 <_dtoa_r+0x4d8>
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1d0      	bne.n	800e658 <_dtoa_r+0x380>
 800e6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8084 	beq.w	800e7ca <_dtoa_r+0x4f2>
 800e6c2:	4b96      	ldr	r3, [pc, #600]	; (800e91c <_dtoa_r+0x644>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f2 fa07 	bl	8000adc <__aeabi_dcmplt>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d07b      	beq.n	800e7ca <_dtoa_r+0x4f2>
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d078      	beq.n	800e7ca <_dtoa_r+0x4f2>
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd39      	ble.n	800e752 <_dtoa_r+0x47a>
 800e6de:	4b90      	ldr	r3, [pc, #576]	; (800e920 <_dtoa_r+0x648>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	4649      	mov	r1, r9
 800e6e6:	f7f1 ff87 	bl	80005f8 <__aeabi_dmul>
 800e6ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ee:	9e01      	ldr	r6, [sp, #4]
 800e6f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e6f4:	3501      	adds	r5, #1
 800e6f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f7f1 ff12 	bl	8000524 <__aeabi_i2d>
 800e700:	4642      	mov	r2, r8
 800e702:	464b      	mov	r3, r9
 800e704:	f7f1 ff78 	bl	80005f8 <__aeabi_dmul>
 800e708:	4b86      	ldr	r3, [pc, #536]	; (800e924 <_dtoa_r+0x64c>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	f7f1 fdbe 	bl	800028c <__adddf3>
 800e710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e718:	9303      	str	r3, [sp, #12]
 800e71a:	2e00      	cmp	r6, #0
 800e71c:	d158      	bne.n	800e7d0 <_dtoa_r+0x4f8>
 800e71e:	4b82      	ldr	r3, [pc, #520]	; (800e928 <_dtoa_r+0x650>)
 800e720:	2200      	movs	r2, #0
 800e722:	4640      	mov	r0, r8
 800e724:	4649      	mov	r1, r9
 800e726:	f7f1 fdaf 	bl	8000288 <__aeabi_dsub>
 800e72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e72e:	4680      	mov	r8, r0
 800e730:	4689      	mov	r9, r1
 800e732:	f7f2 f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 800e736:	2800      	cmp	r0, #0
 800e738:	f040 8296 	bne.w	800ec68 <_dtoa_r+0x990>
 800e73c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e740:	4640      	mov	r0, r8
 800e742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e746:	4649      	mov	r1, r9
 800e748:	f7f2 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	f040 8289 	bne.w	800ec64 <_dtoa_r+0x98c>
 800e752:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f2c0 814e 	blt.w	800e9fa <_dtoa_r+0x722>
 800e75e:	f1bb 0f0e 	cmp.w	fp, #14
 800e762:	f300 814a 	bgt.w	800e9fa <_dtoa_r+0x722>
 800e766:	4b6b      	ldr	r3, [pc, #428]	; (800e914 <_dtoa_r+0x63c>)
 800e768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e76c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e772:	2b00      	cmp	r3, #0
 800e774:	f280 80dc 	bge.w	800e930 <_dtoa_r+0x658>
 800e778:	9b04      	ldr	r3, [sp, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f300 80d8 	bgt.w	800e930 <_dtoa_r+0x658>
 800e780:	f040 826f 	bne.w	800ec62 <_dtoa_r+0x98a>
 800e784:	4b68      	ldr	r3, [pc, #416]	; (800e928 <_dtoa_r+0x650>)
 800e786:	2200      	movs	r2, #0
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f1 ff34 	bl	80005f8 <__aeabi_dmul>
 800e790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e794:	f7f2 f9b6 	bl	8000b04 <__aeabi_dcmpge>
 800e798:	9e04      	ldr	r6, [sp, #16]
 800e79a:	4637      	mov	r7, r6
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f040 8245 	bne.w	800ec2c <_dtoa_r+0x954>
 800e7a2:	9d00      	ldr	r5, [sp, #0]
 800e7a4:	2331      	movs	r3, #49	; 0x31
 800e7a6:	f805 3b01 	strb.w	r3, [r5], #1
 800e7aa:	f10b 0b01 	add.w	fp, fp, #1
 800e7ae:	e241      	b.n	800ec34 <_dtoa_r+0x95c>
 800e7b0:	07f2      	lsls	r2, r6, #31
 800e7b2:	d505      	bpl.n	800e7c0 <_dtoa_r+0x4e8>
 800e7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7b8:	f7f1 ff1e 	bl	80005f8 <__aeabi_dmul>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	2301      	movs	r3, #1
 800e7c0:	1076      	asrs	r6, r6, #1
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	e773      	b.n	800e6ae <_dtoa_r+0x3d6>
 800e7c6:	2502      	movs	r5, #2
 800e7c8:	e775      	b.n	800e6b6 <_dtoa_r+0x3de>
 800e7ca:	9e04      	ldr	r6, [sp, #16]
 800e7cc:	465f      	mov	r7, fp
 800e7ce:	e792      	b.n	800e6f6 <_dtoa_r+0x41e>
 800e7d0:	9900      	ldr	r1, [sp, #0]
 800e7d2:	4b50      	ldr	r3, [pc, #320]	; (800e914 <_dtoa_r+0x63c>)
 800e7d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7d8:	4431      	add	r1, r6
 800e7da:	9102      	str	r1, [sp, #8]
 800e7dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7de:	eeb0 9a47 	vmov.f32	s18, s14
 800e7e2:	eef0 9a67 	vmov.f32	s19, s15
 800e7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7ee:	2900      	cmp	r1, #0
 800e7f0:	d044      	beq.n	800e87c <_dtoa_r+0x5a4>
 800e7f2:	494e      	ldr	r1, [pc, #312]	; (800e92c <_dtoa_r+0x654>)
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	f7f2 f829 	bl	800084c <__aeabi_ddiv>
 800e7fa:	ec53 2b19 	vmov	r2, r3, d9
 800e7fe:	f7f1 fd43 	bl	8000288 <__aeabi_dsub>
 800e802:	9d00      	ldr	r5, [sp, #0]
 800e804:	ec41 0b19 	vmov	d9, r0, r1
 800e808:	4649      	mov	r1, r9
 800e80a:	4640      	mov	r0, r8
 800e80c:	f7f2 f9a4 	bl	8000b58 <__aeabi_d2iz>
 800e810:	4606      	mov	r6, r0
 800e812:	f7f1 fe87 	bl	8000524 <__aeabi_i2d>
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	4640      	mov	r0, r8
 800e81c:	4649      	mov	r1, r9
 800e81e:	f7f1 fd33 	bl	8000288 <__aeabi_dsub>
 800e822:	3630      	adds	r6, #48	; 0x30
 800e824:	f805 6b01 	strb.w	r6, [r5], #1
 800e828:	ec53 2b19 	vmov	r2, r3, d9
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	f7f2 f954 	bl	8000adc <__aeabi_dcmplt>
 800e834:	2800      	cmp	r0, #0
 800e836:	d164      	bne.n	800e902 <_dtoa_r+0x62a>
 800e838:	4642      	mov	r2, r8
 800e83a:	464b      	mov	r3, r9
 800e83c:	4937      	ldr	r1, [pc, #220]	; (800e91c <_dtoa_r+0x644>)
 800e83e:	2000      	movs	r0, #0
 800e840:	f7f1 fd22 	bl	8000288 <__aeabi_dsub>
 800e844:	ec53 2b19 	vmov	r2, r3, d9
 800e848:	f7f2 f948 	bl	8000adc <__aeabi_dcmplt>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f040 80b6 	bne.w	800e9be <_dtoa_r+0x6e6>
 800e852:	9b02      	ldr	r3, [sp, #8]
 800e854:	429d      	cmp	r5, r3
 800e856:	f43f af7c 	beq.w	800e752 <_dtoa_r+0x47a>
 800e85a:	4b31      	ldr	r3, [pc, #196]	; (800e920 <_dtoa_r+0x648>)
 800e85c:	ec51 0b19 	vmov	r0, r1, d9
 800e860:	2200      	movs	r2, #0
 800e862:	f7f1 fec9 	bl	80005f8 <__aeabi_dmul>
 800e866:	4b2e      	ldr	r3, [pc, #184]	; (800e920 <_dtoa_r+0x648>)
 800e868:	ec41 0b19 	vmov	d9, r0, r1
 800e86c:	2200      	movs	r2, #0
 800e86e:	4640      	mov	r0, r8
 800e870:	4649      	mov	r1, r9
 800e872:	f7f1 fec1 	bl	80005f8 <__aeabi_dmul>
 800e876:	4680      	mov	r8, r0
 800e878:	4689      	mov	r9, r1
 800e87a:	e7c5      	b.n	800e808 <_dtoa_r+0x530>
 800e87c:	ec51 0b17 	vmov	r0, r1, d7
 800e880:	f7f1 feba 	bl	80005f8 <__aeabi_dmul>
 800e884:	9b02      	ldr	r3, [sp, #8]
 800e886:	9d00      	ldr	r5, [sp, #0]
 800e888:	930f      	str	r3, [sp, #60]	; 0x3c
 800e88a:	ec41 0b19 	vmov	d9, r0, r1
 800e88e:	4649      	mov	r1, r9
 800e890:	4640      	mov	r0, r8
 800e892:	f7f2 f961 	bl	8000b58 <__aeabi_d2iz>
 800e896:	4606      	mov	r6, r0
 800e898:	f7f1 fe44 	bl	8000524 <__aeabi_i2d>
 800e89c:	3630      	adds	r6, #48	; 0x30
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	f7f1 fcef 	bl	8000288 <__aeabi_dsub>
 800e8aa:	f805 6b01 	strb.w	r6, [r5], #1
 800e8ae:	9b02      	ldr	r3, [sp, #8]
 800e8b0:	429d      	cmp	r5, r3
 800e8b2:	4680      	mov	r8, r0
 800e8b4:	4689      	mov	r9, r1
 800e8b6:	f04f 0200 	mov.w	r2, #0
 800e8ba:	d124      	bne.n	800e906 <_dtoa_r+0x62e>
 800e8bc:	4b1b      	ldr	r3, [pc, #108]	; (800e92c <_dtoa_r+0x654>)
 800e8be:	ec51 0b19 	vmov	r0, r1, d9
 800e8c2:	f7f1 fce3 	bl	800028c <__adddf3>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	f7f2 f923 	bl	8000b18 <__aeabi_dcmpgt>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d173      	bne.n	800e9be <_dtoa_r+0x6e6>
 800e8d6:	ec53 2b19 	vmov	r2, r3, d9
 800e8da:	4914      	ldr	r1, [pc, #80]	; (800e92c <_dtoa_r+0x654>)
 800e8dc:	2000      	movs	r0, #0
 800e8de:	f7f1 fcd3 	bl	8000288 <__aeabi_dsub>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f2 f8f7 	bl	8000adc <__aeabi_dcmplt>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f43f af2f 	beq.w	800e752 <_dtoa_r+0x47a>
 800e8f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8f6:	1e6b      	subs	r3, r5, #1
 800e8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8fe:	2b30      	cmp	r3, #48	; 0x30
 800e900:	d0f8      	beq.n	800e8f4 <_dtoa_r+0x61c>
 800e902:	46bb      	mov	fp, r7
 800e904:	e04a      	b.n	800e99c <_dtoa_r+0x6c4>
 800e906:	4b06      	ldr	r3, [pc, #24]	; (800e920 <_dtoa_r+0x648>)
 800e908:	f7f1 fe76 	bl	80005f8 <__aeabi_dmul>
 800e90c:	4680      	mov	r8, r0
 800e90e:	4689      	mov	r9, r1
 800e910:	e7bd      	b.n	800e88e <_dtoa_r+0x5b6>
 800e912:	bf00      	nop
 800e914:	08012258 	.word	0x08012258
 800e918:	08012230 	.word	0x08012230
 800e91c:	3ff00000 	.word	0x3ff00000
 800e920:	40240000 	.word	0x40240000
 800e924:	401c0000 	.word	0x401c0000
 800e928:	40140000 	.word	0x40140000
 800e92c:	3fe00000 	.word	0x3fe00000
 800e930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e934:	9d00      	ldr	r5, [sp, #0]
 800e936:	4642      	mov	r2, r8
 800e938:	464b      	mov	r3, r9
 800e93a:	4630      	mov	r0, r6
 800e93c:	4639      	mov	r1, r7
 800e93e:	f7f1 ff85 	bl	800084c <__aeabi_ddiv>
 800e942:	f7f2 f909 	bl	8000b58 <__aeabi_d2iz>
 800e946:	9001      	str	r0, [sp, #4]
 800e948:	f7f1 fdec 	bl	8000524 <__aeabi_i2d>
 800e94c:	4642      	mov	r2, r8
 800e94e:	464b      	mov	r3, r9
 800e950:	f7f1 fe52 	bl	80005f8 <__aeabi_dmul>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4630      	mov	r0, r6
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f1 fc94 	bl	8000288 <__aeabi_dsub>
 800e960:	9e01      	ldr	r6, [sp, #4]
 800e962:	9f04      	ldr	r7, [sp, #16]
 800e964:	3630      	adds	r6, #48	; 0x30
 800e966:	f805 6b01 	strb.w	r6, [r5], #1
 800e96a:	9e00      	ldr	r6, [sp, #0]
 800e96c:	1bae      	subs	r6, r5, r6
 800e96e:	42b7      	cmp	r7, r6
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	d134      	bne.n	800e9e0 <_dtoa_r+0x708>
 800e976:	f7f1 fc89 	bl	800028c <__adddf3>
 800e97a:	4642      	mov	r2, r8
 800e97c:	464b      	mov	r3, r9
 800e97e:	4606      	mov	r6, r0
 800e980:	460f      	mov	r7, r1
 800e982:	f7f2 f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 800e986:	b9c8      	cbnz	r0, 800e9bc <_dtoa_r+0x6e4>
 800e988:	4642      	mov	r2, r8
 800e98a:	464b      	mov	r3, r9
 800e98c:	4630      	mov	r0, r6
 800e98e:	4639      	mov	r1, r7
 800e990:	f7f2 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e994:	b110      	cbz	r0, 800e99c <_dtoa_r+0x6c4>
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	07db      	lsls	r3, r3, #31
 800e99a:	d40f      	bmi.n	800e9bc <_dtoa_r+0x6e4>
 800e99c:	4651      	mov	r1, sl
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f000 fbcc 	bl	800f13c <_Bfree>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9a8:	702b      	strb	r3, [r5, #0]
 800e9aa:	f10b 0301 	add.w	r3, fp, #1
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f43f ace2 	beq.w	800e37c <_dtoa_r+0xa4>
 800e9b8:	601d      	str	r5, [r3, #0]
 800e9ba:	e4df      	b.n	800e37c <_dtoa_r+0xa4>
 800e9bc:	465f      	mov	r7, fp
 800e9be:	462b      	mov	r3, r5
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9c6:	2a39      	cmp	r2, #57	; 0x39
 800e9c8:	d106      	bne.n	800e9d8 <_dtoa_r+0x700>
 800e9ca:	9a00      	ldr	r2, [sp, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d1f7      	bne.n	800e9c0 <_dtoa_r+0x6e8>
 800e9d0:	9900      	ldr	r1, [sp, #0]
 800e9d2:	2230      	movs	r2, #48	; 0x30
 800e9d4:	3701      	adds	r7, #1
 800e9d6:	700a      	strb	r2, [r1, #0]
 800e9d8:	781a      	ldrb	r2, [r3, #0]
 800e9da:	3201      	adds	r2, #1
 800e9dc:	701a      	strb	r2, [r3, #0]
 800e9de:	e790      	b.n	800e902 <_dtoa_r+0x62a>
 800e9e0:	4ba3      	ldr	r3, [pc, #652]	; (800ec70 <_dtoa_r+0x998>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f7f1 fe08 	bl	80005f8 <__aeabi_dmul>
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	460f      	mov	r7, r1
 800e9f0:	f7f2 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d09e      	beq.n	800e936 <_dtoa_r+0x65e>
 800e9f8:	e7d0      	b.n	800e99c <_dtoa_r+0x6c4>
 800e9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	f000 80ca 	beq.w	800eb96 <_dtoa_r+0x8be>
 800ea02:	9a07      	ldr	r2, [sp, #28]
 800ea04:	2a01      	cmp	r2, #1
 800ea06:	f300 80ad 	bgt.w	800eb64 <_dtoa_r+0x88c>
 800ea0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	f000 80a5 	beq.w	800eb5c <_dtoa_r+0x884>
 800ea12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea16:	9e08      	ldr	r6, [sp, #32]
 800ea18:	9d05      	ldr	r5, [sp, #20]
 800ea1a:	9a05      	ldr	r2, [sp, #20]
 800ea1c:	441a      	add	r2, r3
 800ea1e:	9205      	str	r2, [sp, #20]
 800ea20:	9a06      	ldr	r2, [sp, #24]
 800ea22:	2101      	movs	r1, #1
 800ea24:	441a      	add	r2, r3
 800ea26:	4620      	mov	r0, r4
 800ea28:	9206      	str	r2, [sp, #24]
 800ea2a:	f000 fc3d 	bl	800f2a8 <__i2b>
 800ea2e:	4607      	mov	r7, r0
 800ea30:	b165      	cbz	r5, 800ea4c <_dtoa_r+0x774>
 800ea32:	9b06      	ldr	r3, [sp, #24]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dd09      	ble.n	800ea4c <_dtoa_r+0x774>
 800ea38:	42ab      	cmp	r3, r5
 800ea3a:	9a05      	ldr	r2, [sp, #20]
 800ea3c:	bfa8      	it	ge
 800ea3e:	462b      	movge	r3, r5
 800ea40:	1ad2      	subs	r2, r2, r3
 800ea42:	9205      	str	r2, [sp, #20]
 800ea44:	9a06      	ldr	r2, [sp, #24]
 800ea46:	1aed      	subs	r5, r5, r3
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	9306      	str	r3, [sp, #24]
 800ea4c:	9b08      	ldr	r3, [sp, #32]
 800ea4e:	b1f3      	cbz	r3, 800ea8e <_dtoa_r+0x7b6>
 800ea50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f000 80a3 	beq.w	800eb9e <_dtoa_r+0x8c6>
 800ea58:	2e00      	cmp	r6, #0
 800ea5a:	dd10      	ble.n	800ea7e <_dtoa_r+0x7a6>
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	4632      	mov	r2, r6
 800ea60:	4620      	mov	r0, r4
 800ea62:	f000 fce1 	bl	800f428 <__pow5mult>
 800ea66:	4652      	mov	r2, sl
 800ea68:	4601      	mov	r1, r0
 800ea6a:	4607      	mov	r7, r0
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f000 fc31 	bl	800f2d4 <__multiply>
 800ea72:	4651      	mov	r1, sl
 800ea74:	4680      	mov	r8, r0
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 fb60 	bl	800f13c <_Bfree>
 800ea7c:	46c2      	mov	sl, r8
 800ea7e:	9b08      	ldr	r3, [sp, #32]
 800ea80:	1b9a      	subs	r2, r3, r6
 800ea82:	d004      	beq.n	800ea8e <_dtoa_r+0x7b6>
 800ea84:	4651      	mov	r1, sl
 800ea86:	4620      	mov	r0, r4
 800ea88:	f000 fcce 	bl	800f428 <__pow5mult>
 800ea8c:	4682      	mov	sl, r0
 800ea8e:	2101      	movs	r1, #1
 800ea90:	4620      	mov	r0, r4
 800ea92:	f000 fc09 	bl	800f2a8 <__i2b>
 800ea96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	f340 8081 	ble.w	800eba2 <_dtoa_r+0x8ca>
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4601      	mov	r1, r0
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f000 fcbf 	bl	800f428 <__pow5mult>
 800eaaa:	9b07      	ldr	r3, [sp, #28]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	4606      	mov	r6, r0
 800eab0:	dd7a      	ble.n	800eba8 <_dtoa_r+0x8d0>
 800eab2:	f04f 0800 	mov.w	r8, #0
 800eab6:	6933      	ldr	r3, [r6, #16]
 800eab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eabc:	6918      	ldr	r0, [r3, #16]
 800eabe:	f000 fba5 	bl	800f20c <__hi0bits>
 800eac2:	f1c0 0020 	rsb	r0, r0, #32
 800eac6:	9b06      	ldr	r3, [sp, #24]
 800eac8:	4418      	add	r0, r3
 800eaca:	f010 001f 	ands.w	r0, r0, #31
 800eace:	f000 8094 	beq.w	800ebfa <_dtoa_r+0x922>
 800ead2:	f1c0 0320 	rsb	r3, r0, #32
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	f340 8085 	ble.w	800ebe6 <_dtoa_r+0x90e>
 800eadc:	9b05      	ldr	r3, [sp, #20]
 800eade:	f1c0 001c 	rsb	r0, r0, #28
 800eae2:	4403      	add	r3, r0
 800eae4:	9305      	str	r3, [sp, #20]
 800eae6:	9b06      	ldr	r3, [sp, #24]
 800eae8:	4403      	add	r3, r0
 800eaea:	4405      	add	r5, r0
 800eaec:	9306      	str	r3, [sp, #24]
 800eaee:	9b05      	ldr	r3, [sp, #20]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dd05      	ble.n	800eb00 <_dtoa_r+0x828>
 800eaf4:	4651      	mov	r1, sl
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f000 fcef 	bl	800f4dc <__lshift>
 800eafe:	4682      	mov	sl, r0
 800eb00:	9b06      	ldr	r3, [sp, #24]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd05      	ble.n	800eb12 <_dtoa_r+0x83a>
 800eb06:	4631      	mov	r1, r6
 800eb08:	461a      	mov	r2, r3
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 fce6 	bl	800f4dc <__lshift>
 800eb10:	4606      	mov	r6, r0
 800eb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d072      	beq.n	800ebfe <_dtoa_r+0x926>
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4650      	mov	r0, sl
 800eb1c:	f000 fd4a 	bl	800f5b4 <__mcmp>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	da6c      	bge.n	800ebfe <_dtoa_r+0x926>
 800eb24:	2300      	movs	r3, #0
 800eb26:	4651      	mov	r1, sl
 800eb28:	220a      	movs	r2, #10
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 fb28 	bl	800f180 <__multadd>
 800eb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb36:	4682      	mov	sl, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f000 81b0 	beq.w	800ee9e <_dtoa_r+0xbc6>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	4639      	mov	r1, r7
 800eb42:	220a      	movs	r2, #10
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fb1b 	bl	800f180 <__multadd>
 800eb4a:	9b01      	ldr	r3, [sp, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	4607      	mov	r7, r0
 800eb50:	f300 8096 	bgt.w	800ec80 <_dtoa_r+0x9a8>
 800eb54:	9b07      	ldr	r3, [sp, #28]
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	dc59      	bgt.n	800ec0e <_dtoa_r+0x936>
 800eb5a:	e091      	b.n	800ec80 <_dtoa_r+0x9a8>
 800eb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb62:	e758      	b.n	800ea16 <_dtoa_r+0x73e>
 800eb64:	9b04      	ldr	r3, [sp, #16]
 800eb66:	1e5e      	subs	r6, r3, #1
 800eb68:	9b08      	ldr	r3, [sp, #32]
 800eb6a:	42b3      	cmp	r3, r6
 800eb6c:	bfbf      	itttt	lt
 800eb6e:	9b08      	ldrlt	r3, [sp, #32]
 800eb70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eb72:	9608      	strlt	r6, [sp, #32]
 800eb74:	1af3      	sublt	r3, r6, r3
 800eb76:	bfb4      	ite	lt
 800eb78:	18d2      	addlt	r2, r2, r3
 800eb7a:	1b9e      	subge	r6, r3, r6
 800eb7c:	9b04      	ldr	r3, [sp, #16]
 800eb7e:	bfbc      	itt	lt
 800eb80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eb82:	2600      	movlt	r6, #0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	bfb7      	itett	lt
 800eb88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eb8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eb90:	1a9d      	sublt	r5, r3, r2
 800eb92:	2300      	movlt	r3, #0
 800eb94:	e741      	b.n	800ea1a <_dtoa_r+0x742>
 800eb96:	9e08      	ldr	r6, [sp, #32]
 800eb98:	9d05      	ldr	r5, [sp, #20]
 800eb9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eb9c:	e748      	b.n	800ea30 <_dtoa_r+0x758>
 800eb9e:	9a08      	ldr	r2, [sp, #32]
 800eba0:	e770      	b.n	800ea84 <_dtoa_r+0x7ac>
 800eba2:	9b07      	ldr	r3, [sp, #28]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	dc19      	bgt.n	800ebdc <_dtoa_r+0x904>
 800eba8:	9b02      	ldr	r3, [sp, #8]
 800ebaa:	b9bb      	cbnz	r3, 800ebdc <_dtoa_r+0x904>
 800ebac:	9b03      	ldr	r3, [sp, #12]
 800ebae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebb2:	b99b      	cbnz	r3, 800ebdc <_dtoa_r+0x904>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebba:	0d1b      	lsrs	r3, r3, #20
 800ebbc:	051b      	lsls	r3, r3, #20
 800ebbe:	b183      	cbz	r3, 800ebe2 <_dtoa_r+0x90a>
 800ebc0:	9b05      	ldr	r3, [sp, #20]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	9305      	str	r3, [sp, #20]
 800ebc6:	9b06      	ldr	r3, [sp, #24]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	9306      	str	r3, [sp, #24]
 800ebcc:	f04f 0801 	mov.w	r8, #1
 800ebd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f47f af6f 	bne.w	800eab6 <_dtoa_r+0x7de>
 800ebd8:	2001      	movs	r0, #1
 800ebda:	e774      	b.n	800eac6 <_dtoa_r+0x7ee>
 800ebdc:	f04f 0800 	mov.w	r8, #0
 800ebe0:	e7f6      	b.n	800ebd0 <_dtoa_r+0x8f8>
 800ebe2:	4698      	mov	r8, r3
 800ebe4:	e7f4      	b.n	800ebd0 <_dtoa_r+0x8f8>
 800ebe6:	d082      	beq.n	800eaee <_dtoa_r+0x816>
 800ebe8:	9a05      	ldr	r2, [sp, #20]
 800ebea:	331c      	adds	r3, #28
 800ebec:	441a      	add	r2, r3
 800ebee:	9205      	str	r2, [sp, #20]
 800ebf0:	9a06      	ldr	r2, [sp, #24]
 800ebf2:	441a      	add	r2, r3
 800ebf4:	441d      	add	r5, r3
 800ebf6:	9206      	str	r2, [sp, #24]
 800ebf8:	e779      	b.n	800eaee <_dtoa_r+0x816>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	e7f4      	b.n	800ebe8 <_dtoa_r+0x910>
 800ebfe:	9b04      	ldr	r3, [sp, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dc37      	bgt.n	800ec74 <_dtoa_r+0x99c>
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	dd34      	ble.n	800ec74 <_dtoa_r+0x99c>
 800ec0a:	9b04      	ldr	r3, [sp, #16]
 800ec0c:	9301      	str	r3, [sp, #4]
 800ec0e:	9b01      	ldr	r3, [sp, #4]
 800ec10:	b963      	cbnz	r3, 800ec2c <_dtoa_r+0x954>
 800ec12:	4631      	mov	r1, r6
 800ec14:	2205      	movs	r2, #5
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 fab2 	bl	800f180 <__multadd>
 800ec1c:	4601      	mov	r1, r0
 800ec1e:	4606      	mov	r6, r0
 800ec20:	4650      	mov	r0, sl
 800ec22:	f000 fcc7 	bl	800f5b4 <__mcmp>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f73f adbb 	bgt.w	800e7a2 <_dtoa_r+0x4ca>
 800ec2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2e:	9d00      	ldr	r5, [sp, #0]
 800ec30:	ea6f 0b03 	mvn.w	fp, r3
 800ec34:	f04f 0800 	mov.w	r8, #0
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 fa7e 	bl	800f13c <_Bfree>
 800ec40:	2f00      	cmp	r7, #0
 800ec42:	f43f aeab 	beq.w	800e99c <_dtoa_r+0x6c4>
 800ec46:	f1b8 0f00 	cmp.w	r8, #0
 800ec4a:	d005      	beq.n	800ec58 <_dtoa_r+0x980>
 800ec4c:	45b8      	cmp	r8, r7
 800ec4e:	d003      	beq.n	800ec58 <_dtoa_r+0x980>
 800ec50:	4641      	mov	r1, r8
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fa72 	bl	800f13c <_Bfree>
 800ec58:	4639      	mov	r1, r7
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 fa6e 	bl	800f13c <_Bfree>
 800ec60:	e69c      	b.n	800e99c <_dtoa_r+0x6c4>
 800ec62:	2600      	movs	r6, #0
 800ec64:	4637      	mov	r7, r6
 800ec66:	e7e1      	b.n	800ec2c <_dtoa_r+0x954>
 800ec68:	46bb      	mov	fp, r7
 800ec6a:	4637      	mov	r7, r6
 800ec6c:	e599      	b.n	800e7a2 <_dtoa_r+0x4ca>
 800ec6e:	bf00      	nop
 800ec70:	40240000 	.word	0x40240000
 800ec74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 80c8 	beq.w	800ee0c <_dtoa_r+0xb34>
 800ec7c:	9b04      	ldr	r3, [sp, #16]
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	2d00      	cmp	r5, #0
 800ec82:	dd05      	ble.n	800ec90 <_dtoa_r+0x9b8>
 800ec84:	4639      	mov	r1, r7
 800ec86:	462a      	mov	r2, r5
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f000 fc27 	bl	800f4dc <__lshift>
 800ec8e:	4607      	mov	r7, r0
 800ec90:	f1b8 0f00 	cmp.w	r8, #0
 800ec94:	d05b      	beq.n	800ed4e <_dtoa_r+0xa76>
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 fa0f 	bl	800f0bc <_Balloc>
 800ec9e:	4605      	mov	r5, r0
 800eca0:	b928      	cbnz	r0, 800ecae <_dtoa_r+0x9d6>
 800eca2:	4b83      	ldr	r3, [pc, #524]	; (800eeb0 <_dtoa_r+0xbd8>)
 800eca4:	4602      	mov	r2, r0
 800eca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ecaa:	f7ff bb2e 	b.w	800e30a <_dtoa_r+0x32>
 800ecae:	693a      	ldr	r2, [r7, #16]
 800ecb0:	3202      	adds	r2, #2
 800ecb2:	0092      	lsls	r2, r2, #2
 800ecb4:	f107 010c 	add.w	r1, r7, #12
 800ecb8:	300c      	adds	r0, #12
 800ecba:	f7ff fa76 	bl	800e1aa <memcpy>
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 fc0a 	bl	800f4dc <__lshift>
 800ecc8:	9b00      	ldr	r3, [sp, #0]
 800ecca:	3301      	adds	r3, #1
 800eccc:	9304      	str	r3, [sp, #16]
 800ecce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	9308      	str	r3, [sp, #32]
 800ecd6:	9b02      	ldr	r3, [sp, #8]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	46b8      	mov	r8, r7
 800ecde:	9306      	str	r3, [sp, #24]
 800ece0:	4607      	mov	r7, r0
 800ece2:	9b04      	ldr	r3, [sp, #16]
 800ece4:	4631      	mov	r1, r6
 800ece6:	3b01      	subs	r3, #1
 800ece8:	4650      	mov	r0, sl
 800ecea:	9301      	str	r3, [sp, #4]
 800ecec:	f7ff fa6b 	bl	800e1c6 <quorem>
 800ecf0:	4641      	mov	r1, r8
 800ecf2:	9002      	str	r0, [sp, #8]
 800ecf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	f000 fc5b 	bl	800f5b4 <__mcmp>
 800ecfe:	463a      	mov	r2, r7
 800ed00:	9005      	str	r0, [sp, #20]
 800ed02:	4631      	mov	r1, r6
 800ed04:	4620      	mov	r0, r4
 800ed06:	f000 fc71 	bl	800f5ec <__mdiff>
 800ed0a:	68c2      	ldr	r2, [r0, #12]
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	bb02      	cbnz	r2, 800ed52 <_dtoa_r+0xa7a>
 800ed10:	4601      	mov	r1, r0
 800ed12:	4650      	mov	r0, sl
 800ed14:	f000 fc4e 	bl	800f5b4 <__mcmp>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed20:	f000 fa0c 	bl	800f13c <_Bfree>
 800ed24:	9b07      	ldr	r3, [sp, #28]
 800ed26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed28:	9d04      	ldr	r5, [sp, #16]
 800ed2a:	ea43 0102 	orr.w	r1, r3, r2
 800ed2e:	9b06      	ldr	r3, [sp, #24]
 800ed30:	4319      	orrs	r1, r3
 800ed32:	d110      	bne.n	800ed56 <_dtoa_r+0xa7e>
 800ed34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed38:	d029      	beq.n	800ed8e <_dtoa_r+0xab6>
 800ed3a:	9b05      	ldr	r3, [sp, #20]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dd02      	ble.n	800ed46 <_dtoa_r+0xa6e>
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ed46:	9b01      	ldr	r3, [sp, #4]
 800ed48:	f883 9000 	strb.w	r9, [r3]
 800ed4c:	e774      	b.n	800ec38 <_dtoa_r+0x960>
 800ed4e:	4638      	mov	r0, r7
 800ed50:	e7ba      	b.n	800ecc8 <_dtoa_r+0x9f0>
 800ed52:	2201      	movs	r2, #1
 800ed54:	e7e1      	b.n	800ed1a <_dtoa_r+0xa42>
 800ed56:	9b05      	ldr	r3, [sp, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	db04      	blt.n	800ed66 <_dtoa_r+0xa8e>
 800ed5c:	9907      	ldr	r1, [sp, #28]
 800ed5e:	430b      	orrs	r3, r1
 800ed60:	9906      	ldr	r1, [sp, #24]
 800ed62:	430b      	orrs	r3, r1
 800ed64:	d120      	bne.n	800eda8 <_dtoa_r+0xad0>
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	dded      	ble.n	800ed46 <_dtoa_r+0xa6e>
 800ed6a:	4651      	mov	r1, sl
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f000 fbb4 	bl	800f4dc <__lshift>
 800ed74:	4631      	mov	r1, r6
 800ed76:	4682      	mov	sl, r0
 800ed78:	f000 fc1c 	bl	800f5b4 <__mcmp>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	dc03      	bgt.n	800ed88 <_dtoa_r+0xab0>
 800ed80:	d1e1      	bne.n	800ed46 <_dtoa_r+0xa6e>
 800ed82:	f019 0f01 	tst.w	r9, #1
 800ed86:	d0de      	beq.n	800ed46 <_dtoa_r+0xa6e>
 800ed88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed8c:	d1d8      	bne.n	800ed40 <_dtoa_r+0xa68>
 800ed8e:	9a01      	ldr	r2, [sp, #4]
 800ed90:	2339      	movs	r3, #57	; 0x39
 800ed92:	7013      	strb	r3, [r2, #0]
 800ed94:	462b      	mov	r3, r5
 800ed96:	461d      	mov	r5, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed9e:	2a39      	cmp	r2, #57	; 0x39
 800eda0:	d06c      	beq.n	800ee7c <_dtoa_r+0xba4>
 800eda2:	3201      	adds	r2, #1
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	e747      	b.n	800ec38 <_dtoa_r+0x960>
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	dd07      	ble.n	800edbc <_dtoa_r+0xae4>
 800edac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800edb0:	d0ed      	beq.n	800ed8e <_dtoa_r+0xab6>
 800edb2:	9a01      	ldr	r2, [sp, #4]
 800edb4:	f109 0301 	add.w	r3, r9, #1
 800edb8:	7013      	strb	r3, [r2, #0]
 800edba:	e73d      	b.n	800ec38 <_dtoa_r+0x960>
 800edbc:	9b04      	ldr	r3, [sp, #16]
 800edbe:	9a08      	ldr	r2, [sp, #32]
 800edc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d043      	beq.n	800ee50 <_dtoa_r+0xb78>
 800edc8:	4651      	mov	r1, sl
 800edca:	2300      	movs	r3, #0
 800edcc:	220a      	movs	r2, #10
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 f9d6 	bl	800f180 <__multadd>
 800edd4:	45b8      	cmp	r8, r7
 800edd6:	4682      	mov	sl, r0
 800edd8:	f04f 0300 	mov.w	r3, #0
 800eddc:	f04f 020a 	mov.w	r2, #10
 800ede0:	4641      	mov	r1, r8
 800ede2:	4620      	mov	r0, r4
 800ede4:	d107      	bne.n	800edf6 <_dtoa_r+0xb1e>
 800ede6:	f000 f9cb 	bl	800f180 <__multadd>
 800edea:	4680      	mov	r8, r0
 800edec:	4607      	mov	r7, r0
 800edee:	9b04      	ldr	r3, [sp, #16]
 800edf0:	3301      	adds	r3, #1
 800edf2:	9304      	str	r3, [sp, #16]
 800edf4:	e775      	b.n	800ece2 <_dtoa_r+0xa0a>
 800edf6:	f000 f9c3 	bl	800f180 <__multadd>
 800edfa:	4639      	mov	r1, r7
 800edfc:	4680      	mov	r8, r0
 800edfe:	2300      	movs	r3, #0
 800ee00:	220a      	movs	r2, #10
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 f9bc 	bl	800f180 <__multadd>
 800ee08:	4607      	mov	r7, r0
 800ee0a:	e7f0      	b.n	800edee <_dtoa_r+0xb16>
 800ee0c:	9b04      	ldr	r3, [sp, #16]
 800ee0e:	9301      	str	r3, [sp, #4]
 800ee10:	9d00      	ldr	r5, [sp, #0]
 800ee12:	4631      	mov	r1, r6
 800ee14:	4650      	mov	r0, sl
 800ee16:	f7ff f9d6 	bl	800e1c6 <quorem>
 800ee1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee1e:	9b00      	ldr	r3, [sp, #0]
 800ee20:	f805 9b01 	strb.w	r9, [r5], #1
 800ee24:	1aea      	subs	r2, r5, r3
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	dd07      	ble.n	800ee3c <_dtoa_r+0xb64>
 800ee2c:	4651      	mov	r1, sl
 800ee2e:	2300      	movs	r3, #0
 800ee30:	220a      	movs	r2, #10
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 f9a4 	bl	800f180 <__multadd>
 800ee38:	4682      	mov	sl, r0
 800ee3a:	e7ea      	b.n	800ee12 <_dtoa_r+0xb3a>
 800ee3c:	9b01      	ldr	r3, [sp, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	bfc8      	it	gt
 800ee42:	461d      	movgt	r5, r3
 800ee44:	9b00      	ldr	r3, [sp, #0]
 800ee46:	bfd8      	it	le
 800ee48:	2501      	movle	r5, #1
 800ee4a:	441d      	add	r5, r3
 800ee4c:	f04f 0800 	mov.w	r8, #0
 800ee50:	4651      	mov	r1, sl
 800ee52:	2201      	movs	r2, #1
 800ee54:	4620      	mov	r0, r4
 800ee56:	f000 fb41 	bl	800f4dc <__lshift>
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	4682      	mov	sl, r0
 800ee5e:	f000 fba9 	bl	800f5b4 <__mcmp>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	dc96      	bgt.n	800ed94 <_dtoa_r+0xabc>
 800ee66:	d102      	bne.n	800ee6e <_dtoa_r+0xb96>
 800ee68:	f019 0f01 	tst.w	r9, #1
 800ee6c:	d192      	bne.n	800ed94 <_dtoa_r+0xabc>
 800ee6e:	462b      	mov	r3, r5
 800ee70:	461d      	mov	r5, r3
 800ee72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee76:	2a30      	cmp	r2, #48	; 0x30
 800ee78:	d0fa      	beq.n	800ee70 <_dtoa_r+0xb98>
 800ee7a:	e6dd      	b.n	800ec38 <_dtoa_r+0x960>
 800ee7c:	9a00      	ldr	r2, [sp, #0]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d189      	bne.n	800ed96 <_dtoa_r+0xabe>
 800ee82:	f10b 0b01 	add.w	fp, fp, #1
 800ee86:	2331      	movs	r3, #49	; 0x31
 800ee88:	e796      	b.n	800edb8 <_dtoa_r+0xae0>
 800ee8a:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <_dtoa_r+0xbdc>)
 800ee8c:	f7ff ba99 	b.w	800e3c2 <_dtoa_r+0xea>
 800ee90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f47f aa6d 	bne.w	800e372 <_dtoa_r+0x9a>
 800ee98:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <_dtoa_r+0xbe0>)
 800ee9a:	f7ff ba92 	b.w	800e3c2 <_dtoa_r+0xea>
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	dcb5      	bgt.n	800ee10 <_dtoa_r+0xb38>
 800eea4:	9b07      	ldr	r3, [sp, #28]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	f73f aeb1 	bgt.w	800ec0e <_dtoa_r+0x936>
 800eeac:	e7b0      	b.n	800ee10 <_dtoa_r+0xb38>
 800eeae:	bf00      	nop
 800eeb0:	080121c0 	.word	0x080121c0
 800eeb4:	08012120 	.word	0x08012120
 800eeb8:	08012144 	.word	0x08012144

0800eebc <_free_r>:
 800eebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eebe:	2900      	cmp	r1, #0
 800eec0:	d044      	beq.n	800ef4c <_free_r+0x90>
 800eec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eec6:	9001      	str	r0, [sp, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f1a1 0404 	sub.w	r4, r1, #4
 800eece:	bfb8      	it	lt
 800eed0:	18e4      	addlt	r4, r4, r3
 800eed2:	f000 f8e7 	bl	800f0a4 <__malloc_lock>
 800eed6:	4a1e      	ldr	r2, [pc, #120]	; (800ef50 <_free_r+0x94>)
 800eed8:	9801      	ldr	r0, [sp, #4]
 800eeda:	6813      	ldr	r3, [r2, #0]
 800eedc:	b933      	cbnz	r3, 800eeec <_free_r+0x30>
 800eede:	6063      	str	r3, [r4, #4]
 800eee0:	6014      	str	r4, [r2, #0]
 800eee2:	b003      	add	sp, #12
 800eee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eee8:	f000 b8e2 	b.w	800f0b0 <__malloc_unlock>
 800eeec:	42a3      	cmp	r3, r4
 800eeee:	d908      	bls.n	800ef02 <_free_r+0x46>
 800eef0:	6825      	ldr	r5, [r4, #0]
 800eef2:	1961      	adds	r1, r4, r5
 800eef4:	428b      	cmp	r3, r1
 800eef6:	bf01      	itttt	eq
 800eef8:	6819      	ldreq	r1, [r3, #0]
 800eefa:	685b      	ldreq	r3, [r3, #4]
 800eefc:	1949      	addeq	r1, r1, r5
 800eefe:	6021      	streq	r1, [r4, #0]
 800ef00:	e7ed      	b.n	800eede <_free_r+0x22>
 800ef02:	461a      	mov	r2, r3
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	b10b      	cbz	r3, 800ef0c <_free_r+0x50>
 800ef08:	42a3      	cmp	r3, r4
 800ef0a:	d9fa      	bls.n	800ef02 <_free_r+0x46>
 800ef0c:	6811      	ldr	r1, [r2, #0]
 800ef0e:	1855      	adds	r5, r2, r1
 800ef10:	42a5      	cmp	r5, r4
 800ef12:	d10b      	bne.n	800ef2c <_free_r+0x70>
 800ef14:	6824      	ldr	r4, [r4, #0]
 800ef16:	4421      	add	r1, r4
 800ef18:	1854      	adds	r4, r2, r1
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	6011      	str	r1, [r2, #0]
 800ef1e:	d1e0      	bne.n	800eee2 <_free_r+0x26>
 800ef20:	681c      	ldr	r4, [r3, #0]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	6053      	str	r3, [r2, #4]
 800ef26:	440c      	add	r4, r1
 800ef28:	6014      	str	r4, [r2, #0]
 800ef2a:	e7da      	b.n	800eee2 <_free_r+0x26>
 800ef2c:	d902      	bls.n	800ef34 <_free_r+0x78>
 800ef2e:	230c      	movs	r3, #12
 800ef30:	6003      	str	r3, [r0, #0]
 800ef32:	e7d6      	b.n	800eee2 <_free_r+0x26>
 800ef34:	6825      	ldr	r5, [r4, #0]
 800ef36:	1961      	adds	r1, r4, r5
 800ef38:	428b      	cmp	r3, r1
 800ef3a:	bf04      	itt	eq
 800ef3c:	6819      	ldreq	r1, [r3, #0]
 800ef3e:	685b      	ldreq	r3, [r3, #4]
 800ef40:	6063      	str	r3, [r4, #4]
 800ef42:	bf04      	itt	eq
 800ef44:	1949      	addeq	r1, r1, r5
 800ef46:	6021      	streq	r1, [r4, #0]
 800ef48:	6054      	str	r4, [r2, #4]
 800ef4a:	e7ca      	b.n	800eee2 <_free_r+0x26>
 800ef4c:	b003      	add	sp, #12
 800ef4e:	bd30      	pop	{r4, r5, pc}
 800ef50:	20003e8c 	.word	0x20003e8c

0800ef54 <malloc>:
 800ef54:	4b02      	ldr	r3, [pc, #8]	; (800ef60 <malloc+0xc>)
 800ef56:	4601      	mov	r1, r0
 800ef58:	6818      	ldr	r0, [r3, #0]
 800ef5a:	f000 b823 	b.w	800efa4 <_malloc_r>
 800ef5e:	bf00      	nop
 800ef60:	20000080 	.word	0x20000080

0800ef64 <sbrk_aligned>:
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	4e0e      	ldr	r6, [pc, #56]	; (800efa0 <sbrk_aligned+0x3c>)
 800ef68:	460c      	mov	r4, r1
 800ef6a:	6831      	ldr	r1, [r6, #0]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	b911      	cbnz	r1, 800ef76 <sbrk_aligned+0x12>
 800ef70:	f000 ffee 	bl	800ff50 <_sbrk_r>
 800ef74:	6030      	str	r0, [r6, #0]
 800ef76:	4621      	mov	r1, r4
 800ef78:	4628      	mov	r0, r5
 800ef7a:	f000 ffe9 	bl	800ff50 <_sbrk_r>
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	d00a      	beq.n	800ef98 <sbrk_aligned+0x34>
 800ef82:	1cc4      	adds	r4, r0, #3
 800ef84:	f024 0403 	bic.w	r4, r4, #3
 800ef88:	42a0      	cmp	r0, r4
 800ef8a:	d007      	beq.n	800ef9c <sbrk_aligned+0x38>
 800ef8c:	1a21      	subs	r1, r4, r0
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 ffde 	bl	800ff50 <_sbrk_r>
 800ef94:	3001      	adds	r0, #1
 800ef96:	d101      	bne.n	800ef9c <sbrk_aligned+0x38>
 800ef98:	f04f 34ff 	mov.w	r4, #4294967295
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}
 800efa0:	20003e90 	.word	0x20003e90

0800efa4 <_malloc_r>:
 800efa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efa8:	1ccd      	adds	r5, r1, #3
 800efaa:	f025 0503 	bic.w	r5, r5, #3
 800efae:	3508      	adds	r5, #8
 800efb0:	2d0c      	cmp	r5, #12
 800efb2:	bf38      	it	cc
 800efb4:	250c      	movcc	r5, #12
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	4607      	mov	r7, r0
 800efba:	db01      	blt.n	800efc0 <_malloc_r+0x1c>
 800efbc:	42a9      	cmp	r1, r5
 800efbe:	d905      	bls.n	800efcc <_malloc_r+0x28>
 800efc0:	230c      	movs	r3, #12
 800efc2:	603b      	str	r3, [r7, #0]
 800efc4:	2600      	movs	r6, #0
 800efc6:	4630      	mov	r0, r6
 800efc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0a0 <_malloc_r+0xfc>
 800efd0:	f000 f868 	bl	800f0a4 <__malloc_lock>
 800efd4:	f8d8 3000 	ldr.w	r3, [r8]
 800efd8:	461c      	mov	r4, r3
 800efda:	bb5c      	cbnz	r4, 800f034 <_malloc_r+0x90>
 800efdc:	4629      	mov	r1, r5
 800efde:	4638      	mov	r0, r7
 800efe0:	f7ff ffc0 	bl	800ef64 <sbrk_aligned>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	4604      	mov	r4, r0
 800efe8:	d155      	bne.n	800f096 <_malloc_r+0xf2>
 800efea:	f8d8 4000 	ldr.w	r4, [r8]
 800efee:	4626      	mov	r6, r4
 800eff0:	2e00      	cmp	r6, #0
 800eff2:	d145      	bne.n	800f080 <_malloc_r+0xdc>
 800eff4:	2c00      	cmp	r4, #0
 800eff6:	d048      	beq.n	800f08a <_malloc_r+0xe6>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	4631      	mov	r1, r6
 800effc:	4638      	mov	r0, r7
 800effe:	eb04 0903 	add.w	r9, r4, r3
 800f002:	f000 ffa5 	bl	800ff50 <_sbrk_r>
 800f006:	4581      	cmp	r9, r0
 800f008:	d13f      	bne.n	800f08a <_malloc_r+0xe6>
 800f00a:	6821      	ldr	r1, [r4, #0]
 800f00c:	1a6d      	subs	r5, r5, r1
 800f00e:	4629      	mov	r1, r5
 800f010:	4638      	mov	r0, r7
 800f012:	f7ff ffa7 	bl	800ef64 <sbrk_aligned>
 800f016:	3001      	adds	r0, #1
 800f018:	d037      	beq.n	800f08a <_malloc_r+0xe6>
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	442b      	add	r3, r5
 800f01e:	6023      	str	r3, [r4, #0]
 800f020:	f8d8 3000 	ldr.w	r3, [r8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d038      	beq.n	800f09a <_malloc_r+0xf6>
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	42a2      	cmp	r2, r4
 800f02c:	d12b      	bne.n	800f086 <_malloc_r+0xe2>
 800f02e:	2200      	movs	r2, #0
 800f030:	605a      	str	r2, [r3, #4]
 800f032:	e00f      	b.n	800f054 <_malloc_r+0xb0>
 800f034:	6822      	ldr	r2, [r4, #0]
 800f036:	1b52      	subs	r2, r2, r5
 800f038:	d41f      	bmi.n	800f07a <_malloc_r+0xd6>
 800f03a:	2a0b      	cmp	r2, #11
 800f03c:	d917      	bls.n	800f06e <_malloc_r+0xca>
 800f03e:	1961      	adds	r1, r4, r5
 800f040:	42a3      	cmp	r3, r4
 800f042:	6025      	str	r5, [r4, #0]
 800f044:	bf18      	it	ne
 800f046:	6059      	strne	r1, [r3, #4]
 800f048:	6863      	ldr	r3, [r4, #4]
 800f04a:	bf08      	it	eq
 800f04c:	f8c8 1000 	streq.w	r1, [r8]
 800f050:	5162      	str	r2, [r4, r5]
 800f052:	604b      	str	r3, [r1, #4]
 800f054:	4638      	mov	r0, r7
 800f056:	f104 060b 	add.w	r6, r4, #11
 800f05a:	f000 f829 	bl	800f0b0 <__malloc_unlock>
 800f05e:	f026 0607 	bic.w	r6, r6, #7
 800f062:	1d23      	adds	r3, r4, #4
 800f064:	1af2      	subs	r2, r6, r3
 800f066:	d0ae      	beq.n	800efc6 <_malloc_r+0x22>
 800f068:	1b9b      	subs	r3, r3, r6
 800f06a:	50a3      	str	r3, [r4, r2]
 800f06c:	e7ab      	b.n	800efc6 <_malloc_r+0x22>
 800f06e:	42a3      	cmp	r3, r4
 800f070:	6862      	ldr	r2, [r4, #4]
 800f072:	d1dd      	bne.n	800f030 <_malloc_r+0x8c>
 800f074:	f8c8 2000 	str.w	r2, [r8]
 800f078:	e7ec      	b.n	800f054 <_malloc_r+0xb0>
 800f07a:	4623      	mov	r3, r4
 800f07c:	6864      	ldr	r4, [r4, #4]
 800f07e:	e7ac      	b.n	800efda <_malloc_r+0x36>
 800f080:	4634      	mov	r4, r6
 800f082:	6876      	ldr	r6, [r6, #4]
 800f084:	e7b4      	b.n	800eff0 <_malloc_r+0x4c>
 800f086:	4613      	mov	r3, r2
 800f088:	e7cc      	b.n	800f024 <_malloc_r+0x80>
 800f08a:	230c      	movs	r3, #12
 800f08c:	603b      	str	r3, [r7, #0]
 800f08e:	4638      	mov	r0, r7
 800f090:	f000 f80e 	bl	800f0b0 <__malloc_unlock>
 800f094:	e797      	b.n	800efc6 <_malloc_r+0x22>
 800f096:	6025      	str	r5, [r4, #0]
 800f098:	e7dc      	b.n	800f054 <_malloc_r+0xb0>
 800f09a:	605b      	str	r3, [r3, #4]
 800f09c:	deff      	udf	#255	; 0xff
 800f09e:	bf00      	nop
 800f0a0:	20003e8c 	.word	0x20003e8c

0800f0a4 <__malloc_lock>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__malloc_lock+0x8>)
 800f0a6:	f7ff b87e 	b.w	800e1a6 <__retarget_lock_acquire_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	20003e88 	.word	0x20003e88

0800f0b0 <__malloc_unlock>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__malloc_unlock+0x8>)
 800f0b2:	f7ff b879 	b.w	800e1a8 <__retarget_lock_release_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	20003e88 	.word	0x20003e88

0800f0bc <_Balloc>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	69c6      	ldr	r6, [r0, #28]
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	b976      	cbnz	r6, 800f0e4 <_Balloc+0x28>
 800f0c6:	2010      	movs	r0, #16
 800f0c8:	f7ff ff44 	bl	800ef54 <malloc>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	61e0      	str	r0, [r4, #28]
 800f0d0:	b920      	cbnz	r0, 800f0dc <_Balloc+0x20>
 800f0d2:	4b18      	ldr	r3, [pc, #96]	; (800f134 <_Balloc+0x78>)
 800f0d4:	4818      	ldr	r0, [pc, #96]	; (800f138 <_Balloc+0x7c>)
 800f0d6:	216b      	movs	r1, #107	; 0x6b
 800f0d8:	f000 ff4a 	bl	800ff70 <__assert_func>
 800f0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0e0:	6006      	str	r6, [r0, #0]
 800f0e2:	60c6      	str	r6, [r0, #12]
 800f0e4:	69e6      	ldr	r6, [r4, #28]
 800f0e6:	68f3      	ldr	r3, [r6, #12]
 800f0e8:	b183      	cbz	r3, 800f10c <_Balloc+0x50>
 800f0ea:	69e3      	ldr	r3, [r4, #28]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0f2:	b9b8      	cbnz	r0, 800f124 <_Balloc+0x68>
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800f0fa:	1d72      	adds	r2, r6, #5
 800f0fc:	0092      	lsls	r2, r2, #2
 800f0fe:	4620      	mov	r0, r4
 800f100:	f000 ff54 	bl	800ffac <_calloc_r>
 800f104:	b160      	cbz	r0, 800f120 <_Balloc+0x64>
 800f106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f10a:	e00e      	b.n	800f12a <_Balloc+0x6e>
 800f10c:	2221      	movs	r2, #33	; 0x21
 800f10e:	2104      	movs	r1, #4
 800f110:	4620      	mov	r0, r4
 800f112:	f000 ff4b 	bl	800ffac <_calloc_r>
 800f116:	69e3      	ldr	r3, [r4, #28]
 800f118:	60f0      	str	r0, [r6, #12]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1e4      	bne.n	800f0ea <_Balloc+0x2e>
 800f120:	2000      	movs	r0, #0
 800f122:	bd70      	pop	{r4, r5, r6, pc}
 800f124:	6802      	ldr	r2, [r0, #0]
 800f126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f12a:	2300      	movs	r3, #0
 800f12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f130:	e7f7      	b.n	800f122 <_Balloc+0x66>
 800f132:	bf00      	nop
 800f134:	08012151 	.word	0x08012151
 800f138:	080121d1 	.word	0x080121d1

0800f13c <_Bfree>:
 800f13c:	b570      	push	{r4, r5, r6, lr}
 800f13e:	69c6      	ldr	r6, [r0, #28]
 800f140:	4605      	mov	r5, r0
 800f142:	460c      	mov	r4, r1
 800f144:	b976      	cbnz	r6, 800f164 <_Bfree+0x28>
 800f146:	2010      	movs	r0, #16
 800f148:	f7ff ff04 	bl	800ef54 <malloc>
 800f14c:	4602      	mov	r2, r0
 800f14e:	61e8      	str	r0, [r5, #28]
 800f150:	b920      	cbnz	r0, 800f15c <_Bfree+0x20>
 800f152:	4b09      	ldr	r3, [pc, #36]	; (800f178 <_Bfree+0x3c>)
 800f154:	4809      	ldr	r0, [pc, #36]	; (800f17c <_Bfree+0x40>)
 800f156:	218f      	movs	r1, #143	; 0x8f
 800f158:	f000 ff0a 	bl	800ff70 <__assert_func>
 800f15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f160:	6006      	str	r6, [r0, #0]
 800f162:	60c6      	str	r6, [r0, #12]
 800f164:	b13c      	cbz	r4, 800f176 <_Bfree+0x3a>
 800f166:	69eb      	ldr	r3, [r5, #28]
 800f168:	6862      	ldr	r2, [r4, #4]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f170:	6021      	str	r1, [r4, #0]
 800f172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f176:	bd70      	pop	{r4, r5, r6, pc}
 800f178:	08012151 	.word	0x08012151
 800f17c:	080121d1 	.word	0x080121d1

0800f180 <__multadd>:
 800f180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f184:	690d      	ldr	r5, [r1, #16]
 800f186:	4607      	mov	r7, r0
 800f188:	460c      	mov	r4, r1
 800f18a:	461e      	mov	r6, r3
 800f18c:	f101 0c14 	add.w	ip, r1, #20
 800f190:	2000      	movs	r0, #0
 800f192:	f8dc 3000 	ldr.w	r3, [ip]
 800f196:	b299      	uxth	r1, r3
 800f198:	fb02 6101 	mla	r1, r2, r1, r6
 800f19c:	0c1e      	lsrs	r6, r3, #16
 800f19e:	0c0b      	lsrs	r3, r1, #16
 800f1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800f1a4:	b289      	uxth	r1, r1
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1ac:	4285      	cmp	r5, r0
 800f1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800f1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1b6:	dcec      	bgt.n	800f192 <__multadd+0x12>
 800f1b8:	b30e      	cbz	r6, 800f1fe <__multadd+0x7e>
 800f1ba:	68a3      	ldr	r3, [r4, #8]
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	dc19      	bgt.n	800f1f4 <__multadd+0x74>
 800f1c0:	6861      	ldr	r1, [r4, #4]
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	f7ff ff79 	bl	800f0bc <_Balloc>
 800f1ca:	4680      	mov	r8, r0
 800f1cc:	b928      	cbnz	r0, 800f1da <__multadd+0x5a>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <__multadd+0x84>)
 800f1d2:	480d      	ldr	r0, [pc, #52]	; (800f208 <__multadd+0x88>)
 800f1d4:	21ba      	movs	r1, #186	; 0xba
 800f1d6:	f000 fecb 	bl	800ff70 <__assert_func>
 800f1da:	6922      	ldr	r2, [r4, #16]
 800f1dc:	3202      	adds	r2, #2
 800f1de:	f104 010c 	add.w	r1, r4, #12
 800f1e2:	0092      	lsls	r2, r2, #2
 800f1e4:	300c      	adds	r0, #12
 800f1e6:	f7fe ffe0 	bl	800e1aa <memcpy>
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f7ff ffa5 	bl	800f13c <_Bfree>
 800f1f2:	4644      	mov	r4, r8
 800f1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1f8:	3501      	adds	r5, #1
 800f1fa:	615e      	str	r6, [r3, #20]
 800f1fc:	6125      	str	r5, [r4, #16]
 800f1fe:	4620      	mov	r0, r4
 800f200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f204:	080121c0 	.word	0x080121c0
 800f208:	080121d1 	.word	0x080121d1

0800f20c <__hi0bits>:
 800f20c:	0c03      	lsrs	r3, r0, #16
 800f20e:	041b      	lsls	r3, r3, #16
 800f210:	b9d3      	cbnz	r3, 800f248 <__hi0bits+0x3c>
 800f212:	0400      	lsls	r0, r0, #16
 800f214:	2310      	movs	r3, #16
 800f216:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f21a:	bf04      	itt	eq
 800f21c:	0200      	lsleq	r0, r0, #8
 800f21e:	3308      	addeq	r3, #8
 800f220:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f224:	bf04      	itt	eq
 800f226:	0100      	lsleq	r0, r0, #4
 800f228:	3304      	addeq	r3, #4
 800f22a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f22e:	bf04      	itt	eq
 800f230:	0080      	lsleq	r0, r0, #2
 800f232:	3302      	addeq	r3, #2
 800f234:	2800      	cmp	r0, #0
 800f236:	db05      	blt.n	800f244 <__hi0bits+0x38>
 800f238:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f23c:	f103 0301 	add.w	r3, r3, #1
 800f240:	bf08      	it	eq
 800f242:	2320      	moveq	r3, #32
 800f244:	4618      	mov	r0, r3
 800f246:	4770      	bx	lr
 800f248:	2300      	movs	r3, #0
 800f24a:	e7e4      	b.n	800f216 <__hi0bits+0xa>

0800f24c <__lo0bits>:
 800f24c:	6803      	ldr	r3, [r0, #0]
 800f24e:	f013 0207 	ands.w	r2, r3, #7
 800f252:	d00c      	beq.n	800f26e <__lo0bits+0x22>
 800f254:	07d9      	lsls	r1, r3, #31
 800f256:	d422      	bmi.n	800f29e <__lo0bits+0x52>
 800f258:	079a      	lsls	r2, r3, #30
 800f25a:	bf49      	itett	mi
 800f25c:	085b      	lsrmi	r3, r3, #1
 800f25e:	089b      	lsrpl	r3, r3, #2
 800f260:	6003      	strmi	r3, [r0, #0]
 800f262:	2201      	movmi	r2, #1
 800f264:	bf5c      	itt	pl
 800f266:	6003      	strpl	r3, [r0, #0]
 800f268:	2202      	movpl	r2, #2
 800f26a:	4610      	mov	r0, r2
 800f26c:	4770      	bx	lr
 800f26e:	b299      	uxth	r1, r3
 800f270:	b909      	cbnz	r1, 800f276 <__lo0bits+0x2a>
 800f272:	0c1b      	lsrs	r3, r3, #16
 800f274:	2210      	movs	r2, #16
 800f276:	b2d9      	uxtb	r1, r3
 800f278:	b909      	cbnz	r1, 800f27e <__lo0bits+0x32>
 800f27a:	3208      	adds	r2, #8
 800f27c:	0a1b      	lsrs	r3, r3, #8
 800f27e:	0719      	lsls	r1, r3, #28
 800f280:	bf04      	itt	eq
 800f282:	091b      	lsreq	r3, r3, #4
 800f284:	3204      	addeq	r2, #4
 800f286:	0799      	lsls	r1, r3, #30
 800f288:	bf04      	itt	eq
 800f28a:	089b      	lsreq	r3, r3, #2
 800f28c:	3202      	addeq	r2, #2
 800f28e:	07d9      	lsls	r1, r3, #31
 800f290:	d403      	bmi.n	800f29a <__lo0bits+0x4e>
 800f292:	085b      	lsrs	r3, r3, #1
 800f294:	f102 0201 	add.w	r2, r2, #1
 800f298:	d003      	beq.n	800f2a2 <__lo0bits+0x56>
 800f29a:	6003      	str	r3, [r0, #0]
 800f29c:	e7e5      	b.n	800f26a <__lo0bits+0x1e>
 800f29e:	2200      	movs	r2, #0
 800f2a0:	e7e3      	b.n	800f26a <__lo0bits+0x1e>
 800f2a2:	2220      	movs	r2, #32
 800f2a4:	e7e1      	b.n	800f26a <__lo0bits+0x1e>
	...

0800f2a8 <__i2b>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	2101      	movs	r1, #1
 800f2ae:	f7ff ff05 	bl	800f0bc <_Balloc>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	b928      	cbnz	r0, 800f2c2 <__i2b+0x1a>
 800f2b6:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <__i2b+0x24>)
 800f2b8:	4805      	ldr	r0, [pc, #20]	; (800f2d0 <__i2b+0x28>)
 800f2ba:	f240 1145 	movw	r1, #325	; 0x145
 800f2be:	f000 fe57 	bl	800ff70 <__assert_func>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	6144      	str	r4, [r0, #20]
 800f2c6:	6103      	str	r3, [r0, #16]
 800f2c8:	bd10      	pop	{r4, pc}
 800f2ca:	bf00      	nop
 800f2cc:	080121c0 	.word	0x080121c0
 800f2d0:	080121d1 	.word	0x080121d1

0800f2d4 <__multiply>:
 800f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d8:	4691      	mov	r9, r2
 800f2da:	690a      	ldr	r2, [r1, #16]
 800f2dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	bfb8      	it	lt
 800f2e4:	460b      	movlt	r3, r1
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	bfbc      	itt	lt
 800f2ea:	464c      	movlt	r4, r9
 800f2ec:	4699      	movlt	r9, r3
 800f2ee:	6927      	ldr	r7, [r4, #16]
 800f2f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2f4:	68a3      	ldr	r3, [r4, #8]
 800f2f6:	6861      	ldr	r1, [r4, #4]
 800f2f8:	eb07 060a 	add.w	r6, r7, sl
 800f2fc:	42b3      	cmp	r3, r6
 800f2fe:	b085      	sub	sp, #20
 800f300:	bfb8      	it	lt
 800f302:	3101      	addlt	r1, #1
 800f304:	f7ff feda 	bl	800f0bc <_Balloc>
 800f308:	b930      	cbnz	r0, 800f318 <__multiply+0x44>
 800f30a:	4602      	mov	r2, r0
 800f30c:	4b44      	ldr	r3, [pc, #272]	; (800f420 <__multiply+0x14c>)
 800f30e:	4845      	ldr	r0, [pc, #276]	; (800f424 <__multiply+0x150>)
 800f310:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f314:	f000 fe2c 	bl	800ff70 <__assert_func>
 800f318:	f100 0514 	add.w	r5, r0, #20
 800f31c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f320:	462b      	mov	r3, r5
 800f322:	2200      	movs	r2, #0
 800f324:	4543      	cmp	r3, r8
 800f326:	d321      	bcc.n	800f36c <__multiply+0x98>
 800f328:	f104 0314 	add.w	r3, r4, #20
 800f32c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f330:	f109 0314 	add.w	r3, r9, #20
 800f334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f338:	9202      	str	r2, [sp, #8]
 800f33a:	1b3a      	subs	r2, r7, r4
 800f33c:	3a15      	subs	r2, #21
 800f33e:	f022 0203 	bic.w	r2, r2, #3
 800f342:	3204      	adds	r2, #4
 800f344:	f104 0115 	add.w	r1, r4, #21
 800f348:	428f      	cmp	r7, r1
 800f34a:	bf38      	it	cc
 800f34c:	2204      	movcc	r2, #4
 800f34e:	9201      	str	r2, [sp, #4]
 800f350:	9a02      	ldr	r2, [sp, #8]
 800f352:	9303      	str	r3, [sp, #12]
 800f354:	429a      	cmp	r2, r3
 800f356:	d80c      	bhi.n	800f372 <__multiply+0x9e>
 800f358:	2e00      	cmp	r6, #0
 800f35a:	dd03      	ble.n	800f364 <__multiply+0x90>
 800f35c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f360:	2b00      	cmp	r3, #0
 800f362:	d05b      	beq.n	800f41c <__multiply+0x148>
 800f364:	6106      	str	r6, [r0, #16]
 800f366:	b005      	add	sp, #20
 800f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36c:	f843 2b04 	str.w	r2, [r3], #4
 800f370:	e7d8      	b.n	800f324 <__multiply+0x50>
 800f372:	f8b3 a000 	ldrh.w	sl, [r3]
 800f376:	f1ba 0f00 	cmp.w	sl, #0
 800f37a:	d024      	beq.n	800f3c6 <__multiply+0xf2>
 800f37c:	f104 0e14 	add.w	lr, r4, #20
 800f380:	46a9      	mov	r9, r5
 800f382:	f04f 0c00 	mov.w	ip, #0
 800f386:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f38a:	f8d9 1000 	ldr.w	r1, [r9]
 800f38e:	fa1f fb82 	uxth.w	fp, r2
 800f392:	b289      	uxth	r1, r1
 800f394:	fb0a 110b 	mla	r1, sl, fp, r1
 800f398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f39c:	f8d9 2000 	ldr.w	r2, [r9]
 800f3a0:	4461      	add	r1, ip
 800f3a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ae:	b289      	uxth	r1, r1
 800f3b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3b4:	4577      	cmp	r7, lr
 800f3b6:	f849 1b04 	str.w	r1, [r9], #4
 800f3ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3be:	d8e2      	bhi.n	800f386 <__multiply+0xb2>
 800f3c0:	9a01      	ldr	r2, [sp, #4]
 800f3c2:	f845 c002 	str.w	ip, [r5, r2]
 800f3c6:	9a03      	ldr	r2, [sp, #12]
 800f3c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	f1b9 0f00 	cmp.w	r9, #0
 800f3d2:	d021      	beq.n	800f418 <__multiply+0x144>
 800f3d4:	6829      	ldr	r1, [r5, #0]
 800f3d6:	f104 0c14 	add.w	ip, r4, #20
 800f3da:	46ae      	mov	lr, r5
 800f3dc:	f04f 0a00 	mov.w	sl, #0
 800f3e0:	f8bc b000 	ldrh.w	fp, [ip]
 800f3e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f3e8:	fb09 220b 	mla	r2, r9, fp, r2
 800f3ec:	4452      	add	r2, sl
 800f3ee:	b289      	uxth	r1, r1
 800f3f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3f4:	f84e 1b04 	str.w	r1, [lr], #4
 800f3f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f400:	f8be 1000 	ldrh.w	r1, [lr]
 800f404:	fb09 110a 	mla	r1, r9, sl, r1
 800f408:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f40c:	4567      	cmp	r7, ip
 800f40e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f412:	d8e5      	bhi.n	800f3e0 <__multiply+0x10c>
 800f414:	9a01      	ldr	r2, [sp, #4]
 800f416:	50a9      	str	r1, [r5, r2]
 800f418:	3504      	adds	r5, #4
 800f41a:	e799      	b.n	800f350 <__multiply+0x7c>
 800f41c:	3e01      	subs	r6, #1
 800f41e:	e79b      	b.n	800f358 <__multiply+0x84>
 800f420:	080121c0 	.word	0x080121c0
 800f424:	080121d1 	.word	0x080121d1

0800f428 <__pow5mult>:
 800f428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f42c:	4615      	mov	r5, r2
 800f42e:	f012 0203 	ands.w	r2, r2, #3
 800f432:	4606      	mov	r6, r0
 800f434:	460f      	mov	r7, r1
 800f436:	d007      	beq.n	800f448 <__pow5mult+0x20>
 800f438:	4c25      	ldr	r4, [pc, #148]	; (800f4d0 <__pow5mult+0xa8>)
 800f43a:	3a01      	subs	r2, #1
 800f43c:	2300      	movs	r3, #0
 800f43e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f442:	f7ff fe9d 	bl	800f180 <__multadd>
 800f446:	4607      	mov	r7, r0
 800f448:	10ad      	asrs	r5, r5, #2
 800f44a:	d03d      	beq.n	800f4c8 <__pow5mult+0xa0>
 800f44c:	69f4      	ldr	r4, [r6, #28]
 800f44e:	b97c      	cbnz	r4, 800f470 <__pow5mult+0x48>
 800f450:	2010      	movs	r0, #16
 800f452:	f7ff fd7f 	bl	800ef54 <malloc>
 800f456:	4602      	mov	r2, r0
 800f458:	61f0      	str	r0, [r6, #28]
 800f45a:	b928      	cbnz	r0, 800f468 <__pow5mult+0x40>
 800f45c:	4b1d      	ldr	r3, [pc, #116]	; (800f4d4 <__pow5mult+0xac>)
 800f45e:	481e      	ldr	r0, [pc, #120]	; (800f4d8 <__pow5mult+0xb0>)
 800f460:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f464:	f000 fd84 	bl	800ff70 <__assert_func>
 800f468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f46c:	6004      	str	r4, [r0, #0]
 800f46e:	60c4      	str	r4, [r0, #12]
 800f470:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f478:	b94c      	cbnz	r4, 800f48e <__pow5mult+0x66>
 800f47a:	f240 2171 	movw	r1, #625	; 0x271
 800f47e:	4630      	mov	r0, r6
 800f480:	f7ff ff12 	bl	800f2a8 <__i2b>
 800f484:	2300      	movs	r3, #0
 800f486:	f8c8 0008 	str.w	r0, [r8, #8]
 800f48a:	4604      	mov	r4, r0
 800f48c:	6003      	str	r3, [r0, #0]
 800f48e:	f04f 0900 	mov.w	r9, #0
 800f492:	07eb      	lsls	r3, r5, #31
 800f494:	d50a      	bpl.n	800f4ac <__pow5mult+0x84>
 800f496:	4639      	mov	r1, r7
 800f498:	4622      	mov	r2, r4
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7ff ff1a 	bl	800f2d4 <__multiply>
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	4680      	mov	r8, r0
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	f7ff fe49 	bl	800f13c <_Bfree>
 800f4aa:	4647      	mov	r7, r8
 800f4ac:	106d      	asrs	r5, r5, #1
 800f4ae:	d00b      	beq.n	800f4c8 <__pow5mult+0xa0>
 800f4b0:	6820      	ldr	r0, [r4, #0]
 800f4b2:	b938      	cbnz	r0, 800f4c4 <__pow5mult+0x9c>
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7ff ff0b 	bl	800f2d4 <__multiply>
 800f4be:	6020      	str	r0, [r4, #0]
 800f4c0:	f8c0 9000 	str.w	r9, [r0]
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	e7e4      	b.n	800f492 <__pow5mult+0x6a>
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ce:	bf00      	nop
 800f4d0:	08012320 	.word	0x08012320
 800f4d4:	08012151 	.word	0x08012151
 800f4d8:	080121d1 	.word	0x080121d1

0800f4dc <__lshift>:
 800f4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	6849      	ldr	r1, [r1, #4]
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4ea:	68a3      	ldr	r3, [r4, #8]
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	4691      	mov	r9, r2
 800f4f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4f4:	f108 0601 	add.w	r6, r8, #1
 800f4f8:	42b3      	cmp	r3, r6
 800f4fa:	db0b      	blt.n	800f514 <__lshift+0x38>
 800f4fc:	4638      	mov	r0, r7
 800f4fe:	f7ff fddd 	bl	800f0bc <_Balloc>
 800f502:	4605      	mov	r5, r0
 800f504:	b948      	cbnz	r0, 800f51a <__lshift+0x3e>
 800f506:	4602      	mov	r2, r0
 800f508:	4b28      	ldr	r3, [pc, #160]	; (800f5ac <__lshift+0xd0>)
 800f50a:	4829      	ldr	r0, [pc, #164]	; (800f5b0 <__lshift+0xd4>)
 800f50c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f510:	f000 fd2e 	bl	800ff70 <__assert_func>
 800f514:	3101      	adds	r1, #1
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	e7ee      	b.n	800f4f8 <__lshift+0x1c>
 800f51a:	2300      	movs	r3, #0
 800f51c:	f100 0114 	add.w	r1, r0, #20
 800f520:	f100 0210 	add.w	r2, r0, #16
 800f524:	4618      	mov	r0, r3
 800f526:	4553      	cmp	r3, sl
 800f528:	db33      	blt.n	800f592 <__lshift+0xb6>
 800f52a:	6920      	ldr	r0, [r4, #16]
 800f52c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f530:	f104 0314 	add.w	r3, r4, #20
 800f534:	f019 091f 	ands.w	r9, r9, #31
 800f538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f53c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f540:	d02b      	beq.n	800f59a <__lshift+0xbe>
 800f542:	f1c9 0e20 	rsb	lr, r9, #32
 800f546:	468a      	mov	sl, r1
 800f548:	2200      	movs	r2, #0
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	fa00 f009 	lsl.w	r0, r0, r9
 800f550:	4310      	orrs	r0, r2
 800f552:	f84a 0b04 	str.w	r0, [sl], #4
 800f556:	f853 2b04 	ldr.w	r2, [r3], #4
 800f55a:	459c      	cmp	ip, r3
 800f55c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f560:	d8f3      	bhi.n	800f54a <__lshift+0x6e>
 800f562:	ebac 0304 	sub.w	r3, ip, r4
 800f566:	3b15      	subs	r3, #21
 800f568:	f023 0303 	bic.w	r3, r3, #3
 800f56c:	3304      	adds	r3, #4
 800f56e:	f104 0015 	add.w	r0, r4, #21
 800f572:	4584      	cmp	ip, r0
 800f574:	bf38      	it	cc
 800f576:	2304      	movcc	r3, #4
 800f578:	50ca      	str	r2, [r1, r3]
 800f57a:	b10a      	cbz	r2, 800f580 <__lshift+0xa4>
 800f57c:	f108 0602 	add.w	r6, r8, #2
 800f580:	3e01      	subs	r6, #1
 800f582:	4638      	mov	r0, r7
 800f584:	612e      	str	r6, [r5, #16]
 800f586:	4621      	mov	r1, r4
 800f588:	f7ff fdd8 	bl	800f13c <_Bfree>
 800f58c:	4628      	mov	r0, r5
 800f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f592:	f842 0f04 	str.w	r0, [r2, #4]!
 800f596:	3301      	adds	r3, #1
 800f598:	e7c5      	b.n	800f526 <__lshift+0x4a>
 800f59a:	3904      	subs	r1, #4
 800f59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5a4:	459c      	cmp	ip, r3
 800f5a6:	d8f9      	bhi.n	800f59c <__lshift+0xc0>
 800f5a8:	e7ea      	b.n	800f580 <__lshift+0xa4>
 800f5aa:	bf00      	nop
 800f5ac:	080121c0 	.word	0x080121c0
 800f5b0:	080121d1 	.word	0x080121d1

0800f5b4 <__mcmp>:
 800f5b4:	b530      	push	{r4, r5, lr}
 800f5b6:	6902      	ldr	r2, [r0, #16]
 800f5b8:	690c      	ldr	r4, [r1, #16]
 800f5ba:	1b12      	subs	r2, r2, r4
 800f5bc:	d10e      	bne.n	800f5dc <__mcmp+0x28>
 800f5be:	f100 0314 	add.w	r3, r0, #20
 800f5c2:	3114      	adds	r1, #20
 800f5c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5d4:	42a5      	cmp	r5, r4
 800f5d6:	d003      	beq.n	800f5e0 <__mcmp+0x2c>
 800f5d8:	d305      	bcc.n	800f5e6 <__mcmp+0x32>
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4610      	mov	r0, r2
 800f5de:	bd30      	pop	{r4, r5, pc}
 800f5e0:	4283      	cmp	r3, r0
 800f5e2:	d3f3      	bcc.n	800f5cc <__mcmp+0x18>
 800f5e4:	e7fa      	b.n	800f5dc <__mcmp+0x28>
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	e7f7      	b.n	800f5dc <__mcmp+0x28>

0800f5ec <__mdiff>:
 800f5ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	4690      	mov	r8, r2
 800f5fa:	f7ff ffdb 	bl	800f5b4 <__mcmp>
 800f5fe:	1e05      	subs	r5, r0, #0
 800f600:	d110      	bne.n	800f624 <__mdiff+0x38>
 800f602:	4629      	mov	r1, r5
 800f604:	4630      	mov	r0, r6
 800f606:	f7ff fd59 	bl	800f0bc <_Balloc>
 800f60a:	b930      	cbnz	r0, 800f61a <__mdiff+0x2e>
 800f60c:	4b3a      	ldr	r3, [pc, #232]	; (800f6f8 <__mdiff+0x10c>)
 800f60e:	4602      	mov	r2, r0
 800f610:	f240 2137 	movw	r1, #567	; 0x237
 800f614:	4839      	ldr	r0, [pc, #228]	; (800f6fc <__mdiff+0x110>)
 800f616:	f000 fcab 	bl	800ff70 <__assert_func>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f624:	bfa4      	itt	ge
 800f626:	4643      	movge	r3, r8
 800f628:	46a0      	movge	r8, r4
 800f62a:	4630      	mov	r0, r6
 800f62c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f630:	bfa6      	itte	ge
 800f632:	461c      	movge	r4, r3
 800f634:	2500      	movge	r5, #0
 800f636:	2501      	movlt	r5, #1
 800f638:	f7ff fd40 	bl	800f0bc <_Balloc>
 800f63c:	b920      	cbnz	r0, 800f648 <__mdiff+0x5c>
 800f63e:	4b2e      	ldr	r3, [pc, #184]	; (800f6f8 <__mdiff+0x10c>)
 800f640:	4602      	mov	r2, r0
 800f642:	f240 2145 	movw	r1, #581	; 0x245
 800f646:	e7e5      	b.n	800f614 <__mdiff+0x28>
 800f648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f64c:	6926      	ldr	r6, [r4, #16]
 800f64e:	60c5      	str	r5, [r0, #12]
 800f650:	f104 0914 	add.w	r9, r4, #20
 800f654:	f108 0514 	add.w	r5, r8, #20
 800f658:	f100 0e14 	add.w	lr, r0, #20
 800f65c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f664:	f108 0210 	add.w	r2, r8, #16
 800f668:	46f2      	mov	sl, lr
 800f66a:	2100      	movs	r1, #0
 800f66c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f674:	fa11 f88b 	uxtah	r8, r1, fp
 800f678:	b299      	uxth	r1, r3
 800f67a:	0c1b      	lsrs	r3, r3, #16
 800f67c:	eba8 0801 	sub.w	r8, r8, r1
 800f680:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f684:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f688:	fa1f f888 	uxth.w	r8, r8
 800f68c:	1419      	asrs	r1, r3, #16
 800f68e:	454e      	cmp	r6, r9
 800f690:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f694:	f84a 3b04 	str.w	r3, [sl], #4
 800f698:	d8e8      	bhi.n	800f66c <__mdiff+0x80>
 800f69a:	1b33      	subs	r3, r6, r4
 800f69c:	3b15      	subs	r3, #21
 800f69e:	f023 0303 	bic.w	r3, r3, #3
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	3415      	adds	r4, #21
 800f6a6:	42a6      	cmp	r6, r4
 800f6a8:	bf38      	it	cc
 800f6aa:	2304      	movcc	r3, #4
 800f6ac:	441d      	add	r5, r3
 800f6ae:	4473      	add	r3, lr
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	462e      	mov	r6, r5
 800f6b4:	4566      	cmp	r6, ip
 800f6b6:	d30e      	bcc.n	800f6d6 <__mdiff+0xea>
 800f6b8:	f10c 0203 	add.w	r2, ip, #3
 800f6bc:	1b52      	subs	r2, r2, r5
 800f6be:	f022 0203 	bic.w	r2, r2, #3
 800f6c2:	3d03      	subs	r5, #3
 800f6c4:	45ac      	cmp	ip, r5
 800f6c6:	bf38      	it	cc
 800f6c8:	2200      	movcc	r2, #0
 800f6ca:	4413      	add	r3, r2
 800f6cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6d0:	b17a      	cbz	r2, 800f6f2 <__mdiff+0x106>
 800f6d2:	6107      	str	r7, [r0, #16]
 800f6d4:	e7a4      	b.n	800f620 <__mdiff+0x34>
 800f6d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6da:	fa11 f288 	uxtah	r2, r1, r8
 800f6de:	1414      	asrs	r4, r2, #16
 800f6e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6e4:	b292      	uxth	r2, r2
 800f6e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f6ea:	f84e 2b04 	str.w	r2, [lr], #4
 800f6ee:	1421      	asrs	r1, r4, #16
 800f6f0:	e7e0      	b.n	800f6b4 <__mdiff+0xc8>
 800f6f2:	3f01      	subs	r7, #1
 800f6f4:	e7ea      	b.n	800f6cc <__mdiff+0xe0>
 800f6f6:	bf00      	nop
 800f6f8:	080121c0 	.word	0x080121c0
 800f6fc:	080121d1 	.word	0x080121d1

0800f700 <__d2b>:
 800f700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f704:	460f      	mov	r7, r1
 800f706:	2101      	movs	r1, #1
 800f708:	ec59 8b10 	vmov	r8, r9, d0
 800f70c:	4616      	mov	r6, r2
 800f70e:	f7ff fcd5 	bl	800f0bc <_Balloc>
 800f712:	4604      	mov	r4, r0
 800f714:	b930      	cbnz	r0, 800f724 <__d2b+0x24>
 800f716:	4602      	mov	r2, r0
 800f718:	4b24      	ldr	r3, [pc, #144]	; (800f7ac <__d2b+0xac>)
 800f71a:	4825      	ldr	r0, [pc, #148]	; (800f7b0 <__d2b+0xb0>)
 800f71c:	f240 310f 	movw	r1, #783	; 0x30f
 800f720:	f000 fc26 	bl	800ff70 <__assert_func>
 800f724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f72c:	bb2d      	cbnz	r5, 800f77a <__d2b+0x7a>
 800f72e:	9301      	str	r3, [sp, #4]
 800f730:	f1b8 0300 	subs.w	r3, r8, #0
 800f734:	d026      	beq.n	800f784 <__d2b+0x84>
 800f736:	4668      	mov	r0, sp
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	f7ff fd87 	bl	800f24c <__lo0bits>
 800f73e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f742:	b1e8      	cbz	r0, 800f780 <__d2b+0x80>
 800f744:	f1c0 0320 	rsb	r3, r0, #32
 800f748:	fa02 f303 	lsl.w	r3, r2, r3
 800f74c:	430b      	orrs	r3, r1
 800f74e:	40c2      	lsrs	r2, r0
 800f750:	6163      	str	r3, [r4, #20]
 800f752:	9201      	str	r2, [sp, #4]
 800f754:	9b01      	ldr	r3, [sp, #4]
 800f756:	61a3      	str	r3, [r4, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	bf14      	ite	ne
 800f75c:	2202      	movne	r2, #2
 800f75e:	2201      	moveq	r2, #1
 800f760:	6122      	str	r2, [r4, #16]
 800f762:	b1bd      	cbz	r5, 800f794 <__d2b+0x94>
 800f764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f768:	4405      	add	r5, r0
 800f76a:	603d      	str	r5, [r7, #0]
 800f76c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f770:	6030      	str	r0, [r6, #0]
 800f772:	4620      	mov	r0, r4
 800f774:	b003      	add	sp, #12
 800f776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f77a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f77e:	e7d6      	b.n	800f72e <__d2b+0x2e>
 800f780:	6161      	str	r1, [r4, #20]
 800f782:	e7e7      	b.n	800f754 <__d2b+0x54>
 800f784:	a801      	add	r0, sp, #4
 800f786:	f7ff fd61 	bl	800f24c <__lo0bits>
 800f78a:	9b01      	ldr	r3, [sp, #4]
 800f78c:	6163      	str	r3, [r4, #20]
 800f78e:	3020      	adds	r0, #32
 800f790:	2201      	movs	r2, #1
 800f792:	e7e5      	b.n	800f760 <__d2b+0x60>
 800f794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f79c:	6038      	str	r0, [r7, #0]
 800f79e:	6918      	ldr	r0, [r3, #16]
 800f7a0:	f7ff fd34 	bl	800f20c <__hi0bits>
 800f7a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7a8:	e7e2      	b.n	800f770 <__d2b+0x70>
 800f7aa:	bf00      	nop
 800f7ac:	080121c0 	.word	0x080121c0
 800f7b0:	080121d1 	.word	0x080121d1

0800f7b4 <__ssputs_r>:
 800f7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7b8:	688e      	ldr	r6, [r1, #8]
 800f7ba:	461f      	mov	r7, r3
 800f7bc:	42be      	cmp	r6, r7
 800f7be:	680b      	ldr	r3, [r1, #0]
 800f7c0:	4682      	mov	sl, r0
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	4690      	mov	r8, r2
 800f7c6:	d82c      	bhi.n	800f822 <__ssputs_r+0x6e>
 800f7c8:	898a      	ldrh	r2, [r1, #12]
 800f7ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7ce:	d026      	beq.n	800f81e <__ssputs_r+0x6a>
 800f7d0:	6965      	ldr	r5, [r4, #20]
 800f7d2:	6909      	ldr	r1, [r1, #16]
 800f7d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7d8:	eba3 0901 	sub.w	r9, r3, r1
 800f7dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7e0:	1c7b      	adds	r3, r7, #1
 800f7e2:	444b      	add	r3, r9
 800f7e4:	106d      	asrs	r5, r5, #1
 800f7e6:	429d      	cmp	r5, r3
 800f7e8:	bf38      	it	cc
 800f7ea:	461d      	movcc	r5, r3
 800f7ec:	0553      	lsls	r3, r2, #21
 800f7ee:	d527      	bpl.n	800f840 <__ssputs_r+0x8c>
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	f7ff fbd7 	bl	800efa4 <_malloc_r>
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	b360      	cbz	r0, 800f854 <__ssputs_r+0xa0>
 800f7fa:	6921      	ldr	r1, [r4, #16]
 800f7fc:	464a      	mov	r2, r9
 800f7fe:	f7fe fcd4 	bl	800e1aa <memcpy>
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f80c:	81a3      	strh	r3, [r4, #12]
 800f80e:	6126      	str	r6, [r4, #16]
 800f810:	6165      	str	r5, [r4, #20]
 800f812:	444e      	add	r6, r9
 800f814:	eba5 0509 	sub.w	r5, r5, r9
 800f818:	6026      	str	r6, [r4, #0]
 800f81a:	60a5      	str	r5, [r4, #8]
 800f81c:	463e      	mov	r6, r7
 800f81e:	42be      	cmp	r6, r7
 800f820:	d900      	bls.n	800f824 <__ssputs_r+0x70>
 800f822:	463e      	mov	r6, r7
 800f824:	6820      	ldr	r0, [r4, #0]
 800f826:	4632      	mov	r2, r6
 800f828:	4641      	mov	r1, r8
 800f82a:	f7fe fc25 	bl	800e078 <memmove>
 800f82e:	68a3      	ldr	r3, [r4, #8]
 800f830:	1b9b      	subs	r3, r3, r6
 800f832:	60a3      	str	r3, [r4, #8]
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	4433      	add	r3, r6
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	2000      	movs	r0, #0
 800f83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f840:	462a      	mov	r2, r5
 800f842:	f000 fbdb 	bl	800fffc <_realloc_r>
 800f846:	4606      	mov	r6, r0
 800f848:	2800      	cmp	r0, #0
 800f84a:	d1e0      	bne.n	800f80e <__ssputs_r+0x5a>
 800f84c:	6921      	ldr	r1, [r4, #16]
 800f84e:	4650      	mov	r0, sl
 800f850:	f7ff fb34 	bl	800eebc <_free_r>
 800f854:	230c      	movs	r3, #12
 800f856:	f8ca 3000 	str.w	r3, [sl]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	f04f 30ff 	mov.w	r0, #4294967295
 800f866:	e7e9      	b.n	800f83c <__ssputs_r+0x88>

0800f868 <_svfiprintf_r>:
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	4698      	mov	r8, r3
 800f86e:	898b      	ldrh	r3, [r1, #12]
 800f870:	061b      	lsls	r3, r3, #24
 800f872:	b09d      	sub	sp, #116	; 0x74
 800f874:	4607      	mov	r7, r0
 800f876:	460d      	mov	r5, r1
 800f878:	4614      	mov	r4, r2
 800f87a:	d50e      	bpl.n	800f89a <_svfiprintf_r+0x32>
 800f87c:	690b      	ldr	r3, [r1, #16]
 800f87e:	b963      	cbnz	r3, 800f89a <_svfiprintf_r+0x32>
 800f880:	2140      	movs	r1, #64	; 0x40
 800f882:	f7ff fb8f 	bl	800efa4 <_malloc_r>
 800f886:	6028      	str	r0, [r5, #0]
 800f888:	6128      	str	r0, [r5, #16]
 800f88a:	b920      	cbnz	r0, 800f896 <_svfiprintf_r+0x2e>
 800f88c:	230c      	movs	r3, #12
 800f88e:	603b      	str	r3, [r7, #0]
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	e0d0      	b.n	800fa38 <_svfiprintf_r+0x1d0>
 800f896:	2340      	movs	r3, #64	; 0x40
 800f898:	616b      	str	r3, [r5, #20]
 800f89a:	2300      	movs	r3, #0
 800f89c:	9309      	str	r3, [sp, #36]	; 0x24
 800f89e:	2320      	movs	r3, #32
 800f8a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8a8:	2330      	movs	r3, #48	; 0x30
 800f8aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fa50 <_svfiprintf_r+0x1e8>
 800f8ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8b2:	f04f 0901 	mov.w	r9, #1
 800f8b6:	4623      	mov	r3, r4
 800f8b8:	469a      	mov	sl, r3
 800f8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8be:	b10a      	cbz	r2, 800f8c4 <_svfiprintf_r+0x5c>
 800f8c0:	2a25      	cmp	r2, #37	; 0x25
 800f8c2:	d1f9      	bne.n	800f8b8 <_svfiprintf_r+0x50>
 800f8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f8c8:	d00b      	beq.n	800f8e2 <_svfiprintf_r+0x7a>
 800f8ca:	465b      	mov	r3, fp
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	4638      	mov	r0, r7
 800f8d2:	f7ff ff6f 	bl	800f7b4 <__ssputs_r>
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	f000 80a9 	beq.w	800fa2e <_svfiprintf_r+0x1c6>
 800f8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8de:	445a      	add	r2, fp
 800f8e0:	9209      	str	r2, [sp, #36]	; 0x24
 800f8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f000 80a1 	beq.w	800fa2e <_svfiprintf_r+0x1c6>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8f6:	f10a 0a01 	add.w	sl, sl, #1
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	9307      	str	r3, [sp, #28]
 800f8fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f902:	931a      	str	r3, [sp, #104]	; 0x68
 800f904:	4654      	mov	r4, sl
 800f906:	2205      	movs	r2, #5
 800f908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f90c:	4850      	ldr	r0, [pc, #320]	; (800fa50 <_svfiprintf_r+0x1e8>)
 800f90e:	f7f0 fc5f 	bl	80001d0 <memchr>
 800f912:	9a04      	ldr	r2, [sp, #16]
 800f914:	b9d8      	cbnz	r0, 800f94e <_svfiprintf_r+0xe6>
 800f916:	06d0      	lsls	r0, r2, #27
 800f918:	bf44      	itt	mi
 800f91a:	2320      	movmi	r3, #32
 800f91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f920:	0711      	lsls	r1, r2, #28
 800f922:	bf44      	itt	mi
 800f924:	232b      	movmi	r3, #43	; 0x2b
 800f926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f92a:	f89a 3000 	ldrb.w	r3, [sl]
 800f92e:	2b2a      	cmp	r3, #42	; 0x2a
 800f930:	d015      	beq.n	800f95e <_svfiprintf_r+0xf6>
 800f932:	9a07      	ldr	r2, [sp, #28]
 800f934:	4654      	mov	r4, sl
 800f936:	2000      	movs	r0, #0
 800f938:	f04f 0c0a 	mov.w	ip, #10
 800f93c:	4621      	mov	r1, r4
 800f93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f942:	3b30      	subs	r3, #48	; 0x30
 800f944:	2b09      	cmp	r3, #9
 800f946:	d94d      	bls.n	800f9e4 <_svfiprintf_r+0x17c>
 800f948:	b1b0      	cbz	r0, 800f978 <_svfiprintf_r+0x110>
 800f94a:	9207      	str	r2, [sp, #28]
 800f94c:	e014      	b.n	800f978 <_svfiprintf_r+0x110>
 800f94e:	eba0 0308 	sub.w	r3, r0, r8
 800f952:	fa09 f303 	lsl.w	r3, r9, r3
 800f956:	4313      	orrs	r3, r2
 800f958:	9304      	str	r3, [sp, #16]
 800f95a:	46a2      	mov	sl, r4
 800f95c:	e7d2      	b.n	800f904 <_svfiprintf_r+0x9c>
 800f95e:	9b03      	ldr	r3, [sp, #12]
 800f960:	1d19      	adds	r1, r3, #4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	9103      	str	r1, [sp, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	bfbb      	ittet	lt
 800f96a:	425b      	neglt	r3, r3
 800f96c:	f042 0202 	orrlt.w	r2, r2, #2
 800f970:	9307      	strge	r3, [sp, #28]
 800f972:	9307      	strlt	r3, [sp, #28]
 800f974:	bfb8      	it	lt
 800f976:	9204      	strlt	r2, [sp, #16]
 800f978:	7823      	ldrb	r3, [r4, #0]
 800f97a:	2b2e      	cmp	r3, #46	; 0x2e
 800f97c:	d10c      	bne.n	800f998 <_svfiprintf_r+0x130>
 800f97e:	7863      	ldrb	r3, [r4, #1]
 800f980:	2b2a      	cmp	r3, #42	; 0x2a
 800f982:	d134      	bne.n	800f9ee <_svfiprintf_r+0x186>
 800f984:	9b03      	ldr	r3, [sp, #12]
 800f986:	1d1a      	adds	r2, r3, #4
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	9203      	str	r2, [sp, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	bfb8      	it	lt
 800f990:	f04f 33ff 	movlt.w	r3, #4294967295
 800f994:	3402      	adds	r4, #2
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fa60 <_svfiprintf_r+0x1f8>
 800f99c:	7821      	ldrb	r1, [r4, #0]
 800f99e:	2203      	movs	r2, #3
 800f9a0:	4650      	mov	r0, sl
 800f9a2:	f7f0 fc15 	bl	80001d0 <memchr>
 800f9a6:	b138      	cbz	r0, 800f9b8 <_svfiprintf_r+0x150>
 800f9a8:	9b04      	ldr	r3, [sp, #16]
 800f9aa:	eba0 000a 	sub.w	r0, r0, sl
 800f9ae:	2240      	movs	r2, #64	; 0x40
 800f9b0:	4082      	lsls	r2, r0
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	3401      	adds	r4, #1
 800f9b6:	9304      	str	r3, [sp, #16]
 800f9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9bc:	4825      	ldr	r0, [pc, #148]	; (800fa54 <_svfiprintf_r+0x1ec>)
 800f9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9c2:	2206      	movs	r2, #6
 800f9c4:	f7f0 fc04 	bl	80001d0 <memchr>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d038      	beq.n	800fa3e <_svfiprintf_r+0x1d6>
 800f9cc:	4b22      	ldr	r3, [pc, #136]	; (800fa58 <_svfiprintf_r+0x1f0>)
 800f9ce:	bb1b      	cbnz	r3, 800fa18 <_svfiprintf_r+0x1b0>
 800f9d0:	9b03      	ldr	r3, [sp, #12]
 800f9d2:	3307      	adds	r3, #7
 800f9d4:	f023 0307 	bic.w	r3, r3, #7
 800f9d8:	3308      	adds	r3, #8
 800f9da:	9303      	str	r3, [sp, #12]
 800f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9de:	4433      	add	r3, r6
 800f9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e2:	e768      	b.n	800f8b6 <_svfiprintf_r+0x4e>
 800f9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	e7a6      	b.n	800f93c <_svfiprintf_r+0xd4>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	3401      	adds	r4, #1
 800f9f2:	9305      	str	r3, [sp, #20]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	f04f 0c0a 	mov.w	ip, #10
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa00:	3a30      	subs	r2, #48	; 0x30
 800fa02:	2a09      	cmp	r2, #9
 800fa04:	d903      	bls.n	800fa0e <_svfiprintf_r+0x1a6>
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d0c6      	beq.n	800f998 <_svfiprintf_r+0x130>
 800fa0a:	9105      	str	r1, [sp, #20]
 800fa0c:	e7c4      	b.n	800f998 <_svfiprintf_r+0x130>
 800fa0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa12:	4604      	mov	r4, r0
 800fa14:	2301      	movs	r3, #1
 800fa16:	e7f0      	b.n	800f9fa <_svfiprintf_r+0x192>
 800fa18:	ab03      	add	r3, sp, #12
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	462a      	mov	r2, r5
 800fa1e:	4b0f      	ldr	r3, [pc, #60]	; (800fa5c <_svfiprintf_r+0x1f4>)
 800fa20:	a904      	add	r1, sp, #16
 800fa22:	4638      	mov	r0, r7
 800fa24:	f7fd fd3a 	bl	800d49c <_printf_float>
 800fa28:	1c42      	adds	r2, r0, #1
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	d1d6      	bne.n	800f9dc <_svfiprintf_r+0x174>
 800fa2e:	89ab      	ldrh	r3, [r5, #12]
 800fa30:	065b      	lsls	r3, r3, #25
 800fa32:	f53f af2d 	bmi.w	800f890 <_svfiprintf_r+0x28>
 800fa36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa38:	b01d      	add	sp, #116	; 0x74
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3e:	ab03      	add	r3, sp, #12
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	462a      	mov	r2, r5
 800fa44:	4b05      	ldr	r3, [pc, #20]	; (800fa5c <_svfiprintf_r+0x1f4>)
 800fa46:	a904      	add	r1, sp, #16
 800fa48:	4638      	mov	r0, r7
 800fa4a:	f7fd ffcb 	bl	800d9e4 <_printf_i>
 800fa4e:	e7eb      	b.n	800fa28 <_svfiprintf_r+0x1c0>
 800fa50:	0801232c 	.word	0x0801232c
 800fa54:	08012336 	.word	0x08012336
 800fa58:	0800d49d 	.word	0x0800d49d
 800fa5c:	0800f7b5 	.word	0x0800f7b5
 800fa60:	08012332 	.word	0x08012332

0800fa64 <__sfputc_r>:
 800fa64:	6893      	ldr	r3, [r2, #8]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	b410      	push	{r4}
 800fa6c:	6093      	str	r3, [r2, #8]
 800fa6e:	da08      	bge.n	800fa82 <__sfputc_r+0x1e>
 800fa70:	6994      	ldr	r4, [r2, #24]
 800fa72:	42a3      	cmp	r3, r4
 800fa74:	db01      	blt.n	800fa7a <__sfputc_r+0x16>
 800fa76:	290a      	cmp	r1, #10
 800fa78:	d103      	bne.n	800fa82 <__sfputc_r+0x1e>
 800fa7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa7e:	f7fe ba66 	b.w	800df4e <__swbuf_r>
 800fa82:	6813      	ldr	r3, [r2, #0]
 800fa84:	1c58      	adds	r0, r3, #1
 800fa86:	6010      	str	r0, [r2, #0]
 800fa88:	7019      	strb	r1, [r3, #0]
 800fa8a:	4608      	mov	r0, r1
 800fa8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <__sfputs_r>:
 800fa92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa94:	4606      	mov	r6, r0
 800fa96:	460f      	mov	r7, r1
 800fa98:	4614      	mov	r4, r2
 800fa9a:	18d5      	adds	r5, r2, r3
 800fa9c:	42ac      	cmp	r4, r5
 800fa9e:	d101      	bne.n	800faa4 <__sfputs_r+0x12>
 800faa0:	2000      	movs	r0, #0
 800faa2:	e007      	b.n	800fab4 <__sfputs_r+0x22>
 800faa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faa8:	463a      	mov	r2, r7
 800faaa:	4630      	mov	r0, r6
 800faac:	f7ff ffda 	bl	800fa64 <__sfputc_r>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d1f3      	bne.n	800fa9c <__sfputs_r+0xa>
 800fab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fab8 <_vfiprintf_r>:
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	460d      	mov	r5, r1
 800fabe:	b09d      	sub	sp, #116	; 0x74
 800fac0:	4614      	mov	r4, r2
 800fac2:	4698      	mov	r8, r3
 800fac4:	4606      	mov	r6, r0
 800fac6:	b118      	cbz	r0, 800fad0 <_vfiprintf_r+0x18>
 800fac8:	6a03      	ldr	r3, [r0, #32]
 800faca:	b90b      	cbnz	r3, 800fad0 <_vfiprintf_r+0x18>
 800facc:	f7fe f938 	bl	800dd40 <__sinit>
 800fad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fad2:	07d9      	lsls	r1, r3, #31
 800fad4:	d405      	bmi.n	800fae2 <_vfiprintf_r+0x2a>
 800fad6:	89ab      	ldrh	r3, [r5, #12]
 800fad8:	059a      	lsls	r2, r3, #22
 800fada:	d402      	bmi.n	800fae2 <_vfiprintf_r+0x2a>
 800fadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fade:	f7fe fb62 	bl	800e1a6 <__retarget_lock_acquire_recursive>
 800fae2:	89ab      	ldrh	r3, [r5, #12]
 800fae4:	071b      	lsls	r3, r3, #28
 800fae6:	d501      	bpl.n	800faec <_vfiprintf_r+0x34>
 800fae8:	692b      	ldr	r3, [r5, #16]
 800faea:	b99b      	cbnz	r3, 800fb14 <_vfiprintf_r+0x5c>
 800faec:	4629      	mov	r1, r5
 800faee:	4630      	mov	r0, r6
 800faf0:	f7fe fa6a 	bl	800dfc8 <__swsetup_r>
 800faf4:	b170      	cbz	r0, 800fb14 <_vfiprintf_r+0x5c>
 800faf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faf8:	07dc      	lsls	r4, r3, #31
 800fafa:	d504      	bpl.n	800fb06 <_vfiprintf_r+0x4e>
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	b01d      	add	sp, #116	; 0x74
 800fb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb06:	89ab      	ldrh	r3, [r5, #12]
 800fb08:	0598      	lsls	r0, r3, #22
 800fb0a:	d4f7      	bmi.n	800fafc <_vfiprintf_r+0x44>
 800fb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb0e:	f7fe fb4b 	bl	800e1a8 <__retarget_lock_release_recursive>
 800fb12:	e7f3      	b.n	800fafc <_vfiprintf_r+0x44>
 800fb14:	2300      	movs	r3, #0
 800fb16:	9309      	str	r3, [sp, #36]	; 0x24
 800fb18:	2320      	movs	r3, #32
 800fb1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb22:	2330      	movs	r3, #48	; 0x30
 800fb24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fcd8 <_vfiprintf_r+0x220>
 800fb28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb2c:	f04f 0901 	mov.w	r9, #1
 800fb30:	4623      	mov	r3, r4
 800fb32:	469a      	mov	sl, r3
 800fb34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb38:	b10a      	cbz	r2, 800fb3e <_vfiprintf_r+0x86>
 800fb3a:	2a25      	cmp	r2, #37	; 0x25
 800fb3c:	d1f9      	bne.n	800fb32 <_vfiprintf_r+0x7a>
 800fb3e:	ebba 0b04 	subs.w	fp, sl, r4
 800fb42:	d00b      	beq.n	800fb5c <_vfiprintf_r+0xa4>
 800fb44:	465b      	mov	r3, fp
 800fb46:	4622      	mov	r2, r4
 800fb48:	4629      	mov	r1, r5
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	f7ff ffa1 	bl	800fa92 <__sfputs_r>
 800fb50:	3001      	adds	r0, #1
 800fb52:	f000 80a9 	beq.w	800fca8 <_vfiprintf_r+0x1f0>
 800fb56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb58:	445a      	add	r2, fp
 800fb5a:	9209      	str	r2, [sp, #36]	; 0x24
 800fb5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 80a1 	beq.w	800fca8 <_vfiprintf_r+0x1f0>
 800fb66:	2300      	movs	r3, #0
 800fb68:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb70:	f10a 0a01 	add.w	sl, sl, #1
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	9307      	str	r3, [sp, #28]
 800fb78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb7c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb7e:	4654      	mov	r4, sl
 800fb80:	2205      	movs	r2, #5
 800fb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb86:	4854      	ldr	r0, [pc, #336]	; (800fcd8 <_vfiprintf_r+0x220>)
 800fb88:	f7f0 fb22 	bl	80001d0 <memchr>
 800fb8c:	9a04      	ldr	r2, [sp, #16]
 800fb8e:	b9d8      	cbnz	r0, 800fbc8 <_vfiprintf_r+0x110>
 800fb90:	06d1      	lsls	r1, r2, #27
 800fb92:	bf44      	itt	mi
 800fb94:	2320      	movmi	r3, #32
 800fb96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb9a:	0713      	lsls	r3, r2, #28
 800fb9c:	bf44      	itt	mi
 800fb9e:	232b      	movmi	r3, #43	; 0x2b
 800fba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba4:	f89a 3000 	ldrb.w	r3, [sl]
 800fba8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbaa:	d015      	beq.n	800fbd8 <_vfiprintf_r+0x120>
 800fbac:	9a07      	ldr	r2, [sp, #28]
 800fbae:	4654      	mov	r4, sl
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	f04f 0c0a 	mov.w	ip, #10
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbbc:	3b30      	subs	r3, #48	; 0x30
 800fbbe:	2b09      	cmp	r3, #9
 800fbc0:	d94d      	bls.n	800fc5e <_vfiprintf_r+0x1a6>
 800fbc2:	b1b0      	cbz	r0, 800fbf2 <_vfiprintf_r+0x13a>
 800fbc4:	9207      	str	r2, [sp, #28]
 800fbc6:	e014      	b.n	800fbf2 <_vfiprintf_r+0x13a>
 800fbc8:	eba0 0308 	sub.w	r3, r0, r8
 800fbcc:	fa09 f303 	lsl.w	r3, r9, r3
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	46a2      	mov	sl, r4
 800fbd6:	e7d2      	b.n	800fb7e <_vfiprintf_r+0xc6>
 800fbd8:	9b03      	ldr	r3, [sp, #12]
 800fbda:	1d19      	adds	r1, r3, #4
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	9103      	str	r1, [sp, #12]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	bfbb      	ittet	lt
 800fbe4:	425b      	neglt	r3, r3
 800fbe6:	f042 0202 	orrlt.w	r2, r2, #2
 800fbea:	9307      	strge	r3, [sp, #28]
 800fbec:	9307      	strlt	r3, [sp, #28]
 800fbee:	bfb8      	it	lt
 800fbf0:	9204      	strlt	r2, [sp, #16]
 800fbf2:	7823      	ldrb	r3, [r4, #0]
 800fbf4:	2b2e      	cmp	r3, #46	; 0x2e
 800fbf6:	d10c      	bne.n	800fc12 <_vfiprintf_r+0x15a>
 800fbf8:	7863      	ldrb	r3, [r4, #1]
 800fbfa:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfc:	d134      	bne.n	800fc68 <_vfiprintf_r+0x1b0>
 800fbfe:	9b03      	ldr	r3, [sp, #12]
 800fc00:	1d1a      	adds	r2, r3, #4
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	9203      	str	r2, [sp, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	bfb8      	it	lt
 800fc0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc0e:	3402      	adds	r4, #2
 800fc10:	9305      	str	r3, [sp, #20]
 800fc12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fce8 <_vfiprintf_r+0x230>
 800fc16:	7821      	ldrb	r1, [r4, #0]
 800fc18:	2203      	movs	r2, #3
 800fc1a:	4650      	mov	r0, sl
 800fc1c:	f7f0 fad8 	bl	80001d0 <memchr>
 800fc20:	b138      	cbz	r0, 800fc32 <_vfiprintf_r+0x17a>
 800fc22:	9b04      	ldr	r3, [sp, #16]
 800fc24:	eba0 000a 	sub.w	r0, r0, sl
 800fc28:	2240      	movs	r2, #64	; 0x40
 800fc2a:	4082      	lsls	r2, r0
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	3401      	adds	r4, #1
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc36:	4829      	ldr	r0, [pc, #164]	; (800fcdc <_vfiprintf_r+0x224>)
 800fc38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc3c:	2206      	movs	r2, #6
 800fc3e:	f7f0 fac7 	bl	80001d0 <memchr>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d03f      	beq.n	800fcc6 <_vfiprintf_r+0x20e>
 800fc46:	4b26      	ldr	r3, [pc, #152]	; (800fce0 <_vfiprintf_r+0x228>)
 800fc48:	bb1b      	cbnz	r3, 800fc92 <_vfiprintf_r+0x1da>
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	3307      	adds	r3, #7
 800fc4e:	f023 0307 	bic.w	r3, r3, #7
 800fc52:	3308      	adds	r3, #8
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc58:	443b      	add	r3, r7
 800fc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5c:	e768      	b.n	800fb30 <_vfiprintf_r+0x78>
 800fc5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc62:	460c      	mov	r4, r1
 800fc64:	2001      	movs	r0, #1
 800fc66:	e7a6      	b.n	800fbb6 <_vfiprintf_r+0xfe>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	3401      	adds	r4, #1
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	f04f 0c0a 	mov.w	ip, #10
 800fc74:	4620      	mov	r0, r4
 800fc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc7a:	3a30      	subs	r2, #48	; 0x30
 800fc7c:	2a09      	cmp	r2, #9
 800fc7e:	d903      	bls.n	800fc88 <_vfiprintf_r+0x1d0>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0c6      	beq.n	800fc12 <_vfiprintf_r+0x15a>
 800fc84:	9105      	str	r1, [sp, #20]
 800fc86:	e7c4      	b.n	800fc12 <_vfiprintf_r+0x15a>
 800fc88:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e7f0      	b.n	800fc74 <_vfiprintf_r+0x1bc>
 800fc92:	ab03      	add	r3, sp, #12
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	462a      	mov	r2, r5
 800fc98:	4b12      	ldr	r3, [pc, #72]	; (800fce4 <_vfiprintf_r+0x22c>)
 800fc9a:	a904      	add	r1, sp, #16
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7fd fbfd 	bl	800d49c <_printf_float>
 800fca2:	4607      	mov	r7, r0
 800fca4:	1c78      	adds	r0, r7, #1
 800fca6:	d1d6      	bne.n	800fc56 <_vfiprintf_r+0x19e>
 800fca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcaa:	07d9      	lsls	r1, r3, #31
 800fcac:	d405      	bmi.n	800fcba <_vfiprintf_r+0x202>
 800fcae:	89ab      	ldrh	r3, [r5, #12]
 800fcb0:	059a      	lsls	r2, r3, #22
 800fcb2:	d402      	bmi.n	800fcba <_vfiprintf_r+0x202>
 800fcb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcb6:	f7fe fa77 	bl	800e1a8 <__retarget_lock_release_recursive>
 800fcba:	89ab      	ldrh	r3, [r5, #12]
 800fcbc:	065b      	lsls	r3, r3, #25
 800fcbe:	f53f af1d 	bmi.w	800fafc <_vfiprintf_r+0x44>
 800fcc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcc4:	e71c      	b.n	800fb00 <_vfiprintf_r+0x48>
 800fcc6:	ab03      	add	r3, sp, #12
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	462a      	mov	r2, r5
 800fccc:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <_vfiprintf_r+0x22c>)
 800fcce:	a904      	add	r1, sp, #16
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	f7fd fe87 	bl	800d9e4 <_printf_i>
 800fcd6:	e7e4      	b.n	800fca2 <_vfiprintf_r+0x1ea>
 800fcd8:	0801232c 	.word	0x0801232c
 800fcdc:	08012336 	.word	0x08012336
 800fce0:	0800d49d 	.word	0x0800d49d
 800fce4:	0800fa93 	.word	0x0800fa93
 800fce8:	08012332 	.word	0x08012332

0800fcec <__sflush_r>:
 800fcec:	898a      	ldrh	r2, [r1, #12]
 800fcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	0710      	lsls	r0, r2, #28
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	d458      	bmi.n	800fdac <__sflush_r+0xc0>
 800fcfa:	684b      	ldr	r3, [r1, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dc05      	bgt.n	800fd0c <__sflush_r+0x20>
 800fd00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	dc02      	bgt.n	800fd0c <__sflush_r+0x20>
 800fd06:	2000      	movs	r0, #0
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd0e:	2e00      	cmp	r6, #0
 800fd10:	d0f9      	beq.n	800fd06 <__sflush_r+0x1a>
 800fd12:	2300      	movs	r3, #0
 800fd14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd18:	682f      	ldr	r7, [r5, #0]
 800fd1a:	6a21      	ldr	r1, [r4, #32]
 800fd1c:	602b      	str	r3, [r5, #0]
 800fd1e:	d032      	beq.n	800fd86 <__sflush_r+0x9a>
 800fd20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd22:	89a3      	ldrh	r3, [r4, #12]
 800fd24:	075a      	lsls	r2, r3, #29
 800fd26:	d505      	bpl.n	800fd34 <__sflush_r+0x48>
 800fd28:	6863      	ldr	r3, [r4, #4]
 800fd2a:	1ac0      	subs	r0, r0, r3
 800fd2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd2e:	b10b      	cbz	r3, 800fd34 <__sflush_r+0x48>
 800fd30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd32:	1ac0      	subs	r0, r0, r3
 800fd34:	2300      	movs	r3, #0
 800fd36:	4602      	mov	r2, r0
 800fd38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd3a:	6a21      	ldr	r1, [r4, #32]
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	47b0      	blx	r6
 800fd40:	1c43      	adds	r3, r0, #1
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	d106      	bne.n	800fd54 <__sflush_r+0x68>
 800fd46:	6829      	ldr	r1, [r5, #0]
 800fd48:	291d      	cmp	r1, #29
 800fd4a:	d82b      	bhi.n	800fda4 <__sflush_r+0xb8>
 800fd4c:	4a29      	ldr	r2, [pc, #164]	; (800fdf4 <__sflush_r+0x108>)
 800fd4e:	410a      	asrs	r2, r1
 800fd50:	07d6      	lsls	r6, r2, #31
 800fd52:	d427      	bmi.n	800fda4 <__sflush_r+0xb8>
 800fd54:	2200      	movs	r2, #0
 800fd56:	6062      	str	r2, [r4, #4]
 800fd58:	04d9      	lsls	r1, r3, #19
 800fd5a:	6922      	ldr	r2, [r4, #16]
 800fd5c:	6022      	str	r2, [r4, #0]
 800fd5e:	d504      	bpl.n	800fd6a <__sflush_r+0x7e>
 800fd60:	1c42      	adds	r2, r0, #1
 800fd62:	d101      	bne.n	800fd68 <__sflush_r+0x7c>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b903      	cbnz	r3, 800fd6a <__sflush_r+0x7e>
 800fd68:	6560      	str	r0, [r4, #84]	; 0x54
 800fd6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd6c:	602f      	str	r7, [r5, #0]
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	d0c9      	beq.n	800fd06 <__sflush_r+0x1a>
 800fd72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd76:	4299      	cmp	r1, r3
 800fd78:	d002      	beq.n	800fd80 <__sflush_r+0x94>
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f7ff f89e 	bl	800eebc <_free_r>
 800fd80:	2000      	movs	r0, #0
 800fd82:	6360      	str	r0, [r4, #52]	; 0x34
 800fd84:	e7c0      	b.n	800fd08 <__sflush_r+0x1c>
 800fd86:	2301      	movs	r3, #1
 800fd88:	4628      	mov	r0, r5
 800fd8a:	47b0      	blx	r6
 800fd8c:	1c41      	adds	r1, r0, #1
 800fd8e:	d1c8      	bne.n	800fd22 <__sflush_r+0x36>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d0c5      	beq.n	800fd22 <__sflush_r+0x36>
 800fd96:	2b1d      	cmp	r3, #29
 800fd98:	d001      	beq.n	800fd9e <__sflush_r+0xb2>
 800fd9a:	2b16      	cmp	r3, #22
 800fd9c:	d101      	bne.n	800fda2 <__sflush_r+0xb6>
 800fd9e:	602f      	str	r7, [r5, #0]
 800fda0:	e7b1      	b.n	800fd06 <__sflush_r+0x1a>
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda8:	81a3      	strh	r3, [r4, #12]
 800fdaa:	e7ad      	b.n	800fd08 <__sflush_r+0x1c>
 800fdac:	690f      	ldr	r7, [r1, #16]
 800fdae:	2f00      	cmp	r7, #0
 800fdb0:	d0a9      	beq.n	800fd06 <__sflush_r+0x1a>
 800fdb2:	0793      	lsls	r3, r2, #30
 800fdb4:	680e      	ldr	r6, [r1, #0]
 800fdb6:	bf08      	it	eq
 800fdb8:	694b      	ldreq	r3, [r1, #20]
 800fdba:	600f      	str	r7, [r1, #0]
 800fdbc:	bf18      	it	ne
 800fdbe:	2300      	movne	r3, #0
 800fdc0:	eba6 0807 	sub.w	r8, r6, r7
 800fdc4:	608b      	str	r3, [r1, #8]
 800fdc6:	f1b8 0f00 	cmp.w	r8, #0
 800fdca:	dd9c      	ble.n	800fd06 <__sflush_r+0x1a>
 800fdcc:	6a21      	ldr	r1, [r4, #32]
 800fdce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdd0:	4643      	mov	r3, r8
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	47b0      	blx	r6
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	dc06      	bgt.n	800fdea <__sflush_r+0xfe>
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fde2:	81a3      	strh	r3, [r4, #12]
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	e78e      	b.n	800fd08 <__sflush_r+0x1c>
 800fdea:	4407      	add	r7, r0
 800fdec:	eba8 0800 	sub.w	r8, r8, r0
 800fdf0:	e7e9      	b.n	800fdc6 <__sflush_r+0xda>
 800fdf2:	bf00      	nop
 800fdf4:	dfbffffe 	.word	0xdfbffffe

0800fdf8 <_fflush_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	690b      	ldr	r3, [r1, #16]
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	460c      	mov	r4, r1
 800fe00:	b913      	cbnz	r3, 800fe08 <_fflush_r+0x10>
 800fe02:	2500      	movs	r5, #0
 800fe04:	4628      	mov	r0, r5
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	b118      	cbz	r0, 800fe12 <_fflush_r+0x1a>
 800fe0a:	6a03      	ldr	r3, [r0, #32]
 800fe0c:	b90b      	cbnz	r3, 800fe12 <_fflush_r+0x1a>
 800fe0e:	f7fd ff97 	bl	800dd40 <__sinit>
 800fe12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0f3      	beq.n	800fe02 <_fflush_r+0xa>
 800fe1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe1c:	07d0      	lsls	r0, r2, #31
 800fe1e:	d404      	bmi.n	800fe2a <_fflush_r+0x32>
 800fe20:	0599      	lsls	r1, r3, #22
 800fe22:	d402      	bmi.n	800fe2a <_fflush_r+0x32>
 800fe24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe26:	f7fe f9be 	bl	800e1a6 <__retarget_lock_acquire_recursive>
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	f7ff ff5d 	bl	800fcec <__sflush_r>
 800fe32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe34:	07da      	lsls	r2, r3, #31
 800fe36:	4605      	mov	r5, r0
 800fe38:	d4e4      	bmi.n	800fe04 <_fflush_r+0xc>
 800fe3a:	89a3      	ldrh	r3, [r4, #12]
 800fe3c:	059b      	lsls	r3, r3, #22
 800fe3e:	d4e1      	bmi.n	800fe04 <_fflush_r+0xc>
 800fe40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe42:	f7fe f9b1 	bl	800e1a8 <__retarget_lock_release_recursive>
 800fe46:	e7dd      	b.n	800fe04 <_fflush_r+0xc>

0800fe48 <__swhatbuf_r>:
 800fe48:	b570      	push	{r4, r5, r6, lr}
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe50:	2900      	cmp	r1, #0
 800fe52:	b096      	sub	sp, #88	; 0x58
 800fe54:	4615      	mov	r5, r2
 800fe56:	461e      	mov	r6, r3
 800fe58:	da0d      	bge.n	800fe76 <__swhatbuf_r+0x2e>
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fe60:	f04f 0100 	mov.w	r1, #0
 800fe64:	bf0c      	ite	eq
 800fe66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fe6a:	2340      	movne	r3, #64	; 0x40
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	6031      	str	r1, [r6, #0]
 800fe70:	602b      	str	r3, [r5, #0]
 800fe72:	b016      	add	sp, #88	; 0x58
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
 800fe76:	466a      	mov	r2, sp
 800fe78:	f000 f848 	bl	800ff0c <_fstat_r>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	dbec      	blt.n	800fe5a <__swhatbuf_r+0x12>
 800fe80:	9901      	ldr	r1, [sp, #4]
 800fe82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fe86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fe8a:	4259      	negs	r1, r3
 800fe8c:	4159      	adcs	r1, r3
 800fe8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe92:	e7eb      	b.n	800fe6c <__swhatbuf_r+0x24>

0800fe94 <__smakebuf_r>:
 800fe94:	898b      	ldrh	r3, [r1, #12]
 800fe96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe98:	079d      	lsls	r5, r3, #30
 800fe9a:	4606      	mov	r6, r0
 800fe9c:	460c      	mov	r4, r1
 800fe9e:	d507      	bpl.n	800feb0 <__smakebuf_r+0x1c>
 800fea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	6123      	str	r3, [r4, #16]
 800fea8:	2301      	movs	r3, #1
 800feaa:	6163      	str	r3, [r4, #20]
 800feac:	b002      	add	sp, #8
 800feae:	bd70      	pop	{r4, r5, r6, pc}
 800feb0:	ab01      	add	r3, sp, #4
 800feb2:	466a      	mov	r2, sp
 800feb4:	f7ff ffc8 	bl	800fe48 <__swhatbuf_r>
 800feb8:	9900      	ldr	r1, [sp, #0]
 800feba:	4605      	mov	r5, r0
 800febc:	4630      	mov	r0, r6
 800febe:	f7ff f871 	bl	800efa4 <_malloc_r>
 800fec2:	b948      	cbnz	r0, 800fed8 <__smakebuf_r+0x44>
 800fec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec8:	059a      	lsls	r2, r3, #22
 800feca:	d4ef      	bmi.n	800feac <__smakebuf_r+0x18>
 800fecc:	f023 0303 	bic.w	r3, r3, #3
 800fed0:	f043 0302 	orr.w	r3, r3, #2
 800fed4:	81a3      	strh	r3, [r4, #12]
 800fed6:	e7e3      	b.n	800fea0 <__smakebuf_r+0xc>
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	6020      	str	r0, [r4, #0]
 800fedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	9b00      	ldr	r3, [sp, #0]
 800fee4:	6163      	str	r3, [r4, #20]
 800fee6:	9b01      	ldr	r3, [sp, #4]
 800fee8:	6120      	str	r0, [r4, #16]
 800feea:	b15b      	cbz	r3, 800ff04 <__smakebuf_r+0x70>
 800feec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fef0:	4630      	mov	r0, r6
 800fef2:	f000 f81d 	bl	800ff30 <_isatty_r>
 800fef6:	b128      	cbz	r0, 800ff04 <__smakebuf_r+0x70>
 800fef8:	89a3      	ldrh	r3, [r4, #12]
 800fefa:	f023 0303 	bic.w	r3, r3, #3
 800fefe:	f043 0301 	orr.w	r3, r3, #1
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	431d      	orrs	r5, r3
 800ff08:	81a5      	strh	r5, [r4, #12]
 800ff0a:	e7cf      	b.n	800feac <__smakebuf_r+0x18>

0800ff0c <_fstat_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4d07      	ldr	r5, [pc, #28]	; (800ff2c <_fstat_r+0x20>)
 800ff10:	2300      	movs	r3, #0
 800ff12:	4604      	mov	r4, r0
 800ff14:	4608      	mov	r0, r1
 800ff16:	4611      	mov	r1, r2
 800ff18:	602b      	str	r3, [r5, #0]
 800ff1a:	f7f2 fdf4 	bl	8002b06 <_fstat>
 800ff1e:	1c43      	adds	r3, r0, #1
 800ff20:	d102      	bne.n	800ff28 <_fstat_r+0x1c>
 800ff22:	682b      	ldr	r3, [r5, #0]
 800ff24:	b103      	cbz	r3, 800ff28 <_fstat_r+0x1c>
 800ff26:	6023      	str	r3, [r4, #0]
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20003e84 	.word	0x20003e84

0800ff30 <_isatty_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4d06      	ldr	r5, [pc, #24]	; (800ff4c <_isatty_r+0x1c>)
 800ff34:	2300      	movs	r3, #0
 800ff36:	4604      	mov	r4, r0
 800ff38:	4608      	mov	r0, r1
 800ff3a:	602b      	str	r3, [r5, #0]
 800ff3c:	f7f2 fdf3 	bl	8002b26 <_isatty>
 800ff40:	1c43      	adds	r3, r0, #1
 800ff42:	d102      	bne.n	800ff4a <_isatty_r+0x1a>
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	b103      	cbz	r3, 800ff4a <_isatty_r+0x1a>
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	bd38      	pop	{r3, r4, r5, pc}
 800ff4c:	20003e84 	.word	0x20003e84

0800ff50 <_sbrk_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	4d06      	ldr	r5, [pc, #24]	; (800ff6c <_sbrk_r+0x1c>)
 800ff54:	2300      	movs	r3, #0
 800ff56:	4604      	mov	r4, r0
 800ff58:	4608      	mov	r0, r1
 800ff5a:	602b      	str	r3, [r5, #0]
 800ff5c:	f7f2 fdfc 	bl	8002b58 <_sbrk>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d102      	bne.n	800ff6a <_sbrk_r+0x1a>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	b103      	cbz	r3, 800ff6a <_sbrk_r+0x1a>
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
 800ff6c:	20003e84 	.word	0x20003e84

0800ff70 <__assert_func>:
 800ff70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff72:	4614      	mov	r4, r2
 800ff74:	461a      	mov	r2, r3
 800ff76:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <__assert_func+0x2c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	68d8      	ldr	r0, [r3, #12]
 800ff7e:	b14c      	cbz	r4, 800ff94 <__assert_func+0x24>
 800ff80:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <__assert_func+0x30>)
 800ff82:	9100      	str	r1, [sp, #0]
 800ff84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff88:	4906      	ldr	r1, [pc, #24]	; (800ffa4 <__assert_func+0x34>)
 800ff8a:	462b      	mov	r3, r5
 800ff8c:	f000 f872 	bl	8010074 <fiprintf>
 800ff90:	f000 f882 	bl	8010098 <abort>
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <__assert_func+0x38>)
 800ff96:	461c      	mov	r4, r3
 800ff98:	e7f3      	b.n	800ff82 <__assert_func+0x12>
 800ff9a:	bf00      	nop
 800ff9c:	20000080 	.word	0x20000080
 800ffa0:	08012347 	.word	0x08012347
 800ffa4:	08012354 	.word	0x08012354
 800ffa8:	08012382 	.word	0x08012382

0800ffac <_calloc_r>:
 800ffac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffae:	fba1 2402 	umull	r2, r4, r1, r2
 800ffb2:	b94c      	cbnz	r4, 800ffc8 <_calloc_r+0x1c>
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	9201      	str	r2, [sp, #4]
 800ffb8:	f7fe fff4 	bl	800efa4 <_malloc_r>
 800ffbc:	9a01      	ldr	r2, [sp, #4]
 800ffbe:	4605      	mov	r5, r0
 800ffc0:	b930      	cbnz	r0, 800ffd0 <_calloc_r+0x24>
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	b003      	add	sp, #12
 800ffc6:	bd30      	pop	{r4, r5, pc}
 800ffc8:	220c      	movs	r2, #12
 800ffca:	6002      	str	r2, [r0, #0]
 800ffcc:	2500      	movs	r5, #0
 800ffce:	e7f8      	b.n	800ffc2 <_calloc_r+0x16>
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	f7fe f86b 	bl	800e0ac <memset>
 800ffd6:	e7f4      	b.n	800ffc2 <_calloc_r+0x16>

0800ffd8 <__ascii_mbtowc>:
 800ffd8:	b082      	sub	sp, #8
 800ffda:	b901      	cbnz	r1, 800ffde <__ascii_mbtowc+0x6>
 800ffdc:	a901      	add	r1, sp, #4
 800ffde:	b142      	cbz	r2, 800fff2 <__ascii_mbtowc+0x1a>
 800ffe0:	b14b      	cbz	r3, 800fff6 <__ascii_mbtowc+0x1e>
 800ffe2:	7813      	ldrb	r3, [r2, #0]
 800ffe4:	600b      	str	r3, [r1, #0]
 800ffe6:	7812      	ldrb	r2, [r2, #0]
 800ffe8:	1e10      	subs	r0, r2, #0
 800ffea:	bf18      	it	ne
 800ffec:	2001      	movne	r0, #1
 800ffee:	b002      	add	sp, #8
 800fff0:	4770      	bx	lr
 800fff2:	4610      	mov	r0, r2
 800fff4:	e7fb      	b.n	800ffee <__ascii_mbtowc+0x16>
 800fff6:	f06f 0001 	mvn.w	r0, #1
 800fffa:	e7f8      	b.n	800ffee <__ascii_mbtowc+0x16>

0800fffc <_realloc_r>:
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	4680      	mov	r8, r0
 8010002:	4614      	mov	r4, r2
 8010004:	460e      	mov	r6, r1
 8010006:	b921      	cbnz	r1, 8010012 <_realloc_r+0x16>
 8010008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	4611      	mov	r1, r2
 801000e:	f7fe bfc9 	b.w	800efa4 <_malloc_r>
 8010012:	b92a      	cbnz	r2, 8010020 <_realloc_r+0x24>
 8010014:	f7fe ff52 	bl	800eebc <_free_r>
 8010018:	4625      	mov	r5, r4
 801001a:	4628      	mov	r0, r5
 801001c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010020:	f000 f841 	bl	80100a6 <_malloc_usable_size_r>
 8010024:	4284      	cmp	r4, r0
 8010026:	4607      	mov	r7, r0
 8010028:	d802      	bhi.n	8010030 <_realloc_r+0x34>
 801002a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801002e:	d812      	bhi.n	8010056 <_realloc_r+0x5a>
 8010030:	4621      	mov	r1, r4
 8010032:	4640      	mov	r0, r8
 8010034:	f7fe ffb6 	bl	800efa4 <_malloc_r>
 8010038:	4605      	mov	r5, r0
 801003a:	2800      	cmp	r0, #0
 801003c:	d0ed      	beq.n	801001a <_realloc_r+0x1e>
 801003e:	42bc      	cmp	r4, r7
 8010040:	4622      	mov	r2, r4
 8010042:	4631      	mov	r1, r6
 8010044:	bf28      	it	cs
 8010046:	463a      	movcs	r2, r7
 8010048:	f7fe f8af 	bl	800e1aa <memcpy>
 801004c:	4631      	mov	r1, r6
 801004e:	4640      	mov	r0, r8
 8010050:	f7fe ff34 	bl	800eebc <_free_r>
 8010054:	e7e1      	b.n	801001a <_realloc_r+0x1e>
 8010056:	4635      	mov	r5, r6
 8010058:	e7df      	b.n	801001a <_realloc_r+0x1e>

0801005a <__ascii_wctomb>:
 801005a:	b149      	cbz	r1, 8010070 <__ascii_wctomb+0x16>
 801005c:	2aff      	cmp	r2, #255	; 0xff
 801005e:	bf85      	ittet	hi
 8010060:	238a      	movhi	r3, #138	; 0x8a
 8010062:	6003      	strhi	r3, [r0, #0]
 8010064:	700a      	strbls	r2, [r1, #0]
 8010066:	f04f 30ff 	movhi.w	r0, #4294967295
 801006a:	bf98      	it	ls
 801006c:	2001      	movls	r0, #1
 801006e:	4770      	bx	lr
 8010070:	4608      	mov	r0, r1
 8010072:	4770      	bx	lr

08010074 <fiprintf>:
 8010074:	b40e      	push	{r1, r2, r3}
 8010076:	b503      	push	{r0, r1, lr}
 8010078:	4601      	mov	r1, r0
 801007a:	ab03      	add	r3, sp, #12
 801007c:	4805      	ldr	r0, [pc, #20]	; (8010094 <fiprintf+0x20>)
 801007e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010082:	6800      	ldr	r0, [r0, #0]
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	f7ff fd17 	bl	800fab8 <_vfiprintf_r>
 801008a:	b002      	add	sp, #8
 801008c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010090:	b003      	add	sp, #12
 8010092:	4770      	bx	lr
 8010094:	20000080 	.word	0x20000080

08010098 <abort>:
 8010098:	b508      	push	{r3, lr}
 801009a:	2006      	movs	r0, #6
 801009c:	f000 f834 	bl	8010108 <raise>
 80100a0:	2001      	movs	r0, #1
 80100a2:	f7f2 fcfd 	bl	8002aa0 <_exit>

080100a6 <_malloc_usable_size_r>:
 80100a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100aa:	1f18      	subs	r0, r3, #4
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bfbc      	itt	lt
 80100b0:	580b      	ldrlt	r3, [r1, r0]
 80100b2:	18c0      	addlt	r0, r0, r3
 80100b4:	4770      	bx	lr

080100b6 <_raise_r>:
 80100b6:	291f      	cmp	r1, #31
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4604      	mov	r4, r0
 80100bc:	460d      	mov	r5, r1
 80100be:	d904      	bls.n	80100ca <_raise_r+0x14>
 80100c0:	2316      	movs	r3, #22
 80100c2:	6003      	str	r3, [r0, #0]
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	bd38      	pop	{r3, r4, r5, pc}
 80100ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80100cc:	b112      	cbz	r2, 80100d4 <_raise_r+0x1e>
 80100ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100d2:	b94b      	cbnz	r3, 80100e8 <_raise_r+0x32>
 80100d4:	4620      	mov	r0, r4
 80100d6:	f000 f831 	bl	801013c <_getpid_r>
 80100da:	462a      	mov	r2, r5
 80100dc:	4601      	mov	r1, r0
 80100de:	4620      	mov	r0, r4
 80100e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100e4:	f000 b818 	b.w	8010118 <_kill_r>
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d00a      	beq.n	8010102 <_raise_r+0x4c>
 80100ec:	1c59      	adds	r1, r3, #1
 80100ee:	d103      	bne.n	80100f8 <_raise_r+0x42>
 80100f0:	2316      	movs	r3, #22
 80100f2:	6003      	str	r3, [r0, #0]
 80100f4:	2001      	movs	r0, #1
 80100f6:	e7e7      	b.n	80100c8 <_raise_r+0x12>
 80100f8:	2400      	movs	r4, #0
 80100fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100fe:	4628      	mov	r0, r5
 8010100:	4798      	blx	r3
 8010102:	2000      	movs	r0, #0
 8010104:	e7e0      	b.n	80100c8 <_raise_r+0x12>
	...

08010108 <raise>:
 8010108:	4b02      	ldr	r3, [pc, #8]	; (8010114 <raise+0xc>)
 801010a:	4601      	mov	r1, r0
 801010c:	6818      	ldr	r0, [r3, #0]
 801010e:	f7ff bfd2 	b.w	80100b6 <_raise_r>
 8010112:	bf00      	nop
 8010114:	20000080 	.word	0x20000080

08010118 <_kill_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d07      	ldr	r5, [pc, #28]	; (8010138 <_kill_r+0x20>)
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	4608      	mov	r0, r1
 8010122:	4611      	mov	r1, r2
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	f7f2 fcab 	bl	8002a80 <_kill>
 801012a:	1c43      	adds	r3, r0, #1
 801012c:	d102      	bne.n	8010134 <_kill_r+0x1c>
 801012e:	682b      	ldr	r3, [r5, #0]
 8010130:	b103      	cbz	r3, 8010134 <_kill_r+0x1c>
 8010132:	6023      	str	r3, [r4, #0]
 8010134:	bd38      	pop	{r3, r4, r5, pc}
 8010136:	bf00      	nop
 8010138:	20003e84 	.word	0x20003e84

0801013c <_getpid_r>:
 801013c:	f7f2 bc98 	b.w	8002a70 <_getpid>

08010140 <log>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	ed2d 8b02 	vpush	{d8}
 8010146:	ec55 4b10 	vmov	r4, r5, d0
 801014a:	f000 f8bd 	bl	80102c8 <__ieee754_log>
 801014e:	4622      	mov	r2, r4
 8010150:	462b      	mov	r3, r5
 8010152:	4620      	mov	r0, r4
 8010154:	4629      	mov	r1, r5
 8010156:	eeb0 8a40 	vmov.f32	s16, s0
 801015a:	eef0 8a60 	vmov.f32	s17, s1
 801015e:	f7f0 fce5 	bl	8000b2c <__aeabi_dcmpun>
 8010162:	b998      	cbnz	r0, 801018c <log+0x4c>
 8010164:	2200      	movs	r2, #0
 8010166:	2300      	movs	r3, #0
 8010168:	4620      	mov	r0, r4
 801016a:	4629      	mov	r1, r5
 801016c:	f7f0 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8010170:	b960      	cbnz	r0, 801018c <log+0x4c>
 8010172:	2200      	movs	r2, #0
 8010174:	2300      	movs	r3, #0
 8010176:	4620      	mov	r0, r4
 8010178:	4629      	mov	r1, r5
 801017a:	f7f0 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 801017e:	b160      	cbz	r0, 801019a <log+0x5a>
 8010180:	f7fd ffe6 	bl	800e150 <__errno>
 8010184:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80101b0 <log+0x70>
 8010188:	2322      	movs	r3, #34	; 0x22
 801018a:	6003      	str	r3, [r0, #0]
 801018c:	eeb0 0a48 	vmov.f32	s0, s16
 8010190:	eef0 0a68 	vmov.f32	s1, s17
 8010194:	ecbd 8b02 	vpop	{d8}
 8010198:	bd38      	pop	{r3, r4, r5, pc}
 801019a:	f7fd ffd9 	bl	800e150 <__errno>
 801019e:	ecbd 8b02 	vpop	{d8}
 80101a2:	2321      	movs	r3, #33	; 0x21
 80101a4:	6003      	str	r3, [r0, #0]
 80101a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101aa:	4803      	ldr	r0, [pc, #12]	; (80101b8 <log+0x78>)
 80101ac:	f000 b884 	b.w	80102b8 <nan>
 80101b0:	00000000 	.word	0x00000000
 80101b4:	fff00000 	.word	0xfff00000
 80101b8:	08012382 	.word	0x08012382

080101bc <pow>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	ed2d 8b02 	vpush	{d8}
 80101c2:	eeb0 8a40 	vmov.f32	s16, s0
 80101c6:	eef0 8a60 	vmov.f32	s17, s1
 80101ca:	ec55 4b11 	vmov	r4, r5, d1
 80101ce:	f000 fa37 	bl	8010640 <__ieee754_pow>
 80101d2:	4622      	mov	r2, r4
 80101d4:	462b      	mov	r3, r5
 80101d6:	4620      	mov	r0, r4
 80101d8:	4629      	mov	r1, r5
 80101da:	ec57 6b10 	vmov	r6, r7, d0
 80101de:	f7f0 fca5 	bl	8000b2c <__aeabi_dcmpun>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d13b      	bne.n	801025e <pow+0xa2>
 80101e6:	ec51 0b18 	vmov	r0, r1, d8
 80101ea:	2200      	movs	r2, #0
 80101ec:	2300      	movs	r3, #0
 80101ee:	f7f0 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80101f2:	b1b8      	cbz	r0, 8010224 <pow+0x68>
 80101f4:	2200      	movs	r2, #0
 80101f6:	2300      	movs	r3, #0
 80101f8:	4620      	mov	r0, r4
 80101fa:	4629      	mov	r1, r5
 80101fc:	f7f0 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8010200:	2800      	cmp	r0, #0
 8010202:	d146      	bne.n	8010292 <pow+0xd6>
 8010204:	ec45 4b10 	vmov	d0, r4, r5
 8010208:	f000 f848 	bl	801029c <finite>
 801020c:	b338      	cbz	r0, 801025e <pow+0xa2>
 801020e:	2200      	movs	r2, #0
 8010210:	2300      	movs	r3, #0
 8010212:	4620      	mov	r0, r4
 8010214:	4629      	mov	r1, r5
 8010216:	f7f0 fc61 	bl	8000adc <__aeabi_dcmplt>
 801021a:	b300      	cbz	r0, 801025e <pow+0xa2>
 801021c:	f7fd ff98 	bl	800e150 <__errno>
 8010220:	2322      	movs	r3, #34	; 0x22
 8010222:	e01b      	b.n	801025c <pow+0xa0>
 8010224:	ec47 6b10 	vmov	d0, r6, r7
 8010228:	f000 f838 	bl	801029c <finite>
 801022c:	b9e0      	cbnz	r0, 8010268 <pow+0xac>
 801022e:	eeb0 0a48 	vmov.f32	s0, s16
 8010232:	eef0 0a68 	vmov.f32	s1, s17
 8010236:	f000 f831 	bl	801029c <finite>
 801023a:	b1a8      	cbz	r0, 8010268 <pow+0xac>
 801023c:	ec45 4b10 	vmov	d0, r4, r5
 8010240:	f000 f82c 	bl	801029c <finite>
 8010244:	b180      	cbz	r0, 8010268 <pow+0xac>
 8010246:	4632      	mov	r2, r6
 8010248:	463b      	mov	r3, r7
 801024a:	4630      	mov	r0, r6
 801024c:	4639      	mov	r1, r7
 801024e:	f7f0 fc6d 	bl	8000b2c <__aeabi_dcmpun>
 8010252:	2800      	cmp	r0, #0
 8010254:	d0e2      	beq.n	801021c <pow+0x60>
 8010256:	f7fd ff7b 	bl	800e150 <__errno>
 801025a:	2321      	movs	r3, #33	; 0x21
 801025c:	6003      	str	r3, [r0, #0]
 801025e:	ecbd 8b02 	vpop	{d8}
 8010262:	ec47 6b10 	vmov	d0, r6, r7
 8010266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010268:	2200      	movs	r2, #0
 801026a:	2300      	movs	r3, #0
 801026c:	4630      	mov	r0, r6
 801026e:	4639      	mov	r1, r7
 8010270:	f7f0 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010274:	2800      	cmp	r0, #0
 8010276:	d0f2      	beq.n	801025e <pow+0xa2>
 8010278:	eeb0 0a48 	vmov.f32	s0, s16
 801027c:	eef0 0a68 	vmov.f32	s1, s17
 8010280:	f000 f80c 	bl	801029c <finite>
 8010284:	2800      	cmp	r0, #0
 8010286:	d0ea      	beq.n	801025e <pow+0xa2>
 8010288:	ec45 4b10 	vmov	d0, r4, r5
 801028c:	f000 f806 	bl	801029c <finite>
 8010290:	e7c3      	b.n	801021a <pow+0x5e>
 8010292:	4f01      	ldr	r7, [pc, #4]	; (8010298 <pow+0xdc>)
 8010294:	2600      	movs	r6, #0
 8010296:	e7e2      	b.n	801025e <pow+0xa2>
 8010298:	3ff00000 	.word	0x3ff00000

0801029c <finite>:
 801029c:	b082      	sub	sp, #8
 801029e:	ed8d 0b00 	vstr	d0, [sp]
 80102a2:	9801      	ldr	r0, [sp, #4]
 80102a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80102a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80102ac:	0fc0      	lsrs	r0, r0, #31
 80102ae:	b002      	add	sp, #8
 80102b0:	4770      	bx	lr
 80102b2:	0000      	movs	r0, r0
 80102b4:	0000      	movs	r0, r0
	...

080102b8 <nan>:
 80102b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80102c0 <nan+0x8>
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	00000000 	.word	0x00000000
 80102c4:	7ff80000 	.word	0x7ff80000

080102c8 <__ieee754_log>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ec51 0b10 	vmov	r0, r1, d0
 80102d0:	ed2d 8b04 	vpush	{d8-d9}
 80102d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80102d8:	b083      	sub	sp, #12
 80102da:	460d      	mov	r5, r1
 80102dc:	da29      	bge.n	8010332 <__ieee754_log+0x6a>
 80102de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80102e2:	4303      	orrs	r3, r0
 80102e4:	ee10 2a10 	vmov	r2, s0
 80102e8:	d10c      	bne.n	8010304 <__ieee754_log+0x3c>
 80102ea:	49cf      	ldr	r1, [pc, #828]	; (8010628 <__ieee754_log+0x360>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	2300      	movs	r3, #0
 80102f0:	2000      	movs	r0, #0
 80102f2:	f7f0 faab 	bl	800084c <__aeabi_ddiv>
 80102f6:	ec41 0b10 	vmov	d0, r0, r1
 80102fa:	b003      	add	sp, #12
 80102fc:	ecbd 8b04 	vpop	{d8-d9}
 8010300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010304:	2900      	cmp	r1, #0
 8010306:	da05      	bge.n	8010314 <__ieee754_log+0x4c>
 8010308:	460b      	mov	r3, r1
 801030a:	f7ef ffbd 	bl	8000288 <__aeabi_dsub>
 801030e:	2200      	movs	r2, #0
 8010310:	2300      	movs	r3, #0
 8010312:	e7ee      	b.n	80102f2 <__ieee754_log+0x2a>
 8010314:	4bc5      	ldr	r3, [pc, #788]	; (801062c <__ieee754_log+0x364>)
 8010316:	2200      	movs	r2, #0
 8010318:	f7f0 f96e 	bl	80005f8 <__aeabi_dmul>
 801031c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010320:	460d      	mov	r5, r1
 8010322:	4ac3      	ldr	r2, [pc, #780]	; (8010630 <__ieee754_log+0x368>)
 8010324:	4295      	cmp	r5, r2
 8010326:	dd06      	ble.n	8010336 <__ieee754_log+0x6e>
 8010328:	4602      	mov	r2, r0
 801032a:	460b      	mov	r3, r1
 801032c:	f7ef ffae 	bl	800028c <__adddf3>
 8010330:	e7e1      	b.n	80102f6 <__ieee754_log+0x2e>
 8010332:	2300      	movs	r3, #0
 8010334:	e7f5      	b.n	8010322 <__ieee754_log+0x5a>
 8010336:	152c      	asrs	r4, r5, #20
 8010338:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801033c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010340:	441c      	add	r4, r3
 8010342:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010346:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801034a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801034e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010352:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010356:	ea42 0105 	orr.w	r1, r2, r5
 801035a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801035e:	2200      	movs	r2, #0
 8010360:	4bb4      	ldr	r3, [pc, #720]	; (8010634 <__ieee754_log+0x36c>)
 8010362:	f7ef ff91 	bl	8000288 <__aeabi_dsub>
 8010366:	1cab      	adds	r3, r5, #2
 8010368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801036c:	2b02      	cmp	r3, #2
 801036e:	4682      	mov	sl, r0
 8010370:	468b      	mov	fp, r1
 8010372:	f04f 0200 	mov.w	r2, #0
 8010376:	dc53      	bgt.n	8010420 <__ieee754_log+0x158>
 8010378:	2300      	movs	r3, #0
 801037a:	f7f0 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 801037e:	b1d0      	cbz	r0, 80103b6 <__ieee754_log+0xee>
 8010380:	2c00      	cmp	r4, #0
 8010382:	f000 8122 	beq.w	80105ca <__ieee754_log+0x302>
 8010386:	4620      	mov	r0, r4
 8010388:	f7f0 f8cc 	bl	8000524 <__aeabi_i2d>
 801038c:	a390      	add	r3, pc, #576	; (adr r3, 80105d0 <__ieee754_log+0x308>)
 801038e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010392:	4606      	mov	r6, r0
 8010394:	460f      	mov	r7, r1
 8010396:	f7f0 f92f 	bl	80005f8 <__aeabi_dmul>
 801039a:	a38f      	add	r3, pc, #572	; (adr r3, 80105d8 <__ieee754_log+0x310>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	4604      	mov	r4, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	4630      	mov	r0, r6
 80103a6:	4639      	mov	r1, r7
 80103a8:	f7f0 f926 	bl	80005f8 <__aeabi_dmul>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4620      	mov	r0, r4
 80103b2:	4629      	mov	r1, r5
 80103b4:	e7ba      	b.n	801032c <__ieee754_log+0x64>
 80103b6:	a38a      	add	r3, pc, #552	; (adr r3, 80105e0 <__ieee754_log+0x318>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	4650      	mov	r0, sl
 80103be:	4659      	mov	r1, fp
 80103c0:	f7f0 f91a 	bl	80005f8 <__aeabi_dmul>
 80103c4:	4602      	mov	r2, r0
 80103c6:	460b      	mov	r3, r1
 80103c8:	2000      	movs	r0, #0
 80103ca:	499b      	ldr	r1, [pc, #620]	; (8010638 <__ieee754_log+0x370>)
 80103cc:	f7ef ff5c 	bl	8000288 <__aeabi_dsub>
 80103d0:	4652      	mov	r2, sl
 80103d2:	4606      	mov	r6, r0
 80103d4:	460f      	mov	r7, r1
 80103d6:	465b      	mov	r3, fp
 80103d8:	4650      	mov	r0, sl
 80103da:	4659      	mov	r1, fp
 80103dc:	f7f0 f90c 	bl	80005f8 <__aeabi_dmul>
 80103e0:	4602      	mov	r2, r0
 80103e2:	460b      	mov	r3, r1
 80103e4:	4630      	mov	r0, r6
 80103e6:	4639      	mov	r1, r7
 80103e8:	f7f0 f906 	bl	80005f8 <__aeabi_dmul>
 80103ec:	4606      	mov	r6, r0
 80103ee:	460f      	mov	r7, r1
 80103f0:	b914      	cbnz	r4, 80103f8 <__ieee754_log+0x130>
 80103f2:	4632      	mov	r2, r6
 80103f4:	463b      	mov	r3, r7
 80103f6:	e0a2      	b.n	801053e <__ieee754_log+0x276>
 80103f8:	4620      	mov	r0, r4
 80103fa:	f7f0 f893 	bl	8000524 <__aeabi_i2d>
 80103fe:	a374      	add	r3, pc, #464	; (adr r3, 80105d0 <__ieee754_log+0x308>)
 8010400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010404:	4680      	mov	r8, r0
 8010406:	4689      	mov	r9, r1
 8010408:	f7f0 f8f6 	bl	80005f8 <__aeabi_dmul>
 801040c:	a372      	add	r3, pc, #456	; (adr r3, 80105d8 <__ieee754_log+0x310>)
 801040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010412:	4604      	mov	r4, r0
 8010414:	460d      	mov	r5, r1
 8010416:	4640      	mov	r0, r8
 8010418:	4649      	mov	r1, r9
 801041a:	f7f0 f8ed 	bl	80005f8 <__aeabi_dmul>
 801041e:	e0a7      	b.n	8010570 <__ieee754_log+0x2a8>
 8010420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010424:	f7ef ff32 	bl	800028c <__adddf3>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	4650      	mov	r0, sl
 801042e:	4659      	mov	r1, fp
 8010430:	f7f0 fa0c 	bl	800084c <__aeabi_ddiv>
 8010434:	ec41 0b18 	vmov	d8, r0, r1
 8010438:	4620      	mov	r0, r4
 801043a:	f7f0 f873 	bl	8000524 <__aeabi_i2d>
 801043e:	ec53 2b18 	vmov	r2, r3, d8
 8010442:	ec41 0b19 	vmov	d9, r0, r1
 8010446:	ec51 0b18 	vmov	r0, r1, d8
 801044a:	f7f0 f8d5 	bl	80005f8 <__aeabi_dmul>
 801044e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010452:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010456:	9301      	str	r3, [sp, #4]
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	4680      	mov	r8, r0
 801045e:	4689      	mov	r9, r1
 8010460:	f7f0 f8ca 	bl	80005f8 <__aeabi_dmul>
 8010464:	a360      	add	r3, pc, #384	; (adr r3, 80105e8 <__ieee754_log+0x320>)
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	4606      	mov	r6, r0
 801046c:	460f      	mov	r7, r1
 801046e:	f7f0 f8c3 	bl	80005f8 <__aeabi_dmul>
 8010472:	a35f      	add	r3, pc, #380	; (adr r3, 80105f0 <__ieee754_log+0x328>)
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	f7ef ff08 	bl	800028c <__adddf3>
 801047c:	4632      	mov	r2, r6
 801047e:	463b      	mov	r3, r7
 8010480:	f7f0 f8ba 	bl	80005f8 <__aeabi_dmul>
 8010484:	a35c      	add	r3, pc, #368	; (adr r3, 80105f8 <__ieee754_log+0x330>)
 8010486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048a:	f7ef feff 	bl	800028c <__adddf3>
 801048e:	4632      	mov	r2, r6
 8010490:	463b      	mov	r3, r7
 8010492:	f7f0 f8b1 	bl	80005f8 <__aeabi_dmul>
 8010496:	a35a      	add	r3, pc, #360	; (adr r3, 8010600 <__ieee754_log+0x338>)
 8010498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049c:	f7ef fef6 	bl	800028c <__adddf3>
 80104a0:	4642      	mov	r2, r8
 80104a2:	464b      	mov	r3, r9
 80104a4:	f7f0 f8a8 	bl	80005f8 <__aeabi_dmul>
 80104a8:	a357      	add	r3, pc, #348	; (adr r3, 8010608 <__ieee754_log+0x340>)
 80104aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ae:	4680      	mov	r8, r0
 80104b0:	4689      	mov	r9, r1
 80104b2:	4630      	mov	r0, r6
 80104b4:	4639      	mov	r1, r7
 80104b6:	f7f0 f89f 	bl	80005f8 <__aeabi_dmul>
 80104ba:	a355      	add	r3, pc, #340	; (adr r3, 8010610 <__ieee754_log+0x348>)
 80104bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c0:	f7ef fee4 	bl	800028c <__adddf3>
 80104c4:	4632      	mov	r2, r6
 80104c6:	463b      	mov	r3, r7
 80104c8:	f7f0 f896 	bl	80005f8 <__aeabi_dmul>
 80104cc:	a352      	add	r3, pc, #328	; (adr r3, 8010618 <__ieee754_log+0x350>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	f7ef fedb 	bl	800028c <__adddf3>
 80104d6:	4632      	mov	r2, r6
 80104d8:	463b      	mov	r3, r7
 80104da:	f7f0 f88d 	bl	80005f8 <__aeabi_dmul>
 80104de:	460b      	mov	r3, r1
 80104e0:	4602      	mov	r2, r0
 80104e2:	4649      	mov	r1, r9
 80104e4:	4640      	mov	r0, r8
 80104e6:	f7ef fed1 	bl	800028c <__adddf3>
 80104ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80104ee:	9b01      	ldr	r3, [sp, #4]
 80104f0:	3551      	adds	r5, #81	; 0x51
 80104f2:	431d      	orrs	r5, r3
 80104f4:	2d00      	cmp	r5, #0
 80104f6:	4680      	mov	r8, r0
 80104f8:	4689      	mov	r9, r1
 80104fa:	dd48      	ble.n	801058e <__ieee754_log+0x2c6>
 80104fc:	4b4e      	ldr	r3, [pc, #312]	; (8010638 <__ieee754_log+0x370>)
 80104fe:	2200      	movs	r2, #0
 8010500:	4650      	mov	r0, sl
 8010502:	4659      	mov	r1, fp
 8010504:	f7f0 f878 	bl	80005f8 <__aeabi_dmul>
 8010508:	4652      	mov	r2, sl
 801050a:	465b      	mov	r3, fp
 801050c:	f7f0 f874 	bl	80005f8 <__aeabi_dmul>
 8010510:	4602      	mov	r2, r0
 8010512:	460b      	mov	r3, r1
 8010514:	4606      	mov	r6, r0
 8010516:	460f      	mov	r7, r1
 8010518:	4640      	mov	r0, r8
 801051a:	4649      	mov	r1, r9
 801051c:	f7ef feb6 	bl	800028c <__adddf3>
 8010520:	ec53 2b18 	vmov	r2, r3, d8
 8010524:	f7f0 f868 	bl	80005f8 <__aeabi_dmul>
 8010528:	4680      	mov	r8, r0
 801052a:	4689      	mov	r9, r1
 801052c:	b964      	cbnz	r4, 8010548 <__ieee754_log+0x280>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	4630      	mov	r0, r6
 8010534:	4639      	mov	r1, r7
 8010536:	f7ef fea7 	bl	8000288 <__aeabi_dsub>
 801053a:	4602      	mov	r2, r0
 801053c:	460b      	mov	r3, r1
 801053e:	4650      	mov	r0, sl
 8010540:	4659      	mov	r1, fp
 8010542:	f7ef fea1 	bl	8000288 <__aeabi_dsub>
 8010546:	e6d6      	b.n	80102f6 <__ieee754_log+0x2e>
 8010548:	a321      	add	r3, pc, #132	; (adr r3, 80105d0 <__ieee754_log+0x308>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	ec51 0b19 	vmov	r0, r1, d9
 8010552:	f7f0 f851 	bl	80005f8 <__aeabi_dmul>
 8010556:	a320      	add	r3, pc, #128	; (adr r3, 80105d8 <__ieee754_log+0x310>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	4604      	mov	r4, r0
 801055e:	460d      	mov	r5, r1
 8010560:	ec51 0b19 	vmov	r0, r1, d9
 8010564:	f7f0 f848 	bl	80005f8 <__aeabi_dmul>
 8010568:	4642      	mov	r2, r8
 801056a:	464b      	mov	r3, r9
 801056c:	f7ef fe8e 	bl	800028c <__adddf3>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	4630      	mov	r0, r6
 8010576:	4639      	mov	r1, r7
 8010578:	f7ef fe86 	bl	8000288 <__aeabi_dsub>
 801057c:	4652      	mov	r2, sl
 801057e:	465b      	mov	r3, fp
 8010580:	f7ef fe82 	bl	8000288 <__aeabi_dsub>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4620      	mov	r0, r4
 801058a:	4629      	mov	r1, r5
 801058c:	e7d9      	b.n	8010542 <__ieee754_log+0x27a>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	4650      	mov	r0, sl
 8010594:	4659      	mov	r1, fp
 8010596:	f7ef fe77 	bl	8000288 <__aeabi_dsub>
 801059a:	ec53 2b18 	vmov	r2, r3, d8
 801059e:	f7f0 f82b 	bl	80005f8 <__aeabi_dmul>
 80105a2:	4606      	mov	r6, r0
 80105a4:	460f      	mov	r7, r1
 80105a6:	2c00      	cmp	r4, #0
 80105a8:	f43f af23 	beq.w	80103f2 <__ieee754_log+0x12a>
 80105ac:	a308      	add	r3, pc, #32	; (adr r3, 80105d0 <__ieee754_log+0x308>)
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	ec51 0b19 	vmov	r0, r1, d9
 80105b6:	f7f0 f81f 	bl	80005f8 <__aeabi_dmul>
 80105ba:	a307      	add	r3, pc, #28	; (adr r3, 80105d8 <__ieee754_log+0x310>)
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	4604      	mov	r4, r0
 80105c2:	460d      	mov	r5, r1
 80105c4:	ec51 0b19 	vmov	r0, r1, d9
 80105c8:	e727      	b.n	801041a <__ieee754_log+0x152>
 80105ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010620 <__ieee754_log+0x358>
 80105ce:	e694      	b.n	80102fa <__ieee754_log+0x32>
 80105d0:	fee00000 	.word	0xfee00000
 80105d4:	3fe62e42 	.word	0x3fe62e42
 80105d8:	35793c76 	.word	0x35793c76
 80105dc:	3dea39ef 	.word	0x3dea39ef
 80105e0:	55555555 	.word	0x55555555
 80105e4:	3fd55555 	.word	0x3fd55555
 80105e8:	df3e5244 	.word	0xdf3e5244
 80105ec:	3fc2f112 	.word	0x3fc2f112
 80105f0:	96cb03de 	.word	0x96cb03de
 80105f4:	3fc74664 	.word	0x3fc74664
 80105f8:	94229359 	.word	0x94229359
 80105fc:	3fd24924 	.word	0x3fd24924
 8010600:	55555593 	.word	0x55555593
 8010604:	3fe55555 	.word	0x3fe55555
 8010608:	d078c69f 	.word	0xd078c69f
 801060c:	3fc39a09 	.word	0x3fc39a09
 8010610:	1d8e78af 	.word	0x1d8e78af
 8010614:	3fcc71c5 	.word	0x3fcc71c5
 8010618:	9997fa04 	.word	0x9997fa04
 801061c:	3fd99999 	.word	0x3fd99999
	...
 8010628:	c3500000 	.word	0xc3500000
 801062c:	43500000 	.word	0x43500000
 8010630:	7fefffff 	.word	0x7fefffff
 8010634:	3ff00000 	.word	0x3ff00000
 8010638:	3fe00000 	.word	0x3fe00000
 801063c:	00000000 	.word	0x00000000

08010640 <__ieee754_pow>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	ed2d 8b06 	vpush	{d8-d10}
 8010648:	b089      	sub	sp, #36	; 0x24
 801064a:	ed8d 1b00 	vstr	d1, [sp]
 801064e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010652:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010656:	ea58 0102 	orrs.w	r1, r8, r2
 801065a:	ec57 6b10 	vmov	r6, r7, d0
 801065e:	d115      	bne.n	801068c <__ieee754_pow+0x4c>
 8010660:	19b3      	adds	r3, r6, r6
 8010662:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010666:	4152      	adcs	r2, r2
 8010668:	4299      	cmp	r1, r3
 801066a:	4b89      	ldr	r3, [pc, #548]	; (8010890 <__ieee754_pow+0x250>)
 801066c:	4193      	sbcs	r3, r2
 801066e:	f080 84d1 	bcs.w	8011014 <__ieee754_pow+0x9d4>
 8010672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010676:	4630      	mov	r0, r6
 8010678:	4639      	mov	r1, r7
 801067a:	f7ef fe07 	bl	800028c <__adddf3>
 801067e:	ec41 0b10 	vmov	d0, r0, r1
 8010682:	b009      	add	sp, #36	; 0x24
 8010684:	ecbd 8b06 	vpop	{d8-d10}
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068c:	4b81      	ldr	r3, [pc, #516]	; (8010894 <__ieee754_pow+0x254>)
 801068e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010692:	429c      	cmp	r4, r3
 8010694:	ee10 aa10 	vmov	sl, s0
 8010698:	463d      	mov	r5, r7
 801069a:	dc06      	bgt.n	80106aa <__ieee754_pow+0x6a>
 801069c:	d101      	bne.n	80106a2 <__ieee754_pow+0x62>
 801069e:	2e00      	cmp	r6, #0
 80106a0:	d1e7      	bne.n	8010672 <__ieee754_pow+0x32>
 80106a2:	4598      	cmp	r8, r3
 80106a4:	dc01      	bgt.n	80106aa <__ieee754_pow+0x6a>
 80106a6:	d10f      	bne.n	80106c8 <__ieee754_pow+0x88>
 80106a8:	b172      	cbz	r2, 80106c8 <__ieee754_pow+0x88>
 80106aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80106ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80106b2:	ea55 050a 	orrs.w	r5, r5, sl
 80106b6:	d1dc      	bne.n	8010672 <__ieee754_pow+0x32>
 80106b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80106bc:	18db      	adds	r3, r3, r3
 80106be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80106c2:	4152      	adcs	r2, r2
 80106c4:	429d      	cmp	r5, r3
 80106c6:	e7d0      	b.n	801066a <__ieee754_pow+0x2a>
 80106c8:	2d00      	cmp	r5, #0
 80106ca:	da3b      	bge.n	8010744 <__ieee754_pow+0x104>
 80106cc:	4b72      	ldr	r3, [pc, #456]	; (8010898 <__ieee754_pow+0x258>)
 80106ce:	4598      	cmp	r8, r3
 80106d0:	dc51      	bgt.n	8010776 <__ieee754_pow+0x136>
 80106d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80106d6:	4598      	cmp	r8, r3
 80106d8:	f340 84ab 	ble.w	8011032 <__ieee754_pow+0x9f2>
 80106dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80106e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106e4:	2b14      	cmp	r3, #20
 80106e6:	dd0f      	ble.n	8010708 <__ieee754_pow+0xc8>
 80106e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80106ec:	fa22 f103 	lsr.w	r1, r2, r3
 80106f0:	fa01 f303 	lsl.w	r3, r1, r3
 80106f4:	4293      	cmp	r3, r2
 80106f6:	f040 849c 	bne.w	8011032 <__ieee754_pow+0x9f2>
 80106fa:	f001 0101 	and.w	r1, r1, #1
 80106fe:	f1c1 0302 	rsb	r3, r1, #2
 8010702:	9304      	str	r3, [sp, #16]
 8010704:	b182      	cbz	r2, 8010728 <__ieee754_pow+0xe8>
 8010706:	e05f      	b.n	80107c8 <__ieee754_pow+0x188>
 8010708:	2a00      	cmp	r2, #0
 801070a:	d15b      	bne.n	80107c4 <__ieee754_pow+0x184>
 801070c:	f1c3 0314 	rsb	r3, r3, #20
 8010710:	fa48 f103 	asr.w	r1, r8, r3
 8010714:	fa01 f303 	lsl.w	r3, r1, r3
 8010718:	4543      	cmp	r3, r8
 801071a:	f040 8487 	bne.w	801102c <__ieee754_pow+0x9ec>
 801071e:	f001 0101 	and.w	r1, r1, #1
 8010722:	f1c1 0302 	rsb	r3, r1, #2
 8010726:	9304      	str	r3, [sp, #16]
 8010728:	4b5c      	ldr	r3, [pc, #368]	; (801089c <__ieee754_pow+0x25c>)
 801072a:	4598      	cmp	r8, r3
 801072c:	d132      	bne.n	8010794 <__ieee754_pow+0x154>
 801072e:	f1b9 0f00 	cmp.w	r9, #0
 8010732:	f280 8477 	bge.w	8011024 <__ieee754_pow+0x9e4>
 8010736:	4959      	ldr	r1, [pc, #356]	; (801089c <__ieee754_pow+0x25c>)
 8010738:	4632      	mov	r2, r6
 801073a:	463b      	mov	r3, r7
 801073c:	2000      	movs	r0, #0
 801073e:	f7f0 f885 	bl	800084c <__aeabi_ddiv>
 8010742:	e79c      	b.n	801067e <__ieee754_pow+0x3e>
 8010744:	2300      	movs	r3, #0
 8010746:	9304      	str	r3, [sp, #16]
 8010748:	2a00      	cmp	r2, #0
 801074a:	d13d      	bne.n	80107c8 <__ieee754_pow+0x188>
 801074c:	4b51      	ldr	r3, [pc, #324]	; (8010894 <__ieee754_pow+0x254>)
 801074e:	4598      	cmp	r8, r3
 8010750:	d1ea      	bne.n	8010728 <__ieee754_pow+0xe8>
 8010752:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010756:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801075a:	ea53 030a 	orrs.w	r3, r3, sl
 801075e:	f000 8459 	beq.w	8011014 <__ieee754_pow+0x9d4>
 8010762:	4b4f      	ldr	r3, [pc, #316]	; (80108a0 <__ieee754_pow+0x260>)
 8010764:	429c      	cmp	r4, r3
 8010766:	dd08      	ble.n	801077a <__ieee754_pow+0x13a>
 8010768:	f1b9 0f00 	cmp.w	r9, #0
 801076c:	f2c0 8456 	blt.w	801101c <__ieee754_pow+0x9dc>
 8010770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010774:	e783      	b.n	801067e <__ieee754_pow+0x3e>
 8010776:	2302      	movs	r3, #2
 8010778:	e7e5      	b.n	8010746 <__ieee754_pow+0x106>
 801077a:	f1b9 0f00 	cmp.w	r9, #0
 801077e:	f04f 0000 	mov.w	r0, #0
 8010782:	f04f 0100 	mov.w	r1, #0
 8010786:	f6bf af7a 	bge.w	801067e <__ieee754_pow+0x3e>
 801078a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801078e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010792:	e774      	b.n	801067e <__ieee754_pow+0x3e>
 8010794:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010798:	d106      	bne.n	80107a8 <__ieee754_pow+0x168>
 801079a:	4632      	mov	r2, r6
 801079c:	463b      	mov	r3, r7
 801079e:	4630      	mov	r0, r6
 80107a0:	4639      	mov	r1, r7
 80107a2:	f7ef ff29 	bl	80005f8 <__aeabi_dmul>
 80107a6:	e76a      	b.n	801067e <__ieee754_pow+0x3e>
 80107a8:	4b3e      	ldr	r3, [pc, #248]	; (80108a4 <__ieee754_pow+0x264>)
 80107aa:	4599      	cmp	r9, r3
 80107ac:	d10c      	bne.n	80107c8 <__ieee754_pow+0x188>
 80107ae:	2d00      	cmp	r5, #0
 80107b0:	db0a      	blt.n	80107c8 <__ieee754_pow+0x188>
 80107b2:	ec47 6b10 	vmov	d0, r6, r7
 80107b6:	b009      	add	sp, #36	; 0x24
 80107b8:	ecbd 8b06 	vpop	{d8-d10}
 80107bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	f000 bd20 	b.w	8011204 <__ieee754_sqrt>
 80107c4:	2300      	movs	r3, #0
 80107c6:	9304      	str	r3, [sp, #16]
 80107c8:	ec47 6b10 	vmov	d0, r6, r7
 80107cc:	f000 fc62 	bl	8011094 <fabs>
 80107d0:	ec51 0b10 	vmov	r0, r1, d0
 80107d4:	f1ba 0f00 	cmp.w	sl, #0
 80107d8:	d129      	bne.n	801082e <__ieee754_pow+0x1ee>
 80107da:	b124      	cbz	r4, 80107e6 <__ieee754_pow+0x1a6>
 80107dc:	4b2f      	ldr	r3, [pc, #188]	; (801089c <__ieee754_pow+0x25c>)
 80107de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d123      	bne.n	801082e <__ieee754_pow+0x1ee>
 80107e6:	f1b9 0f00 	cmp.w	r9, #0
 80107ea:	da05      	bge.n	80107f8 <__ieee754_pow+0x1b8>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	2000      	movs	r0, #0
 80107f2:	492a      	ldr	r1, [pc, #168]	; (801089c <__ieee754_pow+0x25c>)
 80107f4:	f7f0 f82a 	bl	800084c <__aeabi_ddiv>
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	f6bf af40 	bge.w	801067e <__ieee754_pow+0x3e>
 80107fe:	9b04      	ldr	r3, [sp, #16]
 8010800:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010804:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010808:	431c      	orrs	r4, r3
 801080a:	d108      	bne.n	801081e <__ieee754_pow+0x1de>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4610      	mov	r0, r2
 8010812:	4619      	mov	r1, r3
 8010814:	f7ef fd38 	bl	8000288 <__aeabi_dsub>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	e78f      	b.n	801073e <__ieee754_pow+0xfe>
 801081e:	9b04      	ldr	r3, [sp, #16]
 8010820:	2b01      	cmp	r3, #1
 8010822:	f47f af2c 	bne.w	801067e <__ieee754_pow+0x3e>
 8010826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801082a:	4619      	mov	r1, r3
 801082c:	e727      	b.n	801067e <__ieee754_pow+0x3e>
 801082e:	0feb      	lsrs	r3, r5, #31
 8010830:	3b01      	subs	r3, #1
 8010832:	9306      	str	r3, [sp, #24]
 8010834:	9a06      	ldr	r2, [sp, #24]
 8010836:	9b04      	ldr	r3, [sp, #16]
 8010838:	4313      	orrs	r3, r2
 801083a:	d102      	bne.n	8010842 <__ieee754_pow+0x202>
 801083c:	4632      	mov	r2, r6
 801083e:	463b      	mov	r3, r7
 8010840:	e7e6      	b.n	8010810 <__ieee754_pow+0x1d0>
 8010842:	4b19      	ldr	r3, [pc, #100]	; (80108a8 <__ieee754_pow+0x268>)
 8010844:	4598      	cmp	r8, r3
 8010846:	f340 80fb 	ble.w	8010a40 <__ieee754_pow+0x400>
 801084a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801084e:	4598      	cmp	r8, r3
 8010850:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <__ieee754_pow+0x260>)
 8010852:	dd0c      	ble.n	801086e <__ieee754_pow+0x22e>
 8010854:	429c      	cmp	r4, r3
 8010856:	dc0f      	bgt.n	8010878 <__ieee754_pow+0x238>
 8010858:	f1b9 0f00 	cmp.w	r9, #0
 801085c:	da0f      	bge.n	801087e <__ieee754_pow+0x23e>
 801085e:	2000      	movs	r0, #0
 8010860:	b009      	add	sp, #36	; 0x24
 8010862:	ecbd 8b06 	vpop	{d8-d10}
 8010866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086a:	f000 bcc2 	b.w	80111f2 <__math_oflow>
 801086e:	429c      	cmp	r4, r3
 8010870:	dbf2      	blt.n	8010858 <__ieee754_pow+0x218>
 8010872:	4b0a      	ldr	r3, [pc, #40]	; (801089c <__ieee754_pow+0x25c>)
 8010874:	429c      	cmp	r4, r3
 8010876:	dd19      	ble.n	80108ac <__ieee754_pow+0x26c>
 8010878:	f1b9 0f00 	cmp.w	r9, #0
 801087c:	dcef      	bgt.n	801085e <__ieee754_pow+0x21e>
 801087e:	2000      	movs	r0, #0
 8010880:	b009      	add	sp, #36	; 0x24
 8010882:	ecbd 8b06 	vpop	{d8-d10}
 8010886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088a:	f000 bca9 	b.w	80111e0 <__math_uflow>
 801088e:	bf00      	nop
 8010890:	fff00000 	.word	0xfff00000
 8010894:	7ff00000 	.word	0x7ff00000
 8010898:	433fffff 	.word	0x433fffff
 801089c:	3ff00000 	.word	0x3ff00000
 80108a0:	3fefffff 	.word	0x3fefffff
 80108a4:	3fe00000 	.word	0x3fe00000
 80108a8:	41e00000 	.word	0x41e00000
 80108ac:	4b60      	ldr	r3, [pc, #384]	; (8010a30 <__ieee754_pow+0x3f0>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	f7ef fcea 	bl	8000288 <__aeabi_dsub>
 80108b4:	a354      	add	r3, pc, #336	; (adr r3, 8010a08 <__ieee754_pow+0x3c8>)
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	4604      	mov	r4, r0
 80108bc:	460d      	mov	r5, r1
 80108be:	f7ef fe9b 	bl	80005f8 <__aeabi_dmul>
 80108c2:	a353      	add	r3, pc, #332	; (adr r3, 8010a10 <__ieee754_pow+0x3d0>)
 80108c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c8:	4606      	mov	r6, r0
 80108ca:	460f      	mov	r7, r1
 80108cc:	4620      	mov	r0, r4
 80108ce:	4629      	mov	r1, r5
 80108d0:	f7ef fe92 	bl	80005f8 <__aeabi_dmul>
 80108d4:	4b57      	ldr	r3, [pc, #348]	; (8010a34 <__ieee754_pow+0x3f4>)
 80108d6:	4682      	mov	sl, r0
 80108d8:	468b      	mov	fp, r1
 80108da:	2200      	movs	r2, #0
 80108dc:	4620      	mov	r0, r4
 80108de:	4629      	mov	r1, r5
 80108e0:	f7ef fe8a 	bl	80005f8 <__aeabi_dmul>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	a14b      	add	r1, pc, #300	; (adr r1, 8010a18 <__ieee754_pow+0x3d8>)
 80108ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ee:	f7ef fccb 	bl	8000288 <__aeabi_dsub>
 80108f2:	4622      	mov	r2, r4
 80108f4:	462b      	mov	r3, r5
 80108f6:	f7ef fe7f 	bl	80005f8 <__aeabi_dmul>
 80108fa:	4602      	mov	r2, r0
 80108fc:	460b      	mov	r3, r1
 80108fe:	2000      	movs	r0, #0
 8010900:	494d      	ldr	r1, [pc, #308]	; (8010a38 <__ieee754_pow+0x3f8>)
 8010902:	f7ef fcc1 	bl	8000288 <__aeabi_dsub>
 8010906:	4622      	mov	r2, r4
 8010908:	4680      	mov	r8, r0
 801090a:	4689      	mov	r9, r1
 801090c:	462b      	mov	r3, r5
 801090e:	4620      	mov	r0, r4
 8010910:	4629      	mov	r1, r5
 8010912:	f7ef fe71 	bl	80005f8 <__aeabi_dmul>
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	4640      	mov	r0, r8
 801091c:	4649      	mov	r1, r9
 801091e:	f7ef fe6b 	bl	80005f8 <__aeabi_dmul>
 8010922:	a33f      	add	r3, pc, #252	; (adr r3, 8010a20 <__ieee754_pow+0x3e0>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7ef fe66 	bl	80005f8 <__aeabi_dmul>
 801092c:	4602      	mov	r2, r0
 801092e:	460b      	mov	r3, r1
 8010930:	4650      	mov	r0, sl
 8010932:	4659      	mov	r1, fp
 8010934:	f7ef fca8 	bl	8000288 <__aeabi_dsub>
 8010938:	4602      	mov	r2, r0
 801093a:	460b      	mov	r3, r1
 801093c:	4680      	mov	r8, r0
 801093e:	4689      	mov	r9, r1
 8010940:	4630      	mov	r0, r6
 8010942:	4639      	mov	r1, r7
 8010944:	f7ef fca2 	bl	800028c <__adddf3>
 8010948:	2000      	movs	r0, #0
 801094a:	4632      	mov	r2, r6
 801094c:	463b      	mov	r3, r7
 801094e:	4604      	mov	r4, r0
 8010950:	460d      	mov	r5, r1
 8010952:	f7ef fc99 	bl	8000288 <__aeabi_dsub>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4640      	mov	r0, r8
 801095c:	4649      	mov	r1, r9
 801095e:	f7ef fc93 	bl	8000288 <__aeabi_dsub>
 8010962:	9b04      	ldr	r3, [sp, #16]
 8010964:	9a06      	ldr	r2, [sp, #24]
 8010966:	3b01      	subs	r3, #1
 8010968:	4313      	orrs	r3, r2
 801096a:	4682      	mov	sl, r0
 801096c:	468b      	mov	fp, r1
 801096e:	f040 81e7 	bne.w	8010d40 <__ieee754_pow+0x700>
 8010972:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010a28 <__ieee754_pow+0x3e8>
 8010976:	eeb0 8a47 	vmov.f32	s16, s14
 801097a:	eef0 8a67 	vmov.f32	s17, s15
 801097e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010982:	2600      	movs	r6, #0
 8010984:	4632      	mov	r2, r6
 8010986:	463b      	mov	r3, r7
 8010988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801098c:	f7ef fc7c 	bl	8000288 <__aeabi_dsub>
 8010990:	4622      	mov	r2, r4
 8010992:	462b      	mov	r3, r5
 8010994:	f7ef fe30 	bl	80005f8 <__aeabi_dmul>
 8010998:	e9dd 2300 	ldrd	r2, r3, [sp]
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	4650      	mov	r0, sl
 80109a2:	4659      	mov	r1, fp
 80109a4:	f7ef fe28 	bl	80005f8 <__aeabi_dmul>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4640      	mov	r0, r8
 80109ae:	4649      	mov	r1, r9
 80109b0:	f7ef fc6c 	bl	800028c <__adddf3>
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	4680      	mov	r8, r0
 80109ba:	4689      	mov	r9, r1
 80109bc:	4620      	mov	r0, r4
 80109be:	4629      	mov	r1, r5
 80109c0:	f7ef fe1a 	bl	80005f8 <__aeabi_dmul>
 80109c4:	460b      	mov	r3, r1
 80109c6:	4604      	mov	r4, r0
 80109c8:	460d      	mov	r5, r1
 80109ca:	4602      	mov	r2, r0
 80109cc:	4649      	mov	r1, r9
 80109ce:	4640      	mov	r0, r8
 80109d0:	f7ef fc5c 	bl	800028c <__adddf3>
 80109d4:	4b19      	ldr	r3, [pc, #100]	; (8010a3c <__ieee754_pow+0x3fc>)
 80109d6:	4299      	cmp	r1, r3
 80109d8:	ec45 4b19 	vmov	d9, r4, r5
 80109dc:	4606      	mov	r6, r0
 80109de:	460f      	mov	r7, r1
 80109e0:	468b      	mov	fp, r1
 80109e2:	f340 82f0 	ble.w	8010fc6 <__ieee754_pow+0x986>
 80109e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80109ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80109ee:	4303      	orrs	r3, r0
 80109f0:	f000 81e4 	beq.w	8010dbc <__ieee754_pow+0x77c>
 80109f4:	ec51 0b18 	vmov	r0, r1, d8
 80109f8:	2200      	movs	r2, #0
 80109fa:	2300      	movs	r3, #0
 80109fc:	f7f0 f86e 	bl	8000adc <__aeabi_dcmplt>
 8010a00:	3800      	subs	r0, #0
 8010a02:	bf18      	it	ne
 8010a04:	2001      	movne	r0, #1
 8010a06:	e72b      	b.n	8010860 <__ieee754_pow+0x220>
 8010a08:	60000000 	.word	0x60000000
 8010a0c:	3ff71547 	.word	0x3ff71547
 8010a10:	f85ddf44 	.word	0xf85ddf44
 8010a14:	3e54ae0b 	.word	0x3e54ae0b
 8010a18:	55555555 	.word	0x55555555
 8010a1c:	3fd55555 	.word	0x3fd55555
 8010a20:	652b82fe 	.word	0x652b82fe
 8010a24:	3ff71547 	.word	0x3ff71547
 8010a28:	00000000 	.word	0x00000000
 8010a2c:	bff00000 	.word	0xbff00000
 8010a30:	3ff00000 	.word	0x3ff00000
 8010a34:	3fd00000 	.word	0x3fd00000
 8010a38:	3fe00000 	.word	0x3fe00000
 8010a3c:	408fffff 	.word	0x408fffff
 8010a40:	4bd5      	ldr	r3, [pc, #852]	; (8010d98 <__ieee754_pow+0x758>)
 8010a42:	402b      	ands	r3, r5
 8010a44:	2200      	movs	r2, #0
 8010a46:	b92b      	cbnz	r3, 8010a54 <__ieee754_pow+0x414>
 8010a48:	4bd4      	ldr	r3, [pc, #848]	; (8010d9c <__ieee754_pow+0x75c>)
 8010a4a:	f7ef fdd5 	bl	80005f8 <__aeabi_dmul>
 8010a4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010a52:	460c      	mov	r4, r1
 8010a54:	1523      	asrs	r3, r4, #20
 8010a56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a5a:	4413      	add	r3, r2
 8010a5c:	9305      	str	r3, [sp, #20]
 8010a5e:	4bd0      	ldr	r3, [pc, #832]	; (8010da0 <__ieee754_pow+0x760>)
 8010a60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010a64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010a68:	429c      	cmp	r4, r3
 8010a6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010a6e:	dd08      	ble.n	8010a82 <__ieee754_pow+0x442>
 8010a70:	4bcc      	ldr	r3, [pc, #816]	; (8010da4 <__ieee754_pow+0x764>)
 8010a72:	429c      	cmp	r4, r3
 8010a74:	f340 8162 	ble.w	8010d3c <__ieee754_pow+0x6fc>
 8010a78:	9b05      	ldr	r3, [sp, #20]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	9305      	str	r3, [sp, #20]
 8010a7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010a82:	2400      	movs	r4, #0
 8010a84:	00e3      	lsls	r3, r4, #3
 8010a86:	9307      	str	r3, [sp, #28]
 8010a88:	4bc7      	ldr	r3, [pc, #796]	; (8010da8 <__ieee754_pow+0x768>)
 8010a8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a8e:	ed93 7b00 	vldr	d7, [r3]
 8010a92:	4629      	mov	r1, r5
 8010a94:	ec53 2b17 	vmov	r2, r3, d7
 8010a98:	eeb0 9a47 	vmov.f32	s18, s14
 8010a9c:	eef0 9a67 	vmov.f32	s19, s15
 8010aa0:	4682      	mov	sl, r0
 8010aa2:	f7ef fbf1 	bl	8000288 <__aeabi_dsub>
 8010aa6:	4652      	mov	r2, sl
 8010aa8:	4606      	mov	r6, r0
 8010aaa:	460f      	mov	r7, r1
 8010aac:	462b      	mov	r3, r5
 8010aae:	ec51 0b19 	vmov	r0, r1, d9
 8010ab2:	f7ef fbeb 	bl	800028c <__adddf3>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	460b      	mov	r3, r1
 8010aba:	2000      	movs	r0, #0
 8010abc:	49bb      	ldr	r1, [pc, #748]	; (8010dac <__ieee754_pow+0x76c>)
 8010abe:	f7ef fec5 	bl	800084c <__aeabi_ddiv>
 8010ac2:	ec41 0b1a 	vmov	d10, r0, r1
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	4630      	mov	r0, r6
 8010acc:	4639      	mov	r1, r7
 8010ace:	f7ef fd93 	bl	80005f8 <__aeabi_dmul>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ad8:	9302      	str	r3, [sp, #8]
 8010ada:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010ade:	46ab      	mov	fp, r5
 8010ae0:	106d      	asrs	r5, r5, #1
 8010ae2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010ae6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010aea:	ec41 0b18 	vmov	d8, r0, r1
 8010aee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010af2:	2200      	movs	r2, #0
 8010af4:	4640      	mov	r0, r8
 8010af6:	4649      	mov	r1, r9
 8010af8:	4614      	mov	r4, r2
 8010afa:	461d      	mov	r5, r3
 8010afc:	f7ef fd7c 	bl	80005f8 <__aeabi_dmul>
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	4630      	mov	r0, r6
 8010b06:	4639      	mov	r1, r7
 8010b08:	f7ef fbbe 	bl	8000288 <__aeabi_dsub>
 8010b0c:	ec53 2b19 	vmov	r2, r3, d9
 8010b10:	4606      	mov	r6, r0
 8010b12:	460f      	mov	r7, r1
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	f7ef fbb6 	bl	8000288 <__aeabi_dsub>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	4650      	mov	r0, sl
 8010b22:	4659      	mov	r1, fp
 8010b24:	f7ef fbb0 	bl	8000288 <__aeabi_dsub>
 8010b28:	4642      	mov	r2, r8
 8010b2a:	464b      	mov	r3, r9
 8010b2c:	f7ef fd64 	bl	80005f8 <__aeabi_dmul>
 8010b30:	4602      	mov	r2, r0
 8010b32:	460b      	mov	r3, r1
 8010b34:	4630      	mov	r0, r6
 8010b36:	4639      	mov	r1, r7
 8010b38:	f7ef fba6 	bl	8000288 <__aeabi_dsub>
 8010b3c:	ec53 2b1a 	vmov	r2, r3, d10
 8010b40:	f7ef fd5a 	bl	80005f8 <__aeabi_dmul>
 8010b44:	ec53 2b18 	vmov	r2, r3, d8
 8010b48:	ec41 0b19 	vmov	d9, r0, r1
 8010b4c:	ec51 0b18 	vmov	r0, r1, d8
 8010b50:	f7ef fd52 	bl	80005f8 <__aeabi_dmul>
 8010b54:	a37c      	add	r3, pc, #496	; (adr r3, 8010d48 <__ieee754_pow+0x708>)
 8010b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	460d      	mov	r5, r1
 8010b5e:	f7ef fd4b 	bl	80005f8 <__aeabi_dmul>
 8010b62:	a37b      	add	r3, pc, #492	; (adr r3, 8010d50 <__ieee754_pow+0x710>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	f7ef fb90 	bl	800028c <__adddf3>
 8010b6c:	4622      	mov	r2, r4
 8010b6e:	462b      	mov	r3, r5
 8010b70:	f7ef fd42 	bl	80005f8 <__aeabi_dmul>
 8010b74:	a378      	add	r3, pc, #480	; (adr r3, 8010d58 <__ieee754_pow+0x718>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fb87 	bl	800028c <__adddf3>
 8010b7e:	4622      	mov	r2, r4
 8010b80:	462b      	mov	r3, r5
 8010b82:	f7ef fd39 	bl	80005f8 <__aeabi_dmul>
 8010b86:	a376      	add	r3, pc, #472	; (adr r3, 8010d60 <__ieee754_pow+0x720>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7ef fb7e 	bl	800028c <__adddf3>
 8010b90:	4622      	mov	r2, r4
 8010b92:	462b      	mov	r3, r5
 8010b94:	f7ef fd30 	bl	80005f8 <__aeabi_dmul>
 8010b98:	a373      	add	r3, pc, #460	; (adr r3, 8010d68 <__ieee754_pow+0x728>)
 8010b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9e:	f7ef fb75 	bl	800028c <__adddf3>
 8010ba2:	4622      	mov	r2, r4
 8010ba4:	462b      	mov	r3, r5
 8010ba6:	f7ef fd27 	bl	80005f8 <__aeabi_dmul>
 8010baa:	a371      	add	r3, pc, #452	; (adr r3, 8010d70 <__ieee754_pow+0x730>)
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	f7ef fb6c 	bl	800028c <__adddf3>
 8010bb4:	4622      	mov	r2, r4
 8010bb6:	4606      	mov	r6, r0
 8010bb8:	460f      	mov	r7, r1
 8010bba:	462b      	mov	r3, r5
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	4629      	mov	r1, r5
 8010bc0:	f7ef fd1a 	bl	80005f8 <__aeabi_dmul>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	4630      	mov	r0, r6
 8010bca:	4639      	mov	r1, r7
 8010bcc:	f7ef fd14 	bl	80005f8 <__aeabi_dmul>
 8010bd0:	4642      	mov	r2, r8
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	460d      	mov	r5, r1
 8010bd6:	464b      	mov	r3, r9
 8010bd8:	ec51 0b18 	vmov	r0, r1, d8
 8010bdc:	f7ef fb56 	bl	800028c <__adddf3>
 8010be0:	ec53 2b19 	vmov	r2, r3, d9
 8010be4:	f7ef fd08 	bl	80005f8 <__aeabi_dmul>
 8010be8:	4622      	mov	r2, r4
 8010bea:	462b      	mov	r3, r5
 8010bec:	f7ef fb4e 	bl	800028c <__adddf3>
 8010bf0:	4642      	mov	r2, r8
 8010bf2:	4682      	mov	sl, r0
 8010bf4:	468b      	mov	fp, r1
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	f7ef fcfc 	bl	80005f8 <__aeabi_dmul>
 8010c00:	4b6b      	ldr	r3, [pc, #428]	; (8010db0 <__ieee754_pow+0x770>)
 8010c02:	2200      	movs	r2, #0
 8010c04:	4606      	mov	r6, r0
 8010c06:	460f      	mov	r7, r1
 8010c08:	f7ef fb40 	bl	800028c <__adddf3>
 8010c0c:	4652      	mov	r2, sl
 8010c0e:	465b      	mov	r3, fp
 8010c10:	f7ef fb3c 	bl	800028c <__adddf3>
 8010c14:	2000      	movs	r0, #0
 8010c16:	4604      	mov	r4, r0
 8010c18:	460d      	mov	r5, r1
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	4640      	mov	r0, r8
 8010c20:	4649      	mov	r1, r9
 8010c22:	f7ef fce9 	bl	80005f8 <__aeabi_dmul>
 8010c26:	4b62      	ldr	r3, [pc, #392]	; (8010db0 <__ieee754_pow+0x770>)
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4620      	mov	r0, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	f7ef fb29 	bl	8000288 <__aeabi_dsub>
 8010c36:	4632      	mov	r2, r6
 8010c38:	463b      	mov	r3, r7
 8010c3a:	f7ef fb25 	bl	8000288 <__aeabi_dsub>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	460b      	mov	r3, r1
 8010c42:	4650      	mov	r0, sl
 8010c44:	4659      	mov	r1, fp
 8010c46:	f7ef fb1f 	bl	8000288 <__aeabi_dsub>
 8010c4a:	ec53 2b18 	vmov	r2, r3, d8
 8010c4e:	f7ef fcd3 	bl	80005f8 <__aeabi_dmul>
 8010c52:	4622      	mov	r2, r4
 8010c54:	4606      	mov	r6, r0
 8010c56:	460f      	mov	r7, r1
 8010c58:	462b      	mov	r3, r5
 8010c5a:	ec51 0b19 	vmov	r0, r1, d9
 8010c5e:	f7ef fccb 	bl	80005f8 <__aeabi_dmul>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4630      	mov	r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ef fb0f 	bl	800028c <__adddf3>
 8010c6e:	4606      	mov	r6, r0
 8010c70:	460f      	mov	r7, r1
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	4640      	mov	r0, r8
 8010c78:	4649      	mov	r1, r9
 8010c7a:	f7ef fb07 	bl	800028c <__adddf3>
 8010c7e:	a33e      	add	r3, pc, #248	; (adr r3, 8010d78 <__ieee754_pow+0x738>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	2000      	movs	r0, #0
 8010c86:	4604      	mov	r4, r0
 8010c88:	460d      	mov	r5, r1
 8010c8a:	f7ef fcb5 	bl	80005f8 <__aeabi_dmul>
 8010c8e:	4642      	mov	r2, r8
 8010c90:	ec41 0b18 	vmov	d8, r0, r1
 8010c94:	464b      	mov	r3, r9
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef faf5 	bl	8000288 <__aeabi_dsub>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	4639      	mov	r1, r7
 8010ca6:	f7ef faef 	bl	8000288 <__aeabi_dsub>
 8010caa:	a335      	add	r3, pc, #212	; (adr r3, 8010d80 <__ieee754_pow+0x740>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	f7ef fca2 	bl	80005f8 <__aeabi_dmul>
 8010cb4:	a334      	add	r3, pc, #208	; (adr r3, 8010d88 <__ieee754_pow+0x748>)
 8010cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460f      	mov	r7, r1
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	f7ef fc99 	bl	80005f8 <__aeabi_dmul>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	460b      	mov	r3, r1
 8010cca:	4630      	mov	r0, r6
 8010ccc:	4639      	mov	r1, r7
 8010cce:	f7ef fadd 	bl	800028c <__adddf3>
 8010cd2:	9a07      	ldr	r2, [sp, #28]
 8010cd4:	4b37      	ldr	r3, [pc, #220]	; (8010db4 <__ieee754_pow+0x774>)
 8010cd6:	4413      	add	r3, r2
 8010cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cdc:	f7ef fad6 	bl	800028c <__adddf3>
 8010ce0:	4682      	mov	sl, r0
 8010ce2:	9805      	ldr	r0, [sp, #20]
 8010ce4:	468b      	mov	fp, r1
 8010ce6:	f7ef fc1d 	bl	8000524 <__aeabi_i2d>
 8010cea:	9a07      	ldr	r2, [sp, #28]
 8010cec:	4b32      	ldr	r3, [pc, #200]	; (8010db8 <__ieee754_pow+0x778>)
 8010cee:	4413      	add	r3, r2
 8010cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	460f      	mov	r7, r1
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	465b      	mov	r3, fp
 8010cfc:	ec51 0b18 	vmov	r0, r1, d8
 8010d00:	f7ef fac4 	bl	800028c <__adddf3>
 8010d04:	4642      	mov	r2, r8
 8010d06:	464b      	mov	r3, r9
 8010d08:	f7ef fac0 	bl	800028c <__adddf3>
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	463b      	mov	r3, r7
 8010d10:	f7ef fabc 	bl	800028c <__adddf3>
 8010d14:	2000      	movs	r0, #0
 8010d16:	4632      	mov	r2, r6
 8010d18:	463b      	mov	r3, r7
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	f7ef fab3 	bl	8000288 <__aeabi_dsub>
 8010d22:	4642      	mov	r2, r8
 8010d24:	464b      	mov	r3, r9
 8010d26:	f7ef faaf 	bl	8000288 <__aeabi_dsub>
 8010d2a:	ec53 2b18 	vmov	r2, r3, d8
 8010d2e:	f7ef faab 	bl	8000288 <__aeabi_dsub>
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	4650      	mov	r0, sl
 8010d38:	4659      	mov	r1, fp
 8010d3a:	e610      	b.n	801095e <__ieee754_pow+0x31e>
 8010d3c:	2401      	movs	r4, #1
 8010d3e:	e6a1      	b.n	8010a84 <__ieee754_pow+0x444>
 8010d40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010d90 <__ieee754_pow+0x750>
 8010d44:	e617      	b.n	8010976 <__ieee754_pow+0x336>
 8010d46:	bf00      	nop
 8010d48:	4a454eef 	.word	0x4a454eef
 8010d4c:	3fca7e28 	.word	0x3fca7e28
 8010d50:	93c9db65 	.word	0x93c9db65
 8010d54:	3fcd864a 	.word	0x3fcd864a
 8010d58:	a91d4101 	.word	0xa91d4101
 8010d5c:	3fd17460 	.word	0x3fd17460
 8010d60:	518f264d 	.word	0x518f264d
 8010d64:	3fd55555 	.word	0x3fd55555
 8010d68:	db6fabff 	.word	0xdb6fabff
 8010d6c:	3fdb6db6 	.word	0x3fdb6db6
 8010d70:	33333303 	.word	0x33333303
 8010d74:	3fe33333 	.word	0x3fe33333
 8010d78:	e0000000 	.word	0xe0000000
 8010d7c:	3feec709 	.word	0x3feec709
 8010d80:	dc3a03fd 	.word	0xdc3a03fd
 8010d84:	3feec709 	.word	0x3feec709
 8010d88:	145b01f5 	.word	0x145b01f5
 8010d8c:	be3e2fe0 	.word	0xbe3e2fe0
 8010d90:	00000000 	.word	0x00000000
 8010d94:	3ff00000 	.word	0x3ff00000
 8010d98:	7ff00000 	.word	0x7ff00000
 8010d9c:	43400000 	.word	0x43400000
 8010da0:	0003988e 	.word	0x0003988e
 8010da4:	000bb679 	.word	0x000bb679
 8010da8:	08012488 	.word	0x08012488
 8010dac:	3ff00000 	.word	0x3ff00000
 8010db0:	40080000 	.word	0x40080000
 8010db4:	080124a8 	.word	0x080124a8
 8010db8:	08012498 	.word	0x08012498
 8010dbc:	a3b3      	add	r3, pc, #716	; (adr r3, 801108c <__ieee754_pow+0xa4c>)
 8010dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	f7ef fa61 	bl	800028c <__adddf3>
 8010dca:	4622      	mov	r2, r4
 8010dcc:	ec41 0b1a 	vmov	d10, r0, r1
 8010dd0:	462b      	mov	r3, r5
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	f7ef fa57 	bl	8000288 <__aeabi_dsub>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	ec51 0b1a 	vmov	r0, r1, d10
 8010de2:	f7ef fe99 	bl	8000b18 <__aeabi_dcmpgt>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	f47f ae04 	bne.w	80109f4 <__ieee754_pow+0x3b4>
 8010dec:	4aa2      	ldr	r2, [pc, #648]	; (8011078 <__ieee754_pow+0xa38>)
 8010dee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010df2:	4293      	cmp	r3, r2
 8010df4:	f340 8107 	ble.w	8011006 <__ieee754_pow+0x9c6>
 8010df8:	151b      	asrs	r3, r3, #20
 8010dfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010dfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010e02:	fa4a fa03 	asr.w	sl, sl, r3
 8010e06:	44da      	add	sl, fp
 8010e08:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010e0c:	489b      	ldr	r0, [pc, #620]	; (801107c <__ieee754_pow+0xa3c>)
 8010e0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010e12:	4108      	asrs	r0, r1
 8010e14:	ea00 030a 	and.w	r3, r0, sl
 8010e18:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010e1c:	f1c1 0114 	rsb	r1, r1, #20
 8010e20:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010e24:	fa4a fa01 	asr.w	sl, sl, r1
 8010e28:	f1bb 0f00 	cmp.w	fp, #0
 8010e2c:	f04f 0200 	mov.w	r2, #0
 8010e30:	4620      	mov	r0, r4
 8010e32:	4629      	mov	r1, r5
 8010e34:	bfb8      	it	lt
 8010e36:	f1ca 0a00 	rsblt	sl, sl, #0
 8010e3a:	f7ef fa25 	bl	8000288 <__aeabi_dsub>
 8010e3e:	ec41 0b19 	vmov	d9, r0, r1
 8010e42:	4642      	mov	r2, r8
 8010e44:	464b      	mov	r3, r9
 8010e46:	ec51 0b19 	vmov	r0, r1, d9
 8010e4a:	f7ef fa1f 	bl	800028c <__adddf3>
 8010e4e:	a37a      	add	r3, pc, #488	; (adr r3, 8011038 <__ieee754_pow+0x9f8>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	2000      	movs	r0, #0
 8010e56:	4604      	mov	r4, r0
 8010e58:	460d      	mov	r5, r1
 8010e5a:	f7ef fbcd 	bl	80005f8 <__aeabi_dmul>
 8010e5e:	ec53 2b19 	vmov	r2, r3, d9
 8010e62:	4606      	mov	r6, r0
 8010e64:	460f      	mov	r7, r1
 8010e66:	4620      	mov	r0, r4
 8010e68:	4629      	mov	r1, r5
 8010e6a:	f7ef fa0d 	bl	8000288 <__aeabi_dsub>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	4640      	mov	r0, r8
 8010e74:	4649      	mov	r1, r9
 8010e76:	f7ef fa07 	bl	8000288 <__aeabi_dsub>
 8010e7a:	a371      	add	r3, pc, #452	; (adr r3, 8011040 <__ieee754_pow+0xa00>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	f7ef fbba 	bl	80005f8 <__aeabi_dmul>
 8010e84:	a370      	add	r3, pc, #448	; (adr r3, 8011048 <__ieee754_pow+0xa08>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	4680      	mov	r8, r0
 8010e8c:	4689      	mov	r9, r1
 8010e8e:	4620      	mov	r0, r4
 8010e90:	4629      	mov	r1, r5
 8010e92:	f7ef fbb1 	bl	80005f8 <__aeabi_dmul>
 8010e96:	4602      	mov	r2, r0
 8010e98:	460b      	mov	r3, r1
 8010e9a:	4640      	mov	r0, r8
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	f7ef f9f5 	bl	800028c <__adddf3>
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4630      	mov	r0, r6
 8010eac:	4639      	mov	r1, r7
 8010eae:	f7ef f9ed 	bl	800028c <__adddf3>
 8010eb2:	4632      	mov	r2, r6
 8010eb4:	463b      	mov	r3, r7
 8010eb6:	4680      	mov	r8, r0
 8010eb8:	4689      	mov	r9, r1
 8010eba:	f7ef f9e5 	bl	8000288 <__aeabi_dsub>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	f7ef f9df 	bl	8000288 <__aeabi_dsub>
 8010eca:	4642      	mov	r2, r8
 8010ecc:	4606      	mov	r6, r0
 8010ece:	460f      	mov	r7, r1
 8010ed0:	464b      	mov	r3, r9
 8010ed2:	4640      	mov	r0, r8
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	f7ef fb8f 	bl	80005f8 <__aeabi_dmul>
 8010eda:	a35d      	add	r3, pc, #372	; (adr r3, 8011050 <__ieee754_pow+0xa10>)
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	460d      	mov	r5, r1
 8010ee4:	f7ef fb88 	bl	80005f8 <__aeabi_dmul>
 8010ee8:	a35b      	add	r3, pc, #364	; (adr r3, 8011058 <__ieee754_pow+0xa18>)
 8010eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eee:	f7ef f9cb 	bl	8000288 <__aeabi_dsub>
 8010ef2:	4622      	mov	r2, r4
 8010ef4:	462b      	mov	r3, r5
 8010ef6:	f7ef fb7f 	bl	80005f8 <__aeabi_dmul>
 8010efa:	a359      	add	r3, pc, #356	; (adr r3, 8011060 <__ieee754_pow+0xa20>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f7ef f9c4 	bl	800028c <__adddf3>
 8010f04:	4622      	mov	r2, r4
 8010f06:	462b      	mov	r3, r5
 8010f08:	f7ef fb76 	bl	80005f8 <__aeabi_dmul>
 8010f0c:	a356      	add	r3, pc, #344	; (adr r3, 8011068 <__ieee754_pow+0xa28>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	f7ef f9b9 	bl	8000288 <__aeabi_dsub>
 8010f16:	4622      	mov	r2, r4
 8010f18:	462b      	mov	r3, r5
 8010f1a:	f7ef fb6d 	bl	80005f8 <__aeabi_dmul>
 8010f1e:	a354      	add	r3, pc, #336	; (adr r3, 8011070 <__ieee754_pow+0xa30>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	f7ef f9b2 	bl	800028c <__adddf3>
 8010f28:	4622      	mov	r2, r4
 8010f2a:	462b      	mov	r3, r5
 8010f2c:	f7ef fb64 	bl	80005f8 <__aeabi_dmul>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	4640      	mov	r0, r8
 8010f36:	4649      	mov	r1, r9
 8010f38:	f7ef f9a6 	bl	8000288 <__aeabi_dsub>
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	460d      	mov	r5, r1
 8010f40:	4602      	mov	r2, r0
 8010f42:	460b      	mov	r3, r1
 8010f44:	4640      	mov	r0, r8
 8010f46:	4649      	mov	r1, r9
 8010f48:	f7ef fb56 	bl	80005f8 <__aeabi_dmul>
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	ec41 0b19 	vmov	d9, r0, r1
 8010f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010f56:	4620      	mov	r0, r4
 8010f58:	4629      	mov	r1, r5
 8010f5a:	f7ef f995 	bl	8000288 <__aeabi_dsub>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	ec51 0b19 	vmov	r0, r1, d9
 8010f66:	f7ef fc71 	bl	800084c <__aeabi_ddiv>
 8010f6a:	4632      	mov	r2, r6
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	460d      	mov	r5, r1
 8010f70:	463b      	mov	r3, r7
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef fb3f 	bl	80005f8 <__aeabi_dmul>
 8010f7a:	4632      	mov	r2, r6
 8010f7c:	463b      	mov	r3, r7
 8010f7e:	f7ef f985 	bl	800028c <__adddf3>
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	4620      	mov	r0, r4
 8010f88:	4629      	mov	r1, r5
 8010f8a:	f7ef f97d 	bl	8000288 <__aeabi_dsub>
 8010f8e:	4642      	mov	r2, r8
 8010f90:	464b      	mov	r3, r9
 8010f92:	f7ef f979 	bl	8000288 <__aeabi_dsub>
 8010f96:	460b      	mov	r3, r1
 8010f98:	4602      	mov	r2, r0
 8010f9a:	4939      	ldr	r1, [pc, #228]	; (8011080 <__ieee754_pow+0xa40>)
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	f7ef f973 	bl	8000288 <__aeabi_dsub>
 8010fa2:	ec41 0b10 	vmov	d0, r0, r1
 8010fa6:	ee10 3a90 	vmov	r3, s1
 8010faa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010fb2:	da2b      	bge.n	801100c <__ieee754_pow+0x9cc>
 8010fb4:	4650      	mov	r0, sl
 8010fb6:	f000 f877 	bl	80110a8 <scalbn>
 8010fba:	ec51 0b10 	vmov	r0, r1, d0
 8010fbe:	ec53 2b18 	vmov	r2, r3, d8
 8010fc2:	f7ff bbee 	b.w	80107a2 <__ieee754_pow+0x162>
 8010fc6:	4b2f      	ldr	r3, [pc, #188]	; (8011084 <__ieee754_pow+0xa44>)
 8010fc8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010fcc:	429e      	cmp	r6, r3
 8010fce:	f77f af0d 	ble.w	8010dec <__ieee754_pow+0x7ac>
 8010fd2:	4b2d      	ldr	r3, [pc, #180]	; (8011088 <__ieee754_pow+0xa48>)
 8010fd4:	440b      	add	r3, r1
 8010fd6:	4303      	orrs	r3, r0
 8010fd8:	d009      	beq.n	8010fee <__ieee754_pow+0x9ae>
 8010fda:	ec51 0b18 	vmov	r0, r1, d8
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f7ef fd7b 	bl	8000adc <__aeabi_dcmplt>
 8010fe6:	3800      	subs	r0, #0
 8010fe8:	bf18      	it	ne
 8010fea:	2001      	movne	r0, #1
 8010fec:	e448      	b.n	8010880 <__ieee754_pow+0x240>
 8010fee:	4622      	mov	r2, r4
 8010ff0:	462b      	mov	r3, r5
 8010ff2:	f7ef f949 	bl	8000288 <__aeabi_dsub>
 8010ff6:	4642      	mov	r2, r8
 8010ff8:	464b      	mov	r3, r9
 8010ffa:	f7ef fd83 	bl	8000b04 <__aeabi_dcmpge>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	f43f aef4 	beq.w	8010dec <__ieee754_pow+0x7ac>
 8011004:	e7e9      	b.n	8010fda <__ieee754_pow+0x99a>
 8011006:	f04f 0a00 	mov.w	sl, #0
 801100a:	e71a      	b.n	8010e42 <__ieee754_pow+0x802>
 801100c:	ec51 0b10 	vmov	r0, r1, d0
 8011010:	4619      	mov	r1, r3
 8011012:	e7d4      	b.n	8010fbe <__ieee754_pow+0x97e>
 8011014:	491a      	ldr	r1, [pc, #104]	; (8011080 <__ieee754_pow+0xa40>)
 8011016:	2000      	movs	r0, #0
 8011018:	f7ff bb31 	b.w	801067e <__ieee754_pow+0x3e>
 801101c:	2000      	movs	r0, #0
 801101e:	2100      	movs	r1, #0
 8011020:	f7ff bb2d 	b.w	801067e <__ieee754_pow+0x3e>
 8011024:	4630      	mov	r0, r6
 8011026:	4639      	mov	r1, r7
 8011028:	f7ff bb29 	b.w	801067e <__ieee754_pow+0x3e>
 801102c:	9204      	str	r2, [sp, #16]
 801102e:	f7ff bb7b 	b.w	8010728 <__ieee754_pow+0xe8>
 8011032:	2300      	movs	r3, #0
 8011034:	f7ff bb65 	b.w	8010702 <__ieee754_pow+0xc2>
 8011038:	00000000 	.word	0x00000000
 801103c:	3fe62e43 	.word	0x3fe62e43
 8011040:	fefa39ef 	.word	0xfefa39ef
 8011044:	3fe62e42 	.word	0x3fe62e42
 8011048:	0ca86c39 	.word	0x0ca86c39
 801104c:	be205c61 	.word	0xbe205c61
 8011050:	72bea4d0 	.word	0x72bea4d0
 8011054:	3e663769 	.word	0x3e663769
 8011058:	c5d26bf1 	.word	0xc5d26bf1
 801105c:	3ebbbd41 	.word	0x3ebbbd41
 8011060:	af25de2c 	.word	0xaf25de2c
 8011064:	3f11566a 	.word	0x3f11566a
 8011068:	16bebd93 	.word	0x16bebd93
 801106c:	3f66c16c 	.word	0x3f66c16c
 8011070:	5555553e 	.word	0x5555553e
 8011074:	3fc55555 	.word	0x3fc55555
 8011078:	3fe00000 	.word	0x3fe00000
 801107c:	fff00000 	.word	0xfff00000
 8011080:	3ff00000 	.word	0x3ff00000
 8011084:	4090cbff 	.word	0x4090cbff
 8011088:	3f6f3400 	.word	0x3f6f3400
 801108c:	652b82fe 	.word	0x652b82fe
 8011090:	3c971547 	.word	0x3c971547

08011094 <fabs>:
 8011094:	ec51 0b10 	vmov	r0, r1, d0
 8011098:	ee10 2a10 	vmov	r2, s0
 801109c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110a0:	ec43 2b10 	vmov	d0, r2, r3
 80110a4:	4770      	bx	lr
	...

080110a8 <scalbn>:
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	ec55 4b10 	vmov	r4, r5, d0
 80110ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80110b2:	4606      	mov	r6, r0
 80110b4:	462b      	mov	r3, r5
 80110b6:	b999      	cbnz	r1, 80110e0 <scalbn+0x38>
 80110b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80110bc:	4323      	orrs	r3, r4
 80110be:	d03f      	beq.n	8011140 <scalbn+0x98>
 80110c0:	4b35      	ldr	r3, [pc, #212]	; (8011198 <scalbn+0xf0>)
 80110c2:	4629      	mov	r1, r5
 80110c4:	ee10 0a10 	vmov	r0, s0
 80110c8:	2200      	movs	r2, #0
 80110ca:	f7ef fa95 	bl	80005f8 <__aeabi_dmul>
 80110ce:	4b33      	ldr	r3, [pc, #204]	; (801119c <scalbn+0xf4>)
 80110d0:	429e      	cmp	r6, r3
 80110d2:	4604      	mov	r4, r0
 80110d4:	460d      	mov	r5, r1
 80110d6:	da10      	bge.n	80110fa <scalbn+0x52>
 80110d8:	a327      	add	r3, pc, #156	; (adr r3, 8011178 <scalbn+0xd0>)
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	e01f      	b.n	8011120 <scalbn+0x78>
 80110e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80110e4:	4291      	cmp	r1, r2
 80110e6:	d10c      	bne.n	8011102 <scalbn+0x5a>
 80110e8:	ee10 2a10 	vmov	r2, s0
 80110ec:	4620      	mov	r0, r4
 80110ee:	4629      	mov	r1, r5
 80110f0:	f7ef f8cc 	bl	800028c <__adddf3>
 80110f4:	4604      	mov	r4, r0
 80110f6:	460d      	mov	r5, r1
 80110f8:	e022      	b.n	8011140 <scalbn+0x98>
 80110fa:	460b      	mov	r3, r1
 80110fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011100:	3936      	subs	r1, #54	; 0x36
 8011102:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011106:	4296      	cmp	r6, r2
 8011108:	dd0d      	ble.n	8011126 <scalbn+0x7e>
 801110a:	2d00      	cmp	r5, #0
 801110c:	a11c      	add	r1, pc, #112	; (adr r1, 8011180 <scalbn+0xd8>)
 801110e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011112:	da02      	bge.n	801111a <scalbn+0x72>
 8011114:	a11c      	add	r1, pc, #112	; (adr r1, 8011188 <scalbn+0xe0>)
 8011116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801111a:	a319      	add	r3, pc, #100	; (adr r3, 8011180 <scalbn+0xd8>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef fa6a 	bl	80005f8 <__aeabi_dmul>
 8011124:	e7e6      	b.n	80110f4 <scalbn+0x4c>
 8011126:	1872      	adds	r2, r6, r1
 8011128:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801112c:	428a      	cmp	r2, r1
 801112e:	dcec      	bgt.n	801110a <scalbn+0x62>
 8011130:	2a00      	cmp	r2, #0
 8011132:	dd08      	ble.n	8011146 <scalbn+0x9e>
 8011134:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011138:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801113c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011140:	ec45 4b10 	vmov	d0, r4, r5
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801114a:	da08      	bge.n	801115e <scalbn+0xb6>
 801114c:	2d00      	cmp	r5, #0
 801114e:	a10a      	add	r1, pc, #40	; (adr r1, 8011178 <scalbn+0xd0>)
 8011150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011154:	dac0      	bge.n	80110d8 <scalbn+0x30>
 8011156:	a10e      	add	r1, pc, #56	; (adr r1, 8011190 <scalbn+0xe8>)
 8011158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801115c:	e7bc      	b.n	80110d8 <scalbn+0x30>
 801115e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011162:	3236      	adds	r2, #54	; 0x36
 8011164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801116c:	4620      	mov	r0, r4
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <scalbn+0xf8>)
 8011170:	2200      	movs	r2, #0
 8011172:	e7d5      	b.n	8011120 <scalbn+0x78>
 8011174:	f3af 8000 	nop.w
 8011178:	c2f8f359 	.word	0xc2f8f359
 801117c:	01a56e1f 	.word	0x01a56e1f
 8011180:	8800759c 	.word	0x8800759c
 8011184:	7e37e43c 	.word	0x7e37e43c
 8011188:	8800759c 	.word	0x8800759c
 801118c:	fe37e43c 	.word	0xfe37e43c
 8011190:	c2f8f359 	.word	0xc2f8f359
 8011194:	81a56e1f 	.word	0x81a56e1f
 8011198:	43500000 	.word	0x43500000
 801119c:	ffff3cb0 	.word	0xffff3cb0
 80111a0:	3c900000 	.word	0x3c900000

080111a4 <with_errno>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	4604      	mov	r4, r0
 80111a8:	460d      	mov	r5, r1
 80111aa:	4616      	mov	r6, r2
 80111ac:	f7fc ffd0 	bl	800e150 <__errno>
 80111b0:	4629      	mov	r1, r5
 80111b2:	6006      	str	r6, [r0, #0]
 80111b4:	4620      	mov	r0, r4
 80111b6:	bd70      	pop	{r4, r5, r6, pc}

080111b8 <xflow>:
 80111b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ba:	4614      	mov	r4, r2
 80111bc:	461d      	mov	r5, r3
 80111be:	b108      	cbz	r0, 80111c4 <xflow+0xc>
 80111c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80111c4:	e9cd 2300 	strd	r2, r3, [sp]
 80111c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111cc:	4620      	mov	r0, r4
 80111ce:	4629      	mov	r1, r5
 80111d0:	f7ef fa12 	bl	80005f8 <__aeabi_dmul>
 80111d4:	2222      	movs	r2, #34	; 0x22
 80111d6:	b003      	add	sp, #12
 80111d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111dc:	f7ff bfe2 	b.w	80111a4 <with_errno>

080111e0 <__math_uflow>:
 80111e0:	b508      	push	{r3, lr}
 80111e2:	2200      	movs	r2, #0
 80111e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80111e8:	f7ff ffe6 	bl	80111b8 <xflow>
 80111ec:	ec41 0b10 	vmov	d0, r0, r1
 80111f0:	bd08      	pop	{r3, pc}

080111f2 <__math_oflow>:
 80111f2:	b508      	push	{r3, lr}
 80111f4:	2200      	movs	r2, #0
 80111f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80111fa:	f7ff ffdd 	bl	80111b8 <xflow>
 80111fe:	ec41 0b10 	vmov	d0, r0, r1
 8011202:	bd08      	pop	{r3, pc}

08011204 <__ieee754_sqrt>:
 8011204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011208:	ec55 4b10 	vmov	r4, r5, d0
 801120c:	4e67      	ldr	r6, [pc, #412]	; (80113ac <__ieee754_sqrt+0x1a8>)
 801120e:	43ae      	bics	r6, r5
 8011210:	ee10 0a10 	vmov	r0, s0
 8011214:	ee10 2a10 	vmov	r2, s0
 8011218:	4629      	mov	r1, r5
 801121a:	462b      	mov	r3, r5
 801121c:	d10d      	bne.n	801123a <__ieee754_sqrt+0x36>
 801121e:	f7ef f9eb 	bl	80005f8 <__aeabi_dmul>
 8011222:	4602      	mov	r2, r0
 8011224:	460b      	mov	r3, r1
 8011226:	4620      	mov	r0, r4
 8011228:	4629      	mov	r1, r5
 801122a:	f7ef f82f 	bl	800028c <__adddf3>
 801122e:	4604      	mov	r4, r0
 8011230:	460d      	mov	r5, r1
 8011232:	ec45 4b10 	vmov	d0, r4, r5
 8011236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123a:	2d00      	cmp	r5, #0
 801123c:	dc0b      	bgt.n	8011256 <__ieee754_sqrt+0x52>
 801123e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011242:	4326      	orrs	r6, r4
 8011244:	d0f5      	beq.n	8011232 <__ieee754_sqrt+0x2e>
 8011246:	b135      	cbz	r5, 8011256 <__ieee754_sqrt+0x52>
 8011248:	f7ef f81e 	bl	8000288 <__aeabi_dsub>
 801124c:	4602      	mov	r2, r0
 801124e:	460b      	mov	r3, r1
 8011250:	f7ef fafc 	bl	800084c <__aeabi_ddiv>
 8011254:	e7eb      	b.n	801122e <__ieee754_sqrt+0x2a>
 8011256:	1509      	asrs	r1, r1, #20
 8011258:	f000 808d 	beq.w	8011376 <__ieee754_sqrt+0x172>
 801125c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011260:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011268:	07c9      	lsls	r1, r1, #31
 801126a:	bf5c      	itt	pl
 801126c:	005b      	lslpl	r3, r3, #1
 801126e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011272:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011276:	bf58      	it	pl
 8011278:	0052      	lslpl	r2, r2, #1
 801127a:	2500      	movs	r5, #0
 801127c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011280:	1076      	asrs	r6, r6, #1
 8011282:	0052      	lsls	r2, r2, #1
 8011284:	f04f 0e16 	mov.w	lr, #22
 8011288:	46ac      	mov	ip, r5
 801128a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801128e:	eb0c 0001 	add.w	r0, ip, r1
 8011292:	4298      	cmp	r0, r3
 8011294:	bfde      	ittt	le
 8011296:	1a1b      	suble	r3, r3, r0
 8011298:	eb00 0c01 	addle.w	ip, r0, r1
 801129c:	186d      	addle	r5, r5, r1
 801129e:	005b      	lsls	r3, r3, #1
 80112a0:	f1be 0e01 	subs.w	lr, lr, #1
 80112a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80112a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80112ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80112b0:	d1ed      	bne.n	801128e <__ieee754_sqrt+0x8a>
 80112b2:	4674      	mov	r4, lr
 80112b4:	2720      	movs	r7, #32
 80112b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80112ba:	4563      	cmp	r3, ip
 80112bc:	eb01 000e 	add.w	r0, r1, lr
 80112c0:	dc02      	bgt.n	80112c8 <__ieee754_sqrt+0xc4>
 80112c2:	d113      	bne.n	80112ec <__ieee754_sqrt+0xe8>
 80112c4:	4290      	cmp	r0, r2
 80112c6:	d811      	bhi.n	80112ec <__ieee754_sqrt+0xe8>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	eb00 0e01 	add.w	lr, r0, r1
 80112ce:	da57      	bge.n	8011380 <__ieee754_sqrt+0x17c>
 80112d0:	f1be 0f00 	cmp.w	lr, #0
 80112d4:	db54      	blt.n	8011380 <__ieee754_sqrt+0x17c>
 80112d6:	f10c 0801 	add.w	r8, ip, #1
 80112da:	eba3 030c 	sub.w	r3, r3, ip
 80112de:	4290      	cmp	r0, r2
 80112e0:	bf88      	it	hi
 80112e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80112e6:	1a12      	subs	r2, r2, r0
 80112e8:	440c      	add	r4, r1
 80112ea:	46c4      	mov	ip, r8
 80112ec:	005b      	lsls	r3, r3, #1
 80112ee:	3f01      	subs	r7, #1
 80112f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80112f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80112f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80112fc:	d1dd      	bne.n	80112ba <__ieee754_sqrt+0xb6>
 80112fe:	4313      	orrs	r3, r2
 8011300:	d01b      	beq.n	801133a <__ieee754_sqrt+0x136>
 8011302:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80113b0 <__ieee754_sqrt+0x1ac>
 8011306:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80113b4 <__ieee754_sqrt+0x1b0>
 801130a:	e9da 0100 	ldrd	r0, r1, [sl]
 801130e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011312:	f7ee ffb9 	bl	8000288 <__aeabi_dsub>
 8011316:	e9da 8900 	ldrd	r8, r9, [sl]
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	4640      	mov	r0, r8
 8011320:	4649      	mov	r1, r9
 8011322:	f7ef fbe5 	bl	8000af0 <__aeabi_dcmple>
 8011326:	b140      	cbz	r0, 801133a <__ieee754_sqrt+0x136>
 8011328:	f1b4 3fff 	cmp.w	r4, #4294967295
 801132c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011330:	e9db 2300 	ldrd	r2, r3, [fp]
 8011334:	d126      	bne.n	8011384 <__ieee754_sqrt+0x180>
 8011336:	3501      	adds	r5, #1
 8011338:	463c      	mov	r4, r7
 801133a:	106a      	asrs	r2, r5, #1
 801133c:	0863      	lsrs	r3, r4, #1
 801133e:	07e9      	lsls	r1, r5, #31
 8011340:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011344:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011348:	bf48      	it	mi
 801134a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801134e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011352:	461c      	mov	r4, r3
 8011354:	e76d      	b.n	8011232 <__ieee754_sqrt+0x2e>
 8011356:	0ad3      	lsrs	r3, r2, #11
 8011358:	3815      	subs	r0, #21
 801135a:	0552      	lsls	r2, r2, #21
 801135c:	2b00      	cmp	r3, #0
 801135e:	d0fa      	beq.n	8011356 <__ieee754_sqrt+0x152>
 8011360:	02dc      	lsls	r4, r3, #11
 8011362:	d50a      	bpl.n	801137a <__ieee754_sqrt+0x176>
 8011364:	f1c1 0420 	rsb	r4, r1, #32
 8011368:	fa22 f404 	lsr.w	r4, r2, r4
 801136c:	1e4d      	subs	r5, r1, #1
 801136e:	408a      	lsls	r2, r1
 8011370:	4323      	orrs	r3, r4
 8011372:	1b41      	subs	r1, r0, r5
 8011374:	e772      	b.n	801125c <__ieee754_sqrt+0x58>
 8011376:	4608      	mov	r0, r1
 8011378:	e7f0      	b.n	801135c <__ieee754_sqrt+0x158>
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	3101      	adds	r1, #1
 801137e:	e7ef      	b.n	8011360 <__ieee754_sqrt+0x15c>
 8011380:	46e0      	mov	r8, ip
 8011382:	e7aa      	b.n	80112da <__ieee754_sqrt+0xd6>
 8011384:	f7ee ff82 	bl	800028c <__adddf3>
 8011388:	e9da 8900 	ldrd	r8, r9, [sl]
 801138c:	4602      	mov	r2, r0
 801138e:	460b      	mov	r3, r1
 8011390:	4640      	mov	r0, r8
 8011392:	4649      	mov	r1, r9
 8011394:	f7ef fba2 	bl	8000adc <__aeabi_dcmplt>
 8011398:	b120      	cbz	r0, 80113a4 <__ieee754_sqrt+0x1a0>
 801139a:	1ca0      	adds	r0, r4, #2
 801139c:	bf08      	it	eq
 801139e:	3501      	addeq	r5, #1
 80113a0:	3402      	adds	r4, #2
 80113a2:	e7ca      	b.n	801133a <__ieee754_sqrt+0x136>
 80113a4:	3401      	adds	r4, #1
 80113a6:	f024 0401 	bic.w	r4, r4, #1
 80113aa:	e7c6      	b.n	801133a <__ieee754_sqrt+0x136>
 80113ac:	7ff00000 	.word	0x7ff00000
 80113b0:	200001f0 	.word	0x200001f0
 80113b4:	200001f8 	.word	0x200001f8

080113b8 <_init>:
 80113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ba:	bf00      	nop
 80113bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113be:	bc08      	pop	{r3}
 80113c0:	469e      	mov	lr, r3
 80113c2:	4770      	bx	lr

080113c4 <_fini>:
 80113c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113c6:	bf00      	nop
 80113c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ca:	bc08      	pop	{r3}
 80113cc:	469e      	mov	lr, r3
 80113ce:	4770      	bx	lr
