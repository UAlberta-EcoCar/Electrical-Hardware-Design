
H2-Sensor-Board-Lucy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008f20  08008f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009040  08009040  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009048  08009048  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce4  2000006c  080090bc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  080090bc  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021305  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043c7  00000000  00000000  000413e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  000457b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000175e  00000000  00000000  000475b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004fef  00000000  00000000  00048d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021fdc  00000000  00000000  0004dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eba6d  00000000  00000000  0006fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008858  00000000  00000000  0015b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00163fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f08 	.word	0x08008f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008f08 	.word	0x08008f08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f004 fb76 	bl	8004c74 <HAL_UART_Transmit>
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200001c8 	.word	0x200001c8

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fddf 	bl	800115e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f830 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f9fa 	bl	800099c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 f9da 	bl	8000960 <MX_DMA_Init>
  MX_CAN1_Init();
 80005ac:	f000 f8e6 	bl	800077c <MX_CAN1_Init>
  MX_I2C1_Init();
 80005b0:	f000 f966 	bl	8000880 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f9a4 	bl	8000900 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005b8:	f000 f87c 	bl	80006b4 <MX_ADC1_Init>
//	HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID,
//			&DMATransferComplete);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f005 f80e 	bl	80055dc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <main+0x54>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x58>)
 80005c6:	f005 f853 	bl	8005670 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <main+0x5c>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <main+0x60>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <main+0x64>)
 80005d6:	f005 f84b 	bl	8005670 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <main+0x68>)
 80005de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f005 f820 	bl	8005624 <osKernelStart>
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		raw = HAL_ADC_GetValue(&hadc1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, 1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

		HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 fdf3 	bl	80011d0 <HAL_Delay>
 80005ea:	e7fb      	b.n	80005e4 <main+0x4c>
 80005ec:	08008f7c 	.word	0x08008f7c
 80005f0:	08000ab9 	.word	0x08000ab9
 80005f4:	2000024c 	.word	0x2000024c
 80005f8:	08008fa0 	.word	0x08008fa0
 80005fc:	08000b05 	.word	0x08000b05
 8000600:	20000250 	.word	0x20000250

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fe49 	bl	80082aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062a:	f002 fe4d 	bl	80032c8 <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 fa80 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	2303      	movs	r3, #3
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800064e:	2314      	movs	r3, #20
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fe86 	bl	8003374 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066e:	f000 fa63 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fa86 	bl	8003b9c <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 fa4f 	bl	8000b38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_16);
 800069a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069e:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 80006a2:	2000      	movs	r0, #0
 80006a4:	f003 fb7a 	bl	8003d9c <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006a8:	f003 fca2 	bl	8003ff0 <HAL_RCC_EnableCSS>
}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	; 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <MX_ADC1_Init+0xc0>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_ADC1_Init+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_ADC1_Init+0xbc>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_ADC1_Init+0xbc>)
 8000716:	2201      	movs	r2, #1
 8000718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_ADC1_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <MX_ADC1_Init+0xbc>)
 800072c:	f000 ff3c 	bl	80015a8 <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000736:	f000 f9ff 	bl	8000b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC1_Init+0xc4>)
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073e:	2306      	movs	r3, #6
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000746:	237f      	movs	r3, #127	; 0x7f
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074a:	2304      	movs	r3, #4
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0xbc>)
 8000758:	f001 f8fc 	bl	8001954 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000762:	f000 f9e9 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000a0 	.word	0x200000a0
 8000774:	50040000 	.word	0x50040000
 8000778:	21800100 	.word	0x21800100

0800077c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_CAN1_Init+0xf8>)
 8000784:	4a3c      	ldr	r2, [pc, #240]	; (8000878 <MX_CAN1_Init+0xfc>)
 8000786:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000788:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_CAN1_Init+0xf8>)
 800078a:	2210      	movs	r2, #16
 800078c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800078e:	4b39      	ldr	r3, [pc, #228]	; (8000874 <MX_CAN1_Init+0xf8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_CAN1_Init+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_CAN1_Init+0xf8>)
 800079c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007cc:	4829      	ldr	r0, [pc, #164]	; (8000874 <MX_CAN1_Init+0xf8>)
 80007ce:	f001 fdbb 	bl	8002348 <HAL_CAN_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f9ae 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sf;
	sf.FilterIdHigh = 0x200 << 5;
 80007dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e0:	603b      	str	r3, [r7, #0]
	sf.FilterMaskIdHigh = 0x700 << 5;
 80007e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007e6:	60bb      	str	r3, [r7, #8]
	sf.FilterIdLow = 0x0000;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
	sf.FilterMaskIdLow = 0x0000;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <MX_CAN1_Init+0xf8>)
 800080a:	f001 fe98 	bl	800253e <HAL_CAN_ConfigFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_CAN1_Init+0x9c>
		/* Filter configuration Error */
		Error_Handler();
 8000814:	f000 f990 	bl	8000b38 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <MX_CAN1_Init+0xf8>)
 800081a:	f001 ff5a 	bl	80026d2 <HAL_CAN_Start>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_CAN1_Init+0xac>
		Error_Handler();
 8000824:	f000 f988 	bl	8000b38 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000828:	2102      	movs	r1, #2
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <MX_CAN1_Init+0xf8>)
 800082c:	f001 ff95 	bl	800275a <HAL_CAN_ActivateNotification>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_CAN1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8000836:	f000 f97f 	bl	8000b38 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY)
 800083a:	2101      	movs	r1, #1
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_CAN1_Init+0xf8>)
 800083e:	f001 ff8c 	bl	800275a <HAL_CAN_ActivateNotification>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_CAN1_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8000848:	f000 f976 	bl	8000b38 <Error_Handler>
	//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
	//	!= HAL_OK) {
	//		Error_Handler();
	//	}

	TxHeader.StdId = 0x201;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_CAN1_Init+0x100>)
 800084e:	f240 2201 	movw	r2, #513	; 0x201
 8000852:	601a      	str	r2, [r3, #0]
	//	TxHeader.ExtId = 0x01;
	TxHeader.RTR = CAN_RTR_DATA;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_CAN1_Init+0x100>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_CAN1_Init+0x100>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_CAN1_Init+0x100>)
 8000862:	2208      	movs	r2, #8
 8000864:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_CAN1_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000014c 	.word	0x2000014c
 8000878:	40006400 	.word	0x40006400
 800087c:	20000088 	.word	0x20000088

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	f002 fbd0 	bl	8003060 <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 f937 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008ce:	f002 fc56 	bl	800317e <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 f92e 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008e0:	f002 fc98 	bl	8003214 <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f925 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000174 	.word	0x20000174
 80008f8:	40005400 	.word	0x40005400
 80008fc:	10909cec 	.word	0x10909cec

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	f004 f948 	bl	8004bd8 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f8f3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001c8 	.word	0x200001c8
 800095c:	40013800 	.word	0x40013800

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_DMA_Init+0x38>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <MX_DMA_Init+0x38>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6493      	str	r3, [r2, #72]	; 0x48
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_DMA_Init+0x38>)
 8000974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	200b      	movs	r0, #11
 8000984:	f001 ffc8 	bl	8002918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000988:	200b      	movs	r0, #11
 800098a:	f001 ffe1 	bl	8002950 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <MX_GPIO_Init+0xdc>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f002 fb20 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : H2_TARE_Pin */
  GPIO_InitStruct.Pin = H2_TARE_Pin;
 80009f0:	2310      	movs	r3, #16
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(H2_TARE_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f002 f9a9 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BEEPER_TIM2_CH2_Pin */
  GPIO_InitStruct.Pin = BEEPER_TIM2_CH2_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEPER_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f002 f998 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f002 f986 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f002 f976 	bl	8002d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	//raw = adc_buf[0];
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_ADC_ConvCpltCallback>:
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	//printf("%hu\r\n", adc_buf[0]);
	raw = adc_buf[ADC_BUF_LEN - 1];
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a9a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000aa0:	801a      	strh	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000254 	.word	0x20000254
 8000ab4:	200002a4 	.word	0x200002a4

08000ab8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000ac0:	2228      	movs	r2, #40	; 0x28
 8000ac2:	490a      	ldr	r1, [pc, #40]	; (8000aec <StartDefaultTask+0x34>)
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <StartDefaultTask+0x38>)
 8000ac6:	f000 feb7 	bl	8001838 <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		printf("\033[2J\033[0;0H[Main Thread] ");
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <StartDefaultTask+0x3c>)
 8000acc:	f007 fb98 	bl	8008200 <iprintf>
		printf("ADC: ");
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <StartDefaultTask+0x40>)
 8000ad2:	f007 fb95 	bl	8008200 <iprintf>
		printf("%hu\r\n", raw);
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <StartDefaultTask+0x44>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <StartDefaultTask+0x48>)
 8000ade:	f007 fb8f 	bl	8008200 <iprintf>
		osDelay(100);
 8000ae2:	2064      	movs	r0, #100	; 0x64
 8000ae4:	f004 fe56 	bl	8005794 <osDelay>
	for (;;) {
 8000ae8:	e7ef      	b.n	8000aca <StartDefaultTask+0x12>
 8000aea:	bf00      	nop
 8000aec:	20000254 	.word	0x20000254
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	08008f38 	.word	0x08008f38
 8000af8:	08008f54 	.word	0x08008f54
 8000afc:	200002a4 	.word	0x200002a4
 8000b00:	08008f5c 	.word	0x08008f5c

08000b04 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		//printf("Hekko\r\n");
		osDelay(100);
 8000b0c:	2064      	movs	r0, #100	; 0x64
 8000b0e:	f004 fe41 	bl	8005794 <osDelay>
 8000b12:	e7fb      	b.n	8000b0c <StartTask02+0x8>

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f000 fb33 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40012c00 	.word	0x40012c00

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f001 fec9 	bl	8002918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	; 0x78
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2254      	movs	r2, #84	; 0x54
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fb78 	bl	80082aa <memset>
  if(hadc->Instance==ADC1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <HAL_ADC_MspInit+0x118>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d16e      	bne.n	8000ca2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bce:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fa88 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bfe:	f7ff ff9b 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_ADC_MspInit+0x11c>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = H2_SENSE_ADC_Pin;
 8000c32:	2308      	movs	r3, #8
 8000c34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(H2_SENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f002 f888 	bl	8002d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_ADC_MspInit+0x124>)
 8000c50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c88:	f001 fe70 	bl	800296c <HAL_DMA_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000c92:	f7ff ff51 	bl	8000b38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <HAL_ADC_MspInit+0x120>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3778      	adds	r7, #120	; 0x78
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	50040000 	.word	0x50040000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	20000104 	.word	0x20000104
 8000cb8:	40020008 	.word	0x40020008

08000cbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_CAN_MspInit+0x80>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d129      	bne.n	8000d32 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_CAN_MspInit+0x84>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d20:	2309      	movs	r3, #9
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f002 f815 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40006400 	.word	0x40006400
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09e      	sub	sp, #120	; 0x78
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2254      	movs	r2, #84	; 0x54
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 faa0 	bl	80082aa <memset>
  if(hi2c->Instance==I2C1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_I2C_MspInit+0xa8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d137      	bne.n	8000de4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 f9c1 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d8c:	f7ff fed4 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dae:	2312      	movs	r3, #18
 8000db0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f001 ffc8 	bl	8002d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_I2C_MspInit+0xac>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3778      	adds	r7, #120	; 0x78
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b09e      	sub	sp, #120	; 0x78
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2254      	movs	r2, #84	; 0x54
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fa48 	bl	80082aa <memset>
  if(huart->Instance==USART1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_UART_MspInit+0xa4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d135      	bne.n	8000e90 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f969 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e3c:	f7ff fe7c 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_UART_MspInit+0xa8>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e70:	23c0      	movs	r3, #192	; 0xc0
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e80:	2307      	movs	r3, #7
 8000e82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_UART_MspInit+0xac>)
 8000e8c:	f001 ff66 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3778      	adds	r7, #120	; 0x78
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_InitTick+0xc8>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_InitTick+0xc8>)
 8000eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_InitTick+0xc8>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eca:	f107 020c 	add.w	r2, r7, #12
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 f859 	bl	8003f8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eda:	f003 f841 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8000ede:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_InitTick+0xcc>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	0c9b      	lsrs	r3, r3, #18
 8000eea:	3b01      	subs	r3, #1
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_InitTick+0xd0>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_InitTick+0xd4>)
 8000ef2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_InitTick+0xd0>)
 8000ef6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_InitTick+0xd0>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xd0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_InitTick+0xd0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_InitTick+0xd0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <HAL_InitTick+0xd0>)
 8000f16:	f003 fbdf 	bl	80046d8 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d11b      	bne.n	8000f60 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <HAL_InitTick+0xd0>)
 8000f2a:	f003 fc37 	bl	800479c <HAL_TIM_Base_Start_IT>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f3c:	2019      	movs	r0, #25
 8000f3e:	f001 fd07 	bl	8002950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d808      	bhi.n	8000f5a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	2019      	movs	r0, #25
 8000f4e:	f001 fce3 	bl	8002918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0xd8>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e002      	b.n	8000f60 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	200002a8 	.word	0x200002a8
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	20000004 	.word	0x20000004

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f84:	f003 f844 	bl	8004010 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x8>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fb6:	f001 fdf1 	bl	8002b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000104 	.word	0x20000104

08000fc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fca:	f003 fc3b 	bl	8004844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002a8 	.word	0x200002a8

08000fd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
  }

  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103a:	605a      	str	r2, [r3, #4]
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f007 f94c 	bl	8008348 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20010000 	.word	0x20010000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200002f4 	.word	0x200002f4
 80010e4:	20001d50 	.word	0x20001d50

080010e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff ffea 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f007 f90b 	bl	8008354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fa2b 	bl	8000598 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001144:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001150:	08009050 	.word	0x08009050
  ldr r2, =_sbss
 8001154:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001158:	20001d50 	.word	0x20001d50

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>

0800115e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f001 fbca 	bl	8002902 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff fe98 	bl	8000ea4 <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	e001      	b.n	8001184 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001180:	f7ff fce0 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001184:	79fb      	ldrb	r3, [r7, #7]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200002f8 	.word	0x200002f8

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200002f8 	.word	0x200002f8

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LL_ADC_SetOffset+0x44>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	03fff000 	.word	0x03fff000

080012c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3360      	adds	r3, #96	; 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3360      	adds	r3, #96	; 0x60
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3330      	adds	r3, #48	; 0x30
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	4413      	add	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	211f      	movs	r1, #31
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0e9b      	lsrs	r3, r3, #26
 8001388:	f003 011f 	and.w	r1, r3, #31
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	431a      	orrs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3314      	adds	r3, #20
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	0e5b      	lsrs	r3, r3, #25
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	0d1b      	lsrs	r3, r3, #20
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2107      	movs	r1, #7
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	401a      	ands	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0d1b      	lsrs	r3, r3, #20
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	431a      	orrs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0318 	and.w	r3, r3, #24
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001424:	40d9      	lsrs	r1, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	400b      	ands	r3, r1
 800142a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	0007ffff 	.word	0x0007ffff

08001448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6093      	str	r3, [r2, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800147c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001480:	d101      	bne.n	8001486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <LL_ADC_IsEnabled+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_ADC_IsEnabled+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001542:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001546:	f043 0204 	orr.w	r2, r3, #4
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b04      	cmp	r3, #4
 800156c:	d101      	bne.n	8001572 <LL_ADC_REG_IsConversionOngoing+0x18>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b08      	cmp	r3, #8
 8001592:	d101      	bne.n	8001598 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e12c      	b.n	800181c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fadf 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff3f 	bl	800146c <LL_ADC_IsDeepPowerDownEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff25 	bl	8001448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff5a 	bl	80014bc <LL_ADC_IsInternalRegulatorEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff3e 	bl	8001494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001618:	4b82      	ldr	r3, [pc, #520]	; (8001824 <HAL_ADC_Init+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	4a82      	ldr	r2, [pc, #520]	; (8001828 <HAL_ADC_Init+0x280>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800162c:	e002      	b.n	8001634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff3c 	bl	80014bc <LL_ADC_IsInternalRegulatorEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10d      	bne.n	8001666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff75 	bl	800155a <LL_ADC_REG_IsConversionOngoing>
 8001670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80c5 	bne.w	800180a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80c1 	bne.w	800180a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001690:	f043 0202 	orr.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <LL_ADC_IsEnabled>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a8:	4860      	ldr	r0, [pc, #384]	; (800182c <HAL_ADC_Init+0x284>)
 80016aa:	f7ff ff2f 	bl	800150c <LL_ADC_IsEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	485d      	ldr	r0, [pc, #372]	; (8001830 <HAL_ADC_Init+0x288>)
 80016bc:	f7ff fdac 	bl	8001218 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e5b      	ldrb	r3, [r3, #25]
 80016c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	045b      	lsls	r3, r3, #17
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_ADC_Init+0x28c>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	430b      	orrs	r3, r1
 800172a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff12 	bl	800155a <LL_ADC_REG_IsConversionOngoing>
 8001736:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff1f 	bl	8001580 <LL_ADC_INJ_IsConversionOngoing>
 8001742:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d13d      	bne.n	80017c6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13a      	bne.n	80017c6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001754:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800175c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	69b9      	ldr	r1, [r7, #24]
 8001776:	430b      	orrs	r3, r1
 8001778:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001780:	2b01      	cmp	r3, #1
 8001782:	d118      	bne.n	80017b6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800179a:	4311      	orrs	r1, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017a6:	430a      	orrs	r2, r1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10c      	bne.n	80017e8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f023 010f 	bic.w	r1, r3, #15
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
 80017e6:	e007      	b.n	80017f8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020f 	bic.w	r2, r2, #15
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f023 0303 	bic.w	r3, r3, #3
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
 8001808:	e007      	b.n	800181a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800181a:	7ffb      	ldrb	r3, [r7, #31]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000000 	.word	0x20000000
 8001828:	053e2d63 	.word	0x053e2d63
 800182c:	50040000 	.word	0x50040000
 8001830:	50040300 	.word	0x50040300
 8001834:	fff0c007 	.word	0xfff0c007

08001838 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe86 	bl	800155a <LL_ADC_REG_IsConversionOngoing>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d167      	bne.n	8001924 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Start_DMA+0x2a>
 800185e:	2302      	movs	r3, #2
 8001860:	e063      	b.n	800192a <HAL_ADC_Start_DMA+0xf2>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fc52 	bl	8002114 <ADC_Enable>
 8001870:	4603      	mov	r3, r0
 8001872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d14f      	bne.n	800191a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f023 0206 	bic.w	r2, r3, #6
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	659a      	str	r2, [r3, #88]	; 0x58
 80018a6:	e002      	b.n	80018ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_ADC_Start_DMA+0xfc>)
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_ADC_Start_DMA+0x100>)
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_ADC_Start_DMA+0x104>)
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	221c      	movs	r2, #28
 80018cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0210 	orr.w	r2, r2, #16
 80018e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3340      	adds	r3, #64	; 0x40
 8001900:	4619      	mov	r1, r3
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f001 f8e9 	bl	8002adc <HAL_DMA_Start_IT>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe0d 	bl	8001532 <LL_ADC_REG_StartConversion>
 8001918:	e006      	b.n	8001928 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001922:	e001      	b.n	8001928 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001924:	2302      	movs	r3, #2
 8001926:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001928:	7dfb      	ldrb	r3, [r7, #23]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	08002221 	.word	0x08002221
 8001938:	080022f9 	.word	0x080022f9
 800193c:	08002315 	.word	0x08002315

08001940 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0b6      	sub	sp, #216	; 0xd8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x22>
 8001972:	2302      	movs	r3, #2
 8001974:	e3b9      	b.n	80020ea <HAL_ADC_ConfigChannel+0x796>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fde9 	bl	800155a <LL_ADC_REG_IsConversionOngoing>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 839e 	bne.w	80020cc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d824      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	3b02      	subs	r3, #2
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d81b      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x86>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <HAL_ADC_ConfigChannel+0x54>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019c1 	.word	0x080019c1
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019d1 	.word	0x080019d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	220c      	movs	r2, #12
 80019bc:	605a      	str	r2, [r3, #4]
          break;
 80019be:	e010      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2212      	movs	r2, #18
 80019c4:	605a      	str	r2, [r3, #4]
          break;
 80019c6:	e00c      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2218      	movs	r2, #24
 80019cc:	605a      	str	r2, [r3, #4]
          break;
 80019ce:	e008      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d6:	605a      	str	r2, [r3, #4]
          break;
 80019d8:	e003      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2206      	movs	r2, #6
 80019de:	605a      	str	r2, [r3, #4]
          break;
 80019e0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fcae 	bl	8001350 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fdae 	bl	800155a <LL_ADC_REG_IsConversionOngoing>
 80019fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fdba 	bl	8001580 <LL_ADC_INJ_IsConversionOngoing>
 8001a0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 81a6 	bne.w	8001d66 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 81a1 	bne.w	8001d66 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f7ff fcb9 	bl	80013a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00a      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a68:	f7ff fc0a 	bl	8001280 <LL_ADC_SetOffset>
 8001a6c:	e17b      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc27 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x146>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc1c 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	e01e      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x184>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc11 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	e004      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8001acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x19c>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	e018      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8001b14:	2320      	movs	r3, #32
 8001b16:	e004      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8001b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d106      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbe0 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fbc4 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x20c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fbb9 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	f003 021f 	and.w	r2, r3, #31
 8001b5e:	e01e      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x24a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fbae 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e004      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8001b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x262>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0e9b      	lsrs	r3, r3, #26
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	e018      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x294>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e004      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8001bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb7d 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fb61 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x2d2>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fb56 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	0e9b      	lsrs	r3, r3, #26
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	e01e      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x310>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb4b 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e004      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x328>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	e016      	b.n	8001caa <HAL_ADC_ConfigChannel+0x356>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e004      	b.n	8001caa <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fb1c 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2103      	movs	r1, #3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb00 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x394>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff faf5 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	e017      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x3c4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff faea 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x3dc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	e011      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x400>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2103      	movs	r1, #3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fac7 	bl	80012f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fbce 	bl	800150c <LL_ADC_IsEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8140 	bne.w	8001ff8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f7ff fb3b 	bl	8001400 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a8f      	ldr	r2, [pc, #572]	; (8001fcc <HAL_ADC_ConfigChannel+0x678>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	f040 8131 	bne.w	8001ff8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x46a>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	3301      	adds	r3, #1
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	bf94      	ite	ls
 8001db6:	2301      	movls	r3, #1
 8001db8:	2300      	movhi	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	e019      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x49e>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d079      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x4be>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	3301      	adds	r3, #1
 8001e0a:	069b      	lsls	r3, r3, #26
 8001e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e10:	e015      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x4ea>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e003      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	069b      	lsls	r3, r3, #26
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x50a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	e017      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x53a>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	ea42 0103 	orr.w	r1, r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x560>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0e9b      	lsrs	r3, r3, #26
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	051b      	lsls	r3, r3, #20
 8001eb2:	e018      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x592>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	e003      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	e081      	b.n	8001fee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x5b2>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	3301      	adds	r3, #1
 8001efe:	069b      	lsls	r3, r3, #26
 8001f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f04:	e015      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x5de>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	069b      	lsls	r3, r3, #26
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x5fe>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	e017      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x62e>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e003      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	ea42 0103 	orr.w	r1, r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10d      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x65a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e9b      	lsrs	r3, r3, #26
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f003 021f 	and.w	r2, r3, #31
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1e      	subs	r3, #30
 8001fa6:	051b      	lsls	r3, r3, #20
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x698>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	613b      	str	r3, [r7, #16]
  return result;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e006      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x684>
 8001fca:	bf00      	nop
 8001fcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b1e      	subs	r3, #30
 8001fe6:	051b      	lsls	r3, r3, #20
 8001fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	430b      	orrs	r3, r1
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	6892      	ldr	r2, [r2, #8]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7ff f9d8 	bl	80013a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d06c      	beq.n	80020de <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002004:	483c      	ldr	r0, [pc, #240]	; (80020f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002006:	f7ff f92d 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 800200a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <HAL_ADC_ConfigChannel+0x7a8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d127      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d121      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a35      	ldr	r2, [pc, #212]	; (8002100 <HAL_ADC_ConfigChannel+0x7ac>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d157      	bne.n	80020de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002032:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002036:	4619      	mov	r1, r3
 8002038:	482f      	ldr	r0, [pc, #188]	; (80020f8 <HAL_ADC_ConfigChannel+0x7a4>)
 800203a:	f7ff f900 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_ADC_ConfigChannel+0x7b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_ADC_ConfigChannel+0x7b4>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002066:	e03a      	b.n	80020de <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <HAL_ADC_ConfigChannel+0x7b8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_ADC_ConfigChannel+0x746>
 8002072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_ADC_ConfigChannel+0x7ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d12a      	bne.n	80020de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800208c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002090:	4619      	mov	r1, r3
 8002092:	4819      	ldr	r0, [pc, #100]	; (80020f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002094:	f7ff f8d3 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002098:	e021      	b.n	80020de <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_ADC_ConfigChannel+0x7bc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d11c      	bne.n	80020de <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d116      	bne.n	80020de <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_ADC_ConfigChannel+0x7ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d111      	bne.n	80020de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <HAL_ADC_ConfigChannel+0x7a4>)
 80020c6:	f7ff f8ba 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
 80020ca:	e008      	b.n	80020de <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	37d8      	adds	r7, #216	; 0xd8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	80080000 	.word	0x80080000
 80020f8:	50040300 	.word	0x50040300
 80020fc:	c7520000 	.word	0xc7520000
 8002100:	50040000 	.word	0x50040000
 8002104:	20000000 	.word	0x20000000
 8002108:	053e2d63 	.word	0x053e2d63
 800210c:	cb840000 	.word	0xcb840000
 8002110:	80000001 	.word	0x80000001

08002114 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f9f1 	bl	800150c <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d169      	bne.n	8002204 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <ADC_Enable+0xfc>)
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e055      	b.n	8002206 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f9c0 	bl	80014e4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002164:	482b      	ldr	r0, [pc, #172]	; (8002214 <ADC_Enable+0x100>)
 8002166:	f7ff f87d 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <ADC_Enable+0x104>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a28      	ldr	r2, [pc, #160]	; (800221c <ADC_Enable+0x108>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800218e:	e002      	b.n	8002196 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3b01      	subs	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800219c:	f7ff f80c 	bl	80011b8 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a2:	e028      	b.n	80021f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f9af 	bl	800150c <LL_ADC_IsEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f993 	bl	80014e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021be:	f7fe fffb 	bl	80011b8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d914      	bls.n	80021f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d00d      	beq.n	80021f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e007      	b.n	8002206 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d1cf      	bne.n	80021a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	8000003f 	.word	0x8000003f
 8002214:	50040300 	.word	0x50040300
 8002218:	20000000 	.word	0x20000000
 800221c:	053e2d63 	.word	0x053e2d63

08002220 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002236:	2b00      	cmp	r3, #0
 8002238:	d14b      	bne.n	80022d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d021      	beq.n	8002298 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f866 	bl	800132a <LL_ADC_REG_IsTriggerSourceSWStart>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d032      	beq.n	80022ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12b      	bne.n	80022ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11f      	bne.n	80022ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
 8002296:	e018      	b.n	80022ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d111      	bne.n	80022ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7fe fbe0 	bl	8000a90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022d0:	e00e      	b.n	80022f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fb2e 	bl	8001940 <HAL_ADC_ErrorCallback>
}
 80022e4:	e004      	b.n	80022f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7fe fbb8 	bl	8000a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff fb00 	bl	8001940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0ed      	b.n	8002536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fca8 	bl	8000cbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7fe ff1c 	bl	80011b8 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7fe ff18 	bl	80011b8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0c5      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0e5      	beq.n	8002384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0202 	bic.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7fe fef6 	bl	80011b8 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7fe fef2 	bl	80011b8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09f      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7edb      	ldrb	r3, [r3, #27]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0210 	orr.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d003      	beq.n	8002564 <HAL_CAN_ConfigFilter+0x26>
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b02      	cmp	r3, #2
 8002560:	f040 80aa 	bne.w	80026b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2201      	movs	r2, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d123      	bne.n	80025e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	401a      	ands	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3248      	adds	r2, #72	; 0x48
 80025c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	3348      	adds	r3, #72	; 0x48
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d122      	bne.n	8002634 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800260e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3248      	adds	r2, #72	; 0x48
 8002614:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002628:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800262a:	6979      	ldr	r1, [r7, #20]
 800262c:	3348      	adds	r3, #72	; 0x48
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800264e:	e007      	b.n	8002660 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800267a:	e007      	b.n	800268c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e006      	b.n	80026c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12e      	bne.n	8002744 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026fe:	f7fe fd5b 	bl	80011b8 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002704:	e012      	b.n	800272c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002706:	f7fe fd57 	bl	80011b8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b0a      	cmp	r3, #10
 8002712:	d90b      	bls.n	800272c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e012      	b.n	8002752 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e5      	bne.n	8002706 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e006      	b.n	8002752 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d002      	beq.n	8002778 <HAL_CAN_ActivateNotification+0x1e>
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d109      	bne.n	800278c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e006      	b.n	800279a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ff4c 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800292a:	f7ff ff61 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 800292e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7ff ffb1 	bl	800289c <NVIC_EncodePriority>
 800293a:	4602      	mov	r2, r0
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff80 	bl	8002848 <__NVIC_SetPriority>
}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff54 	bl	800280c <__NVIC_EnableIRQ>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e098      	b.n	8002ab0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_DMA_Init+0x150>)
 8002986:	429a      	cmp	r2, r3
 8002988:	d80f      	bhi.n	80029aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_DMA_Init+0x154>)
 8002992:	4413      	add	r3, r2
 8002994:	4a4b      	ldr	r2, [pc, #300]	; (8002ac4 <HAL_DMA_Init+0x158>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	009a      	lsls	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <HAL_DMA_Init+0x15c>)
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
 80029a8:	e00e      	b.n	80029c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_DMA_Init+0x160>)
 80029b2:	4413      	add	r3, r2
 80029b4:	4a43      	ldr	r2, [pc, #268]	; (8002ac4 <HAL_DMA_Init+0x158>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a42      	ldr	r2, [pc, #264]	; (8002ad0 <HAL_DMA_Init+0x164>)
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a22:	d039      	beq.n	8002a98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_DMA_Init+0x15c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11a      	bne.n	8002a64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_DMA_Init+0x168>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f003 031c 	and.w	r3, r3, #28
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4924      	ldr	r1, [pc, #144]	; (8002ad4 <HAL_DMA_Init+0x168>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_DMA_Init+0x168>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f003 031c 	and.w	r3, r3, #28
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	491d      	ldr	r1, [pc, #116]	; (8002ad4 <HAL_DMA_Init+0x168>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
 8002a62:	e019      	b.n	8002a98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_DMA_Init+0x16c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	f003 031c 	and.w	r3, r3, #28
 8002a70:	210f      	movs	r1, #15
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	4917      	ldr	r1, [pc, #92]	; (8002ad8 <HAL_DMA_Init+0x16c>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_DMA_Init+0x16c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	4911      	ldr	r1, [pc, #68]	; (8002ad8 <HAL_DMA_Init+0x16c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40020407 	.word	0x40020407
 8002ac0:	bffdfff8 	.word	0xbffdfff8
 8002ac4:	cccccccd 	.word	0xcccccccd
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	bffdfbf8 	.word	0xbffdfbf8
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	400200a8 	.word	0x400200a8
 8002ad8:	400204a8 	.word	0x400204a8

08002adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Start_IT+0x20>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e04b      	b.n	8002b94 <HAL_DMA_Start_IT+0xb8>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d13a      	bne.n	8002b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f8e0 	bl	8002cfa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 020e 	orr.w	r2, r2, #14
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00f      	b.n	8002b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 020a 	orr.w	r2, r2, #10
 8002b72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f003 031c 	and.w	r3, r3, #28
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d026      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x7a>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d021      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f003 021c 	and.w	r2, r3, #28
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d071      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c14:	e06c      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f003 031c 	and.w	r3, r3, #28
 8002c1e:	2202      	movs	r2, #2
 8002c20:	409a      	lsls	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xec>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d029      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 020a 	bic.w	r2, r2, #10
 8002c50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 021c 	and.w	r2, r3, #28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2102      	movs	r1, #2
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d038      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c86:	e033      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 031c 	and.w	r3, r3, #28
 8002c90:	2208      	movs	r2, #8
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02a      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x156>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d025      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 020e 	bic.w	r2, r2, #14
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 021c 	and.w	r2, r3, #28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
}
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f003 021c 	and.w	r2, r3, #28
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d108      	bne.n	8002d3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d3c:	e007      	b.n	8002d4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6a:	e148      	b.n	8002ffe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 813a 	beq.w	8002ff8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d005      	beq.n	8002d9c <HAL_GPIO_Init+0x40>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d017      	beq.n	8002e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d123      	bne.n	8002e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8094 	beq.w	8002ff8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4b52      	ldr	r3, [pc, #328]	; (800301c <HAL_GPIO_Init+0x2c0>)
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_GPIO_Init+0x2c0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6613      	str	r3, [r2, #96]	; 0x60
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_GPIO_Init+0x2c0>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ee8:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_GPIO_Init+0x2c4>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f12:	d00d      	beq.n	8002f30 <HAL_GPIO_Init+0x1d4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_GPIO_Init+0x2c8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <HAL_GPIO_Init+0x1d0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a42      	ldr	r2, [pc, #264]	; (8003028 <HAL_GPIO_Init+0x2cc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_GPIO_Init+0x1cc>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e004      	b.n	8002f32 <HAL_GPIO_Init+0x1d6>
 8002f28:	2307      	movs	r3, #7
 8002f2a:	e002      	b.n	8002f32 <HAL_GPIO_Init+0x1d6>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_GPIO_Init+0x1d6>
 8002f30:	2300      	movs	r3, #0
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	f002 0203 	and.w	r2, r2, #3
 8002f38:	0092      	lsls	r2, r2, #2
 8002f3a:	4093      	lsls	r3, r2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f42:	4937      	ldr	r1, [pc, #220]	; (8003020 <HAL_GPIO_Init+0x2c4>)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f74:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f9e:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc8:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_GPIO_Init+0x2d0>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f aeaf 	bne.w	8002d6c <HAL_GPIO_Init+0x10>
  }
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	40010000 	.word	0x40010000
 8003024:	48000400 	.word	0x48000400
 8003028:	48000800 	.word	0x48000800
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800304c:	e002      	b.n	8003054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e081      	b.n	8003176 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fe5c 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e006      	b.n	80030e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d104      	bne.n	80030fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d138      	bne.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319e:	2302      	movs	r3, #2
 80031a0:	e032      	b.n	8003208 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2224      	movs	r2, #36	; 0x24
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	d139      	bne.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003234:	2302      	movs	r3, #2
 8003236:	e033      	b.n	80032a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003266:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000

080032c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d6:	d130      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d038      	beq.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2232      	movs	r2, #50	; 0x32
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	3301      	adds	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800330c:	e002      	b.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b01      	subs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003320:	d102      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f2      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d110      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e00f      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003346:	d007      	beq.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003356:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40007000 	.word	0x40007000
 800336c:	20000000 	.word	0x20000000
 8003370:	431bde83 	.word	0x431bde83

08003374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f000 bc02 	b.w	8003b8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003388:	4b96      	ldr	r3, [pc, #600]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003392:	4b94      	ldr	r3, [pc, #592]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80e4 	beq.w	8003572 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4c>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	f040 808b 	bne.w	80034ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 8087 	bne.w	80034ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c0:	4b88      	ldr	r3, [pc, #544]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x64>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e3d9      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_RCC_OscConfig+0x7e>
 80033e8:	4b7e      	ldr	r3, [pc, #504]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	e005      	b.n	80033fe <HAL_RCC_OscConfig+0x8a>
 80033f2:	4b7c      	ldr	r3, [pc, #496]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fe:	4293      	cmp	r3, r2
 8003400:	d223      	bcs.n	800344a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fe1e 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e3ba      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003416:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a72      	ldr	r2, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	496d      	ldr	r1, [pc, #436]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	4968      	ldr	r1, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	e025      	b.n	8003496 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a65      	ldr	r2, [pc, #404]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4960      	ldr	r1, [pc, #384]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	495b      	ldr	r1, [pc, #364]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fdde 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e37a      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003496:	f000 fcb5 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b51      	ldr	r3, [pc, #324]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	4950      	ldr	r1, [pc, #320]	; (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_RCC_OscConfig+0x278>)
 80034b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fcf2 	bl	8000ea4 <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d052      	beq.n	8003570 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	e35e      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d032      	beq.n	800353c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a42      	ldr	r2, [pc, #264]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e2:	f7fd fe69 	bl	80011b8 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ea:	f7fd fe65 	bl	80011b8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e347      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034fc:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4930      	ldr	r1, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003526:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	492b      	ldr	r1, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
 800353a:	e01a      	b.n	8003572 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003548:	f7fd fe36 	bl	80011b8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003550:	f7fd fe32 	bl	80011b8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e314      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1dc>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d073      	beq.n	8003666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d005      	beq.n	8003590 <HAL_RCC_OscConfig+0x21c>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d10e      	bne.n	80035a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d063      	beq.n	8003664 <HAL_RCC_OscConfig+0x2f0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d15f      	bne.n	8003664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e2f1      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x24c>
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e025      	b.n	800360c <HAL_RCC_OscConfig+0x298>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d114      	bne.n	80035f4 <HAL_RCC_OscConfig+0x280>
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a02      	ldr	r2, [pc, #8]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x298>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	08008fc4 	.word	0x08008fc4
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004
 80035f4:	4ba0      	ldr	r3, [pc, #640]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a9f      	ldr	r2, [pc, #636]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b9d      	ldr	r3, [pc, #628]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a9c      	ldr	r2, [pc, #624]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd fdd0 	bl	80011b8 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7fd fdcc 	bl	80011b8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e2ae      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362e:	4b92      	ldr	r3, [pc, #584]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x2a8>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fdbc 	bl	80011b8 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fdb8 	bl	80011b8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e29a      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d0>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d060      	beq.n	8003734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x310>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d119      	bne.n	80036b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d116      	bne.n	80036b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003684:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_OscConfig+0x328>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e277      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	4973      	ldr	r1, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	e040      	b.n	8003734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d023      	beq.n	8003702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ba:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fd fd77 	bl	80011b8 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fd fd73 	bl	80011b8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e255      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e0:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	495f      	ldr	r1, [pc, #380]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
 8003700:	e018      	b.n	8003734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fd fd53 	bl	80011b8 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003716:	f7fd fd4f 	bl	80011b8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e231      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03c      	beq.n	80037ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003748:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fd fd2e 	bl	80011b8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003760:	f7fd fd2a 	bl	80011b8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e20c      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <HAL_RCC_OscConfig+0x3ec>
 8003780:	e01b      	b.n	80037ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd fd11 	bl	80011b8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379a:	f7fd fd0d 	bl	80011b8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1ef      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ac:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ef      	bne.n	800379a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80a6 	beq.w	8003914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f4:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_RCC_OscConfig+0x508>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d118      	bne.n	8003832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b1e      	ldr	r3, [pc, #120]	; (800387c <HAL_RCC_OscConfig+0x508>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_RCC_OscConfig+0x508>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380c:	f7fd fcd4 	bl	80011b8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fd fcd0 	bl	80011b8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1b2      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_RCC_OscConfig+0x508>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d108      	bne.n	800384c <HAL_RCC_OscConfig+0x4d8>
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384a:	e029      	b.n	80038a0 <HAL_RCC_OscConfig+0x52c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d115      	bne.n	8003880 <HAL_RCC_OscConfig+0x50c>
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a07      	ldr	r2, [pc, #28]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4a03      	ldr	r2, [pc, #12]	; (8003878 <HAL_RCC_OscConfig+0x504>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003874:	e014      	b.n	80038a0 <HAL_RCC_OscConfig+0x52c>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
 8003880:	4b9a      	ldr	r3, [pc, #616]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a99      	ldr	r2, [pc, #612]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003890:	4b96      	ldr	r3, [pc, #600]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a95      	ldr	r2, [pc, #596]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d016      	beq.n	80038d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fc86 	bl	80011b8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd fc82 	bl	80011b8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e162      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	4b89      	ldr	r3, [pc, #548]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ed      	beq.n	80038b0 <HAL_RCC_OscConfig+0x53c>
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd fc6f 	bl	80011b8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fc6b 	bl	80011b8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e14b      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f4:	4b7d      	ldr	r3, [pc, #500]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ed      	bne.n	80038de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b78      	ldr	r3, [pc, #480]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a77      	ldr	r2, [pc, #476]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d03c      	beq.n	800399a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01c      	beq.n	8003962 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003928:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 800392a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392e:	4a6f      	ldr	r2, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fd fc3e 	bl	80011b8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003940:	f7fd fc3a 	bl	80011b8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e11c      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003952:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ef      	beq.n	8003940 <HAL_RCC_OscConfig+0x5cc>
 8003960:	e01b      	b.n	800399a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003962:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003968:	4a60      	ldr	r2, [pc, #384]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd fc21 	bl	80011b8 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800397a:	f7fd fc1d 	bl	80011b8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0ff      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800398c:	4b57      	ldr	r3, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ef      	bne.n	800397a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80f3 	beq.w	8003b8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	f040 80c9 	bne.w	8003b40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039ae:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d12c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	3b01      	subs	r3, #1
 80039ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d123      	bne.n	8003a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d11b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d113      	bne.n	8003a1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	3b01      	subs	r3, #1
 8003a02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	3b01      	subs	r3, #1
 8003a16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d06b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d062      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a22:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0ac      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2d      	ldr	r2, [pc, #180]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a3e:	f7fd fbbb 	bl	80011b8 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd fbb7 	bl	80011b8 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e099      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_RCC_OscConfig+0x77c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a74:	3a01      	subs	r2, #1
 8003a76:	0112      	lsls	r2, r2, #4
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7e:	0212      	lsls	r2, r2, #8
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0552      	lsls	r2, r2, #21
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9e:	06d2      	lsls	r2, r2, #27
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4912      	ldr	r1, [pc, #72]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac0:	f7fd fb7a 	bl	80011b8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fb76 	bl	80011b8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e058      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <HAL_RCC_OscConfig+0x778>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae6:	e050      	b.n	8003b8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e04f      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
 8003aec:	40021000 	.word	0x40021000
 8003af0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d144      	bne.n	8003b8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b0c:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b18:	f7fd fb4e 	bl	80011b8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd fb4a 	bl	80011b8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e02c      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x7ac>
 8003b3e:	e024      	b.n	8003b8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d01f      	beq.n	8003b86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fd fb31 	bl	80011b8 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd fb2d 	bl	80011b8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e00f      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	4905      	ldr	r1, [pc, #20]	; (8003b94 <HAL_RCC_OscConfig+0x820>)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x824>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
 8003b84:	e001      	b.n	8003b8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	feeefffc 	.word	0xfeeefffc

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0e7      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d910      	bls.n	8003be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b72      	ldr	r3, [pc, #456]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	4970      	ldr	r1, [pc, #448]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b6e      	ldr	r3, [pc, #440]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0cf      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d908      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4960      	ldr	r1, [pc, #384]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04c      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c22:	4b5a      	ldr	r3, [pc, #360]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d121      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0a6      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e09a      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e08e      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e086      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b46      	ldr	r3, [pc, #280]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4943      	ldr	r1, [pc, #268]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fd fa98 	bl	80011b8 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd fa94 	bl	80011b8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e06e      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d208      	bcs.n	8003ce2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	492b      	ldr	r1, [pc, #172]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d210      	bcs.n	8003d12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 0207 	bic.w	r2, r3, #7
 8003cf8:	4923      	ldr	r1, [pc, #140]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_ClockConfig+0x1ec>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e036      	b.n	8003d80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4918      	ldr	r1, [pc, #96]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4910      	ldr	r1, [pc, #64]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d50:	f000 f858 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	490b      	ldr	r1, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1f4>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1f8>)
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1fc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd f895 	bl	8000ea4 <HAL_InitTick>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40022000 	.word	0x40022000
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08008fc4 	.word	0x08008fc4
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000004 	.word	0x20000004

08003d9c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_MCOConfig+0x64>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_RCC_MCOConfig+0x64>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_MCOConfig+0x64>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de0:	f7fe ffbc 	bl	8002d5c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_MCOConfig+0x64>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_MCOConfig+0x64>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d121      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d11e      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e004      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e88:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d134      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ea8:	e005      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eb2:	617b      	str	r3, [r7, #20]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	617b      	str	r3, [r7, #20]
      break;
 8003eba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	fb03 f202 	mul.w	r2, r3, r2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	0e5b      	lsrs	r3, r3, #25
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	3301      	adds	r3, #1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08008fdc 	.word	0x08008fdc
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4904      	ldr	r1, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08008fd4 	.word	0x08008fd4

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f64:	f7ff ffda 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4904      	ldr	r1, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08008fd4 	.word	0x08008fd4

08003f8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	220f      	movs	r2, #15
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCC_GetClockConfig+0x60>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40022000 	.word	0x40022000

08003ff0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_EnableCSS+0x1c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_RCC_EnableCSS+0x1c>)
 8003ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d105      	bne.n	800402e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004022:	f000 f809 	bl	8004038 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004026:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402c:	621a      	str	r2, [r3, #32]
  }
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7ff f924 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
 8004066:	e014      	b.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7ff f914 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d10b      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d919      	bls.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2ba0      	cmp	r3, #160	; 0xa0
 80040a4:	d902      	bls.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a6:	2302      	movs	r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e013      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e010      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d902      	bls.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e00a      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d102      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c4:	2302      	movs	r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e004      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d101      	bne.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	4909      	ldr	r1, [pc, #36]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40022000 	.word	0x40022000

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004110:	2300      	movs	r3, #0
 8004112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004114:	2300      	movs	r3, #0
 8004116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d031      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800412c:	d01a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800412e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004132:	d814      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d009      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800413c:	d10f      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800413e:	4b5d      	ldr	r3, [pc, #372]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	4a5c      	ldr	r2, [pc, #368]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414a:	e00c      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f9ce 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	74fb      	strb	r3, [r7, #19]
      break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416c:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	494e      	ldr	r1, [pc, #312]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004182:	e001      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 809e 	beq.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4a3f      	ldr	r2, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6593      	str	r3, [r2, #88]	; 0x58
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a39      	ldr	r2, [pc, #228]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d8:	f7fc ffee 	bl	80011b8 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041de:	e009      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fc ffea 	bl	80011b8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d902      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	74fb      	strb	r3, [r7, #19]
        break;
 80041f2:	e005      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d15a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	429a      	cmp	r2, r3
 8004220:	d019      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fc ffaa 	bl	80011b8 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	e00b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fc ffa6 	bl	80011b8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d902      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	74fb      	strb	r3, [r7, #19]
            break;
 800427e:	e006      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ec      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	4904      	ldr	r1, [pc, #16]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c0:	7c7b      	ldrb	r3, [r7, #17]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b8a      	ldr	r3, [pc, #552]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	4a89      	ldr	r2, [pc, #548]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042de:	4b84      	ldr	r3, [pc, #528]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f023 0203 	bic.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4980      	ldr	r1, [pc, #512]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004300:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 020c 	bic.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	4978      	ldr	r1, [pc, #480]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004322:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	496f      	ldr	r1, [pc, #444]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004344:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	4967      	ldr	r1, [pc, #412]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004366:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	495e      	ldr	r1, [pc, #376]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004388:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4956      	ldr	r1, [pc, #344]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043aa:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	494d      	ldr	r1, [pc, #308]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d028      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043cc:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4945      	ldr	r1, [pc, #276]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ea:	d106      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b40      	ldr	r3, [pc, #256]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a3f      	ldr	r2, [pc, #252]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
 80043f8:	e011      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004402:	d10c      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f872 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d028      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	492d      	ldr	r1, [pc, #180]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004448:	d106      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004454:	60d3      	str	r3, [r2, #12]
 8004456:	e011      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f843 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01c      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	4916      	ldr	r1, [pc, #88]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f820 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	4904      	ldr	r1, [pc, #16]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000

080044f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004502:	4b74      	ldr	r3, [pc, #464]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800450e:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0203 	and.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d10d      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
       ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004526:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
       ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d047      	beq.n	80045ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	e044      	b.n	80045ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d018      	beq.n	800457a <RCCEx_PLLSAI1_Config+0x86>
 8004548:	2b03      	cmp	r3, #3
 800454a:	d825      	bhi.n	8004598 <RCCEx_PLLSAI1_Config+0xa4>
 800454c:	2b01      	cmp	r3, #1
 800454e:	d002      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0x62>
 8004550:	2b02      	cmp	r3, #2
 8004552:	d009      	beq.n	8004568 <RCCEx_PLLSAI1_Config+0x74>
 8004554:	e020      	b.n	8004598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004556:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11d      	bne.n	800459e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004566:	e01a      	b.n	800459e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d116      	bne.n	80045a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004578:	e013      	b.n	80045a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800457a:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004586:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004596:	e006      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      break;
 800459c:	e004      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	430b      	orrs	r3, r1
 80045c4:	4943      	ldr	r1, [pc, #268]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d17c      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fc fdec 	bl	80011b8 <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e2:	e009      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e4:	f7fc fde8 	bl	80011b8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d902      	bls.n	80045f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	73fb      	strb	r3, [r7, #15]
        break;
 80045f6:	e005      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ef      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d15f      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d110      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004610:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6892      	ldr	r2, [r2, #8]
 8004620:	0211      	lsls	r1, r2, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68d2      	ldr	r2, [r2, #12]
 8004626:	06d2      	lsls	r2, r2, #27
 8004628:	430a      	orrs	r2, r1
 800462a:	492a      	ldr	r1, [pc, #168]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
 8004630:	e027      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d112      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6892      	ldr	r2, [r2, #8]
 8004648:	0211      	lsls	r1, r2, #8
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6912      	ldr	r2, [r2, #16]
 800464e:	0852      	lsrs	r2, r2, #1
 8004650:	3a01      	subs	r2, #1
 8004652:	0552      	lsls	r2, r2, #21
 8004654:	430a      	orrs	r2, r1
 8004656:	491f      	ldr	r1, [pc, #124]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]
 800465c:	e011      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	0211      	lsls	r1, r2, #8
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6952      	ldr	r2, [r2, #20]
 8004674:	0852      	lsrs	r2, r2, #1
 8004676:	3a01      	subs	r2, #1
 8004678:	0652      	lsls	r2, r2, #25
 800467a:	430a      	orrs	r2, r1
 800467c:	4915      	ldr	r1, [pc, #84]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800468c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fc fd93 	bl	80011b8 <HAL_GetTick>
 8004692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004694:	e009      	b.n	80046aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004696:	f7fc fd8f 	bl	80011b8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d902      	bls.n	80046aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	73fb      	strb	r3, [r7, #15]
          break;
 80046a8:	e005      	b.n	80046b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ef      	beq.n	8004696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e049      	b.n	800477e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f841 	bl	8004786 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 f9dc 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d001      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e03b      	b.n	800482c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_TIM_Base_Start_IT+0x9c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_TIM_Base_Start_IT+0x4e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d004      	beq.n	80047ea <HAL_TIM_Base_Start_IT+0x4e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <HAL_TIM_Base_Start_IT+0xa0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d115      	bne.n	8004816 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_TIM_Base_Start_IT+0xa4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b06      	cmp	r3, #6
 80047fa:	d015      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x8c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d011      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	e008      	b.n	8004828 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e000      	b.n	800482a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40014000 	.word	0x40014000
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0202 	mvn.w	r2, #2
 8004870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f905 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8f7 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f908 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0204 	mvn.w	r2, #4
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8db 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8cd 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8de 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b08      	cmp	r3, #8
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0208 	mvn.w	r2, #8
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2204      	movs	r2, #4
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8b1 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f8a3 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8b4 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0210 	mvn.w	r2, #16
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2208      	movs	r2, #8
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f887 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f879 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f88a 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0201 	mvn.w	r2, #1
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc f8a6 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8de 	bl	8004bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d10e      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8d1 	bl	8004bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d10e      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f838 	bl	8004abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d10e      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d107      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0220 	mvn.w	r2, #32
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f891 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <TIM_Base_SetConfig+0xbc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0x20>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d108      	bne.n	8004b06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <TIM_Base_SetConfig+0xbc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x52>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x52>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <TIM_Base_SetConfig+0xc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x52>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <TIM_Base_SetConfig+0xc4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <TIM_Base_SetConfig+0xbc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0xa0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <TIM_Base_SetConfig+0xc0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0xa0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <TIM_Base_SetConfig+0xc4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d103      	bne.n	8004b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	615a      	str	r2, [r3, #20]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e040      	b.n	8004c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc f8fa 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8c0 	bl	8004d9c <UART_SetConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fae0 	bl	80051f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb67 	bl	8005338 <UART_CheckIdleState>
 8004c6a:	4603      	mov	r3, r0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	f040 8082 	bne.w	8004d92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_UART_Transmit+0x26>
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07a      	b.n	8004d94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_UART_Transmit+0x38>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e073      	b.n	8004d94 <HAL_UART_Transmit+0x120>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fa79 	bl	80011b8 <HAL_GetTick>
 8004cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_UART_Transmit+0x80>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e003      	b.n	8004cfc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d04:	e02d      	b.n	8004d62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fb5a 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e039      	b.n	8004d94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d32:	b292      	uxth	r2, r2
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e008      	b.n	8004d50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b292      	uxth	r2, r2
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1cb      	bne.n	8004d06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2140      	movs	r1, #64	; 0x40
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fb26 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e005      	b.n	8004d94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b08a      	sub	sp, #40	; 0x28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4bb4      	ldr	r3, [pc, #720]	; (800509c <UART_SetConfig+0x300>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4aa9      	ldr	r2, [pc, #676]	; (80050a0 <UART_SetConfig+0x304>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	4313      	orrs	r3, r2
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4aa0      	ldr	r2, [pc, #640]	; (80050a4 <UART_SetConfig+0x308>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d126      	bne.n	8004e74 <UART_SetConfig+0xd8>
 8004e26:	4ba0      	ldr	r3, [pc, #640]	; (80050a8 <UART_SetConfig+0x30c>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d81b      	bhi.n	8004e6c <UART_SetConfig+0xd0>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0xa0>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e65 	.word	0x08004e65
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e080      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e07c      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e078      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e074      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e070      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a8c      	ldr	r2, [pc, #560]	; (80050ac <UART_SetConfig+0x310>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d138      	bne.n	8004ef0 <UART_SetConfig+0x154>
 8004e7e:	4b8a      	ldr	r3, [pc, #552]	; (80050a8 <UART_SetConfig+0x30c>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d82d      	bhi.n	8004ee8 <UART_SetConfig+0x14c>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0xf8>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004ee9 	.word	0x08004ee9
 8004e9c:	08004ee9 	.word	0x08004ee9
 8004ea0:	08004ee9 	.word	0x08004ee9
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ee9 	.word	0x08004ee9
 8004eac:	08004ee9 	.word	0x08004ee9
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ee9 	.word	0x08004ee9
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e042      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e03e      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e03a      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e036      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e032      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6a      	ldr	r2, [pc, #424]	; (80050a0 <UART_SetConfig+0x304>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d12a      	bne.n	8004f50 <UART_SetConfig+0x1b4>
 8004efa:	4b6b      	ldr	r3, [pc, #428]	; (80050a8 <UART_SetConfig+0x30c>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f08:	d01a      	beq.n	8004f40 <UART_SetConfig+0x1a4>
 8004f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f0e:	d81b      	bhi.n	8004f48 <UART_SetConfig+0x1ac>
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x194>
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1a:	d815      	bhi.n	8004f48 <UART_SetConfig+0x1ac>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <UART_SetConfig+0x18c>
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d008      	beq.n	8004f38 <UART_SetConfig+0x19c>
 8004f26:	e00f      	b.n	8004f48 <UART_SetConfig+0x1ac>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e012      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f36:	e00e      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3e:	e00a      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e006      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e002      	b.n	8004f56 <UART_SetConfig+0x1ba>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a51      	ldr	r2, [pc, #324]	; (80050a0 <UART_SetConfig+0x304>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d17a      	bne.n	8005056 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d824      	bhi.n	8004fb2 <UART_SetConfig+0x216>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0x1d4>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fa3 	.word	0x08004fa3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fb3 	.word	0x08004fb3
 8004f8c:	08004fb3 	.word	0x08004fb3
 8004f90:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7fe ffce 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8004f98:	61f8      	str	r0, [r7, #28]
        break;
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <UART_SetConfig+0x314>)
 8004f9e:	61fb      	str	r3, [r7, #28]
        break;
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe ff2f 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8004fa6:	61f8      	str	r0, [r7, #28]
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fae:	61fb      	str	r3, [r7, #28]
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8107 	beq.w	80051d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d305      	bcc.n	8004fe2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d903      	bls.n	8004fea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe8:	e0f4      	b.n	80051d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2200      	movs	r2, #0
 8004fee:	461c      	mov	r4, r3
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	022b      	lsls	r3, r5, #8
 8004ffc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005000:	0222      	lsls	r2, r4, #8
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6849      	ldr	r1, [r1, #4]
 8005006:	0849      	lsrs	r1, r1, #1
 8005008:	2000      	movs	r0, #0
 800500a:	4688      	mov	r8, r1
 800500c:	4681      	mov	r9, r0
 800500e:	eb12 0a08 	adds.w	sl, r2, r8
 8005012:	eb43 0b09 	adc.w	fp, r3, r9
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005024:	4650      	mov	r0, sl
 8005026:	4659      	mov	r1, fp
 8005028:	f7fb f922 	bl	8000270 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503a:	d308      	bcc.n	800504e <UART_SetConfig+0x2b2>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005042:	d204      	bcs.n	800504e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	60da      	str	r2, [r3, #12]
 800504c:	e0c2      	b.n	80051d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005054:	e0be      	b.n	80051d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d16a      	bne.n	8005136 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005064:	2b08      	cmp	r3, #8
 8005066:	d834      	bhi.n	80050d2 <UART_SetConfig+0x336>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x2d4>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005095 	.word	0x08005095
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050d3 	.word	0x080050d3
 8005080:	080050c3 	.word	0x080050c3
 8005084:	080050d3 	.word	0x080050d3
 8005088:	080050d3 	.word	0x080050d3
 800508c:	080050d3 	.word	0x080050d3
 8005090:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe ff4e 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8005098:	61f8      	str	r0, [r7, #28]
        break;
 800509a:	e020      	b.n	80050de <UART_SetConfig+0x342>
 800509c:	efff69f3 	.word	0xefff69f3
 80050a0:	40008000 	.word	0x40008000
 80050a4:	40013800 	.word	0x40013800
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40004400 	.word	0x40004400
 80050b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fe ff54 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 80050b8:	61f8      	str	r0, [r7, #28]
        break;
 80050ba:	e010      	b.n	80050de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <UART_SetConfig+0x454>)
 80050be:	61fb      	str	r3, [r7, #28]
        break;
 80050c0:	e00d      	b.n	80050de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fe fe9f 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 80050c6:	61f8      	str	r0, [r7, #28]
        break;
 80050c8:	e009      	b.n	80050de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	61fb      	str	r3, [r7, #28]
        break;
 80050d0:	e005      	b.n	80050de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d077      	beq.n	80051d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	005a      	lsls	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	441a      	add	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d916      	bls.n	800512e <UART_SetConfig+0x392>
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d212      	bcs.n	800512e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f023 030f 	bic.w	r3, r3, #15
 8005110:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	b29a      	uxth	r2, r3
 800511e:	8afb      	ldrh	r3, [r7, #22]
 8005120:	4313      	orrs	r3, r2
 8005122:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	8afa      	ldrh	r2, [r7, #22]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	e052      	b.n	80051d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005134:	e04e      	b.n	80051d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800513a:	2b08      	cmp	r3, #8
 800513c:	d827      	bhi.n	800518e <UART_SetConfig+0x3f2>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0x3a8>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005169 	.word	0x08005169
 8005148:	08005171 	.word	0x08005171
 800514c:	08005179 	.word	0x08005179
 8005150:	0800518f 	.word	0x0800518f
 8005154:	0800517f 	.word	0x0800517f
 8005158:	0800518f 	.word	0x0800518f
 800515c:	0800518f 	.word	0x0800518f
 8005160:	0800518f 	.word	0x0800518f
 8005164:	08005187 	.word	0x08005187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7fe fee4 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 800516c:	61f8      	str	r0, [r7, #28]
        break;
 800516e:	e014      	b.n	800519a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe fef6 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8005174:	61f8      	str	r0, [r7, #28]
        break;
 8005176:	e010      	b.n	800519a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <UART_SetConfig+0x454>)
 800517a:	61fb      	str	r3, [r7, #28]
        break;
 800517c:	e00d      	b.n	800519a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe fe41 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8005182:	61f8      	str	r0, [r7, #28]
        break;
 8005184:	e009      	b.n	800519a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e005      	b.n	800519a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005198:	bf00      	nop
    }

    if (pclk != 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	085a      	lsrs	r2, r3, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d909      	bls.n	80051ce <UART_SetConfig+0x432>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c0:	d205      	bcs.n	80051ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e002      	b.n	80051d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3728      	adds	r7, #40	; 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	00f42400 	.word	0x00f42400

080051f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f2:	d10a      	bne.n	800530a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005348:	f7fb ff36 	bl	80011b8 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d10e      	bne.n	800537a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f82d 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e023      	b.n	80053c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d10e      	bne.n	80053a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f817 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e00d      	b.n	80053c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b09c      	sub	sp, #112	; 0x70
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053da:	e0a5      	b.n	8005528 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	f000 80a1 	beq.w	8005528 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fb fee7 	bl	80011b8 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <UART_WaitOnFlagUntilTimeout+0x32>
 80053f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d13e      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005410:	667b      	str	r3, [r7, #100]	; 0x64
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e6      	bne.n	80053fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	663b      	str	r3, [r7, #96]	; 0x60
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800544e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005450:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e067      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d04f      	beq.n	8005528 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005496:	d147      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e6      	bne.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	613b      	str	r3, [r7, #16]
   return(result);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054f4:	623a      	str	r2, [r7, #32]
 80054f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	69f9      	ldr	r1, [r7, #28]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	61bb      	str	r3, [r7, #24]
   return(result);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e5      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e010      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4013      	ands	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	429a      	cmp	r2, r3
 8005544:	f43f af4a 	beq.w	80053dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3770      	adds	r7, #112	; 0x70
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <__NVIC_SetPriority>:
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005564:	2b00      	cmp	r3, #0
 8005566:	db0a      	blt.n	800557e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	490c      	ldr	r1, [pc, #48]	; (80055a0 <__NVIC_SetPriority+0x4c>)
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	0112      	lsls	r2, r2, #4
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	440b      	add	r3, r1
 8005578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800557c:	e00a      	b.n	8005594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	4908      	ldr	r1, [pc, #32]	; (80055a4 <__NVIC_SetPriority+0x50>)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	3b04      	subs	r3, #4
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	440b      	add	r3, r1
 8005592:	761a      	strb	r2, [r3, #24]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000e100 	.word	0xe000e100
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <SysTick_Handler+0x1c>)
 80055ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055b0:	f001 fcfe 	bl	8006fb0 <xTaskGetSchedulerState>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055ba:	f002 fae5 	bl	8007b88 <xPortSysTickHandler>
  }
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	e000e010 	.word	0xe000e010

080055c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055cc:	2100      	movs	r1, #0
 80055ce:	f06f 0004 	mvn.w	r0, #4
 80055d2:	f7ff ffbf 	bl	8005554 <__NVIC_SetPriority>
#endif
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e2:	f3ef 8305 	mrs	r3, IPSR
 80055e6:	603b      	str	r3, [r7, #0]
  return(result);
 80055e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055ee:	f06f 0305 	mvn.w	r3, #5
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e00c      	b.n	8005610 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <osKernelInitialize+0x44>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <osKernelInitialize+0x44>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e002      	b.n	8005610 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200002fc 	.word	0x200002fc

08005624 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562a:	f3ef 8305 	mrs	r3, IPSR
 800562e:	603b      	str	r3, [r7, #0]
  return(result);
 8005630:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005636:	f06f 0305 	mvn.w	r3, #5
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	e010      	b.n	8005660 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <osKernelStart+0x48>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d109      	bne.n	800565a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005646:	f7ff ffbf 	bl	80055c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <osKernelStart+0x48>)
 800564c:	2202      	movs	r2, #2
 800564e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005650:	f001 f866 	bl	8006720 <vTaskStartScheduler>
      stat = osOK;
 8005654:	2300      	movs	r3, #0
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e002      	b.n	8005660 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005660:	687b      	ldr	r3, [r7, #4]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200002fc 	.word	0x200002fc

08005670 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af04      	add	r7, sp, #16
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005680:	f3ef 8305 	mrs	r3, IPSR
 8005684:	617b      	str	r3, [r7, #20]
  return(result);
 8005686:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005688:	2b00      	cmp	r3, #0
 800568a:	d17e      	bne.n	800578a <osThreadNew+0x11a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d07b      	beq.n	800578a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005696:	2318      	movs	r3, #24
 8005698:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d045      	beq.n	8005736 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <osThreadNew+0x48>
        name = attr->name;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <osThreadNew+0x6e>
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b38      	cmp	r3, #56	; 0x38
 80056d0:	d805      	bhi.n	80056de <osThreadNew+0x6e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <osThreadNew+0x72>
        return (NULL);
 80056de:	2300      	movs	r3, #0
 80056e0:	e054      	b.n	800578c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00e      	beq.n	8005718 <osThreadNew+0xa8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b5b      	cmp	r3, #91	; 0x5b
 8005700:	d90a      	bls.n	8005718 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <osThreadNew+0xa8>
        mem = 1;
 8005712:	2301      	movs	r3, #1
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e010      	b.n	800573a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10c      	bne.n	800573a <osThreadNew+0xca>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d108      	bne.n	800573a <osThreadNew+0xca>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <osThreadNew+0xca>
          mem = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e001      	b.n	800573a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d110      	bne.n	8005762 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005748:	9202      	str	r2, [sp, #8]
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fe0c 	bl	8006374 <xTaskCreateStatic>
 800575c:	4603      	mov	r3, r0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e013      	b.n	800578a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	b29a      	uxth	r2, r3
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fe57 	bl	800642e <xTaskCreate>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d001      	beq.n	800578a <osThreadNew+0x11a>
            hTask = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800578a:	693b      	ldr	r3, [r7, #16]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3728      	adds	r7, #40	; 0x28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800579c:	f3ef 8305 	mrs	r3, IPSR
 80057a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <osDelay+0x1c>
    stat = osErrorISR;
 80057a8:	f06f 0305 	mvn.w	r3, #5
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	e007      	b.n	80057c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 ff7c 	bl	80066b8 <vTaskDelay>
    }
  }

  return (stat);
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80057dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a06      	ldr	r2, [pc, #24]	; (80057fc <vApplicationGetIdleTaskMemory+0x30>)
 80057e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2280      	movs	r2, #128	; 0x80
 80057e8:	601a      	str	r2, [r3, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000300 	.word	0x20000300
 80057fc:	2000035c 	.word	0x2000035c

08005800 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <vApplicationGetTimerTaskMemory+0x2c>)
 8005810:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a06      	ldr	r2, [pc, #24]	; (8005830 <vApplicationGetTimerTaskMemory+0x30>)
 8005816:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581e:	601a      	str	r2, [r3, #0]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	2000055c 	.word	0x2000055c
 8005830:	200005b8 	.word	0x200005b8

08005834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f103 0208 	add.w	r2, r3, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f103 0208 	add.w	r2, r3, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d103      	bne.n	80058f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e00c      	b.n	8005910 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3308      	adds	r3, #8
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e002      	b.n	8005904 <vListInsert+0x2e>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	d2f6      	bcs.n	80058fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6892      	ldr	r2, [r2, #8]
 800595e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6852      	ldr	r2, [r2, #4]
 8005968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d103      	bne.n	800597c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059c6:	f002 f84d 	bl	8007a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	3b01      	subs	r3, #1
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d114      	bne.n	8005a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01a      	beq.n	8005a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3310      	adds	r3, #16
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f903 	bl	8006c34 <xTaskRemoveFromEventList>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d012      	beq.n	8005a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <xQueueGenericReset+0xcc>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e009      	b.n	8005a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3310      	adds	r3, #16
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fef2 	bl	8005834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff feed 	bl	8005834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a5a:	f002 f833 	bl	8007ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a5e:	2301      	movs	r3, #1
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <xQueueGenericCreateStatic+0x52>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xQueueGenericCreateStatic+0x56>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericCreateStatic+0x58>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	623b      	str	r3, [r7, #32]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <xQueueGenericCreateStatic+0x7e>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <xQueueGenericCreateStatic+0x82>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <xQueueGenericCreateStatic+0x84>
 8005aee:	2300      	movs	r3, #0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61fb      	str	r3, [r7, #28]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b0a:	2350      	movs	r3, #80	; 0x50
 8005b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b50      	cmp	r3, #80	; 0x50
 8005b12:	d00a      	beq.n	8005b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61bb      	str	r3, [r7, #24]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	4613      	mov	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f805 	bl	8005b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3730      	adds	r7, #48	; 0x30
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	69b8      	ldr	r0, [r7, #24]
 8005b8e:	f7ff ff05 	bl	800599c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericSend+0x32>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <xQueueGenericSend+0x40>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <xQueueGenericSend+0x44>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <xQueueGenericSend+0x46>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <xQueueGenericSend+0x60>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d103      	bne.n	8005c12 <xQueueGenericSend+0x6e>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <xQueueGenericSend+0x72>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueGenericSend+0x74>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	623b      	str	r3, [r7, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c32:	f001 f9bd 	bl	8006fb0 <xTaskGetSchedulerState>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <xQueueGenericSend+0x9e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <xQueueGenericSend+0xa2>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueGenericSend+0xa4>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericSend+0xbe>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61fb      	str	r3, [r7, #28]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c62:	f001 feff 	bl	8007a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <xQueueGenericSend+0xd4>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d129      	bne.n	8005ccc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7e:	f000 fa0b 	bl	8006098 <prvCopyDataToQueue>
 8005c82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	3324      	adds	r3, #36	; 0x24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 ffcf 	bl	8006c34 <xTaskRemoveFromEventList>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c9c:	4b3f      	ldr	r3, [pc, #252]	; (8005d9c <xQueueGenericSend+0x1f8>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	e00a      	b.n	8005cc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cb4:	4b39      	ldr	r3, [pc, #228]	; (8005d9c <xQueueGenericSend+0x1f8>)
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cc4:	f001 fefe 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e063      	b.n	8005d94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cd2:	f001 fef7 	bl	8007ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e05c      	b.n	8005d94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f809 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cea:	2301      	movs	r3, #1
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cee:	f001 fee9 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cf2:	f000 fd7b 	bl	80067ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf6:	f001 feb5 	bl	8007a64 <vPortEnterCritical>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d103      	bne.n	8005d10 <xQueueGenericSend+0x16c>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d103      	bne.n	8005d26 <xQueueGenericSend+0x182>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d26:	f001 fecd 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d2a:	1d3a      	adds	r2, r7, #4
 8005d2c:	f107 0314 	add.w	r3, r7, #20
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fff8 	bl	8006d28 <xTaskCheckForTimeOut>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d124      	bne.n	8005d88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d40:	f000 faa2 	bl	8006288 <prvIsQueueFull>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 ff1e 	bl	8006b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d5a:	f000 fa2d 	bl	80061b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d5e:	f000 fd53 	bl	8006808 <xTaskResumeAll>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f47f af7c 	bne.w	8005c62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <xQueueGenericSend+0x1f8>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	e772      	b.n	8005c62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7e:	f000 fa1b 	bl	80061b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d82:	f000 fd41 	bl	8006808 <xTaskResumeAll>
 8005d86:	e76c      	b.n	8005c62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d8a:	f000 fa15 	bl	80061b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d8e:	f000 fd3b 	bl	8006808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3738      	adds	r7, #56	; 0x38
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b090      	sub	sp, #64	; 0x40
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <xQueueGenericSendFromISR+0x3c>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <xQueueGenericSendFromISR+0x40>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueGenericSendFromISR+0x42>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSendFromISR+0x6a>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <xQueueGenericSendFromISR+0x6e>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueGenericSendFromISR+0x70>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e2a:	f001 fefd 	bl	8007c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	61fa      	str	r2, [r7, #28]
 8005e44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <xQueueGenericSendFromISR+0xbc>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d12f      	bne.n	8005ebc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e72:	f000 f911 	bl	8006098 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d112      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d016      	beq.n	8005eb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	3324      	adds	r3, #36	; 0x24
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fed1 	bl	8006c34 <xTaskRemoveFromEventList>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e007      	b.n	8005eb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eaa:	3301      	adds	r3, #1
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	b25a      	sxtb	r2, r3
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005eba:	e001      	b.n	8005ec0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3740      	adds	r7, #64	; 0x40
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	; 0x30
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <xQueueReceive+0x30>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	623b      	str	r3, [r7, #32]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <xQueueReceive+0x3e>
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <xQueueReceive+0x42>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <xQueueReceive+0x44>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xQueueReceive+0x5e>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	61fb      	str	r3, [r7, #28]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f36:	f001 f83b 	bl	8006fb0 <xTaskGetSchedulerState>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <xQueueReceive+0x6e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <xQueueReceive+0x72>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <xQueueReceive+0x74>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xQueueReceive+0x8e>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f66:	f001 fd7d 	bl	8007a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01f      	beq.n	8005fb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7a:	f000 f8f7 	bl	800616c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	3310      	adds	r3, #16
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fe4e 	bl	8006c34 <xTaskRemoveFromEventList>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f9e:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <xQueueReceive+0x1bc>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fae:	f001 fd89 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e069      	b.n	800608a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fbc:	f001 fd82 	bl	8007ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e062      	b.n	800608a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fca:	f107 0310 	add.w	r3, r7, #16
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fe94 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fd8:	f001 fd74 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fdc:	f000 fc06 	bl	80067ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fe0:	f001 fd40 	bl	8007a64 <vPortEnterCritical>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <xQueueReceive+0x122>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006000:	b25b      	sxtb	r3, r3
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d103      	bne.n	8006010 <xQueueReceive+0x138>
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006010:	f001 fd58 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006014:	1d3a      	adds	r2, r7, #4
 8006016:	f107 0310 	add.w	r3, r7, #16
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fe83 	bl	8006d28 <xTaskCheckForTimeOut>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d123      	bne.n	8006070 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602a:	f000 f917 	bl	800625c <prvIsQueueEmpty>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d017      	beq.n	8006064 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4611      	mov	r1, r2
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fda9 	bl	8006b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006044:	f000 f8b8 	bl	80061b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006048:	f000 fbde 	bl	8006808 <xTaskResumeAll>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d189      	bne.n	8005f66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <xQueueReceive+0x1bc>)
 8006054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	e780      	b.n	8005f66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f000 f8a7 	bl	80061b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800606a:	f000 fbcd 	bl	8006808 <xTaskResumeAll>
 800606e:	e77a      	b.n	8005f66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006072:	f000 f8a1 	bl	80061b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006076:	f000 fbc7 	bl	8006808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800607a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607c:	f000 f8ee 	bl	800625c <prvIsQueueEmpty>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f43f af6f 	beq.w	8005f66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006088:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800608a:	4618      	mov	r0, r3
 800608c:	3730      	adds	r7, #48	; 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d14d      	bne.n	800615a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 ff92 	bl	8006fec <xTaskPriorityDisinherit>
 80060c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	609a      	str	r2, [r3, #8]
 80060d0:	e043      	b.n	800615a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d119      	bne.n	800610c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6858      	ldr	r0, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	461a      	mov	r2, r3
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	f002 f95d 	bl	80083a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d32b      	bcc.n	800615a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	e026      	b.n	800615a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68d8      	ldr	r0, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	461a      	mov	r2, r3
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	f002 f943 	bl	80083a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	425b      	negs	r3, r3
 8006126:	441a      	add	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d207      	bcs.n	8006148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	425b      	negs	r3, r3
 8006142:	441a      	add	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d105      	bne.n	800615a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3b01      	subs	r3, #1
 8006158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006162:	697b      	ldr	r3, [r7, #20]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	441a      	add	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d303      	bcc.n	80061a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68d9      	ldr	r1, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	461a      	mov	r2, r3
 80061aa:	6838      	ldr	r0, [r7, #0]
 80061ac:	f002 f8f9 	bl	80083a2 <memcpy>
	}
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061c0:	f001 fc50 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061cc:	e011      	b.n	80061f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d012      	beq.n	80061fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fd2a 	bl	8006c34 <xTaskRemoveFromEventList>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061e6:	f000 fe01 	bl	8006dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dce9      	bgt.n	80061ce <prvUnlockQueue+0x16>
 80061fa:	e000      	b.n	80061fe <prvUnlockQueue+0x46>
					break;
 80061fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006206:	f001 fc5d 	bl	8007ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800620a:	f001 fc2b 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006216:	e011      	b.n	800623c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d012      	beq.n	8006246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3310      	adds	r3, #16
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fd05 	bl	8006c34 <xTaskRemoveFromEventList>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006230:	f000 fddc 	bl	8006dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	3b01      	subs	r3, #1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800623c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dce9      	bgt.n	8006218 <prvUnlockQueue+0x60>
 8006244:	e000      	b.n	8006248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006250:	f001 fc38 	bl	8007ac4 <vPortExitCritical>
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006264:	f001 fbfe 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e001      	b.n	800627a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800627a:	f001 fc23 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006290:	f001 fbe8 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	429a      	cmp	r2, r3
 800629e:	d102      	bne.n	80062a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e001      	b.n	80062aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 fc0b 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 80062ae:	68fb      	ldr	r3, [r7, #12]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e014      	b.n	80062f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062c8:	4a0f      	ldr	r2, [pc, #60]	; (8006308 <vQueueAddToRegistry+0x50>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062d4:	490c      	ldr	r1, [pc, #48]	; (8006308 <vQueueAddToRegistry+0x50>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <vQueueAddToRegistry+0x50>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4413      	add	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062ea:	e006      	b.n	80062fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b07      	cmp	r3, #7
 80062f6:	d9e7      	bls.n	80062c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	200009b8 	.word	0x200009b8

0800630c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800631c:	f001 fba2 	bl	8007a64 <vPortEnterCritical>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006326:	b25b      	sxtb	r3, r3
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d103      	bne.n	8006336 <vQueueWaitForMessageRestricted+0x2a>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633c:	b25b      	sxtb	r3, r3
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d103      	bne.n	800634c <vQueueWaitForMessageRestricted+0x40>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800634c:	f001 fbba 	bl	8007ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	3324      	adds	r3, #36	; 0x24
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fc3b 	bl	8006bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006366:	6978      	ldr	r0, [r7, #20]
 8006368:	f7ff ff26 	bl	80061b8 <prvUnlockQueue>
	}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08e      	sub	sp, #56	; 0x38
 8006378:	af04      	add	r7, sp, #16
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	623b      	str	r3, [r7, #32]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xTaskCreateStatic+0x46>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	61fb      	str	r3, [r7, #28]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063ba:	235c      	movs	r3, #92	; 0x5c
 80063bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b5c      	cmp	r3, #92	; 0x5c
 80063c2:	d00a      	beq.n	80063da <xTaskCreateStatic+0x66>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61bb      	str	r3, [r7, #24]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01e      	beq.n	8006420 <xTaskCreateStatic+0xac>
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063fa:	2300      	movs	r3, #0
 80063fc:	9303      	str	r3, [sp, #12]
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	f107 0314 	add.w	r3, r7, #20
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f850 	bl	80064b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800641a:	f000 f8dd 	bl	80065d8 <prvAddNewTaskToReadyList>
 800641e:	e001      	b.n	8006424 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006424:	697b      	ldr	r3, [r7, #20]
	}
 8006426:	4618      	mov	r0, r3
 8006428:	3728      	adds	r7, #40	; 0x28
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800642e:	b580      	push	{r7, lr}
 8006430:	b08c      	sub	sp, #48	; 0x30
 8006432:	af04      	add	r7, sp, #16
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	4613      	mov	r3, r2
 800643c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fc30 	bl	8007ca8 <pvPortMalloc>
 8006448:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006450:	205c      	movs	r0, #92	; 0x5c
 8006452:	f001 fc29 	bl	8007ca8 <pvPortMalloc>
 8006456:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
 8006464:	e005      	b.n	8006472 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	f001 fcea 	bl	8007e40 <vPortFree>
 800646c:	e001      	b.n	8006472 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	2300      	movs	r3, #0
 8006484:	9303      	str	r3, [sp, #12]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	9302      	str	r3, [sp, #8]
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f80e 	bl	80064b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800649c:	69f8      	ldr	r0, [r7, #28]
 800649e:	f000 f89b 	bl	80065d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064a2:	2301      	movs	r3, #1
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e002      	b.n	80064ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064ae:	69bb      	ldr	r3, [r7, #24]
	}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	21a5      	movs	r1, #165	; 0xa5
 80064d2:	f001 feea 	bl	80082aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064e0:	3b01      	subs	r3, #1
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f023 0307 	bic.w	r3, r3, #7
 80064ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <prvInitialiseNewTask+0x58>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	617b      	str	r3, [r7, #20]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01f      	beq.n	8006556 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	e012      	b.n	8006542 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	7819      	ldrb	r1, [r3, #0]
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	3334      	adds	r3, #52	; 0x34
 800652c:	460a      	mov	r2, r1
 800652e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	3301      	adds	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b0f      	cmp	r3, #15
 8006546:	d9e9      	bls.n	800651c <prvInitialiseNewTask+0x64>
 8006548:	e000      	b.n	800654c <prvInitialiseNewTask+0x94>
			{
				break;
 800654a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006554:	e003      	b.n	800655e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	2b37      	cmp	r3, #55	; 0x37
 8006562:	d901      	bls.n	8006568 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006564:	2337      	movs	r3, #55	; 0x37
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006572:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2200      	movs	r2, #0
 8006578:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff f978 	bl	8005874 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	3318      	adds	r3, #24
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff f973 	bl	8005874 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006592:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	2200      	movs	r2, #0
 80065a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68f9      	ldr	r1, [r7, #12]
 80065b6:	69b8      	ldr	r0, [r7, #24]
 80065b8:	f001 f928 	bl	800780c <pxPortInitialiseStack>
 80065bc:	4602      	mov	r2, r0
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ce:	bf00      	nop
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065e0:	f001 fa40 	bl	8007a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065e4:	4b2d      	ldr	r3, [pc, #180]	; (800669c <prvAddNewTaskToReadyList+0xc4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	4a2c      	ldr	r2, [pc, #176]	; (800669c <prvAddNewTaskToReadyList+0xc4>)
 80065ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ee:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <prvAddNewTaskToReadyList+0xc8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065f6:	4a2a      	ldr	r2, [pc, #168]	; (80066a0 <prvAddNewTaskToReadyList+0xc8>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <prvAddNewTaskToReadyList+0xc4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d110      	bne.n	8006626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006604:	f000 fc16 	bl	8006e34 <prvInitialiseTaskLists>
 8006608:	e00d      	b.n	8006626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800660a:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <prvAddNewTaskToReadyList+0xcc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006612:	4b23      	ldr	r3, [pc, #140]	; (80066a0 <prvAddNewTaskToReadyList+0xc8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	429a      	cmp	r2, r3
 800661e:	d802      	bhi.n	8006626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <prvAddNewTaskToReadyList+0xc8>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <prvAddNewTaskToReadyList+0xd0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <prvAddNewTaskToReadyList+0xd0>)
 800662e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <prvAddNewTaskToReadyList+0xd0>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <prvAddNewTaskToReadyList+0xd4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d903      	bls.n	800664c <prvAddNewTaskToReadyList+0x74>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	4a18      	ldr	r2, [pc, #96]	; (80066ac <prvAddNewTaskToReadyList+0xd4>)
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <prvAddNewTaskToReadyList+0xd8>)
 800665a:	441a      	add	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7ff f913 	bl	800588e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006668:	f001 fa2c 	bl	8007ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <prvAddNewTaskToReadyList+0xcc>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <prvAddNewTaskToReadyList+0xc8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	429a      	cmp	r2, r3
 8006680:	d207      	bcs.n	8006692 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <prvAddNewTaskToReadyList+0xdc>)
 8006684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000ecc 	.word	0x20000ecc
 80066a0:	200009f8 	.word	0x200009f8
 80066a4:	20000ed8 	.word	0x20000ed8
 80066a8:	20000ee8 	.word	0x20000ee8
 80066ac:	20000ed4 	.word	0x20000ed4
 80066b0:	200009fc 	.word	0x200009fc
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d017      	beq.n	80066fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ca:	4b13      	ldr	r3, [pc, #76]	; (8006718 <vTaskDelay+0x60>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <vTaskDelay+0x30>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	60bb      	str	r3, [r7, #8]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066e8:	f000 f880 	bl	80067ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066ec:	2100      	movs	r1, #0
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fcea 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066f4:	f000 f888 	bl	8006808 <xTaskResumeAll>
 80066f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d107      	bne.n	8006710 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006700:	4b06      	ldr	r3, [pc, #24]	; (800671c <vTaskDelay+0x64>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000ef4 	.word	0x20000ef4
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800672e:	463a      	mov	r2, r7
 8006730:	1d39      	adds	r1, r7, #4
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff f848 	bl	80057cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	9202      	str	r2, [sp, #8]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	2300      	movs	r3, #0
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	460a      	mov	r2, r1
 800674e:	4921      	ldr	r1, [pc, #132]	; (80067d4 <vTaskStartScheduler+0xb4>)
 8006750:	4821      	ldr	r0, [pc, #132]	; (80067d8 <vTaskStartScheduler+0xb8>)
 8006752:	f7ff fe0f 	bl	8006374 <xTaskCreateStatic>
 8006756:	4603      	mov	r3, r0
 8006758:	4a20      	ldr	r2, [pc, #128]	; (80067dc <vTaskStartScheduler+0xbc>)
 800675a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800675c:	4b1f      	ldr	r3, [pc, #124]	; (80067dc <vTaskStartScheduler+0xbc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e001      	b.n	800676e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d102      	bne.n	800677a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006774:	f000 fcfc 	bl	8007170 <xTimerCreateTimerTask>
 8006778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d116      	bne.n	80067ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <vTaskStartScheduler+0xc0>)
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <vTaskStartScheduler+0xc4>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <vTaskStartScheduler+0xc8>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067a8:	f001 f8ba 	bl	8007920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067ac:	e00e      	b.n	80067cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d10a      	bne.n	80067cc <vTaskStartScheduler+0xac>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <vTaskStartScheduler+0xaa>
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08008f64 	.word	0x08008f64
 80067d8:	08006e05 	.word	0x08006e05
 80067dc:	20000ef0 	.word	0x20000ef0
 80067e0:	20000eec 	.word	0x20000eec
 80067e4:	20000ed8 	.word	0x20000ed8
 80067e8:	20000ed0 	.word	0x20000ed0

080067ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <vTaskSuspendAll+0x18>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	4a03      	ldr	r2, [pc, #12]	; (8006804 <vTaskSuspendAll+0x18>)
 80067f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	20000ef4 	.word	0x20000ef4

08006808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006816:	4b42      	ldr	r3, [pc, #264]	; (8006920 <xTaskResumeAll+0x118>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <xTaskResumeAll+0x2c>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	603b      	str	r3, [r7, #0]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006834:	f001 f916 	bl	8007a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006838:	4b39      	ldr	r3, [pc, #228]	; (8006920 <xTaskResumeAll+0x118>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	4a38      	ldr	r2, [pc, #224]	; (8006920 <xTaskResumeAll+0x118>)
 8006840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006842:	4b37      	ldr	r3, [pc, #220]	; (8006920 <xTaskResumeAll+0x118>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d162      	bne.n	8006910 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <xTaskResumeAll+0x11c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d05e      	beq.n	8006910 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006852:	e02f      	b.n	80068b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006854:	4b34      	ldr	r3, [pc, #208]	; (8006928 <xTaskResumeAll+0x120>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff f871 	bl	8005948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f86c 	bl	8005948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b2d      	ldr	r3, [pc, #180]	; (800692c <xTaskResumeAll+0x124>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <xTaskResumeAll+0x7c>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a2a      	ldr	r2, [pc, #168]	; (800692c <xTaskResumeAll+0x124>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a27      	ldr	r2, [pc, #156]	; (8006930 <xTaskResumeAll+0x128>)
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe fff7 	bl	800588e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4b23      	ldr	r3, [pc, #140]	; (8006934 <xTaskResumeAll+0x12c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ae:	4b22      	ldr	r3, [pc, #136]	; (8006938 <xTaskResumeAll+0x130>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068b4:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <xTaskResumeAll+0x120>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1cb      	bne.n	8006854 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068c2:	f000 fb55 	bl	8006f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <xTaskResumeAll+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f000 f847 	bl	8006964 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <xTaskResumeAll+0x130>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <xTaskResumeAll+0x134>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <xTaskResumeAll+0x130>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <xTaskResumeAll+0x138>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f001 f8d8 	bl	8007ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8006914:	68bb      	ldr	r3, [r7, #8]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000ef4 	.word	0x20000ef4
 8006924:	20000ecc 	.word	0x20000ecc
 8006928:	20000e8c 	.word	0x20000e8c
 800692c:	20000ed4 	.word	0x20000ed4
 8006930:	200009fc 	.word	0x200009fc
 8006934:	200009f8 	.word	0x200009f8
 8006938:	20000ee0 	.word	0x20000ee0
 800693c:	20000edc 	.word	0x20000edc
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <xTaskGetTickCount+0x1c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006950:	687b      	ldr	r3, [r7, #4]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000ed0 	.word	0x20000ed0

08006964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696e:	4b4f      	ldr	r3, [pc, #316]	; (8006aac <xTaskIncrementTick+0x148>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f040 808f 	bne.w	8006a96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006978:	4b4d      	ldr	r3, [pc, #308]	; (8006ab0 <xTaskIncrementTick+0x14c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006980:	4a4b      	ldr	r2, [pc, #300]	; (8006ab0 <xTaskIncrementTick+0x14c>)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d120      	bne.n	80069ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800698c:	4b49      	ldr	r3, [pc, #292]	; (8006ab4 <xTaskIncrementTick+0x150>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <xTaskIncrementTick+0x46>
 80069ac:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <xTaskIncrementTick+0x150>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <xTaskIncrementTick+0x154>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a3f      	ldr	r2, [pc, #252]	; (8006ab4 <xTaskIncrementTick+0x150>)
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <xTaskIncrementTick+0x154>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	4b3e      	ldr	r3, [pc, #248]	; (8006abc <xTaskIncrementTick+0x158>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a3d      	ldr	r2, [pc, #244]	; (8006abc <xTaskIncrementTick+0x158>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	f000 fad1 	bl	8006f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ce:	4b3c      	ldr	r3, [pc, #240]	; (8006ac0 <xTaskIncrementTick+0x15c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d349      	bcc.n	8006a6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d8:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <xTaskIncrementTick+0x150>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e2:	4b37      	ldr	r3, [pc, #220]	; (8006ac0 <xTaskIncrementTick+0x15c>)
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	601a      	str	r2, [r3, #0]
					break;
 80069ea:	e03f      	b.n	8006a6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ec:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <xTaskIncrementTick+0x150>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d203      	bcs.n	8006a0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a04:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <xTaskIncrementTick+0x15c>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a0a:	e02f      	b.n	8006a6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe ff99 	bl	8005948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3318      	adds	r3, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe ff90 	bl	8005948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2c:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <xTaskIncrementTick+0x160>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <xTaskIncrementTick+0xd8>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <xTaskIncrementTick+0x160>)
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <xTaskIncrementTick+0x164>)
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f7fe ff1b 	bl	800588e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <xTaskIncrementTick+0x168>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3b8      	bcc.n	80069d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a6a:	e7b5      	b.n	80069d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a6c:	4b17      	ldr	r3, [pc, #92]	; (8006acc <xTaskIncrementTick+0x168>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4915      	ldr	r1, [pc, #84]	; (8006ac8 <xTaskIncrementTick+0x164>)
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d901      	bls.n	8006a88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a84:	2301      	movs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a88:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <xTaskIncrementTick+0x16c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e004      	b.n	8006aa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <xTaskIncrementTick+0x170>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <xTaskIncrementTick+0x170>)
 8006a9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006aa0:	697b      	ldr	r3, [r7, #20]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000ef4 	.word	0x20000ef4
 8006ab0:	20000ed0 	.word	0x20000ed0
 8006ab4:	20000e84 	.word	0x20000e84
 8006ab8:	20000e88 	.word	0x20000e88
 8006abc:	20000ee4 	.word	0x20000ee4
 8006ac0:	20000eec 	.word	0x20000eec
 8006ac4:	20000ed4 	.word	0x20000ed4
 8006ac8:	200009fc 	.word	0x200009fc
 8006acc:	200009f8 	.word	0x200009f8
 8006ad0:	20000ee0 	.word	0x20000ee0
 8006ad4:	20000edc 	.word	0x20000edc

08006ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <vTaskSwitchContext+0xa8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ae6:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <vTaskSwitchContext+0xac>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006aec:	e041      	b.n	8006b72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006aee:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <vTaskSwitchContext+0xac>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <vTaskSwitchContext+0xb0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	e010      	b.n	8006b1e <vTaskSwitchContext+0x46>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	607b      	str	r3, [r7, #4]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <vTaskSwitchContext+0x3e>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	491b      	ldr	r1, [pc, #108]	; (8006b8c <vTaskSwitchContext+0xb4>)
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0e4      	beq.n	8006afc <vTaskSwitchContext+0x24>
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <vTaskSwitchContext+0xb4>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	605a      	str	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3308      	adds	r3, #8
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d104      	bne.n	8006b62 <vTaskSwitchContext+0x8a>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <vTaskSwitchContext+0xb8>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	4a06      	ldr	r2, [pc, #24]	; (8006b88 <vTaskSwitchContext+0xb0>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6013      	str	r3, [r2, #0]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000ef4 	.word	0x20000ef4
 8006b84:	20000ee0 	.word	0x20000ee0
 8006b88:	20000ed4 	.word	0x20000ed4
 8006b8c:	200009fc 	.word	0x200009fc
 8006b90:	200009f8 	.word	0x200009f8

08006b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	60fb      	str	r3, [r7, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <vTaskPlaceOnEventList+0x44>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3318      	adds	r3, #24
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fe fe87 	bl	80058d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bc8:	2101      	movs	r1, #1
 8006bca:	6838      	ldr	r0, [r7, #0]
 8006bcc:	f000 fa7c 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	200009f8 	.word	0x200009f8

08006bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	617b      	str	r3, [r7, #20]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7fe fe3e 	bl	800588e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	f000 fa51 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
	}
 8006c26:	bf00      	nop
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200009f8 	.word	0x200009f8

08006c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	60fb      	str	r3, [r7, #12]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3318      	adds	r3, #24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe fe6f 	bl	8005948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <xTaskRemoveFromEventList+0xb0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11d      	bne.n	8006cae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fe66 	bl	8005948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <xTaskRemoveFromEventList+0xb4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d903      	bls.n	8006c90 <xTaskRemoveFromEventList+0x5c>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	4a16      	ldr	r2, [pc, #88]	; (8006ce8 <xTaskRemoveFromEventList+0xb4>)
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <xTaskRemoveFromEventList+0xb8>)
 8006c9e:	441a      	add	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fe fdf1 	bl	800588e <vListInsertEnd>
 8006cac:	e005      	b.n	8006cba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	480e      	ldr	r0, [pc, #56]	; (8006cf0 <xTaskRemoveFromEventList+0xbc>)
 8006cb6:	f7fe fdea 	bl	800588e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <xTaskRemoveFromEventList+0xc0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d905      	bls.n	8006cd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <xTaskRemoveFromEventList+0xc4>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e001      	b.n	8006cd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cd8:	697b      	ldr	r3, [r7, #20]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000ef4 	.word	0x20000ef4
 8006ce8:	20000ed4 	.word	0x20000ed4
 8006cec:	200009fc 	.word	0x200009fc
 8006cf0:	20000e8c 	.word	0x20000e8c
 8006cf4:	200009f8 	.word	0x200009f8
 8006cf8:	20000ee0 	.word	0x20000ee0

08006cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <vTaskInternalSetTimeOutState+0x24>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <vTaskInternalSetTimeOutState+0x28>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000ee4 	.word	0x20000ee4
 8006d24:	20000ed0 	.word	0x20000ed0

08006d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	613b      	str	r3, [r7, #16]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d6a:	f000 fe7b 	bl	8007a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <xTaskCheckForTimeOut+0xbc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d102      	bne.n	8006d8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e023      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <xTaskCheckForTimeOut+0xc0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d007      	beq.n	8006daa <xTaskCheckForTimeOut+0x82>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d302      	bcc.n	8006daa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e015      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d20b      	bcs.n	8006dcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff9b 	bl	8006cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e004      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dd6:	f000 fe75 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 8006dda:	69fb      	ldr	r3, [r7, #28]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000ed0 	.word	0x20000ed0
 8006de8:	20000ee4 	.word	0x20000ee4

08006dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006df0:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <vTaskMissedYield+0x14>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000ee0 	.word	0x20000ee0

08006e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e0c:	f000 f852 	bl	8006eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <prvIdleTask+0x28>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d9f9      	bls.n	8006e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <prvIdleTask+0x2c>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e28:	e7f0      	b.n	8006e0c <prvIdleTask+0x8>
 8006e2a:	bf00      	nop
 8006e2c:	200009fc 	.word	0x200009fc
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e00c      	b.n	8006e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a12      	ldr	r2, [pc, #72]	; (8006e94 <prvInitialiseTaskLists+0x60>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fcf0 	bl	8005834 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3301      	adds	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b37      	cmp	r3, #55	; 0x37
 8006e5e:	d9ef      	bls.n	8006e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e60:	480d      	ldr	r0, [pc, #52]	; (8006e98 <prvInitialiseTaskLists+0x64>)
 8006e62:	f7fe fce7 	bl	8005834 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e66:	480d      	ldr	r0, [pc, #52]	; (8006e9c <prvInitialiseTaskLists+0x68>)
 8006e68:	f7fe fce4 	bl	8005834 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e6c:	480c      	ldr	r0, [pc, #48]	; (8006ea0 <prvInitialiseTaskLists+0x6c>)
 8006e6e:	f7fe fce1 	bl	8005834 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e72:	480c      	ldr	r0, [pc, #48]	; (8006ea4 <prvInitialiseTaskLists+0x70>)
 8006e74:	f7fe fcde 	bl	8005834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e78:	480b      	ldr	r0, [pc, #44]	; (8006ea8 <prvInitialiseTaskLists+0x74>)
 8006e7a:	f7fe fcdb 	bl	8005834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <prvInitialiseTaskLists+0x78>)
 8006e80:	4a05      	ldr	r2, [pc, #20]	; (8006e98 <prvInitialiseTaskLists+0x64>)
 8006e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvInitialiseTaskLists+0x7c>)
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <prvInitialiseTaskLists+0x68>)
 8006e88:	601a      	str	r2, [r3, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200009fc 	.word	0x200009fc
 8006e98:	20000e5c 	.word	0x20000e5c
 8006e9c:	20000e70 	.word	0x20000e70
 8006ea0:	20000e8c 	.word	0x20000e8c
 8006ea4:	20000ea0 	.word	0x20000ea0
 8006ea8:	20000eb8 	.word	0x20000eb8
 8006eac:	20000e84 	.word	0x20000e84
 8006eb0:	20000e88 	.word	0x20000e88

08006eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eba:	e019      	b.n	8006ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ebc:	f000 fdd2 	bl	8007a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <prvCheckTasksWaitingTermination+0x50>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fd3b 	bl	8005948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <prvCheckTasksWaitingTermination+0x54>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	4a0b      	ldr	r2, [pc, #44]	; (8006f08 <prvCheckTasksWaitingTermination+0x54>)
 8006eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ee6:	f000 fded 	bl	8007ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f810 	bl	8006f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e1      	bne.n	8006ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000ea0 	.word	0x20000ea0
 8006f08:	20000ecc 	.word	0x20000ecc
 8006f0c:	20000eb4 	.word	0x20000eb4

08006f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 ff8a 	bl	8007e40 <vPortFree>
				vPortFree( pxTCB );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ff87 	bl	8007e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f32:	e018      	b.n	8006f66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d103      	bne.n	8006f46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ff7e 	bl	8007e40 <vPortFree>
	}
 8006f44:	e00f      	b.n	8006f66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d00a      	beq.n	8006f66 <prvDeleteTCB+0x56>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <prvDeleteTCB+0x54>
	}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f88:	e008      	b.n	8006f9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000e84 	.word	0x20000e84
 8006fac:	20000eec 	.word	0x20000eec

08006fb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <xTaskGetSchedulerState+0x34>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	e008      	b.n	8006fd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <xTaskGetSchedulerState+0x38>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	e001      	b.n	8006fd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fd6:	687b      	ldr	r3, [r7, #4]
	}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000ed8 	.word	0x20000ed8
 8006fe8:	20000ef4 	.word	0x20000ef4

08006fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d056      	beq.n	80070b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <xTaskPriorityDisinherit+0xd0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d00a      	beq.n	8007022 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60fb      	str	r3, [r7, #12]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60bb      	str	r3, [r7, #8]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	429a      	cmp	r2, r3
 8007054:	d02c      	beq.n	80070b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705a:	2b00      	cmp	r3, #0
 800705c:	d128      	bne.n	80070b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3304      	adds	r3, #4
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fc70 	bl	8005948 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <xTaskPriorityDisinherit+0xd4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d903      	bls.n	8007090 <xTaskPriorityDisinherit+0xa4>
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <xTaskPriorityDisinherit+0xd4>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <xTaskPriorityDisinherit+0xd8>)
 800709e:	441a      	add	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fbf1 	bl	800588e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070b0:	697b      	ldr	r3, [r7, #20]
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200009f8 	.word	0x200009f8
 80070c0:	20000ed4 	.word	0x20000ed4
 80070c4:	200009fc 	.word	0x200009fc

080070c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <prvAddCurrentTaskToDelayedList+0x90>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d8:	4b20      	ldr	r3, [pc, #128]	; (800715c <prvAddCurrentTaskToDelayedList+0x94>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc32 	bl	8005948 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d10a      	bne.n	8007102 <prvAddCurrentTaskToDelayedList+0x3a>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070f2:	4b1a      	ldr	r3, [pc, #104]	; (800715c <prvAddCurrentTaskToDelayedList+0x94>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4819      	ldr	r0, [pc, #100]	; (8007160 <prvAddCurrentTaskToDelayedList+0x98>)
 80070fc:	f7fe fbc7 	bl	800588e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007100:	e026      	b.n	8007150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4413      	add	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <prvAddCurrentTaskToDelayedList+0x94>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	429a      	cmp	r2, r3
 8007118:	d209      	bcs.n	800712e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <prvAddCurrentTaskToDelayedList+0x94>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fe fbd5 	bl	80058d6 <vListInsert>
}
 800712c:	e010      	b.n	8007150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800712e:	4b0e      	ldr	r3, [pc, #56]	; (8007168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <prvAddCurrentTaskToDelayedList+0x94>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fbcb 	bl	80058d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	429a      	cmp	r2, r3
 8007148:	d202      	bcs.n	8007150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <prvAddCurrentTaskToDelayedList+0xa4>)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000ed0 	.word	0x20000ed0
 800715c:	200009f8 	.word	0x200009f8
 8007160:	20000eb8 	.word	0x20000eb8
 8007164:	20000e88 	.word	0x20000e88
 8007168:	20000e84 	.word	0x20000e84
 800716c:	20000eec 	.word	0x20000eec

08007170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	; 0x28
 8007174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800717a:	f000 fb07 	bl	800778c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800717e:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <xTimerCreateTimerTask+0x80>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d021      	beq.n	80071ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800718e:	1d3a      	adds	r2, r7, #4
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe fb31 	bl	8005800 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	9202      	str	r2, [sp, #8]
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	2302      	movs	r3, #2
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2300      	movs	r3, #0
 80071ae:	460a      	mov	r2, r1
 80071b0:	4910      	ldr	r1, [pc, #64]	; (80071f4 <xTimerCreateTimerTask+0x84>)
 80071b2:	4811      	ldr	r0, [pc, #68]	; (80071f8 <xTimerCreateTimerTask+0x88>)
 80071b4:	f7ff f8de 	bl	8006374 <xTaskCreateStatic>
 80071b8:	4603      	mov	r3, r0
 80071ba:	4a10      	ldr	r2, [pc, #64]	; (80071fc <xTimerCreateTimerTask+0x8c>)
 80071bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <xTimerCreateTimerTask+0x8c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071c6:	2301      	movs	r3, #1
 80071c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071e6:	697b      	ldr	r3, [r7, #20]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000f28 	.word	0x20000f28
 80071f4:	08008f6c 	.word	0x08008f6c
 80071f8:	08007335 	.word	0x08007335
 80071fc:	20000f2c 	.word	0x20000f2c

08007200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800720e:	2300      	movs	r3, #0
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	623b      	str	r3, [r7, #32]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <xTimerGenericCommand+0x98>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02a      	beq.n	800728c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b05      	cmp	r3, #5
 8007246:	dc18      	bgt.n	800727a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007248:	f7ff feb2 	bl	8006fb0 <xTaskGetSchedulerState>
 800724c:	4603      	mov	r3, r0
 800724e:	2b02      	cmp	r3, #2
 8007250:	d109      	bne.n	8007266 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <xTimerGenericCommand+0x98>)
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f107 0110 	add.w	r1, r7, #16
 800725a:	2300      	movs	r3, #0
 800725c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725e:	f7fe fca1 	bl	8005ba4 <xQueueGenericSend>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24
 8007264:	e012      	b.n	800728c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <xTimerGenericCommand+0x98>)
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f107 0110 	add.w	r1, r7, #16
 800726e:	2300      	movs	r3, #0
 8007270:	2200      	movs	r2, #0
 8007272:	f7fe fc97 	bl	8005ba4 <xQueueGenericSend>
 8007276:	6278      	str	r0, [r7, #36]	; 0x24
 8007278:	e008      	b.n	800728c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <xTimerGenericCommand+0x98>)
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	f107 0110 	add.w	r1, r7, #16
 8007282:	2300      	movs	r3, #0
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	f7fe fd8b 	bl	8005da0 <xQueueGenericSendFromISR>
 800728a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000f28 	.word	0x20000f28

0800729c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a6:	4b22      	ldr	r3, [pc, #136]	; (8007330 <prvProcessExpiredTimer+0x94>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fb47 	bl	8005948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d022      	beq.n	800730e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	18d1      	adds	r1, r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f000 f8d1 	bl	800747c <prvInsertTimerInActiveList>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01f      	beq.n	8007320 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072e0:	2300      	movs	r3, #0
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	2100      	movs	r1, #0
 80072ea:	6978      	ldr	r0, [r7, #20]
 80072ec:	f7ff ff88 	bl	8007200 <xTimerGenericCommand>
 80072f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d113      	bne.n	8007320 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60fb      	str	r3, [r7, #12]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	b2da      	uxtb	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	6978      	ldr	r0, [r7, #20]
 8007326:	4798      	blx	r3
}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000f20 	.word	0x20000f20

08007334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800733c:	f107 0308 	add.w	r3, r7, #8
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f857 	bl	80073f4 <prvGetNextExpireTime>
 8007346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4619      	mov	r1, r3
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f803 	bl	8007358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007352:	f000 f8d5 	bl	8007500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007356:	e7f1      	b.n	800733c <prvTimerTask+0x8>

08007358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007362:	f7ff fa43 	bl	80067ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007366:	f107 0308 	add.w	r3, r7, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f866 	bl	800743c <prvSampleTimeNow>
 8007370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d130      	bne.n	80073da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <prvProcessTimerOrBlockTask+0x3c>
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	429a      	cmp	r2, r3
 8007384:	d806      	bhi.n	8007394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007386:	f7ff fa3f 	bl	8006808 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ff85 	bl	800729c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007392:	e024      	b.n	80073de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800739a:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <prvProcessTimerOrBlockTask+0x90>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <prvProcessTimerOrBlockTask+0x50>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <prvProcessTimerOrBlockTask+0x52>
 80073a8:	2300      	movs	r3, #0
 80073aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <prvProcessTimerOrBlockTask+0x94>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f7fe ffa7 	bl	800630c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073be:	f7ff fa23 	bl	8006808 <xTaskResumeAll>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <prvProcessTimerOrBlockTask+0x98>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
}
 80073d8:	e001      	b.n	80073de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073da:	f7ff fa15 	bl	8006808 <xTaskResumeAll>
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000f24 	.word	0x20000f24
 80073ec:	20000f28 	.word	0x20000f28
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <prvGetNextExpireTime+0x44>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <prvGetNextExpireTime+0x16>
 8007406:	2201      	movs	r2, #1
 8007408:	e000      	b.n	800740c <prvGetNextExpireTime+0x18>
 800740a:	2200      	movs	r2, #0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <prvGetNextExpireTime+0x44>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	e001      	b.n	8007428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007428:	68fb      	ldr	r3, [r7, #12]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20000f20 	.word	0x20000f20

0800743c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007444:	f7ff fa7e 	bl	8006944 <xTaskGetTickCount>
 8007448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <prvSampleTimeNow+0x3c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d205      	bcs.n	8007460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007454:	f000 f936 	bl	80076c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e002      	b.n	8007466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007466:	4a04      	ldr	r2, [pc, #16]	; (8007478 <prvSampleTimeNow+0x3c>)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800746c:	68fb      	ldr	r3, [r7, #12]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000f30 	.word	0x20000f30

0800747c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d812      	bhi.n	80074c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d302      	bcc.n	80074b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e01b      	b.n	80074ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <prvInsertTimerInActiveList+0x7c>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fe fa08 	bl	80058d6 <vListInsert>
 80074c6:	e012      	b.n	80074ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d206      	bcs.n	80074de <prvInsertTimerInActiveList+0x62>
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d302      	bcc.n	80074de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e007      	b.n	80074ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <prvInsertTimerInActiveList+0x80>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f7fe f9f4 	bl	80058d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000f24 	.word	0x20000f24
 80074fc:	20000f20 	.word	0x20000f20

08007500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08e      	sub	sp, #56	; 0x38
 8007504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007506:	e0ca      	b.n	800769e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	da18      	bge.n	8007540 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	3304      	adds	r3, #4
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	61fb      	str	r3, [r7, #28]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007536:	6850      	ldr	r0, [r2, #4]
 8007538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753a:	6892      	ldr	r2, [r2, #8]
 800753c:	4611      	mov	r1, r2
 800753e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f2c0 80ab 	blt.w	800769e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	3304      	adds	r3, #4
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe f9f5 	bl	8005948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800755e:	463b      	mov	r3, r7
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ff6b 	bl	800743c <prvSampleTimeNow>
 8007566:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b09      	cmp	r3, #9
 800756c:	f200 8096 	bhi.w	800769c <prvProcessReceivedCommands+0x19c>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <prvProcessReceivedCommands+0x78>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	080075a1 	.word	0x080075a1
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a1 	.word	0x080075a1
 8007584:	08007615 	.word	0x08007615
 8007588:	08007629 	.word	0x08007629
 800758c:	08007673 	.word	0x08007673
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075a1 	.word	0x080075a1
 8007598:	08007615 	.word	0x08007615
 800759c:	08007629 	.word	0x08007629
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	18d1      	adds	r1, r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c0:	f7ff ff5c 	bl	800747c <prvInsertTimerInActiveList>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d069      	beq.n	800769e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d05e      	beq.n	800769e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	441a      	add	r2, r3
 80075e8:	2300      	movs	r3, #0
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f2:	f7ff fe05 	bl	8007200 <xTimerGenericCommand>
 80075f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d14f      	bne.n	800769e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	61bb      	str	r3, [r7, #24]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007626:	e03a      	b.n	800769e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	617b      	str	r3, [r7, #20]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	18d1      	adds	r1, r2, r3
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766c:	f7ff ff06 	bl	800747c <prvInsertTimerInActiveList>
					break;
 8007670:	e015      	b.n	800769e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007682:	f000 fbdd 	bl	8007e40 <vPortFree>
 8007686:	e00a      	b.n	800769e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800769a:	e000      	b.n	800769e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800769c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800769e:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <prvProcessReceivedCommands+0x1c0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1d39      	adds	r1, r7, #4
 80076a4:	2200      	movs	r2, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fc16 	bl	8005ed8 <xQueueReceive>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f47f af2a 	bne.w	8007508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	3730      	adds	r7, #48	; 0x30
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000f28 	.word	0x20000f28

080076c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ca:	e048      	b.n	800775e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <prvSwitchTimerLists+0xc0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d6:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <prvSwitchTimerLists+0xc0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f92f 	bl	8005948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d02e      	beq.n	800775e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d90e      	bls.n	8007730 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <prvSwitchTimerLists+0xc0>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fe f8d4 	bl	80058d6 <vListInsert>
 800772e:	e016      	b.n	800775e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007730:	2300      	movs	r3, #0
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	2100      	movs	r1, #0
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fd60 	bl	8007200 <xTimerGenericCommand>
 8007740:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	603b      	str	r3, [r7, #0]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <prvSwitchTimerLists+0xc0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1b1      	bne.n	80076cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <prvSwitchTimerLists+0xc0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <prvSwitchTimerLists+0xc4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a04      	ldr	r2, [pc, #16]	; (8007784 <prvSwitchTimerLists+0xc0>)
 8007774:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007776:	4a04      	ldr	r2, [pc, #16]	; (8007788 <prvSwitchTimerLists+0xc4>)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	6013      	str	r3, [r2, #0]
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000f20 	.word	0x20000f20
 8007788:	20000f24 	.word	0x20000f24

0800778c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007792:	f000 f967 	bl	8007a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007796:	4b15      	ldr	r3, [pc, #84]	; (80077ec <prvCheckForValidListAndQueue+0x60>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d120      	bne.n	80077e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800779e:	4814      	ldr	r0, [pc, #80]	; (80077f0 <prvCheckForValidListAndQueue+0x64>)
 80077a0:	f7fe f848 	bl	8005834 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077a4:	4813      	ldr	r0, [pc, #76]	; (80077f4 <prvCheckForValidListAndQueue+0x68>)
 80077a6:	f7fe f845 	bl	8005834 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <prvCheckForValidListAndQueue+0x6c>)
 80077ac:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <prvCheckForValidListAndQueue+0x64>)
 80077ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077b0:	4b12      	ldr	r3, [pc, #72]	; (80077fc <prvCheckForValidListAndQueue+0x70>)
 80077b2:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <prvCheckForValidListAndQueue+0x68>)
 80077b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077b6:	2300      	movs	r3, #0
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	4b11      	ldr	r3, [pc, #68]	; (8007800 <prvCheckForValidListAndQueue+0x74>)
 80077bc:	4a11      	ldr	r2, [pc, #68]	; (8007804 <prvCheckForValidListAndQueue+0x78>)
 80077be:	2110      	movs	r1, #16
 80077c0:	200a      	movs	r0, #10
 80077c2:	f7fe f953 	bl	8005a6c <xQueueGenericCreateStatic>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4a08      	ldr	r2, [pc, #32]	; (80077ec <prvCheckForValidListAndQueue+0x60>)
 80077ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <prvCheckForValidListAndQueue+0x60>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <prvCheckForValidListAndQueue+0x60>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	490b      	ldr	r1, [pc, #44]	; (8007808 <prvCheckForValidListAndQueue+0x7c>)
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fd6c 	bl	80062b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e0:	f000 f970 	bl	8007ac4 <vPortExitCritical>
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000f28 	.word	0x20000f28
 80077f0:	20000ef8 	.word	0x20000ef8
 80077f4:	20000f0c 	.word	0x20000f0c
 80077f8:	20000f20 	.word	0x20000f20
 80077fc:	20000f24 	.word	0x20000f24
 8007800:	20000fd4 	.word	0x20000fd4
 8007804:	20000f34 	.word	0x20000f34
 8007808:	08008f74 	.word	0x08008f74

0800780c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3b04      	subs	r3, #4
 800781c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b04      	subs	r3, #4
 800782a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800783c:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <pxPortInitialiseStack+0x64>)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3b14      	subs	r3, #20
 8007846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3b04      	subs	r3, #4
 8007852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f06f 0202 	mvn.w	r2, #2
 800785a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3b20      	subs	r3, #32
 8007860:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007862:	68fb      	ldr	r3, [r7, #12]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	08007875 	.word	0x08007875

08007874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <prvTaskExitError+0x54>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d00a      	beq.n	800789e <prvTaskExitError+0x2a>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60fb      	str	r3, [r7, #12]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <prvTaskExitError+0x28>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	60bb      	str	r3, [r7, #8]
}
 80078b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078b2:	bf00      	nop
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0fc      	beq.n	80078b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	00000000 	.word	0x00000000

080078d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <pxCurrentTCBConst2>)
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f380 8809 	msr	PSP, r0
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8811 	msr	BASEPRI, r0
 80078ea:	4770      	bx	lr
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst2>:
 80078f0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078f8:	4808      	ldr	r0, [pc, #32]	; (800791c <prvPortStartFirstTask+0x24>)
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	f380 8808 	msr	MSP, r0
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8814 	msr	CONTROL, r0
 800790a:	b662      	cpsie	i
 800790c:	b661      	cpsie	f
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	df00      	svc	0
 8007918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800791a:	bf00      	nop
 800791c:	e000ed08 	.word	0xe000ed08

08007920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007926:	4b46      	ldr	r3, [pc, #280]	; (8007a40 <xPortStartScheduler+0x120>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a46      	ldr	r2, [pc, #280]	; (8007a44 <xPortStartScheduler+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10a      	bne.n	8007946 <xPortStartScheduler+0x26>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007946:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <xPortStartScheduler+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x46>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <xPortStartScheduler+0x12c>)
 8007968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <xPortStartScheduler+0x130>)
 800798c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800798e:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <xPortStartScheduler+0x134>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007994:	e009      	b.n	80079aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007996:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <xPortStartScheduler+0x134>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3b01      	subs	r3, #1
 800799c:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <xPortStartScheduler+0x134>)
 800799e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d0ef      	beq.n	8007996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1c3 0307 	rsb	r3, r3, #7
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d00a      	beq.n	80079d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079d8:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <xPortStartScheduler+0x134>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <xPortStartScheduler+0x134>)
 80079ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <xPortStartScheduler+0x138>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <xPortStartScheduler+0x138>)
 80079fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a0e:	f000 f8dd 	bl	8007bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <xPortStartScheduler+0x13c>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a18:	f000 f8fc 	bl	8007c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a28:	f7ff ff66 	bl	80078f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a2c:	f7ff f854 	bl	8006ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a30:	f7ff ff20 	bl	8007874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	e000ed00 	.word	0xe000ed00
 8007a44:	410fc271 	.word	0x410fc271
 8007a48:	410fc270 	.word	0x410fc270
 8007a4c:	e000e400 	.word	0xe000e400
 8007a50:	20001024 	.word	0x20001024
 8007a54:	20001028 	.word	0x20001028
 8007a58:	e000ed20 	.word	0xe000ed20
 8007a5c:	2000000c 	.word	0x2000000c
 8007a60:	e000ef34 	.word	0xe000ef34

08007a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	607b      	str	r3, [r7, #4]
}
 8007a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <vPortEnterCritical+0x58>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <vPortEnterCritical+0x58>)
 8007a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <vPortEnterCritical+0x58>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <vPortEnterCritical+0x5c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	603b      	str	r3, [r7, #0]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vPortEnterCritical+0x4a>
	}
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	2000000c 	.word	0x2000000c
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <vPortExitCritical+0x50>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <vPortExitCritical+0x24>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	607b      	str	r3, [r7, #4]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <vPortExitCritical+0x50>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <vPortExitCritical+0x50>)
 8007af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007af2:	4b08      	ldr	r3, [pc, #32]	; (8007b14 <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <vPortExitCritical+0x42>
 8007afa:	2300      	movs	r3, #0
 8007afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f383 8811 	msr	BASEPRI, r3
}
 8007b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b20:	f3ef 8009 	mrs	r0, PSP
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <pxCurrentTCBConst>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f01e 0f10 	tst.w	lr, #16
 8007b30:	bf08      	it	eq
 8007b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6010      	str	r0, [r2, #0]
 8007b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b44:	f380 8811 	msr	BASEPRI, r0
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f7fe ffc2 	bl	8006ad8 <vTaskSwitchContext>
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f380 8811 	msr	BASEPRI, r0
 8007b5c:	bc09      	pop	{r0, r3}
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b66:	f01e 0f10 	tst.w	lr, #16
 8007b6a:	bf08      	it	eq
 8007b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b70:	f380 8809 	msr	PSP, r0
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst>:
 8007b80:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ba2:	f7fe fedf 	bl	8006964 <xTaskIncrementTick>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <xPortSysTickHandler+0x40>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <vPortSetupTimerInterrupt+0x38>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <vPortSetupTimerInterrupt+0x3c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <vPortSetupTimerInterrupt+0x40>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <vPortSetupTimerInterrupt+0x44>)
 8007bea:	3b01      	subs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bee:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	e000e010 	.word	0xe000e010
 8007c04:	e000e018 	.word	0xe000e018
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	10624dd3 	.word	0x10624dd3
 8007c10:	e000e014 	.word	0xe000e014

08007c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c24 <vPortEnableVFP+0x10>
 8007c18:	6801      	ldr	r1, [r0, #0]
 8007c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c1e:	6001      	str	r1, [r0, #0]
 8007c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c22:	bf00      	nop
 8007c24:	e000ed88 	.word	0xe000ed88

08007c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c2e:	f3ef 8305 	mrs	r3, IPSR
 8007c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d914      	bls.n	8007c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <vPortValidateInterruptPriority+0x70>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c44:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <vPortValidateInterruptPriority+0x74>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d20a      	bcs.n	8007c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <vPortValidateInterruptPriority+0x78>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <vPortValidateInterruptPriority+0x7c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d90a      	bls.n	8007c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	603b      	str	r3, [r7, #0]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vPortValidateInterruptPriority+0x60>
	}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	e000e3f0 	.word	0xe000e3f0
 8007c9c:	20001024 	.word	0x20001024
 8007ca0:	e000ed0c 	.word	0xe000ed0c
 8007ca4:	20001028 	.word	0x20001028

08007ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb4:	f7fe fd9a 	bl	80067ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb8:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <pvPortMalloc+0x180>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc0:	f000 f920 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc4:	4b59      	ldr	r3, [pc, #356]	; (8007e2c <pvPortMalloc+0x184>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8093 	bne.w	8007df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01d      	beq.n	8007d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <pvPortMalloc+0x6c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d06e      	beq.n	8007df8 <pvPortMalloc+0x150>
 8007d1a:	4b45      	ldr	r3, [pc, #276]	; (8007e30 <pvPortMalloc+0x188>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d869      	bhi.n	8007df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d24:	4b43      	ldr	r3, [pc, #268]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2e:	e004      	b.n	8007d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <pvPortMalloc+0xa4>
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f1      	bne.n	8007d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d4c:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <pvPortMalloc+0x180>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d050      	beq.n	8007df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	2308      	movs	r3, #8
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d91f      	bls.n	8007db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	613b      	str	r3, [r7, #16]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007db2:	69b8      	ldr	r0, [r7, #24]
 8007db4:	f000 f908 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <pvPortMalloc+0x188>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <pvPortMalloc+0x190>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d203      	bcs.n	8007dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dd2:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <pvPortMalloc+0x188>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <pvPortMalloc+0x190>)
 8007dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <pvPortMalloc+0x184>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x194>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <pvPortMalloc+0x194>)
 8007df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007df8:	f7fe fd06 	bl	8006808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <pvPortMalloc+0x174>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <pvPortMalloc+0x172>
	return pvReturn;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3728      	adds	r7, #40	; 0x28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20001bec 	.word	0x20001bec
 8007e2c:	20001c00 	.word	0x20001c00
 8007e30:	20001bf0 	.word	0x20001bf0
 8007e34:	20001be4 	.word	0x20001be4
 8007e38:	20001bf4 	.word	0x20001bf4
 8007e3c:	20001bf8 	.word	0x20001bf8

08007e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04d      	beq.n	8007eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e52:	2308      	movs	r3, #8
 8007e54:	425b      	negs	r3, r3
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <vPortFree+0xb8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <vPortFree+0x44>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <vPortFree+0x62>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60bb      	str	r3, [r7, #8]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <vPortFree+0xb8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01e      	beq.n	8007eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11a      	bne.n	8007eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <vPortFree+0xb8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ec8:	f7fe fc90 	bl	80067ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <vPortFree+0xbc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <vPortFree+0xbc>)
 8007ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eda:	6938      	ldr	r0, [r7, #16]
 8007edc:	f000 f874 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <vPortFree+0xc0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a06      	ldr	r2, [pc, #24]	; (8007f00 <vPortFree+0xc0>)
 8007ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eea:	f7fe fc8d 	bl	8006808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001c00 	.word	0x20001c00
 8007efc:	20001bf0 	.word	0x20001bf0
 8007f00:	20001bfc 	.word	0x20001bfc

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	2000102c 	.word	0x2000102c
 8007fb4:	20001be4 	.word	0x20001be4
 8007fb8:	20001bec 	.word	0x20001bec
 8007fbc:	20001bf4 	.word	0x20001bf4
 8007fc0:	20001bf0 	.word	0x20001bf0
 8007fc4:	20001c00 	.word	0x20001c00

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20001be4 	.word	0x20001be4
 8008078:	20001bec 	.word	0x20001bec

0800807c <std>:
 800807c:	2300      	movs	r3, #0
 800807e:	b510      	push	{r4, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	e9c0 3300 	strd	r3, r3, [r0]
 8008086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800808a:	6083      	str	r3, [r0, #8]
 800808c:	8181      	strh	r1, [r0, #12]
 800808e:	6643      	str	r3, [r0, #100]	; 0x64
 8008090:	81c2      	strh	r2, [r0, #14]
 8008092:	6183      	str	r3, [r0, #24]
 8008094:	4619      	mov	r1, r3
 8008096:	2208      	movs	r2, #8
 8008098:	305c      	adds	r0, #92	; 0x5c
 800809a:	f000 f906 	bl	80082aa <memset>
 800809e:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <std+0x58>)
 80080a0:	6263      	str	r3, [r4, #36]	; 0x24
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <std+0x5c>)
 80080a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080a6:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <std+0x60>)
 80080a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <std+0x64>)
 80080ac:	6323      	str	r3, [r4, #48]	; 0x30
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <std+0x68>)
 80080b0:	6224      	str	r4, [r4, #32]
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d006      	beq.n	80080c4 <std+0x48>
 80080b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80080ba:	4294      	cmp	r4, r2
 80080bc:	d002      	beq.n	80080c4 <std+0x48>
 80080be:	33d0      	adds	r3, #208	; 0xd0
 80080c0:	429c      	cmp	r4, r3
 80080c2:	d105      	bne.n	80080d0 <std+0x54>
 80080c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080cc:	f000 b966 	b.w	800839c <__retarget_lock_init_recursive>
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	08008225 	.word	0x08008225
 80080d8:	08008247 	.word	0x08008247
 80080dc:	0800827f 	.word	0x0800827f
 80080e0:	080082a3 	.word	0x080082a3
 80080e4:	20001c04 	.word	0x20001c04

080080e8 <stdio_exit_handler>:
 80080e8:	4a02      	ldr	r2, [pc, #8]	; (80080f4 <stdio_exit_handler+0xc>)
 80080ea:	4903      	ldr	r1, [pc, #12]	; (80080f8 <stdio_exit_handler+0x10>)
 80080ec:	4803      	ldr	r0, [pc, #12]	; (80080fc <stdio_exit_handler+0x14>)
 80080ee:	f000 b869 	b.w	80081c4 <_fwalk_sglue>
 80080f2:	bf00      	nop
 80080f4:	20000010 	.word	0x20000010
 80080f8:	08008c65 	.word	0x08008c65
 80080fc:	2000001c 	.word	0x2000001c

08008100 <cleanup_stdio>:
 8008100:	6841      	ldr	r1, [r0, #4]
 8008102:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <cleanup_stdio+0x34>)
 8008104:	4299      	cmp	r1, r3
 8008106:	b510      	push	{r4, lr}
 8008108:	4604      	mov	r4, r0
 800810a:	d001      	beq.n	8008110 <cleanup_stdio+0x10>
 800810c:	f000 fdaa 	bl	8008c64 <_fflush_r>
 8008110:	68a1      	ldr	r1, [r4, #8]
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <cleanup_stdio+0x38>)
 8008114:	4299      	cmp	r1, r3
 8008116:	d002      	beq.n	800811e <cleanup_stdio+0x1e>
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fda3 	bl	8008c64 <_fflush_r>
 800811e:	68e1      	ldr	r1, [r4, #12]
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <cleanup_stdio+0x3c>)
 8008122:	4299      	cmp	r1, r3
 8008124:	d004      	beq.n	8008130 <cleanup_stdio+0x30>
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812c:	f000 bd9a 	b.w	8008c64 <_fflush_r>
 8008130:	bd10      	pop	{r4, pc}
 8008132:	bf00      	nop
 8008134:	20001c04 	.word	0x20001c04
 8008138:	20001c6c 	.word	0x20001c6c
 800813c:	20001cd4 	.word	0x20001cd4

08008140 <global_stdio_init.part.0>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <global_stdio_init.part.0+0x30>)
 8008144:	4c0b      	ldr	r4, [pc, #44]	; (8008174 <global_stdio_init.part.0+0x34>)
 8008146:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <global_stdio_init.part.0+0x38>)
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	4620      	mov	r0, r4
 800814c:	2200      	movs	r2, #0
 800814e:	2104      	movs	r1, #4
 8008150:	f7ff ff94 	bl	800807c <std>
 8008154:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008158:	2201      	movs	r2, #1
 800815a:	2109      	movs	r1, #9
 800815c:	f7ff ff8e 	bl	800807c <std>
 8008160:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008164:	2202      	movs	r2, #2
 8008166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816a:	2112      	movs	r1, #18
 800816c:	f7ff bf86 	b.w	800807c <std>
 8008170:	20001d3c 	.word	0x20001d3c
 8008174:	20001c04 	.word	0x20001c04
 8008178:	080080e9 	.word	0x080080e9

0800817c <__sfp_lock_acquire>:
 800817c:	4801      	ldr	r0, [pc, #4]	; (8008184 <__sfp_lock_acquire+0x8>)
 800817e:	f000 b90e 	b.w	800839e <__retarget_lock_acquire_recursive>
 8008182:	bf00      	nop
 8008184:	20001d45 	.word	0x20001d45

08008188 <__sfp_lock_release>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__sfp_lock_release+0x8>)
 800818a:	f000 b909 	b.w	80083a0 <__retarget_lock_release_recursive>
 800818e:	bf00      	nop
 8008190:	20001d45 	.word	0x20001d45

08008194 <__sinit>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4604      	mov	r4, r0
 8008198:	f7ff fff0 	bl	800817c <__sfp_lock_acquire>
 800819c:	6a23      	ldr	r3, [r4, #32]
 800819e:	b11b      	cbz	r3, 80081a8 <__sinit+0x14>
 80081a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a4:	f7ff bff0 	b.w	8008188 <__sfp_lock_release>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__sinit+0x28>)
 80081aa:	6223      	str	r3, [r4, #32]
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <__sinit+0x2c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f5      	bne.n	80081a0 <__sinit+0xc>
 80081b4:	f7ff ffc4 	bl	8008140 <global_stdio_init.part.0>
 80081b8:	e7f2      	b.n	80081a0 <__sinit+0xc>
 80081ba:	bf00      	nop
 80081bc:	08008101 	.word	0x08008101
 80081c0:	20001d3c 	.word	0x20001d3c

080081c4 <_fwalk_sglue>:
 80081c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c8:	4607      	mov	r7, r0
 80081ca:	4688      	mov	r8, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	2600      	movs	r6, #0
 80081d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081d4:	f1b9 0901 	subs.w	r9, r9, #1
 80081d8:	d505      	bpl.n	80081e6 <_fwalk_sglue+0x22>
 80081da:	6824      	ldr	r4, [r4, #0]
 80081dc:	2c00      	cmp	r4, #0
 80081de:	d1f7      	bne.n	80081d0 <_fwalk_sglue+0xc>
 80081e0:	4630      	mov	r0, r6
 80081e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d907      	bls.n	80081fc <_fwalk_sglue+0x38>
 80081ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081f0:	3301      	adds	r3, #1
 80081f2:	d003      	beq.n	80081fc <_fwalk_sglue+0x38>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4638      	mov	r0, r7
 80081f8:	47c0      	blx	r8
 80081fa:	4306      	orrs	r6, r0
 80081fc:	3568      	adds	r5, #104	; 0x68
 80081fe:	e7e9      	b.n	80081d4 <_fwalk_sglue+0x10>

08008200 <iprintf>:
 8008200:	b40f      	push	{r0, r1, r2, r3}
 8008202:	b507      	push	{r0, r1, r2, lr}
 8008204:	4906      	ldr	r1, [pc, #24]	; (8008220 <iprintf+0x20>)
 8008206:	ab04      	add	r3, sp, #16
 8008208:	6808      	ldr	r0, [r1, #0]
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	6881      	ldr	r1, [r0, #8]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f000 f9f7 	bl	8008604 <_vfiprintf_r>
 8008216:	b003      	add	sp, #12
 8008218:	f85d eb04 	ldr.w	lr, [sp], #4
 800821c:	b004      	add	sp, #16
 800821e:	4770      	bx	lr
 8008220:	20000068 	.word	0x20000068

08008224 <__sread>:
 8008224:	b510      	push	{r4, lr}
 8008226:	460c      	mov	r4, r1
 8008228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822c:	f000 f868 	bl	8008300 <_read_r>
 8008230:	2800      	cmp	r0, #0
 8008232:	bfab      	itete	ge
 8008234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008236:	89a3      	ldrhlt	r3, [r4, #12]
 8008238:	181b      	addge	r3, r3, r0
 800823a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823e:	bfac      	ite	ge
 8008240:	6563      	strge	r3, [r4, #84]	; 0x54
 8008242:	81a3      	strhlt	r3, [r4, #12]
 8008244:	bd10      	pop	{r4, pc}

08008246 <__swrite>:
 8008246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824a:	461f      	mov	r7, r3
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	05db      	lsls	r3, r3, #23
 8008250:	4605      	mov	r5, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4616      	mov	r6, r2
 8008256:	d505      	bpl.n	8008264 <__swrite+0x1e>
 8008258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825c:	2302      	movs	r3, #2
 800825e:	2200      	movs	r2, #0
 8008260:	f000 f83c 	bl	80082dc <_lseek_r>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800826a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	4632      	mov	r2, r6
 8008272:	463b      	mov	r3, r7
 8008274:	4628      	mov	r0, r5
 8008276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800827a:	f000 b853 	b.w	8008324 <_write_r>

0800827e <__sseek>:
 800827e:	b510      	push	{r4, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	f000 f829 	bl	80082dc <_lseek_r>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	bf15      	itete	ne
 8008290:	6560      	strne	r0, [r4, #84]	; 0x54
 8008292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800829a:	81a3      	strheq	r3, [r4, #12]
 800829c:	bf18      	it	ne
 800829e:	81a3      	strhne	r3, [r4, #12]
 80082a0:	bd10      	pop	{r4, pc}

080082a2 <__sclose>:
 80082a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a6:	f000 b809 	b.w	80082bc <_close_r>

080082aa <memset>:
 80082aa:	4402      	add	r2, r0
 80082ac:	4603      	mov	r3, r0
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d100      	bne.n	80082b4 <memset+0xa>
 80082b2:	4770      	bx	lr
 80082b4:	f803 1b01 	strb.w	r1, [r3], #1
 80082b8:	e7f9      	b.n	80082ae <memset+0x4>
	...

080082bc <_close_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d06      	ldr	r5, [pc, #24]	; (80082d8 <_close_r+0x1c>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	602b      	str	r3, [r5, #0]
 80082c8:	f7f8 fea3 	bl	8001012 <_close>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d102      	bne.n	80082d6 <_close_r+0x1a>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	b103      	cbz	r3, 80082d6 <_close_r+0x1a>
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	20001d40 	.word	0x20001d40

080082dc <_lseek_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	; (80082fc <_lseek_r+0x20>)
 80082e0:	4604      	mov	r4, r0
 80082e2:	4608      	mov	r0, r1
 80082e4:	4611      	mov	r1, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	602a      	str	r2, [r5, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f7f8 feb8 	bl	8001060 <_lseek>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_lseek_r+0x1e>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_lseek_r+0x1e>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20001d40 	.word	0x20001d40

08008300 <_read_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d07      	ldr	r5, [pc, #28]	; (8008320 <_read_r+0x20>)
 8008304:	4604      	mov	r4, r0
 8008306:	4608      	mov	r0, r1
 8008308:	4611      	mov	r1, r2
 800830a:	2200      	movs	r2, #0
 800830c:	602a      	str	r2, [r5, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	f7f8 fe62 	bl	8000fd8 <_read>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_read_r+0x1e>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_read_r+0x1e>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20001d40 	.word	0x20001d40

08008324 <_write_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_write_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7f8 f91a 	bl	800056c <_write>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_write_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_write_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	20001d40 	.word	0x20001d40

08008348 <__errno>:
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <__errno+0x8>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20000068 	.word	0x20000068

08008354 <__libc_init_array>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4d0d      	ldr	r5, [pc, #52]	; (800838c <__libc_init_array+0x38>)
 8008358:	4c0d      	ldr	r4, [pc, #52]	; (8008390 <__libc_init_array+0x3c>)
 800835a:	1b64      	subs	r4, r4, r5
 800835c:	10a4      	asrs	r4, r4, #2
 800835e:	2600      	movs	r6, #0
 8008360:	42a6      	cmp	r6, r4
 8008362:	d109      	bne.n	8008378 <__libc_init_array+0x24>
 8008364:	4d0b      	ldr	r5, [pc, #44]	; (8008394 <__libc_init_array+0x40>)
 8008366:	4c0c      	ldr	r4, [pc, #48]	; (8008398 <__libc_init_array+0x44>)
 8008368:	f000 fdce 	bl	8008f08 <_init>
 800836c:	1b64      	subs	r4, r4, r5
 800836e:	10a4      	asrs	r4, r4, #2
 8008370:	2600      	movs	r6, #0
 8008372:	42a6      	cmp	r6, r4
 8008374:	d105      	bne.n	8008382 <__libc_init_array+0x2e>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	f855 3b04 	ldr.w	r3, [r5], #4
 800837c:	4798      	blx	r3
 800837e:	3601      	adds	r6, #1
 8008380:	e7ee      	b.n	8008360 <__libc_init_array+0xc>
 8008382:	f855 3b04 	ldr.w	r3, [r5], #4
 8008386:	4798      	blx	r3
 8008388:	3601      	adds	r6, #1
 800838a:	e7f2      	b.n	8008372 <__libc_init_array+0x1e>
 800838c:	08009048 	.word	0x08009048
 8008390:	08009048 	.word	0x08009048
 8008394:	08009048 	.word	0x08009048
 8008398:	0800904c 	.word	0x0800904c

0800839c <__retarget_lock_init_recursive>:
 800839c:	4770      	bx	lr

0800839e <__retarget_lock_acquire_recursive>:
 800839e:	4770      	bx	lr

080083a0 <__retarget_lock_release_recursive>:
 80083a0:	4770      	bx	lr

080083a2 <memcpy>:
 80083a2:	440a      	add	r2, r1
 80083a4:	4291      	cmp	r1, r2
 80083a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083aa:	d100      	bne.n	80083ae <memcpy+0xc>
 80083ac:	4770      	bx	lr
 80083ae:	b510      	push	{r4, lr}
 80083b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b8:	4291      	cmp	r1, r2
 80083ba:	d1f9      	bne.n	80083b0 <memcpy+0xe>
 80083bc:	bd10      	pop	{r4, pc}
	...

080083c0 <_free_r>:
 80083c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d044      	beq.n	8008450 <_free_r+0x90>
 80083c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ca:	9001      	str	r0, [sp, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f1a1 0404 	sub.w	r4, r1, #4
 80083d2:	bfb8      	it	lt
 80083d4:	18e4      	addlt	r4, r4, r3
 80083d6:	f000 f8df 	bl	8008598 <__malloc_lock>
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <_free_r+0x94>)
 80083dc:	9801      	ldr	r0, [sp, #4]
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	b933      	cbnz	r3, 80083f0 <_free_r+0x30>
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	6014      	str	r4, [r2, #0]
 80083e6:	b003      	add	sp, #12
 80083e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ec:	f000 b8da 	b.w	80085a4 <__malloc_unlock>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d908      	bls.n	8008406 <_free_r+0x46>
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	1961      	adds	r1, r4, r5
 80083f8:	428b      	cmp	r3, r1
 80083fa:	bf01      	itttt	eq
 80083fc:	6819      	ldreq	r1, [r3, #0]
 80083fe:	685b      	ldreq	r3, [r3, #4]
 8008400:	1949      	addeq	r1, r1, r5
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	e7ed      	b.n	80083e2 <_free_r+0x22>
 8008406:	461a      	mov	r2, r3
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b10b      	cbz	r3, 8008410 <_free_r+0x50>
 800840c:	42a3      	cmp	r3, r4
 800840e:	d9fa      	bls.n	8008406 <_free_r+0x46>
 8008410:	6811      	ldr	r1, [r2, #0]
 8008412:	1855      	adds	r5, r2, r1
 8008414:	42a5      	cmp	r5, r4
 8008416:	d10b      	bne.n	8008430 <_free_r+0x70>
 8008418:	6824      	ldr	r4, [r4, #0]
 800841a:	4421      	add	r1, r4
 800841c:	1854      	adds	r4, r2, r1
 800841e:	42a3      	cmp	r3, r4
 8008420:	6011      	str	r1, [r2, #0]
 8008422:	d1e0      	bne.n	80083e6 <_free_r+0x26>
 8008424:	681c      	ldr	r4, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	6053      	str	r3, [r2, #4]
 800842a:	440c      	add	r4, r1
 800842c:	6014      	str	r4, [r2, #0]
 800842e:	e7da      	b.n	80083e6 <_free_r+0x26>
 8008430:	d902      	bls.n	8008438 <_free_r+0x78>
 8008432:	230c      	movs	r3, #12
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	e7d6      	b.n	80083e6 <_free_r+0x26>
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	1961      	adds	r1, r4, r5
 800843c:	428b      	cmp	r3, r1
 800843e:	bf04      	itt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	bf04      	itt	eq
 8008448:	1949      	addeq	r1, r1, r5
 800844a:	6021      	streq	r1, [r4, #0]
 800844c:	6054      	str	r4, [r2, #4]
 800844e:	e7ca      	b.n	80083e6 <_free_r+0x26>
 8008450:	b003      	add	sp, #12
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	20001d48 	.word	0x20001d48

08008458 <sbrk_aligned>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4e0e      	ldr	r6, [pc, #56]	; (8008494 <sbrk_aligned+0x3c>)
 800845c:	460c      	mov	r4, r1
 800845e:	6831      	ldr	r1, [r6, #0]
 8008460:	4605      	mov	r5, r0
 8008462:	b911      	cbnz	r1, 800846a <sbrk_aligned+0x12>
 8008464:	f000 fcbc 	bl	8008de0 <_sbrk_r>
 8008468:	6030      	str	r0, [r6, #0]
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f000 fcb7 	bl	8008de0 <_sbrk_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d00a      	beq.n	800848c <sbrk_aligned+0x34>
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d007      	beq.n	8008490 <sbrk_aligned+0x38>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fcac 	bl	8008de0 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d101      	bne.n	8008490 <sbrk_aligned+0x38>
 800848c:	f04f 34ff 	mov.w	r4, #4294967295
 8008490:	4620      	mov	r0, r4
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	20001d4c 	.word	0x20001d4c

08008498 <_malloc_r>:
 8008498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800849c:	1ccd      	adds	r5, r1, #3
 800849e:	f025 0503 	bic.w	r5, r5, #3
 80084a2:	3508      	adds	r5, #8
 80084a4:	2d0c      	cmp	r5, #12
 80084a6:	bf38      	it	cc
 80084a8:	250c      	movcc	r5, #12
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	4607      	mov	r7, r0
 80084ae:	db01      	blt.n	80084b4 <_malloc_r+0x1c>
 80084b0:	42a9      	cmp	r1, r5
 80084b2:	d905      	bls.n	80084c0 <_malloc_r+0x28>
 80084b4:	230c      	movs	r3, #12
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	2600      	movs	r6, #0
 80084ba:	4630      	mov	r0, r6
 80084bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008594 <_malloc_r+0xfc>
 80084c4:	f000 f868 	bl	8008598 <__malloc_lock>
 80084c8:	f8d8 3000 	ldr.w	r3, [r8]
 80084cc:	461c      	mov	r4, r3
 80084ce:	bb5c      	cbnz	r4, 8008528 <_malloc_r+0x90>
 80084d0:	4629      	mov	r1, r5
 80084d2:	4638      	mov	r0, r7
 80084d4:	f7ff ffc0 	bl	8008458 <sbrk_aligned>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	4604      	mov	r4, r0
 80084dc:	d155      	bne.n	800858a <_malloc_r+0xf2>
 80084de:	f8d8 4000 	ldr.w	r4, [r8]
 80084e2:	4626      	mov	r6, r4
 80084e4:	2e00      	cmp	r6, #0
 80084e6:	d145      	bne.n	8008574 <_malloc_r+0xdc>
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	d048      	beq.n	800857e <_malloc_r+0xe6>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	4631      	mov	r1, r6
 80084f0:	4638      	mov	r0, r7
 80084f2:	eb04 0903 	add.w	r9, r4, r3
 80084f6:	f000 fc73 	bl	8008de0 <_sbrk_r>
 80084fa:	4581      	cmp	r9, r0
 80084fc:	d13f      	bne.n	800857e <_malloc_r+0xe6>
 80084fe:	6821      	ldr	r1, [r4, #0]
 8008500:	1a6d      	subs	r5, r5, r1
 8008502:	4629      	mov	r1, r5
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ffa7 	bl	8008458 <sbrk_aligned>
 800850a:	3001      	adds	r0, #1
 800850c:	d037      	beq.n	800857e <_malloc_r+0xe6>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	442b      	add	r3, r5
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	f8d8 3000 	ldr.w	r3, [r8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d038      	beq.n	800858e <_malloc_r+0xf6>
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	42a2      	cmp	r2, r4
 8008520:	d12b      	bne.n	800857a <_malloc_r+0xe2>
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	e00f      	b.n	8008548 <_malloc_r+0xb0>
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	1b52      	subs	r2, r2, r5
 800852c:	d41f      	bmi.n	800856e <_malloc_r+0xd6>
 800852e:	2a0b      	cmp	r2, #11
 8008530:	d917      	bls.n	8008562 <_malloc_r+0xca>
 8008532:	1961      	adds	r1, r4, r5
 8008534:	42a3      	cmp	r3, r4
 8008536:	6025      	str	r5, [r4, #0]
 8008538:	bf18      	it	ne
 800853a:	6059      	strne	r1, [r3, #4]
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	bf08      	it	eq
 8008540:	f8c8 1000 	streq.w	r1, [r8]
 8008544:	5162      	str	r2, [r4, r5]
 8008546:	604b      	str	r3, [r1, #4]
 8008548:	4638      	mov	r0, r7
 800854a:	f104 060b 	add.w	r6, r4, #11
 800854e:	f000 f829 	bl	80085a4 <__malloc_unlock>
 8008552:	f026 0607 	bic.w	r6, r6, #7
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	1af2      	subs	r2, r6, r3
 800855a:	d0ae      	beq.n	80084ba <_malloc_r+0x22>
 800855c:	1b9b      	subs	r3, r3, r6
 800855e:	50a3      	str	r3, [r4, r2]
 8008560:	e7ab      	b.n	80084ba <_malloc_r+0x22>
 8008562:	42a3      	cmp	r3, r4
 8008564:	6862      	ldr	r2, [r4, #4]
 8008566:	d1dd      	bne.n	8008524 <_malloc_r+0x8c>
 8008568:	f8c8 2000 	str.w	r2, [r8]
 800856c:	e7ec      	b.n	8008548 <_malloc_r+0xb0>
 800856e:	4623      	mov	r3, r4
 8008570:	6864      	ldr	r4, [r4, #4]
 8008572:	e7ac      	b.n	80084ce <_malloc_r+0x36>
 8008574:	4634      	mov	r4, r6
 8008576:	6876      	ldr	r6, [r6, #4]
 8008578:	e7b4      	b.n	80084e4 <_malloc_r+0x4c>
 800857a:	4613      	mov	r3, r2
 800857c:	e7cc      	b.n	8008518 <_malloc_r+0x80>
 800857e:	230c      	movs	r3, #12
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	4638      	mov	r0, r7
 8008584:	f000 f80e 	bl	80085a4 <__malloc_unlock>
 8008588:	e797      	b.n	80084ba <_malloc_r+0x22>
 800858a:	6025      	str	r5, [r4, #0]
 800858c:	e7dc      	b.n	8008548 <_malloc_r+0xb0>
 800858e:	605b      	str	r3, [r3, #4]
 8008590:	deff      	udf	#255	; 0xff
 8008592:	bf00      	nop
 8008594:	20001d48 	.word	0x20001d48

08008598 <__malloc_lock>:
 8008598:	4801      	ldr	r0, [pc, #4]	; (80085a0 <__malloc_lock+0x8>)
 800859a:	f7ff bf00 	b.w	800839e <__retarget_lock_acquire_recursive>
 800859e:	bf00      	nop
 80085a0:	20001d44 	.word	0x20001d44

080085a4 <__malloc_unlock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	; (80085ac <__malloc_unlock+0x8>)
 80085a6:	f7ff befb 	b.w	80083a0 <__retarget_lock_release_recursive>
 80085aa:	bf00      	nop
 80085ac:	20001d44 	.word	0x20001d44

080085b0 <__sfputc_r>:
 80085b0:	6893      	ldr	r3, [r2, #8]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	b410      	push	{r4}
 80085b8:	6093      	str	r3, [r2, #8]
 80085ba:	da08      	bge.n	80085ce <__sfputc_r+0x1e>
 80085bc:	6994      	ldr	r4, [r2, #24]
 80085be:	42a3      	cmp	r3, r4
 80085c0:	db01      	blt.n	80085c6 <__sfputc_r+0x16>
 80085c2:	290a      	cmp	r1, #10
 80085c4:	d103      	bne.n	80085ce <__sfputc_r+0x1e>
 80085c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ca:	f000 bb73 	b.w	8008cb4 <__swbuf_r>
 80085ce:	6813      	ldr	r3, [r2, #0]
 80085d0:	1c58      	adds	r0, r3, #1
 80085d2:	6010      	str	r0, [r2, #0]
 80085d4:	7019      	strb	r1, [r3, #0]
 80085d6:	4608      	mov	r0, r1
 80085d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085dc:	4770      	bx	lr

080085de <__sfputs_r>:
 80085de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e0:	4606      	mov	r6, r0
 80085e2:	460f      	mov	r7, r1
 80085e4:	4614      	mov	r4, r2
 80085e6:	18d5      	adds	r5, r2, r3
 80085e8:	42ac      	cmp	r4, r5
 80085ea:	d101      	bne.n	80085f0 <__sfputs_r+0x12>
 80085ec:	2000      	movs	r0, #0
 80085ee:	e007      	b.n	8008600 <__sfputs_r+0x22>
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	463a      	mov	r2, r7
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ffda 	bl	80085b0 <__sfputc_r>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d1f3      	bne.n	80085e8 <__sfputs_r+0xa>
 8008600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008604 <_vfiprintf_r>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	460d      	mov	r5, r1
 800860a:	b09d      	sub	sp, #116	; 0x74
 800860c:	4614      	mov	r4, r2
 800860e:	4698      	mov	r8, r3
 8008610:	4606      	mov	r6, r0
 8008612:	b118      	cbz	r0, 800861c <_vfiprintf_r+0x18>
 8008614:	6a03      	ldr	r3, [r0, #32]
 8008616:	b90b      	cbnz	r3, 800861c <_vfiprintf_r+0x18>
 8008618:	f7ff fdbc 	bl	8008194 <__sinit>
 800861c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800861e:	07d9      	lsls	r1, r3, #31
 8008620:	d405      	bmi.n	800862e <_vfiprintf_r+0x2a>
 8008622:	89ab      	ldrh	r3, [r5, #12]
 8008624:	059a      	lsls	r2, r3, #22
 8008626:	d402      	bmi.n	800862e <_vfiprintf_r+0x2a>
 8008628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862a:	f7ff feb8 	bl	800839e <__retarget_lock_acquire_recursive>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	071b      	lsls	r3, r3, #28
 8008632:	d501      	bpl.n	8008638 <_vfiprintf_r+0x34>
 8008634:	692b      	ldr	r3, [r5, #16]
 8008636:	b99b      	cbnz	r3, 8008660 <_vfiprintf_r+0x5c>
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f000 fb78 	bl	8008d30 <__swsetup_r>
 8008640:	b170      	cbz	r0, 8008660 <_vfiprintf_r+0x5c>
 8008642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008644:	07dc      	lsls	r4, r3, #31
 8008646:	d504      	bpl.n	8008652 <_vfiprintf_r+0x4e>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	b01d      	add	sp, #116	; 0x74
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	0598      	lsls	r0, r3, #22
 8008656:	d4f7      	bmi.n	8008648 <_vfiprintf_r+0x44>
 8008658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865a:	f7ff fea1 	bl	80083a0 <__retarget_lock_release_recursive>
 800865e:	e7f3      	b.n	8008648 <_vfiprintf_r+0x44>
 8008660:	2300      	movs	r3, #0
 8008662:	9309      	str	r3, [sp, #36]	; 0x24
 8008664:	2320      	movs	r3, #32
 8008666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800866a:	f8cd 800c 	str.w	r8, [sp, #12]
 800866e:	2330      	movs	r3, #48	; 0x30
 8008670:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008824 <_vfiprintf_r+0x220>
 8008674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008678:	f04f 0901 	mov.w	r9, #1
 800867c:	4623      	mov	r3, r4
 800867e:	469a      	mov	sl, r3
 8008680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008684:	b10a      	cbz	r2, 800868a <_vfiprintf_r+0x86>
 8008686:	2a25      	cmp	r2, #37	; 0x25
 8008688:	d1f9      	bne.n	800867e <_vfiprintf_r+0x7a>
 800868a:	ebba 0b04 	subs.w	fp, sl, r4
 800868e:	d00b      	beq.n	80086a8 <_vfiprintf_r+0xa4>
 8008690:	465b      	mov	r3, fp
 8008692:	4622      	mov	r2, r4
 8008694:	4629      	mov	r1, r5
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ffa1 	bl	80085de <__sfputs_r>
 800869c:	3001      	adds	r0, #1
 800869e:	f000 80a9 	beq.w	80087f4 <_vfiprintf_r+0x1f0>
 80086a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a4:	445a      	add	r2, fp
 80086a6:	9209      	str	r2, [sp, #36]	; 0x24
 80086a8:	f89a 3000 	ldrb.w	r3, [sl]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80a1 	beq.w	80087f4 <_vfiprintf_r+0x1f0>
 80086b2:	2300      	movs	r3, #0
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295
 80086b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086bc:	f10a 0a01 	add.w	sl, sl, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	9307      	str	r3, [sp, #28]
 80086c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086c8:	931a      	str	r3, [sp, #104]	; 0x68
 80086ca:	4654      	mov	r4, sl
 80086cc:	2205      	movs	r2, #5
 80086ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d2:	4854      	ldr	r0, [pc, #336]	; (8008824 <_vfiprintf_r+0x220>)
 80086d4:	f7f7 fd7c 	bl	80001d0 <memchr>
 80086d8:	9a04      	ldr	r2, [sp, #16]
 80086da:	b9d8      	cbnz	r0, 8008714 <_vfiprintf_r+0x110>
 80086dc:	06d1      	lsls	r1, r2, #27
 80086de:	bf44      	itt	mi
 80086e0:	2320      	movmi	r3, #32
 80086e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e6:	0713      	lsls	r3, r2, #28
 80086e8:	bf44      	itt	mi
 80086ea:	232b      	movmi	r3, #43	; 0x2b
 80086ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f0:	f89a 3000 	ldrb.w	r3, [sl]
 80086f4:	2b2a      	cmp	r3, #42	; 0x2a
 80086f6:	d015      	beq.n	8008724 <_vfiprintf_r+0x120>
 80086f8:	9a07      	ldr	r2, [sp, #28]
 80086fa:	4654      	mov	r4, sl
 80086fc:	2000      	movs	r0, #0
 80086fe:	f04f 0c0a 	mov.w	ip, #10
 8008702:	4621      	mov	r1, r4
 8008704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008708:	3b30      	subs	r3, #48	; 0x30
 800870a:	2b09      	cmp	r3, #9
 800870c:	d94d      	bls.n	80087aa <_vfiprintf_r+0x1a6>
 800870e:	b1b0      	cbz	r0, 800873e <_vfiprintf_r+0x13a>
 8008710:	9207      	str	r2, [sp, #28]
 8008712:	e014      	b.n	800873e <_vfiprintf_r+0x13a>
 8008714:	eba0 0308 	sub.w	r3, r0, r8
 8008718:	fa09 f303 	lsl.w	r3, r9, r3
 800871c:	4313      	orrs	r3, r2
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	46a2      	mov	sl, r4
 8008722:	e7d2      	b.n	80086ca <_vfiprintf_r+0xc6>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	1d19      	adds	r1, r3, #4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	9103      	str	r1, [sp, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	bfbb      	ittet	lt
 8008730:	425b      	neglt	r3, r3
 8008732:	f042 0202 	orrlt.w	r2, r2, #2
 8008736:	9307      	strge	r3, [sp, #28]
 8008738:	9307      	strlt	r3, [sp, #28]
 800873a:	bfb8      	it	lt
 800873c:	9204      	strlt	r2, [sp, #16]
 800873e:	7823      	ldrb	r3, [r4, #0]
 8008740:	2b2e      	cmp	r3, #46	; 0x2e
 8008742:	d10c      	bne.n	800875e <_vfiprintf_r+0x15a>
 8008744:	7863      	ldrb	r3, [r4, #1]
 8008746:	2b2a      	cmp	r3, #42	; 0x2a
 8008748:	d134      	bne.n	80087b4 <_vfiprintf_r+0x1b0>
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	1d1a      	adds	r2, r3, #4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	9203      	str	r2, [sp, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfb8      	it	lt
 8008756:	f04f 33ff 	movlt.w	r3, #4294967295
 800875a:	3402      	adds	r4, #2
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008834 <_vfiprintf_r+0x230>
 8008762:	7821      	ldrb	r1, [r4, #0]
 8008764:	2203      	movs	r2, #3
 8008766:	4650      	mov	r0, sl
 8008768:	f7f7 fd32 	bl	80001d0 <memchr>
 800876c:	b138      	cbz	r0, 800877e <_vfiprintf_r+0x17a>
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	eba0 000a 	sub.w	r0, r0, sl
 8008774:	2240      	movs	r2, #64	; 0x40
 8008776:	4082      	lsls	r2, r0
 8008778:	4313      	orrs	r3, r2
 800877a:	3401      	adds	r4, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008782:	4829      	ldr	r0, [pc, #164]	; (8008828 <_vfiprintf_r+0x224>)
 8008784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008788:	2206      	movs	r2, #6
 800878a:	f7f7 fd21 	bl	80001d0 <memchr>
 800878e:	2800      	cmp	r0, #0
 8008790:	d03f      	beq.n	8008812 <_vfiprintf_r+0x20e>
 8008792:	4b26      	ldr	r3, [pc, #152]	; (800882c <_vfiprintf_r+0x228>)
 8008794:	bb1b      	cbnz	r3, 80087de <_vfiprintf_r+0x1da>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	3307      	adds	r3, #7
 800879a:	f023 0307 	bic.w	r3, r3, #7
 800879e:	3308      	adds	r3, #8
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a4:	443b      	add	r3, r7
 80087a6:	9309      	str	r3, [sp, #36]	; 0x24
 80087a8:	e768      	b.n	800867c <_vfiprintf_r+0x78>
 80087aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ae:	460c      	mov	r4, r1
 80087b0:	2001      	movs	r0, #1
 80087b2:	e7a6      	b.n	8008702 <_vfiprintf_r+0xfe>
 80087b4:	2300      	movs	r3, #0
 80087b6:	3401      	adds	r4, #1
 80087b8:	9305      	str	r3, [sp, #20]
 80087ba:	4619      	mov	r1, r3
 80087bc:	f04f 0c0a 	mov.w	ip, #10
 80087c0:	4620      	mov	r0, r4
 80087c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087c6:	3a30      	subs	r2, #48	; 0x30
 80087c8:	2a09      	cmp	r2, #9
 80087ca:	d903      	bls.n	80087d4 <_vfiprintf_r+0x1d0>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0c6      	beq.n	800875e <_vfiprintf_r+0x15a>
 80087d0:	9105      	str	r1, [sp, #20]
 80087d2:	e7c4      	b.n	800875e <_vfiprintf_r+0x15a>
 80087d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d8:	4604      	mov	r4, r0
 80087da:	2301      	movs	r3, #1
 80087dc:	e7f0      	b.n	80087c0 <_vfiprintf_r+0x1bc>
 80087de:	ab03      	add	r3, sp, #12
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	462a      	mov	r2, r5
 80087e4:	4b12      	ldr	r3, [pc, #72]	; (8008830 <_vfiprintf_r+0x22c>)
 80087e6:	a904      	add	r1, sp, #16
 80087e8:	4630      	mov	r0, r6
 80087ea:	f3af 8000 	nop.w
 80087ee:	4607      	mov	r7, r0
 80087f0:	1c78      	adds	r0, r7, #1
 80087f2:	d1d6      	bne.n	80087a2 <_vfiprintf_r+0x19e>
 80087f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f6:	07d9      	lsls	r1, r3, #31
 80087f8:	d405      	bmi.n	8008806 <_vfiprintf_r+0x202>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d402      	bmi.n	8008806 <_vfiprintf_r+0x202>
 8008800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008802:	f7ff fdcd 	bl	80083a0 <__retarget_lock_release_recursive>
 8008806:	89ab      	ldrh	r3, [r5, #12]
 8008808:	065b      	lsls	r3, r3, #25
 800880a:	f53f af1d 	bmi.w	8008648 <_vfiprintf_r+0x44>
 800880e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008810:	e71c      	b.n	800864c <_vfiprintf_r+0x48>
 8008812:	ab03      	add	r3, sp, #12
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	462a      	mov	r2, r5
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <_vfiprintf_r+0x22c>)
 800881a:	a904      	add	r1, sp, #16
 800881c:	4630      	mov	r0, r6
 800881e:	f000 f879 	bl	8008914 <_printf_i>
 8008822:	e7e4      	b.n	80087ee <_vfiprintf_r+0x1ea>
 8008824:	0800900c 	.word	0x0800900c
 8008828:	08009016 	.word	0x08009016
 800882c:	00000000 	.word	0x00000000
 8008830:	080085df 	.word	0x080085df
 8008834:	08009012 	.word	0x08009012

08008838 <_printf_common>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	4616      	mov	r6, r2
 800883e:	4699      	mov	r9, r3
 8008840:	688a      	ldr	r2, [r1, #8]
 8008842:	690b      	ldr	r3, [r1, #16]
 8008844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008848:	4293      	cmp	r3, r2
 800884a:	bfb8      	it	lt
 800884c:	4613      	movlt	r3, r2
 800884e:	6033      	str	r3, [r6, #0]
 8008850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008854:	4607      	mov	r7, r0
 8008856:	460c      	mov	r4, r1
 8008858:	b10a      	cbz	r2, 800885e <_printf_common+0x26>
 800885a:	3301      	adds	r3, #1
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	0699      	lsls	r1, r3, #26
 8008862:	bf42      	ittt	mi
 8008864:	6833      	ldrmi	r3, [r6, #0]
 8008866:	3302      	addmi	r3, #2
 8008868:	6033      	strmi	r3, [r6, #0]
 800886a:	6825      	ldr	r5, [r4, #0]
 800886c:	f015 0506 	ands.w	r5, r5, #6
 8008870:	d106      	bne.n	8008880 <_printf_common+0x48>
 8008872:	f104 0a19 	add.w	sl, r4, #25
 8008876:	68e3      	ldr	r3, [r4, #12]
 8008878:	6832      	ldr	r2, [r6, #0]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	42ab      	cmp	r3, r5
 800887e:	dc26      	bgt.n	80088ce <_printf_common+0x96>
 8008880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008884:	1e13      	subs	r3, r2, #0
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	bf18      	it	ne
 800888a:	2301      	movne	r3, #1
 800888c:	0692      	lsls	r2, r2, #26
 800888e:	d42b      	bmi.n	80088e8 <_printf_common+0xb0>
 8008890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d01e      	beq.n	80088dc <_printf_common+0xa4>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	6922      	ldr	r2, [r4, #16]
 80088a2:	f003 0306 	and.w	r3, r3, #6
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	bf02      	ittt	eq
 80088aa:	68e5      	ldreq	r5, [r4, #12]
 80088ac:	6833      	ldreq	r3, [r6, #0]
 80088ae:	1aed      	subeq	r5, r5, r3
 80088b0:	68a3      	ldr	r3, [r4, #8]
 80088b2:	bf0c      	ite	eq
 80088b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088b8:	2500      	movne	r5, #0
 80088ba:	4293      	cmp	r3, r2
 80088bc:	bfc4      	itt	gt
 80088be:	1a9b      	subgt	r3, r3, r2
 80088c0:	18ed      	addgt	r5, r5, r3
 80088c2:	2600      	movs	r6, #0
 80088c4:	341a      	adds	r4, #26
 80088c6:	42b5      	cmp	r5, r6
 80088c8:	d11a      	bne.n	8008900 <_printf_common+0xc8>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e008      	b.n	80088e0 <_printf_common+0xa8>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4652      	mov	r2, sl
 80088d2:	4649      	mov	r1, r9
 80088d4:	4638      	mov	r0, r7
 80088d6:	47c0      	blx	r8
 80088d8:	3001      	adds	r0, #1
 80088da:	d103      	bne.n	80088e4 <_printf_common+0xac>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	3501      	adds	r5, #1
 80088e6:	e7c6      	b.n	8008876 <_printf_common+0x3e>
 80088e8:	18e1      	adds	r1, r4, r3
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	2030      	movs	r0, #48	; 0x30
 80088ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088f2:	4422      	add	r2, r4
 80088f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088fc:	3302      	adds	r3, #2
 80088fe:	e7c7      	b.n	8008890 <_printf_common+0x58>
 8008900:	2301      	movs	r3, #1
 8008902:	4622      	mov	r2, r4
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d0e6      	beq.n	80088dc <_printf_common+0xa4>
 800890e:	3601      	adds	r6, #1
 8008910:	e7d9      	b.n	80088c6 <_printf_common+0x8e>
	...

08008914 <_printf_i>:
 8008914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	7e0f      	ldrb	r7, [r1, #24]
 800891a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800891c:	2f78      	cmp	r7, #120	; 0x78
 800891e:	4691      	mov	r9, r2
 8008920:	4680      	mov	r8, r0
 8008922:	460c      	mov	r4, r1
 8008924:	469a      	mov	sl, r3
 8008926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800892a:	d807      	bhi.n	800893c <_printf_i+0x28>
 800892c:	2f62      	cmp	r7, #98	; 0x62
 800892e:	d80a      	bhi.n	8008946 <_printf_i+0x32>
 8008930:	2f00      	cmp	r7, #0
 8008932:	f000 80d4 	beq.w	8008ade <_printf_i+0x1ca>
 8008936:	2f58      	cmp	r7, #88	; 0x58
 8008938:	f000 80c0 	beq.w	8008abc <_printf_i+0x1a8>
 800893c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008944:	e03a      	b.n	80089bc <_printf_i+0xa8>
 8008946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800894a:	2b15      	cmp	r3, #21
 800894c:	d8f6      	bhi.n	800893c <_printf_i+0x28>
 800894e:	a101      	add	r1, pc, #4	; (adr r1, 8008954 <_printf_i+0x40>)
 8008950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089c1 	.word	0x080089c1
 800895c:	0800893d 	.word	0x0800893d
 8008960:	0800893d 	.word	0x0800893d
 8008964:	0800893d 	.word	0x0800893d
 8008968:	0800893d 	.word	0x0800893d
 800896c:	080089c1 	.word	0x080089c1
 8008970:	0800893d 	.word	0x0800893d
 8008974:	0800893d 	.word	0x0800893d
 8008978:	0800893d 	.word	0x0800893d
 800897c:	0800893d 	.word	0x0800893d
 8008980:	08008ac5 	.word	0x08008ac5
 8008984:	080089ed 	.word	0x080089ed
 8008988:	08008a7f 	.word	0x08008a7f
 800898c:	0800893d 	.word	0x0800893d
 8008990:	0800893d 	.word	0x0800893d
 8008994:	08008ae7 	.word	0x08008ae7
 8008998:	0800893d 	.word	0x0800893d
 800899c:	080089ed 	.word	0x080089ed
 80089a0:	0800893d 	.word	0x0800893d
 80089a4:	0800893d 	.word	0x0800893d
 80089a8:	08008a87 	.word	0x08008a87
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089bc:	2301      	movs	r3, #1
 80089be:	e09f      	b.n	8008b00 <_printf_i+0x1ec>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	0607      	lsls	r7, r0, #24
 80089c6:	f103 0104 	add.w	r1, r3, #4
 80089ca:	6029      	str	r1, [r5, #0]
 80089cc:	d501      	bpl.n	80089d2 <_printf_i+0xbe>
 80089ce:	681e      	ldr	r6, [r3, #0]
 80089d0:	e003      	b.n	80089da <_printf_i+0xc6>
 80089d2:	0646      	lsls	r6, r0, #25
 80089d4:	d5fb      	bpl.n	80089ce <_printf_i+0xba>
 80089d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089da:	2e00      	cmp	r6, #0
 80089dc:	da03      	bge.n	80089e6 <_printf_i+0xd2>
 80089de:	232d      	movs	r3, #45	; 0x2d
 80089e0:	4276      	negs	r6, r6
 80089e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e6:	485a      	ldr	r0, [pc, #360]	; (8008b50 <_printf_i+0x23c>)
 80089e8:	230a      	movs	r3, #10
 80089ea:	e012      	b.n	8008a12 <_printf_i+0xfe>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	1d19      	adds	r1, r3, #4
 80089f2:	6029      	str	r1, [r5, #0]
 80089f4:	0605      	lsls	r5, r0, #24
 80089f6:	d501      	bpl.n	80089fc <_printf_i+0xe8>
 80089f8:	681e      	ldr	r6, [r3, #0]
 80089fa:	e002      	b.n	8008a02 <_printf_i+0xee>
 80089fc:	0641      	lsls	r1, r0, #25
 80089fe:	d5fb      	bpl.n	80089f8 <_printf_i+0xe4>
 8008a00:	881e      	ldrh	r6, [r3, #0]
 8008a02:	4853      	ldr	r0, [pc, #332]	; (8008b50 <_printf_i+0x23c>)
 8008a04:	2f6f      	cmp	r7, #111	; 0x6f
 8008a06:	bf0c      	ite	eq
 8008a08:	2308      	moveq	r3, #8
 8008a0a:	230a      	movne	r3, #10
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a12:	6865      	ldr	r5, [r4, #4]
 8008a14:	60a5      	str	r5, [r4, #8]
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	bfa2      	ittt	ge
 8008a1a:	6821      	ldrge	r1, [r4, #0]
 8008a1c:	f021 0104 	bicge.w	r1, r1, #4
 8008a20:	6021      	strge	r1, [r4, #0]
 8008a22:	b90e      	cbnz	r6, 8008a28 <_printf_i+0x114>
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	d04b      	beq.n	8008ac0 <_printf_i+0x1ac>
 8008a28:	4615      	mov	r5, r2
 8008a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a32:	5dc7      	ldrb	r7, [r0, r7]
 8008a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a38:	4637      	mov	r7, r6
 8008a3a:	42bb      	cmp	r3, r7
 8008a3c:	460e      	mov	r6, r1
 8008a3e:	d9f4      	bls.n	8008a2a <_printf_i+0x116>
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d10b      	bne.n	8008a5c <_printf_i+0x148>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	07de      	lsls	r6, r3, #31
 8008a48:	d508      	bpl.n	8008a5c <_printf_i+0x148>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	6861      	ldr	r1, [r4, #4]
 8008a4e:	4299      	cmp	r1, r3
 8008a50:	bfde      	ittt	le
 8008a52:	2330      	movle	r3, #48	; 0x30
 8008a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a5c:	1b52      	subs	r2, r2, r5
 8008a5e:	6122      	str	r2, [r4, #16]
 8008a60:	f8cd a000 	str.w	sl, [sp]
 8008a64:	464b      	mov	r3, r9
 8008a66:	aa03      	add	r2, sp, #12
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff fee4 	bl	8008838 <_printf_common>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d14a      	bne.n	8008b0a <_printf_i+0x1f6>
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	b004      	add	sp, #16
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f043 0320 	orr.w	r3, r3, #32
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	4833      	ldr	r0, [pc, #204]	; (8008b54 <_printf_i+0x240>)
 8008a88:	2778      	movs	r7, #120	; 0x78
 8008a8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	061f      	lsls	r7, r3, #24
 8008a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a98:	d402      	bmi.n	8008aa0 <_printf_i+0x18c>
 8008a9a:	065f      	lsls	r7, r3, #25
 8008a9c:	bf48      	it	mi
 8008a9e:	b2b6      	uxthmi	r6, r6
 8008aa0:	07df      	lsls	r7, r3, #31
 8008aa2:	bf48      	it	mi
 8008aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8008aa8:	6029      	str	r1, [r5, #0]
 8008aaa:	bf48      	it	mi
 8008aac:	6023      	strmi	r3, [r4, #0]
 8008aae:	b91e      	cbnz	r6, 8008ab8 <_printf_i+0x1a4>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	f023 0320 	bic.w	r3, r3, #32
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	2310      	movs	r3, #16
 8008aba:	e7a7      	b.n	8008a0c <_printf_i+0xf8>
 8008abc:	4824      	ldr	r0, [pc, #144]	; (8008b50 <_printf_i+0x23c>)
 8008abe:	e7e4      	b.n	8008a8a <_printf_i+0x176>
 8008ac0:	4615      	mov	r5, r2
 8008ac2:	e7bd      	b.n	8008a40 <_printf_i+0x12c>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	6826      	ldr	r6, [r4, #0]
 8008ac8:	6961      	ldr	r1, [r4, #20]
 8008aca:	1d18      	adds	r0, r3, #4
 8008acc:	6028      	str	r0, [r5, #0]
 8008ace:	0635      	lsls	r5, r6, #24
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	d501      	bpl.n	8008ad8 <_printf_i+0x1c4>
 8008ad4:	6019      	str	r1, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <_printf_i+0x1ca>
 8008ad8:	0670      	lsls	r0, r6, #25
 8008ada:	d5fb      	bpl.n	8008ad4 <_printf_i+0x1c0>
 8008adc:	8019      	strh	r1, [r3, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	4615      	mov	r5, r2
 8008ae4:	e7bc      	b.n	8008a60 <_printf_i+0x14c>
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	1d1a      	adds	r2, r3, #4
 8008aea:	602a      	str	r2, [r5, #0]
 8008aec:	681d      	ldr	r5, [r3, #0]
 8008aee:	6862      	ldr	r2, [r4, #4]
 8008af0:	2100      	movs	r1, #0
 8008af2:	4628      	mov	r0, r5
 8008af4:	f7f7 fb6c 	bl	80001d0 <memchr>
 8008af8:	b108      	cbz	r0, 8008afe <_printf_i+0x1ea>
 8008afa:	1b40      	subs	r0, r0, r5
 8008afc:	6060      	str	r0, [r4, #4]
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	2300      	movs	r3, #0
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b08:	e7aa      	b.n	8008a60 <_printf_i+0x14c>
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4649      	mov	r1, r9
 8008b10:	4640      	mov	r0, r8
 8008b12:	47d0      	blx	sl
 8008b14:	3001      	adds	r0, #1
 8008b16:	d0ad      	beq.n	8008a74 <_printf_i+0x160>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	079b      	lsls	r3, r3, #30
 8008b1c:	d413      	bmi.n	8008b46 <_printf_i+0x232>
 8008b1e:	68e0      	ldr	r0, [r4, #12]
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	4298      	cmp	r0, r3
 8008b24:	bfb8      	it	lt
 8008b26:	4618      	movlt	r0, r3
 8008b28:	e7a6      	b.n	8008a78 <_printf_i+0x164>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	4649      	mov	r1, r9
 8008b30:	4640      	mov	r0, r8
 8008b32:	47d0      	blx	sl
 8008b34:	3001      	adds	r0, #1
 8008b36:	d09d      	beq.n	8008a74 <_printf_i+0x160>
 8008b38:	3501      	adds	r5, #1
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	9903      	ldr	r1, [sp, #12]
 8008b3e:	1a5b      	subs	r3, r3, r1
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dcf2      	bgt.n	8008b2a <_printf_i+0x216>
 8008b44:	e7eb      	b.n	8008b1e <_printf_i+0x20a>
 8008b46:	2500      	movs	r5, #0
 8008b48:	f104 0619 	add.w	r6, r4, #25
 8008b4c:	e7f5      	b.n	8008b3a <_printf_i+0x226>
 8008b4e:	bf00      	nop
 8008b50:	0800901d 	.word	0x0800901d
 8008b54:	0800902e 	.word	0x0800902e

08008b58 <__sflush_r>:
 8008b58:	898a      	ldrh	r2, [r1, #12]
 8008b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5e:	4605      	mov	r5, r0
 8008b60:	0710      	lsls	r0, r2, #28
 8008b62:	460c      	mov	r4, r1
 8008b64:	d458      	bmi.n	8008c18 <__sflush_r+0xc0>
 8008b66:	684b      	ldr	r3, [r1, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc05      	bgt.n	8008b78 <__sflush_r+0x20>
 8008b6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc02      	bgt.n	8008b78 <__sflush_r+0x20>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d0f9      	beq.n	8008b72 <__sflush_r+0x1a>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b84:	682f      	ldr	r7, [r5, #0]
 8008b86:	6a21      	ldr	r1, [r4, #32]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	d032      	beq.n	8008bf2 <__sflush_r+0x9a>
 8008b8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	075a      	lsls	r2, r3, #29
 8008b92:	d505      	bpl.n	8008ba0 <__sflush_r+0x48>
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	1ac0      	subs	r0, r0, r3
 8008b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b9a:	b10b      	cbz	r3, 8008ba0 <__sflush_r+0x48>
 8008b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b9e:	1ac0      	subs	r0, r0, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba6:	6a21      	ldr	r1, [r4, #32]
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	d106      	bne.n	8008bc0 <__sflush_r+0x68>
 8008bb2:	6829      	ldr	r1, [r5, #0]
 8008bb4:	291d      	cmp	r1, #29
 8008bb6:	d82b      	bhi.n	8008c10 <__sflush_r+0xb8>
 8008bb8:	4a29      	ldr	r2, [pc, #164]	; (8008c60 <__sflush_r+0x108>)
 8008bba:	410a      	asrs	r2, r1
 8008bbc:	07d6      	lsls	r6, r2, #31
 8008bbe:	d427      	bmi.n	8008c10 <__sflush_r+0xb8>
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	6062      	str	r2, [r4, #4]
 8008bc4:	04d9      	lsls	r1, r3, #19
 8008bc6:	6922      	ldr	r2, [r4, #16]
 8008bc8:	6022      	str	r2, [r4, #0]
 8008bca:	d504      	bpl.n	8008bd6 <__sflush_r+0x7e>
 8008bcc:	1c42      	adds	r2, r0, #1
 8008bce:	d101      	bne.n	8008bd4 <__sflush_r+0x7c>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b903      	cbnz	r3, 8008bd6 <__sflush_r+0x7e>
 8008bd4:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd8:	602f      	str	r7, [r5, #0]
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	d0c9      	beq.n	8008b72 <__sflush_r+0x1a>
 8008bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d002      	beq.n	8008bec <__sflush_r+0x94>
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7ff fbea 	bl	80083c0 <_free_r>
 8008bec:	2000      	movs	r0, #0
 8008bee:	6360      	str	r0, [r4, #52]	; 0x34
 8008bf0:	e7c0      	b.n	8008b74 <__sflush_r+0x1c>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	1c41      	adds	r1, r0, #1
 8008bfa:	d1c8      	bne.n	8008b8e <__sflush_r+0x36>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0c5      	beq.n	8008b8e <__sflush_r+0x36>
 8008c02:	2b1d      	cmp	r3, #29
 8008c04:	d001      	beq.n	8008c0a <__sflush_r+0xb2>
 8008c06:	2b16      	cmp	r3, #22
 8008c08:	d101      	bne.n	8008c0e <__sflush_r+0xb6>
 8008c0a:	602f      	str	r7, [r5, #0]
 8008c0c:	e7b1      	b.n	8008b72 <__sflush_r+0x1a>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	e7ad      	b.n	8008b74 <__sflush_r+0x1c>
 8008c18:	690f      	ldr	r7, [r1, #16]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d0a9      	beq.n	8008b72 <__sflush_r+0x1a>
 8008c1e:	0793      	lsls	r3, r2, #30
 8008c20:	680e      	ldr	r6, [r1, #0]
 8008c22:	bf08      	it	eq
 8008c24:	694b      	ldreq	r3, [r1, #20]
 8008c26:	600f      	str	r7, [r1, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	eba6 0807 	sub.w	r8, r6, r7
 8008c30:	608b      	str	r3, [r1, #8]
 8008c32:	f1b8 0f00 	cmp.w	r8, #0
 8008c36:	dd9c      	ble.n	8008b72 <__sflush_r+0x1a>
 8008c38:	6a21      	ldr	r1, [r4, #32]
 8008c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b0      	blx	r6
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc06      	bgt.n	8008c56 <__sflush_r+0xfe>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e78e      	b.n	8008b74 <__sflush_r+0x1c>
 8008c56:	4407      	add	r7, r0
 8008c58:	eba8 0800 	sub.w	r8, r8, r0
 8008c5c:	e7e9      	b.n	8008c32 <__sflush_r+0xda>
 8008c5e:	bf00      	nop
 8008c60:	dfbffffe 	.word	0xdfbffffe

08008c64 <_fflush_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	690b      	ldr	r3, [r1, #16]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	b913      	cbnz	r3, 8008c74 <_fflush_r+0x10>
 8008c6e:	2500      	movs	r5, #0
 8008c70:	4628      	mov	r0, r5
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	b118      	cbz	r0, 8008c7e <_fflush_r+0x1a>
 8008c76:	6a03      	ldr	r3, [r0, #32]
 8008c78:	b90b      	cbnz	r3, 8008c7e <_fflush_r+0x1a>
 8008c7a:	f7ff fa8b 	bl	8008194 <__sinit>
 8008c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f3      	beq.n	8008c6e <_fflush_r+0xa>
 8008c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c88:	07d0      	lsls	r0, r2, #31
 8008c8a:	d404      	bmi.n	8008c96 <_fflush_r+0x32>
 8008c8c:	0599      	lsls	r1, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_fflush_r+0x32>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f7ff fb84 	bl	800839e <__retarget_lock_acquire_recursive>
 8008c96:	4628      	mov	r0, r5
 8008c98:	4621      	mov	r1, r4
 8008c9a:	f7ff ff5d 	bl	8008b58 <__sflush_r>
 8008c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca0:	07da      	lsls	r2, r3, #31
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	d4e4      	bmi.n	8008c70 <_fflush_r+0xc>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	059b      	lsls	r3, r3, #22
 8008caa:	d4e1      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cae:	f7ff fb77 	bl	80083a0 <__retarget_lock_release_recursive>
 8008cb2:	e7dd      	b.n	8008c70 <_fflush_r+0xc>

08008cb4 <__swbuf_r>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	460e      	mov	r6, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	4605      	mov	r5, r0
 8008cbc:	b118      	cbz	r0, 8008cc6 <__swbuf_r+0x12>
 8008cbe:	6a03      	ldr	r3, [r0, #32]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <__swbuf_r+0x12>
 8008cc2:	f7ff fa67 	bl	8008194 <__sinit>
 8008cc6:	69a3      	ldr	r3, [r4, #24]
 8008cc8:	60a3      	str	r3, [r4, #8]
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	071a      	lsls	r2, r3, #28
 8008cce:	d525      	bpl.n	8008d1c <__swbuf_r+0x68>
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	b31b      	cbz	r3, 8008d1c <__swbuf_r+0x68>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	1a98      	subs	r0, r3, r2
 8008cda:	6963      	ldr	r3, [r4, #20]
 8008cdc:	b2f6      	uxtb	r6, r6
 8008cde:	4283      	cmp	r3, r0
 8008ce0:	4637      	mov	r7, r6
 8008ce2:	dc04      	bgt.n	8008cee <__swbuf_r+0x3a>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f7ff ffbc 	bl	8008c64 <_fflush_r>
 8008cec:	b9e0      	cbnz	r0, 8008d28 <__swbuf_r+0x74>
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	60a3      	str	r3, [r4, #8]
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	701e      	strb	r6, [r3, #0]
 8008cfc:	6962      	ldr	r2, [r4, #20]
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d004      	beq.n	8008d0e <__swbuf_r+0x5a>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	07db      	lsls	r3, r3, #31
 8008d08:	d506      	bpl.n	8008d18 <__swbuf_r+0x64>
 8008d0a:	2e0a      	cmp	r6, #10
 8008d0c:	d104      	bne.n	8008d18 <__swbuf_r+0x64>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f7ff ffa7 	bl	8008c64 <_fflush_r>
 8008d16:	b938      	cbnz	r0, 8008d28 <__swbuf_r+0x74>
 8008d18:	4638      	mov	r0, r7
 8008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f806 	bl	8008d30 <__swsetup_r>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0d5      	beq.n	8008cd4 <__swbuf_r+0x20>
 8008d28:	f04f 37ff 	mov.w	r7, #4294967295
 8008d2c:	e7f4      	b.n	8008d18 <__swbuf_r+0x64>
	...

08008d30 <__swsetup_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4b2a      	ldr	r3, [pc, #168]	; (8008ddc <__swsetup_r+0xac>)
 8008d34:	4605      	mov	r5, r0
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	460c      	mov	r4, r1
 8008d3a:	b118      	cbz	r0, 8008d44 <__swsetup_r+0x14>
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	b90b      	cbnz	r3, 8008d44 <__swsetup_r+0x14>
 8008d40:	f7ff fa28 	bl	8008194 <__sinit>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d4a:	0718      	lsls	r0, r3, #28
 8008d4c:	d422      	bmi.n	8008d94 <__swsetup_r+0x64>
 8008d4e:	06d9      	lsls	r1, r3, #27
 8008d50:	d407      	bmi.n	8008d62 <__swsetup_r+0x32>
 8008d52:	2309      	movs	r3, #9
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	e034      	b.n	8008dcc <__swsetup_r+0x9c>
 8008d62:	0758      	lsls	r0, r3, #29
 8008d64:	d512      	bpl.n	8008d8c <__swsetup_r+0x5c>
 8008d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d68:	b141      	cbz	r1, 8008d7c <__swsetup_r+0x4c>
 8008d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	d002      	beq.n	8008d78 <__swsetup_r+0x48>
 8008d72:	4628      	mov	r0, r5
 8008d74:	f7ff fb24 	bl	80083c0 <_free_r>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	2300      	movs	r3, #0
 8008d86:	6063      	str	r3, [r4, #4]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f043 0308 	orr.w	r3, r3, #8
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	b94b      	cbnz	r3, 8008dac <__swsetup_r+0x7c>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da2:	d003      	beq.n	8008dac <__swsetup_r+0x7c>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 f850 	bl	8008e4c <__smakebuf_r>
 8008dac:	89a0      	ldrh	r0, [r4, #12]
 8008dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008db2:	f010 0301 	ands.w	r3, r0, #1
 8008db6:	d00a      	beq.n	8008dce <__swsetup_r+0x9e>
 8008db8:	2300      	movs	r3, #0
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6963      	ldr	r3, [r4, #20]
 8008dbe:	425b      	negs	r3, r3
 8008dc0:	61a3      	str	r3, [r4, #24]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b943      	cbnz	r3, 8008dd8 <__swsetup_r+0xa8>
 8008dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008dca:	d1c4      	bne.n	8008d56 <__swsetup_r+0x26>
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
 8008dce:	0781      	lsls	r1, r0, #30
 8008dd0:	bf58      	it	pl
 8008dd2:	6963      	ldrpl	r3, [r4, #20]
 8008dd4:	60a3      	str	r3, [r4, #8]
 8008dd6:	e7f4      	b.n	8008dc2 <__swsetup_r+0x92>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7f7      	b.n	8008dcc <__swsetup_r+0x9c>
 8008ddc:	20000068 	.word	0x20000068

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	; (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f8 f946 	bl	800107c <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20001d40 	.word	0x20001d40

08008e00 <__swhatbuf_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	460c      	mov	r4, r1
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	b096      	sub	sp, #88	; 0x58
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	461e      	mov	r6, r3
 8008e10:	da0d      	bge.n	8008e2e <__swhatbuf_r+0x2e>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e18:	f04f 0100 	mov.w	r1, #0
 8008e1c:	bf0c      	ite	eq
 8008e1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e22:	2340      	movne	r3, #64	; 0x40
 8008e24:	2000      	movs	r0, #0
 8008e26:	6031      	str	r1, [r6, #0]
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	b016      	add	sp, #88	; 0x58
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
 8008e2e:	466a      	mov	r2, sp
 8008e30:	f000 f848 	bl	8008ec4 <_fstat_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dbec      	blt.n	8008e12 <__swhatbuf_r+0x12>
 8008e38:	9901      	ldr	r1, [sp, #4]
 8008e3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e42:	4259      	negs	r1, r3
 8008e44:	4159      	adcs	r1, r3
 8008e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4a:	e7eb      	b.n	8008e24 <__swhatbuf_r+0x24>

08008e4c <__smakebuf_r>:
 8008e4c:	898b      	ldrh	r3, [r1, #12]
 8008e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e50:	079d      	lsls	r5, r3, #30
 8008e52:	4606      	mov	r6, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	d507      	bpl.n	8008e68 <__smakebuf_r+0x1c>
 8008e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	2301      	movs	r3, #1
 8008e62:	6163      	str	r3, [r4, #20]
 8008e64:	b002      	add	sp, #8
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	ab01      	add	r3, sp, #4
 8008e6a:	466a      	mov	r2, sp
 8008e6c:	f7ff ffc8 	bl	8008e00 <__swhatbuf_r>
 8008e70:	9900      	ldr	r1, [sp, #0]
 8008e72:	4605      	mov	r5, r0
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff fb0f 	bl	8008498 <_malloc_r>
 8008e7a:	b948      	cbnz	r0, 8008e90 <__smakebuf_r+0x44>
 8008e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e80:	059a      	lsls	r2, r3, #22
 8008e82:	d4ef      	bmi.n	8008e64 <__smakebuf_r+0x18>
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	f043 0302 	orr.w	r3, r3, #2
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	e7e3      	b.n	8008e58 <__smakebuf_r+0xc>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	6020      	str	r0, [r4, #0]
 8008e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	6120      	str	r0, [r4, #16]
 8008ea2:	b15b      	cbz	r3, 8008ebc <__smakebuf_r+0x70>
 8008ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 f81d 	bl	8008ee8 <_isatty_r>
 8008eae:	b128      	cbz	r0, 8008ebc <__smakebuf_r+0x70>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f023 0303 	bic.w	r3, r3, #3
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	431d      	orrs	r5, r3
 8008ec0:	81a5      	strh	r5, [r4, #12]
 8008ec2:	e7cf      	b.n	8008e64 <__smakebuf_r+0x18>

08008ec4 <_fstat_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_fstat_r+0x20>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f7f8 f8aa 	bl	800102a <_fstat>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d102      	bne.n	8008ee0 <_fstat_r+0x1c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	b103      	cbz	r3, 8008ee0 <_fstat_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20001d40 	.word	0x20001d40

08008ee8 <_isatty_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_isatty_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 f8a9 	bl	800104a <_isatty>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_isatty_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_isatty_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20001d40 	.word	0x20001d40

08008f08 <_init>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	bf00      	nop
 8008f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0e:	bc08      	pop	{r3}
 8008f10:	469e      	mov	lr, r3
 8008f12:	4770      	bx	lr

08008f14 <_fini>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr
