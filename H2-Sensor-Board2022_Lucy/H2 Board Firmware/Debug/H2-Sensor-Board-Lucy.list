
H2-Sensor-Board-Lucy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d64  0800f4c8  0800f4c8  0001f4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801022c  0801022c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801022c  0801022c  0002022c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010234  08010234  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010234  08010234  00020234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010238  08010238  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801023c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002520  200001e0  0801041c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002700  0801041c  00032700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002466d  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b31  00000000  00000000  000548c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002060  00000000  00000000  000593f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001920  00000000  00000000  0005b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002715d  00000000  00000000  0005cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024eca  00000000  00000000  00083ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edae9  00000000  00000000  000a8d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ce8  00000000  00000000  00196888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001a0570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4b0 	.word	0x0800f4b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800f4b0 	.word	0x0800f4b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000fec:	2305      	movs	r3, #5
 8000fee:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f001 facb 	bl	8002590 <null_ptr_check>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d133      	bne.n	800106e <bme280_init+0x8a>
		while (try_count) {
 8001006:	e028      	b.n	800105a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001008:	f107 010d 	add.w	r1, r7, #13
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	20d0      	movs	r0, #208	; 0xd0
 8001012:	f000 f832 	bl	800107a <bme280_get_regs>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d114      	bne.n	800104c <bme280_init+0x68>
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	2b60      	cmp	r3, #96	; 0x60
 8001026:	d111      	bne.n	800104c <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001028:	7b7a      	ldrb	r2, [r7, #13]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f978 	bl	8001324 <bme280_soft_reset>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d110      	bne.n	8001062 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 f919 	bl	8002278 <get_calib_data>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800104a:	e00a      	b.n	8001062 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2001      	movs	r0, #1
 8001052:	4798      	blx	r3
			--try_count;
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	3b01      	subs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1d3      	bne.n	8001008 <bme280_init+0x24>
 8001060:	e000      	b.n	8001064 <bme280_init+0x80>
				break;
 8001062:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800106a:	23fe      	movs	r3, #254	; 0xfe
 800106c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	4613      	mov	r3, r2
 800108a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fa7f 	bl	8002590 <null_ptr_check>
 8001092:	4603      	mov	r3, r0
 8001094:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d117      	bne.n	80010ce <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d003      	beq.n	80010ae <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685c      	ldr	r4, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7858      	ldrb	r0, [r3, #1]
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	7bf9      	ldrb	r1, [r7, #15]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	47a0      	blx	r4
 80010be:	4603      	mov	r3, r0
 80010c0:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80010c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80010ca:	23fc      	movs	r3, #252	; 0xfc
 80010cc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80010ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}

080010da <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b08d      	sub	sp, #52	; 0x34
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d901      	bls.n	80010f4 <bme280_set_regs+0x1a>
		len = 10;
 80010f0:	230a      	movs	r3, #10
 80010f2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f001 fa4b 	bl	8002590 <null_ptr_check>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001104:	2b00      	cmp	r3, #0
 8001106:	d156      	bne.n	80011b6 <bme280_set_regs+0xdc>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d053      	beq.n	80011b6 <bme280_set_regs+0xdc>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d050      	beq.n	80011b6 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d049      	beq.n	80011ae <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d01a      	beq.n	800115e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800112e:	e011      	b.n	8001154 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	440b      	add	r3, r1
 8001142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800114a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800114e:	3301      	adds	r3, #1
 8001150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001154:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3e8      	bcc.n	8001130 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d90d      	bls.n	8001180 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f107 0114 	add.w	r1, r7, #20
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f001 f8c8 	bl	8002302 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b29b      	uxth	r3, r3
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800117e:	e001      	b.n	8001184 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689c      	ldr	r4, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	7858      	ldrb	r0, [r3, #1]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7819      	ldrb	r1, [r3, #0]
 8001190:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	47a0      	blx	r4
 8001198:	4603      	mov	r3, r0
 800119a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800119e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011a6:	23fc      	movs	r3, #252	; 0xfc
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011ac:	e007      	b.n	80011be <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011ae:	23fd      	movs	r3, #253	; 0xfd
 80011b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011b4:	e003      	b.n	80011be <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011bc:	e000      	b.n	80011c0 <bme280_set_regs+0xe6>
		if (len != 0) {
 80011be:	bf00      	nop
	}


	return rslt;
 80011c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3734      	adds	r7, #52	; 0x34
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f001 f9d9 	bl	8002590 <null_ptr_check>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d13f      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80011ea:	f107 030e 	add.w	r3, r7, #14
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f874 	bl	80012de <bme280_get_sensor_mode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <bme280_set_sensor_settings+0x46>
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f000 fb36 	bl	800187a <put_device_to_sleep>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d127      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4619      	mov	r1, r3
 800121e:	2007      	movs	r0, #7
 8001220:	f001 f99a 	bl	8002558 <are_settings_changed>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f972 	bl	800151e <set_osr_settings>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d111      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4619      	mov	r1, r3
 800124a:	2018      	movs	r0, #24
 800124c:	f001 f984 	bl	8002558 <are_settings_changed>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9f9 	bl	8001658 <set_filter_standby_settings>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	6039      	str	r1, [r7, #0]
 8001280:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f001 f984 	bl	8002590 <null_ptr_check>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11e      	bne.n	80012d2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001294:	f107 030e 	add.w	r3, r7, #14
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f81f 	bl	80012de <bme280_get_sensor_mode>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <bme280_set_sensor_mode+0x46>
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f000 fae1 	bl	800187a <put_device_to_sleep>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 faa3 	bl	8001814 <write_power_mode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f001 f951 	bl	8002590 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10e      	bne.n	8001318 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	20f4      	movs	r0, #244	; 0xf4
 8001302:	f7ff feba 	bl	800107a <bme280_get_regs>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b2da      	uxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 800132c:	23e0      	movs	r3, #224	; 0xe0
 800132e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001330:	23b6      	movs	r3, #182	; 0xb6
 8001332:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 f92b 	bl	8002590 <null_ptr_check>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10d      	bne.n	8001362 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001346:	f107 010d 	add.w	r1, r7, #13
 800134a:	f107 000e 	add.w	r0, r7, #14
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f7ff fec2 	bl	80010da <bme280_set_regs>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2002      	movs	r0, #2
 8001360:	4798      	blx	r3
	}

	return rslt;
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b08a      	sub	sp, #40	; 0x28
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 f8fd 	bl	8002590 <null_ptr_check>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800139c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d124      	bne.n	80013ee <bme280_get_sensor_data+0x80>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d021      	beq.n	80013ee <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013aa:	f107 011c 	add.w	r1, r7, #28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2208      	movs	r2, #8
 80013b2:	20f7      	movs	r0, #247	; 0xf7
 80013b4:	f7ff fe61 	bl	800107a <bme280_get_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80013be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80013c6:	f107 0210 	add.w	r2, r7, #16
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f815 	bl	8001400 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3310      	adds	r3, #16
 80013da:	f107 0110 	add.w	r1, r7, #16
 80013de:	7bf8      	ldrb	r0, [r7, #15]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	f000 f853 	bl	800148c <bme280_compensate_data>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80013ec:	e002      	b.n	80013f4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013ee:	23ff      	movs	r3, #255	; 0xff
 80013f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80013f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	031b      	lsls	r3, r3, #12
 8001410:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3302      	adds	r3, #2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	b2db      	uxtb	r3, r3
 8001426:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	431a      	orrs	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	431a      	orrs	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3303      	adds	r3, #3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3304      	adds	r3, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3305      	adds	r3, #5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	431a      	orrs	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	431a      	orrs	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3306      	adds	r3, #6
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3307      	adds	r3, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	431a      	orrs	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d033      	beq.n	800150e <bme280_compensate_data+0x82>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d030      	beq.n	800150e <bme280_compensate_data+0x82>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d02d      	beq.n	800150e <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f000 fa1f 	bl	8001914 <compensate_temperature>
 80014d6:	4602      	mov	r2, r0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f000 fa75 	bl	80019d8 <compensate_pressure>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f000 fe0d 	bl	8002120 <compensate_humidity>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 800150c:	e001      	b.n	8001512 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800150e:	23ff      	movs	r3, #255	; 0xff
 8001510:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800152c:	2301      	movs	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f000 f815 	bl	800156c <set_osr_humidity_settings>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f842 	bl	80015e0 <set_osr_press_temp_settings>
 800155c:	4603      	mov	r3, r0
 800155e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001576:	23f2      	movs	r3, #242	; 0xf2
 8001578:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001586:	f107 010e 	add.w	r1, r7, #14
 800158a:	f107 000c 	add.w	r0, r7, #12
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	f7ff fda2 	bl	80010da <bme280_set_regs>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80015a2:	23f4      	movs	r3, #244	; 0xf4
 80015a4:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015a6:	7b38      	ldrb	r0, [r7, #12]
 80015a8:	f107 010d 	add.w	r1, r7, #13
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f7ff fd63 	bl	800107a <bme280_get_regs>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80015c0:	f107 010d 	add.w	r1, r7, #13
 80015c4:	f107 000c 	add.w	r0, r7, #12
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd85 	bl	80010da <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015ee:	23f4      	movs	r3, #244	; 0xf4
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fd3d 	bl	800107a <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f88e 	bl	800173e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8a0 	bl	8001778 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fd49 	bl	80010da <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001666:	23f5      	movs	r3, #245	; 0xf5
 8001668:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800166a:	7db8      	ldrb	r0, [r7, #22]
 800166c:	f107 0115 	add.w	r1, r7, #21
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f7ff fd01 	bl	800107a <bme280_get_regs>
 8001678:	4603      	mov	r3, r0
 800167a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d11f      	bne.n	80016c4 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800168e:	f107 0315 	add.w	r3, r7, #21
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f81b 	bl	80016d0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016a4:	f107 0315 	add.w	r3, r7, #21
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f82d 	bl	800170a <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016b0:	f107 0115 	add.w	r1, r7, #21
 80016b4:	f107 0016 	add.w	r0, r7, #22
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fd0d 	bl	80010da <bme280_set_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f023 031c 	bic.w	r3, r3, #28
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	f003 031c 	and.w	r3, r3, #28
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	b25a      	sxtb	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	015b      	lsls	r3, r3, #5
 8001726:	b25b      	sxtb	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f023 031c 	bic.w	r3, r3, #28
 8001752:	b25a      	sxtb	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f003 031c 	and.w	r3, r3, #28
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	b25a      	sxtb	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3302      	adds	r3, #2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	109b      	asrs	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3303      	adds	r3, #3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	109b      	asrs	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3303      	adds	r3, #3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2da      	uxtb	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	711a      	strb	r2, [r3, #4]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001820:	23f4      	movs	r3, #244	; 0xf4
 8001822:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001824:	7bb8      	ldrb	r0, [r7, #14]
 8001826:	f107 010d 	add.w	r1, r7, #13
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc24 	bl	800107a <bme280_get_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d117      	bne.n	800186e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800183e:	7b7b      	ldrb	r3, [r7, #13]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	b25a      	sxtb	r2, r3
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800185a:	f107 010d 	add.w	r1, r7, #13
 800185e:	f107 000e 	add.w	r0, r7, #14
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	f7ff fc38 	bl	80010da <bme280_set_regs>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001882:	f107 0110 	add.w	r1, r7, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	20f2      	movs	r0, #242	; 0xf2
 800188c:	f7ff fbf5 	bl	800107a <bme280_get_regs>
 8001890:	4603      	mov	r3, r0
 8001892:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d118      	bne.n	80018ce <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800189c:	f107 0208 	add.w	r2, r7, #8
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff80 	bl	80017ac <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fd39 	bl	8001324 <bme280_soft_reset>
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f808 	bl	80018da <reload_device_settings>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	201f      	movs	r0, #31
 80018ea:	f7ff fe18 	bl	800151e <set_osr_settings>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	201f      	movs	r0, #31
 8001900:	f7ff feaa 	bl	8001658 <set_filter_standby_settings>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <compensate_temperature+0xc0>)
 8001920:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001922:	f242 1334 	movw	r3, #8500	; 0x2134
 8001926:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	8812      	ldrh	r2, [r2, #0]
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193e:	461a      	mov	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	da01      	bge.n	800194e <compensate_temperature+0x3a>
 800194a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800194e:	12db      	asrs	r3, r3, #11
 8001950:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	fb03 f303 	mul.w	r3, r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	da01      	bge.n	800196e <compensate_temperature+0x5a>
 800196a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800196e:	131b      	asrs	r3, r3, #12
 8001970:	461a      	mov	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	da02      	bge.n	8001986 <compensate_temperature+0x72>
 8001980:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001984:	333f      	adds	r3, #63	; 0x3f
 8001986:	139b      	asrs	r3, r3, #14
 8001988:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	441a      	add	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3380      	adds	r3, #128	; 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da00      	bge.n	80019a6 <compensate_temperature+0x92>
 80019a4:	33ff      	adds	r3, #255	; 0xff
 80019a6:	121b      	asrs	r3, r3, #8
 80019a8:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	da02      	bge.n	80019b8 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e005      	b.n	80019c4 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dd01      	ble.n	80019c4 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	61fb      	str	r3, [r7, #28]

	return temperature;
 80019c4:	69fb      	ldr	r3, [r7, #28]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	fffff060 	.word	0xfffff060

080019d8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b0ea      	sub	sp, #424	; 0x1a8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80019e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80019e8:	4bbf      	ldr	r3, [pc, #764]	; (8001ce8 <compensate_pressure+0x310>)
 80019ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 80019ee:	4bbf      	ldr	r3, [pc, #764]	; (8001cec <compensate_pressure+0x314>)
 80019f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80019f4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	17da      	asrs	r2, r3, #31
 80019fc:	4698      	mov	r8, r3
 80019fe:	4691      	mov	r9, r2
 8001a00:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001a04:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001a08:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a14:	fb03 f102 	mul.w	r1, r3, r2
 8001a18:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	18ca      	adds	r2, r1, r3
 8001a26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a2a:	fba3 4503 	umull	r4, r5, r3, r3
 8001a2e:	1953      	adds	r3, r2, r5
 8001a30:	461d      	mov	r5, r3
 8001a32:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	17da      	asrs	r2, r3, #31
 8001a3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a42:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001a46:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	fb03 f205 	mul.w	r2, r3, r5
 8001a50:	460b      	mov	r3, r1
 8001a52:	fb04 f303 	mul.w	r3, r4, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	4602      	mov	r2, r0
 8001a5a:	fba4 1202 	umull	r1, r2, r4, r2
 8001a5e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001a68:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a72:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001a76:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001a7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001a7e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	17da      	asrs	r2, r3, #31
 8001a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001a8e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a96:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	fb02 f203 	mul.w	r2, r2, r3
 8001aa0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	441a      	add	r2, r3
 8001aac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	fba3 1301 	umull	r1, r3, r3, r1
 8001ab6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001aba:	460b      	mov	r3, r1
 8001abc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001ac0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	0459      	lsls	r1, r3, #17
 8001ada:	4623      	mov	r3, r4
 8001adc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	0458      	lsls	r0, r3, #17
 8001ae4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001ae8:	1814      	adds	r4, r2, r0
 8001aea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001aee:	414b      	adcs	r3, r1
 8001af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001af4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001af8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001afc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	17da      	asrs	r2, r3, #31
 8001b08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001b0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b1c:	00d9      	lsls	r1, r3, #3
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b24:	1814      	adds	r4, r2, r0
 8001b26:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001b2a:	414b      	adcs	r3, r1
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b30:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001b34:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b40:	fb03 f102 	mul.w	r1, r3, r2
 8001b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	18ca      	adds	r2, r1, r3
 8001b52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b56:	fba3 1303 	umull	r1, r3, r3, r3
 8001b5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001b5e:	460b      	mov	r3, r1
 8001b60:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001b64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001b6e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	17da      	asrs	r2, r3, #31
 8001b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b7e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001b82:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001b86:	462b      	mov	r3, r5
 8001b88:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	fb02 f203 	mul.w	r2, r2, r3
 8001b92:	464b      	mov	r3, r9
 8001b94:	4621      	mov	r1, r4
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	fba2 1201 	umull	r1, r2, r2, r1
 8001ba4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001ba8:	460a      	mov	r2, r1
 8001baa:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001bae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001bb8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da09      	bge.n	8001bd4 <compensate_pressure+0x1fc>
 8001bc0:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001bc4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001bc8:	f143 0300 	adc.w	r3, r3, #0
 8001bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bd0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0a10      	lsrs	r0, r2, #8
 8001bde:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001be2:	1219      	asrs	r1, r3, #8
 8001be4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001be8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	17da      	asrs	r2, r3, #31
 8001bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001bf4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001bf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bfc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001c00:	464a      	mov	r2, r9
 8001c02:	fb02 f203 	mul.w	r2, r2, r3
 8001c06:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c0a:	4644      	mov	r4, r8
 8001c0c:	fb04 f303 	mul.w	r3, r4, r3
 8001c10:	441a      	add	r2, r3
 8001c12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c16:	4644      	mov	r4, r8
 8001c18:	fba3 4304 	umull	r4, r3, r3, r4
 8001c1c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c20:	4623      	mov	r3, r4
 8001c22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001c3c:	464c      	mov	r4, r9
 8001c3e:	0323      	lsls	r3, r4, #12
 8001c40:	4644      	mov	r4, r8
 8001c42:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c46:	4644      	mov	r4, r8
 8001c48:	0322      	lsls	r2, r4, #12
 8001c4a:	1884      	adds	r4, r0, r2
 8001c4c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001c50:	eb41 0303 	adc.w	r3, r1, r3
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001c5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c68:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001c6c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001c70:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c74:	1884      	adds	r4, r0, r2
 8001c76:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001c7a:	eb41 0303 	adc.w	r3, r1, r3
 8001c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c86:	88db      	ldrh	r3, [r3, #6]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c90:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001c94:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001c98:	462b      	mov	r3, r5
 8001c9a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001c9e:	4642      	mov	r2, r8
 8001ca0:	fb02 f203 	mul.w	r2, r2, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	4622      	mov	r2, r4
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	fba2 1201 	umull	r1, r2, r2, r1
 8001cb6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cba:	460a      	mov	r2, r1
 8001cbc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cc0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0e      	bge.n	8001cf0 <compensate_pressure+0x318>
 8001cd2:	1e51      	subs	r1, r2, #1
 8001cd4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001cd8:	f143 0301 	adc.w	r3, r3, #1
 8001cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ce0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce4:	e004      	b.n	8001cf0 <compensate_pressure+0x318>
 8001ce6:	bf00      	nop
 8001ce8:	002dc6c0 	.word	0x002dc6c0
 8001cec:	00a7d8c0 	.word	0x00a7d8c0
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	1058      	asrs	r0, r3, #1
 8001cfa:	17d9      	asrs	r1, r3, #31
 8001cfc:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001d00:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f000 81fc 	beq.w	8002102 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001d0a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d1a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d1e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001d22:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d26:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	07d9      	lsls	r1, r3, #31
 8001d34:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d38:	07d0      	lsls	r0, r2, #31
 8001d3a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001d3e:	1a84      	subs	r4, r0, r2
 8001d40:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001d44:	eb61 0303 	sbc.w	r3, r1, r3
 8001d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d4c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d50:	4622      	mov	r2, r4
 8001d52:	462b      	mov	r3, r5
 8001d54:	1891      	adds	r1, r2, r2
 8001d56:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d60:	4621      	mov	r1, r4
 8001d62:	1851      	adds	r1, r2, r1
 8001d64:	6739      	str	r1, [r7, #112]	; 0x70
 8001d66:	4629      	mov	r1, r5
 8001d68:	414b      	adcs	r3, r1
 8001d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001d78:	4649      	mov	r1, r9
 8001d7a:	018b      	lsls	r3, r1, #6
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d82:	4641      	mov	r1, r8
 8001d84:	018a      	lsls	r2, r1, #6
 8001d86:	4641      	mov	r1, r8
 8001d88:	1889      	adds	r1, r1, r2
 8001d8a:	66b9      	str	r1, [r7, #104]	; 0x68
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	eb43 0101 	adc.w	r1, r3, r1
 8001d92:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001da0:	4649      	mov	r1, r9
 8001da2:	008b      	lsls	r3, r1, #2
 8001da4:	4641      	mov	r1, r8
 8001da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001daa:	4641      	mov	r1, r8
 8001dac:	008a      	lsls	r2, r1, #2
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	4622      	mov	r2, r4
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dba:	460b      	mov	r3, r1
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	eb42 0303 	adc.w	r3, r2, r3
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	008b      	lsls	r3, r1, #2
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dda:	4641      	mov	r1, r8
 8001ddc:	008a      	lsls	r2, r1, #2
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	4622      	mov	r2, r4
 8001de6:	189b      	adds	r3, r3, r2
 8001de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dec:	462b      	mov	r3, r5
 8001dee:	460a      	mov	r2, r1
 8001df0:	eb42 0303 	adc.w	r3, r2, r3
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001df8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e00:	f7fe ff22 	bl	8000c48 <__aeabi_ldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e0c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	17da      	asrs	r2, r3, #31
 8001e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e1c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e20:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da08      	bge.n	8001e3a <compensate_pressure+0x462>
 8001e28:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e2c:	1851      	adds	r1, r2, r1
 8001e2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e30:	f143 0300 	adc.w	r3, r3, #0
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	0b50      	lsrs	r0, r2, #13
 8001e44:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e48:	1359      	asrs	r1, r3, #13
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001e52:	4629      	mov	r1, r5
 8001e54:	fb02 f001 	mul.w	r0, r2, r1
 8001e58:	4621      	mov	r1, r4
 8001e5a:	fb01 f103 	mul.w	r1, r1, r3
 8001e5e:	4401      	add	r1, r0
 8001e60:	4620      	mov	r0, r4
 8001e62:	fba0 2302 	umull	r2, r3, r0, r2
 8001e66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001e70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e74:	18cb      	adds	r3, r1, r3
 8001e76:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001e7a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da08      	bge.n	8001e94 <compensate_pressure+0x4bc>
 8001e82:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e86:	1851      	adds	r1, r2, r1
 8001e88:	6539      	str	r1, [r7, #80]	; 0x50
 8001e8a:	f143 0300 	adc.w	r3, r3, #0
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	0b50      	lsrs	r0, r2, #13
 8001e9e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ea2:	1359      	asrs	r1, r3, #13
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001eac:	4629      	mov	r1, r5
 8001eae:	fb02 f001 	mul.w	r0, r2, r1
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	fb01 f103 	mul.w	r1, r1, r3
 8001eb8:	4401      	add	r1, r0
 8001eba:	4620      	mov	r0, r4
 8001ebc:	fba0 2302 	umull	r2, r3, r0, r2
 8001ec0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001eca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ece:	18cb      	adds	r3, r1, r3
 8001ed0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ed4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da08      	bge.n	8001eee <compensate_pressure+0x516>
 8001edc:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001ee0:	1851      	adds	r1, r2, r1
 8001ee2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ee4:	f143 0300 	adc.w	r3, r3, #0
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0e50      	lsrs	r0, r2, #25
 8001ef8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001efc:	1659      	asrs	r1, r3, #25
 8001efe:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001f02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	17da      	asrs	r2, r3, #31
 8001f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f12:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f1a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001f1e:	462a      	mov	r2, r5
 8001f20:	fb02 f203 	mul.w	r2, r2, r3
 8001f24:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	441a      	add	r2, r3
 8001f30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f34:	4621      	mov	r1, r4
 8001f36:	fba3 1301 	umull	r1, r3, r3, r1
 8001f3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f3e:	460b      	mov	r3, r1
 8001f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f4e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da07      	bge.n	8001f66 <compensate_pressure+0x58e>
 8001f56:	4971      	ldr	r1, [pc, #452]	; (800211c <compensate_pressure+0x744>)
 8001f58:	1851      	adds	r1, r2, r1
 8001f5a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f5c:	f143 0300 	adc.w	r3, r3, #0
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f66:	f04f 0000 	mov.w	r0, #0
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	0cd0      	lsrs	r0, r2, #19
 8001f70:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001f74:	14d9      	asrs	r1, r3, #19
 8001f76:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001f7a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001f7e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001f82:	1884      	adds	r4, r0, r2
 8001f84:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001f88:	eb41 0303 	adc.w	r3, r1, r3
 8001f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f94:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001f98:	4621      	mov	r1, r4
 8001f9a:	1889      	adds	r1, r1, r2
 8001f9c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	eb43 0101 	adc.w	r1, r3, r1
 8001fa6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001faa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da07      	bge.n	8001fc2 <compensate_pressure+0x5ea>
 8001fb2:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb8:	f143 0300 	adc.w	r3, r3, #0
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f04f 0100 	mov.w	r1, #0
 8001fca:	0a10      	lsrs	r0, r2, #8
 8001fcc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fd0:	1219      	asrs	r1, r3, #8
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fe2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ff2:	464c      	mov	r4, r9
 8001ff4:	0123      	lsls	r3, r4, #4
 8001ff6:	4644      	mov	r4, r8
 8001ff8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ffc:	4644      	mov	r4, r8
 8001ffe:	0122      	lsls	r2, r4, #4
 8002000:	1884      	adds	r4, r0, r2
 8002002:	633c      	str	r4, [r7, #48]	; 0x30
 8002004:	eb41 0303 	adc.w	r3, r1, r3
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800200e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8002012:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002016:	0fd9      	lsrs	r1, r3, #31
 8002018:	2000      	movs	r0, #0
 800201a:	62b9      	str	r1, [r7, #40]	; 0x28
 800201c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800201e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002022:	4621      	mov	r1, r4
 8002024:	1889      	adds	r1, r1, r2
 8002026:	6239      	str	r1, [r7, #32]
 8002028:	4629      	mov	r1, r5
 800202a:	eb43 0101 	adc.w	r1, r3, r1
 800202e:	6279      	str	r1, [r7, #36]	; 0x24
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800203c:	4621      	mov	r1, r4
 800203e:	084a      	lsrs	r2, r1, #1
 8002040:	4629      	mov	r1, r5
 8002042:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002046:	4629      	mov	r1, r5
 8002048:	104b      	asrs	r3, r1, #1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	1894      	adds	r4, r2, r2
 8002054:	61bc      	str	r4, [r7, #24]
 8002056:	415b      	adcs	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205e:	1814      	adds	r4, r2, r0
 8002060:	613c      	str	r4, [r7, #16]
 8002062:	414b      	adcs	r3, r1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002072:	464c      	mov	r4, r9
 8002074:	0163      	lsls	r3, r4, #5
 8002076:	4644      	mov	r4, r8
 8002078:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800207c:	4644      	mov	r4, r8
 800207e:	0162      	lsls	r2, r4, #5
 8002080:	4644      	mov	r4, r8
 8002082:	18a4      	adds	r4, r4, r2
 8002084:	60bc      	str	r4, [r7, #8]
 8002086:	464c      	mov	r4, r9
 8002088:	eb43 0404 	adc.w	r4, r3, r4
 800208c:	60fc      	str	r4, [r7, #12]
 800208e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002092:	4623      	mov	r3, r4
 8002094:	181b      	adds	r3, r3, r0
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800209a:	462b      	mov	r3, r5
 800209c:	eb41 0303 	adc.w	r3, r1, r3
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020a4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da07      	bge.n	80020bc <compensate_pressure+0x6e4>
 80020ac:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	f143 0300 	adc.w	r3, r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020bc:	f04f 0000 	mov.w	r0, #0
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	09d0      	lsrs	r0, r2, #7
 80020c6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80020ca:	11d9      	asrs	r1, r3, #7
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 80020d6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020de:	429a      	cmp	r2, r3
 80020e0:	d204      	bcs.n	80020ec <compensate_pressure+0x714>
			pressure = pressure_min;
 80020e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020ea:	e00e      	b.n	800210a <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80020ec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <compensate_pressure+0x732>
			pressure = pressure_max;
 80020f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002100:	e003      	b.n	800210a <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8002102:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002106:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 800210a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 800210e:	4618      	mov	r0, r3
 8002110:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	0007ffff 	.word	0x0007ffff

08002120 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002120:	b480      	push	{r7}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800212a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800212e:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002138:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	039b      	lsls	r3, r3, #14
 8002140:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800216a:	2b00      	cmp	r3, #0
 800216c:	da02      	bge.n	8002174 <compensate_humidity+0x54>
 800216e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002172:	337f      	adds	r3, #127	; 0x7f
 8002174:	13db      	asrs	r3, r3, #15
 8002176:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	da01      	bge.n	800218e <compensate_humidity+0x6e>
 800218a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800218e:	129b      	asrs	r3, r3, #10
 8002190:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7f1b      	ldrb	r3, [r3, #28]
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da01      	bge.n	80021a6 <compensate_humidity+0x86>
 80021a2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80021a6:	12db      	asrs	r3, r3, #11
 80021a8:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da01      	bge.n	80021be <compensate_humidity+0x9e>
 80021ba:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80021be:	129b      	asrs	r3, r3, #10
 80021c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80021c4:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021cc:	461a      	mov	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da02      	bge.n	80021e2 <compensate_humidity+0xc2>
 80021dc:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	139b      	asrs	r3, r3, #14
 80021e4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da02      	bge.n	80021fc <compensate_humidity+0xdc>
 80021f6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80021fa:	337f      	adds	r3, #127	; 0x7f
 80021fc:	13db      	asrs	r3, r3, #15
 80021fe:	461a      	mov	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da02      	bge.n	800220c <compensate_humidity+0xec>
 8002206:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800220a:	337f      	adds	r3, #127	; 0x7f
 800220c:	13db      	asrs	r3, r3, #15
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	da00      	bge.n	8002218 <compensate_humidity+0xf8>
 8002216:	337f      	adds	r3, #127	; 0x7f
 8002218:	11db      	asrs	r3, r3, #7
 800221a:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	461a      	mov	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	da00      	bge.n	800222e <compensate_humidity+0x10e>
 800222c:	330f      	adds	r3, #15
 800222e:	111b      	asrs	r3, r3, #4
 8002230:	425b      	negs	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002240:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002248:	bfa8      	it	ge
 800224a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800224e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da01      	bge.n	800225a <compensate_humidity+0x13a>
 8002256:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800225a:	131b      	asrs	r3, r3, #12
 800225c:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d901      	bls.n	800226a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800226c:	4618      	mov	r0, r3
 800226e:	372c      	adds	r7, #44	; 0x2c
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002280:	2388      	movs	r3, #136	; 0x88
 8002282:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800229c:	f107 010c 	add.w	r1, r7, #12
 80022a0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	221a      	movs	r2, #26
 80022a8:	f7fe fee7 	bl	800107a <bme280_get_regs>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 80022b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f84a 	bl	800235a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80022c6:	23e1      	movs	r3, #225	; 0xe1
 80022c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2207      	movs	r2, #7
 80022d8:	f7fe fecf 	bl	800107a <bme280_get_regs>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80022e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f8e2 	bl	80024ba <parse_humidity_calib_data>
		}
	}

	return rslt;
 80022f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
 8002314:	e016      	b.n	8002344 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	441a      	add	r2, r3
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	440b      	add	r3, r1
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	441a      	add	r2, r3
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4619      	mov	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	440b      	add	r3, r1
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	3301      	adds	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
 8002344:	7dfa      	ldrb	r2, [r7, #23]
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3e4      	bcc.n	8002316 <interleave_reg_addr+0x14>
	}
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3310      	adds	r3, #16
 8002368:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21b      	sxth	r3, r3
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3303      	adds	r3, #3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3302      	adds	r3, #2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3305      	adds	r3, #5
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3307      	adds	r3, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3306      	adds	r3, #6
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3309      	adds	r3, #9
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3308      	adds	r3, #8
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330b      	adds	r3, #11
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	330a      	adds	r3, #10
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b21a      	sxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	330d      	adds	r3, #13
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	330c      	adds	r3, #12
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	330f      	adds	r3, #15
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	330e      	adds	r3, #14
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b21a      	sxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3311      	adds	r3, #17
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3310      	adds	r3, #16
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b21a      	sxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3313      	adds	r3, #19
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3312      	adds	r3, #18
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21a      	sxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3315      	adds	r3, #21
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b21a      	sxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3314      	adds	r3, #20
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21a      	sxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3317      	adds	r3, #23
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3316      	adds	r3, #22
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21a      	sxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3319      	adds	r3, #25
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	761a      	strb	r2, [r3, #24]

}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3310      	adds	r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3301      	adds	r3, #1
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21a      	sxth	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3302      	adds	r3, #2
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3303      	adds	r3, #3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800250a:	8a7a      	ldrh	r2, [r7, #18]
 800250c:	8a3b      	ldrh	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	b21a      	sxth	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3305      	adds	r3, #5
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b25b      	sxtb	r3, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	b29b      	uxth	r3, r3
 8002524:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	b2db      	uxtb	r3, r3
 8002530:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002532:	89fa      	ldrh	r2, [r7, #14]
 8002534:	89bb      	ldrh	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	b21a      	sxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3306      	adds	r3, #6
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25a      	sxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	460a      	mov	r2, r1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <null_ptr_check+0x26>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <null_ptr_check+0x26>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <null_ptr_check+0x26>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025b6:	23ff      	movs	r3, #255	; 0xff
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e001      	b.n	80025c0 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <_write>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <_write+0x28>)
 8002600:	f006 fa00 	bl	8008a04 <HAL_UART_Transmit>
	return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000340 	.word	0x20000340

08002614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002618:	f001 fb95 	bl	8003d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261c:	f000 f83a 	bl	8002694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002620:	f000 fa06 	bl	8002a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002624:	f000 f9e6 	bl	80029f4 <MX_DMA_Init>
  MX_CAN1_Init();
 8002628:	f000 f8f0 	bl	800280c <MX_CAN1_Init>
  MX_I2C1_Init();
 800262c:	f000 f972 	bl	8002914 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002630:	f000 f9b0 	bl	8002994 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002634:	f000 f886 	bl	8002744 <MX_ADC1_Init>
//	HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID,
//			&DMATransferComplete);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002638:	f006 fe98 	bl	800936c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2CBusControl */
  I2CBusControlHandle = osMutexNew(&I2CBusControl_attributes);
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <main+0x60>)
 800263e:	f006 ff97 	bl	8009570 <osMutexNew>
 8002642:	4603      	mov	r3, r0
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <main+0x64>)
 8002646:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <main+0x68>)
 800264a:	2100      	movs	r1, #0
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <main+0x6c>)
 800264e:	f006 fed7 	bl	8009400 <osThreadNew>
 8002652:	4603      	mov	r3, r0
 8002654:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <main+0x70>)
 8002656:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <main+0x74>)
 800265a:	2100      	movs	r1, #0
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <main+0x78>)
 800265e:	f006 fecf 	bl	8009400 <osThreadNew>
 8002662:	4603      	mov	r3, r0
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <main+0x7c>)
 8002666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002668:	f006 fea4 	bl	80093b4 <osKernelStart>
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		raw = HAL_ADC_GetValue(&hadc1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, 1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

		HAL_Delay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f001 fba3 	bl	8003db8 <HAL_Delay>
 8002672:	e7fb      	b.n	800266c <main+0x58>
 8002674:	0800f6f8 	.word	0x0800f6f8
 8002678:	200003cc 	.word	0x200003cc
 800267c:	0800f6b0 	.word	0x0800f6b0
 8002680:	08002cc1 	.word	0x08002cc1
 8002684:	200003c4 	.word	0x200003c4
 8002688:	0800f6d4 	.word	0x0800f6d4
 800268c:	08002ef5 	.word	0x08002ef5
 8002690:	200003c8 	.word	0x200003c8

08002694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b096      	sub	sp, #88	; 0x58
 8002698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	2244      	movs	r2, #68	; 0x44
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00a feba 	bl	800d41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a8:	463b      	mov	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026ba:	f004 fccd 	bl	8007058 <HAL_PWREx_ControlVoltageScaling>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026c4:	f000 fcd6 	bl	8003074 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d2:	2302      	movs	r3, #2
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d6:	2303      	movs	r3, #3
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80026de:	2314      	movs	r3, #20
 80026e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026e2:	2307      	movs	r3, #7
 80026e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026e6:	2302      	movs	r3, #2
 80026e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fd06 	bl	8007104 <HAL_RCC_OscConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80026fe:	f000 fcb9 	bl	8003074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002702:	230f      	movs	r3, #15
 8002704:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002706:	2303      	movs	r3, #3
 8002708:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002716:	463b      	mov	r3, r7
 8002718:	2104      	movs	r1, #4
 800271a:	4618      	mov	r0, r3
 800271c:	f005 f906 	bl	800792c <HAL_RCC_ClockConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002726:	f000 fca5 	bl	8003074 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_16);
 800272a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800272e:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 8002732:	2000      	movs	r0, #0
 8002734:	f005 f9fa 	bl	8007b2c <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002738:	f005 fb22 	bl	8007d80 <HAL_RCC_EnableCSS>
}
 800273c:	bf00      	nop
 800273e:	3758      	adds	r7, #88	; 0x58
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800274a:	463b      	mov	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
 8002758:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <MX_ADC1_Init+0xbc>)
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <MX_ADC1_Init+0xc0>)
 800275e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <MX_ADC1_Init+0xbc>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <MX_ADC1_Init+0xbc>)
 800277a:	2204      	movs	r2, #4
 800277c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002786:	2201      	movs	r2, #1
 8002788:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <MX_ADC1_Init+0xbc>)
 800278c:	2201      	movs	r2, #1
 800278e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <MX_ADC1_Init+0xbc>)
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_ADC1_Init+0xbc>)
 800279a:	2200      	movs	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027ba:	4811      	ldr	r0, [pc, #68]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027bc:	f001 fce8 	bl	8004190 <HAL_ADC_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80027c6:	f000 fc55 	bl	8003074 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_ADC1_Init+0xc4>)
 80027cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027ce:	2306      	movs	r3, #6
 80027d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027d6:	237f      	movs	r3, #127	; 0x7f
 80027d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027da:	2304      	movs	r3, #4
 80027dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <MX_ADC1_Init+0xbc>)
 80027e8:	f001 fea8 	bl	800453c <HAL_ADC_ConfigChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80027f2:	f000 fc3f 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000218 	.word	0x20000218
 8002804:	50040000 	.word	0x50040000
 8002808:	21800100 	.word	0x21800100

0800280c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002812:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002814:	4a3d      	ldr	r2, [pc, #244]	; (800290c <MX_CAN1_Init+0x100>)
 8002816:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <MX_CAN1_Init+0xfc>)
 800281a:	2210      	movs	r2, #16
 800281c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002824:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <MX_CAN1_Init+0xfc>)
 800282e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002832:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <MX_CAN1_Init+0xfc>)
 800283c:	2200      	movs	r2, #0
 800283e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002842:	2200      	movs	r2, #0
 8002844:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002848:	2200      	movs	r2, #0
 800284a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <MX_CAN1_Init+0xfc>)
 800284e:	2200      	movs	r2, #0
 8002850:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <MX_CAN1_Init+0xfc>)
 800285a:	2200      	movs	r2, #0
 800285c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800285e:	482a      	ldr	r0, [pc, #168]	; (8002908 <MX_CAN1_Init+0xfc>)
 8002860:	f002 fb66 	bl	8004f30 <HAL_CAN_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800286a:	f000 fc03 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sf;
	sf.FilterIdHigh = 0x200 << 5;
 800286e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002872:	603b      	str	r3, [r7, #0]
	sf.FilterMaskIdHigh = 0x700 << 5;
 8002874:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002878:	60bb      	str	r3, [r7, #8]
	sf.FilterIdLow = 0x0000;
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
	sf.FilterMaskIdLow = 0x0000;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 8002892:	2301      	movs	r3, #1
 8002894:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 8002896:	463b      	mov	r3, r7
 8002898:	4619      	mov	r1, r3
 800289a:	481b      	ldr	r0, [pc, #108]	; (8002908 <MX_CAN1_Init+0xfc>)
 800289c:	f002 fc43 	bl	8005126 <HAL_CAN_ConfigFilter>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_CAN1_Init+0x9e>
		/* Filter configuration Error */
		Error_Handler();
 80028a6:	f000 fbe5 	bl	8003074 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80028aa:	4817      	ldr	r0, [pc, #92]	; (8002908 <MX_CAN1_Init+0xfc>)
 80028ac:	f002 fd05 	bl	80052ba <HAL_CAN_Start>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_CAN1_Init+0xae>
		Error_Handler();
 80028b6:	f000 fbdd 	bl	8003074 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 80028ba:	2102      	movs	r1, #2
 80028bc:	4812      	ldr	r0, [pc, #72]	; (8002908 <MX_CAN1_Init+0xfc>)
 80028be:	f002 fe10 	bl	80054e2 <HAL_CAN_ActivateNotification>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_CAN1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 80028c8:	f000 fbd4 	bl	8003074 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY)
 80028cc:	2101      	movs	r1, #1
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <MX_CAN1_Init+0xfc>)
 80028d0:	f002 fe07 	bl	80054e2 <HAL_CAN_ActivateNotification>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_CAN1_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 80028da:	f000 fbcb 	bl	8003074 <Error_Handler>
	//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
	//	!= HAL_OK) {
	//		Error_Handler();
	//	}

	TxHeader.StdId = 0x101;
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_CAN1_Init+0x104>)
 80028e0:	f240 1201 	movw	r2, #257	; 0x101
 80028e4:	601a      	str	r2, [r3, #0]
	//	TxHeader.ExtId = 0x01;
	TxHeader.RTR = CAN_RTR_DATA;
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_CAN1_Init+0x104>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <MX_CAN1_Init+0x104>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <MX_CAN1_Init+0x104>)
 80028f4:	2208      	movs	r2, #8
 80028f6:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <MX_CAN1_Init+0x104>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002c4 	.word	0x200002c4
 800290c:	40006400 	.word	0x40006400
 8002910:	200001fc 	.word	0x200001fc

08002914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <MX_I2C1_Init+0x74>)
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <MX_I2C1_Init+0x78>)
 800291c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_I2C1_Init+0x74>)
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <MX_I2C1_Init+0x7c>)
 8002922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <MX_I2C1_Init+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_I2C1_Init+0x74>)
 800292c:	2201      	movs	r2, #1
 800292e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <MX_I2C1_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_I2C1_Init+0x74>)
 8002938:	2200      	movs	r2, #0
 800293a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <MX_I2C1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_I2C1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <MX_I2C1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800294e:	480e      	ldr	r0, [pc, #56]	; (8002988 <MX_I2C1_Init+0x74>)
 8002950:	f003 fc82 	bl	8006258 <HAL_I2C_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800295a:	f000 fb8b 	bl	8003074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800295e:	2100      	movs	r1, #0
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <MX_I2C1_Init+0x74>)
 8002962:	f004 fad3 	bl	8006f0c <HAL_I2CEx_ConfigAnalogFilter>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800296c:	f000 fb82 	bl	8003074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002970:	2100      	movs	r1, #0
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_I2C1_Init+0x74>)
 8002974:	f004 fb15 	bl	8006fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800297e:	f000 fb79 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200002ec 	.word	0x200002ec
 800298c:	40005400 	.word	0x40005400
 8002990:	10909cec 	.word	0x10909cec

08002994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_USART1_UART_Init+0x58>)
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <MX_USART1_UART_Init+0x5c>)
 800299c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029ba:	220c      	movs	r2, #12
 80029bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_USART1_UART_Init+0x58>)
 80029d8:	f005 ffc6 	bl	8008968 <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029e2:	f000 fb47 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000340 	.word	0x20000340
 80029f0:	40013800 	.word	0x40013800

080029f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_DMA_Init+0x38>)
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <MX_DMA_Init+0x38>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6493      	str	r3, [r2, #72]	; 0x48
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_DMA_Init+0x38>)
 8002a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2105      	movs	r1, #5
 8002a16:	200b      	movs	r0, #11
 8002a18:	f003 f87a 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a1c:	200b      	movs	r0, #11
 8002a1e:	f003 f893 	bl	8005b48 <HAL_NVIC_EnableIRQ>

}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000

08002a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <MX_GPIO_Init+0x100>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BEEPER_Pin|CAN_STBY_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	f248 0120 	movw	r1, #32800	; 0x8020
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a80:	f003 fbd2 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_PWM_Pin|LED_D2_PWM_Pin|LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2138      	movs	r1, #56	; 0x38
 8002a88:	482a      	ldr	r0, [pc, #168]	; (8002b34 <MX_GPIO_Init+0x104>)
 8002a8a:	f003 fbcd 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : H2_TARE_Pin */
  GPIO_InitStruct.Pin = H2_TARE_Pin;
 8002a8e:	2310      	movs	r3, #16
 8002a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(H2_TARE_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa4:	f003 fa56 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BEEPER_Pin */
  GPIO_InitStruct.Pin = BEEPER_Pin;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BEEPER_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f003 fa47 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae6:	f003 fa35 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b06:	f003 fa25 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_PWM_Pin LED_D2_PWM_Pin LED_D3_PWM_Pin */
  GPIO_InitStruct.Pin = LED_D1_PWM_Pin|LED_D2_PWM_Pin|LED_D3_PWM_Pin;
 8002b0a:	2338      	movs	r3, #56	; 0x38
 8002b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <MX_GPIO_Init+0x104>)
 8002b22:	f003 fa17 	bl	8005f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b26:	bf00      	nop
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	48000400 	.word	0x48000400

08002b38 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	//raw = adc_buf[0];
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADC_ConvCpltCallback>:
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	//printf("%hu\r\n", adc_buf[0]);
	raw = adc_buf[ADC_BUF_LEN - 1];
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_ADC_ConvCpltCallback+0x20>)
 8002b56:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x24>)
 8002b5c:	801a      	strh	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200003d0 	.word	0x200003d0
 8002b70:	20000420 	.word	0x20000420

08002b74 <user_i2c_read>:
	}

	return 1;
}

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	603a      	str	r2, [r7, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	460b      	mov	r3, r1
 8002b84:	71bb      	strb	r3, [r7, #6]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b299      	uxth	r1, r3
 8002b92:	1dba      	adds	r2, r7, #6
 8002b94:	230a      	movs	r3, #10
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	4811      	ldr	r0, [pc, #68]	; (8002be0 <user_i2c_read+0x6c>)
 8002b9c:	f003 fbec 	bl	8006378 <HAL_I2C_Master_Transmit>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <user_i2c_read+0x38>
		return -1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e014      	b.n	8002bd6 <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	b299      	uxth	r1, r3
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	220a      	movs	r2, #10
 8002bbe:	9200      	str	r2, [sp, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4807      	ldr	r0, [pc, #28]	; (8002be0 <user_i2c_read+0x6c>)
 8002bc4:	f003 fccc 	bl	8006560 <HAL_I2C_Master_Receive>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e000      	b.n	8002bd6 <user_i2c_read+0x62>

	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200002ec 	.word	0x200002ec

08002be4 <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f006 fca4 	bl	800953a <osDelay>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	603a      	str	r2, [r7, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	71bb      	strb	r3, [r7, #6]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80bb      	strh	r3, [r7, #4]
 8002c14:	466b      	mov	r3, sp
 8002c16:	461e      	mov	r6, r3
	uint8_t buf[len + 1];
 8002c18:	88bb      	ldrh	r3, [r7, #4]
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	1e4b      	subs	r3, r1, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	460a      	mov	r2, r1
 8002c22:	2300      	movs	r3, #0
 8002c24:	4690      	mov	r8, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	460b      	mov	r3, r1
 8002c56:	3307      	adds	r3, #7
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	ebad 0d03 	sub.w	sp, sp, r3
 8002c60:	ab02      	add	r3, sp, #8
 8002c62:	3300      	adds	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	79ba      	ldrb	r2, [r7, #6]
 8002c6a:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	88ba      	ldrh	r2, [r7, #4]
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00a fc50 	bl	800d51a <memcpy>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002c7a:	e002      	b.n	8002c82 <user_i2c_write+0x86>
	HAL_MAX_DELAY) != HAL_OK)
		printf("I2C Error\r\n");
 8002c7c:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <user_i2c_write+0xb8>)
 8002c7e:	f00a fab3 	bl	800d1e8 <puts>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	b299      	uxth	r1, r3
 8002c8a:	88bb      	ldrh	r3, [r7, #4]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <user_i2c_write+0xbc>)
 8002c9a:	f003 fb6d 	bl	8006378 <HAL_I2C_Master_Transmit>
 8002c9e:	4603      	mov	r3, r0
	HAL_MAX_DELAY) != HAL_OK)
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1eb      	bne.n	8002c7c <user_i2c_write+0x80>
//	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
//	HAL_MAX_DELAY) != HAL_OK)
//		return -1;
//
//	free(buf);
	return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	46b5      	mov	sp, r6
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb2:	bf00      	nop
 8002cb4:	0800f534 	.word	0x0800f534
 8002cb8:	200002ec 	.word	0x200002ec
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b098      	sub	sp, #96	; 0x60
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8002cc8:	2228      	movs	r2, #40	; 0x28
 8002cca:	4973      	ldr	r1, [pc, #460]	; (8002e98 <StartDefaultTask+0x1d8>)
 8002ccc:	4873      	ldr	r0, [pc, #460]	; (8002e9c <StartDefaultTask+0x1dc>)
 8002cce:	f001 fba7 	bl	8004420 <HAL_ADC_Start_DMA>
	osThreadId_t f1 = osThreadGetId();
 8002cd2:	f006 fc27 	bl	8009524 <osThreadGetId>
 8002cd6:	65f8      	str	r0, [r7, #92]	; 0x5c
	struct bme280_dev dev;
	struct bme280_data comp_data;
	int8_t rslt;

	osMutexAcquire(I2CBusControlHandle, osWaitForever);
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <StartDefaultTask+0x1e0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f006 fccb 	bl	800967c <osMutexAcquire>
	dev.dev_id = BME280_I2C_ADDR_SEC;
 8002ce6:	2377      	movs	r3, #119	; 0x77
 8002ce8:	767b      	strb	r3, [r7, #25]
	dev.intf = BME280_I2C_INTF;
 8002cea:	2301      	movs	r3, #1
 8002cec:	76bb      	strb	r3, [r7, #26]
	dev.read = user_i2c_read;
 8002cee:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <StartDefaultTask+0x1e4>)
 8002cf0:	61fb      	str	r3, [r7, #28]
	dev.write = user_i2c_write;
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <StartDefaultTask+0x1e8>)
 8002cf4:	623b      	str	r3, [r7, #32]
	dev.delay_ms = user_delay_ms;
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	; (8002eac <StartDefaultTask+0x1ec>)
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
	rslt = bme280_init(&dev);
 8002cfa:	f107 0318 	add.w	r3, r7, #24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f970 	bl	8000fe4 <bme280_init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002d10:	2305      	movs	r3, #5
 8002d12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002d16:	2302      	movs	r3, #2
 8002d18:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	rslt = bme280_set_sensor_settings(
 8002d22:	f107 0318 	add.w	r3, r7, #24
 8002d26:	4619      	mov	r1, r3
 8002d28:	200f      	movs	r0, #15
 8002d2a:	f7fe fa4f 	bl	80011cc <bme280_set_sensor_settings>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f7fe fa9b 	bl	8001276 <bme280_set_sensor_mode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	osDelay(50);
 8002d46:	2032      	movs	r0, #50	; 0x32
 8002d48:	f006 fbf7 	bl	800953a <osDelay>
	osMutexRelease(I2CBusControlHandle);
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <StartDefaultTask+0x1e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f006 fcde 	bl	8009712 <osMutexRelease>
	/* Infinite loop */
	// \033[2J\033[0;0H
	for (;;) {

		//HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_SET);
		printf("[Main Thread] ");
 8002d56:	4856      	ldr	r0, [pc, #344]	; (8002eb0 <StartDefaultTask+0x1f0>)
 8002d58:	f00a f9e0 	bl	800d11c <iprintf>
		printf("ADC: ");
 8002d5c:	4855      	ldr	r0, [pc, #340]	; (8002eb4 <StartDefaultTask+0x1f4>)
 8002d5e:	f00a f9dd 	bl	800d11c <iprintf>
		printf("%hu\r\n", adc_buf[ADC_BUF_LEN - 1]);
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <StartDefaultTask+0x1d8>)
 8002d64:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4853      	ldr	r0, [pc, #332]	; (8002eb8 <StartDefaultTask+0x1f8>)
 8002d6c:	f00a f9d6 	bl	800d11c <iprintf>
		TxHeader.StdId = 0x102;
 8002d70:	4b52      	ldr	r3, [pc, #328]	; (8002ebc <StartDefaultTask+0x1fc>)
 8002d72:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002d76:	601a      	str	r2, [r3, #0]

		if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8002d78:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <StartDefaultTask+0x1e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	4618      	mov	r0, r3
 8002d82:	f006 fc7b 	bl	800967c <osMutexAcquire>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d14a      	bne.n	8002e22 <StartDefaultTask+0x162>
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002d8c:	f107 0218 	add.w	r2, r7, #24
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	2007      	movs	r0, #7
 8002d98:	f7fe fae9 	bl	800136e <bme280_get_sensor_data>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			osMutexRelease(I2CBusControlHandle);
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <StartDefaultTask+0x1e0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 fcb3 	bl	8009712 <osMutexRelease>
			if (rslt == BME280_OK) {
 8002dac:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d139      	bne.n	8002e28 <StartDefaultTask+0x168>
				temperature = comp_data.temperature / 100.0; /* °C  */
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbb4 	bl	8000524 <__aeabi_i2d>
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <StartDefaultTask+0x200>)
 8002dc2:	f7fd fd43 	bl	800084c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fd feeb 	bl	8000ba8 <__aeabi_d2f>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <StartDefaultTask+0x204>)
 8002dd6:	6013      	str	r3, [r2, #0]
				humidity = comp_data.humidity / 1024.0; /* %   */
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb92 	bl	8000504 <__aeabi_ui2d>
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <StartDefaultTask+0x208>)
 8002de6:	f7fd fd31 	bl	800084c <__aeabi_ddiv>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd fed9 	bl	8000ba8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <StartDefaultTask+0x20c>)
 8002dfa:	6013      	str	r3, [r2, #0]
				pressure = comp_data.pressure / 10000.0; /* hPa */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb80 	bl	8000504 <__aeabi_ui2d>
 8002e04:	a322      	add	r3, pc, #136	; (adr r3, 8002e90 <StartDefaultTask+0x1d0>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fd1f 	bl	800084c <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7fd fec7 	bl	8000ba8 <__aeabi_d2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <StartDefaultTask+0x210>)
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e002      	b.n	8002e28 <StartDefaultTask+0x168>
			}

		} else {
			printf("[!Main Thread] Failed to aquire control of I2C Bus\r\n");
 8002e22:	482c      	ldr	r0, [pc, #176]	; (8002ed4 <StartDefaultTask+0x214>)
 8002e24:	f00a f9e0 	bl	800d1e8 <puts>
		}

		printf("[!Main Thread] Humidity: %03.1f\r\n", humidity);
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <StartDefaultTask+0x20c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb8b 	bl	8000548 <__aeabi_f2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4828      	ldr	r0, [pc, #160]	; (8002ed8 <StartDefaultTask+0x218>)
 8002e38:	f00a f970 	bl	800d11c <iprintf>
		printf("[!Main Thread] Temprature: %03.1f\r\n", temperature);
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <StartDefaultTask+0x204>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fb81 	bl	8000548 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4824      	ldr	r0, [pc, #144]	; (8002edc <StartDefaultTask+0x21c>)
 8002e4c:	f00a f966 	bl	800d11c <iprintf>
		printf("[!Main Thread] Pressure: %03.1f\r\n", pressure);
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <StartDefaultTask+0x210>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb77 	bl	8000548 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4820      	ldr	r0, [pc, #128]	; (8002ee0 <StartDefaultTask+0x220>)
 8002e60:	f00a f95c 	bl	800d11c <iprintf>

		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader,
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <StartDefaultTask+0x224>)
 8002e66:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <StartDefaultTask+0x228>)
 8002e68:	4914      	ldr	r1, [pc, #80]	; (8002ebc <StartDefaultTask+0x1fc>)
 8002e6a:	4820      	ldr	r0, [pc, #128]	; (8002eec <StartDefaultTask+0x22c>)
 8002e6c:	f002 fa69 	bl	8005342 <HAL_CAN_AddTxMessage>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <StartDefaultTask+0x1c0>
				(uint32_t*) &adc_buf[ADC_BUF_LEN - 1], &TxMailbox) != HAL_OK) {
			printf("Can transmission error on packet id:");
 8002e76:	481e      	ldr	r0, [pc, #120]	; (8002ef0 <StartDefaultTask+0x230>)
 8002e78:	f00a f950 	bl	800d11c <iprintf>
			Error_Handler();
 8002e7c:	f000 f8fa 	bl	8003074 <Error_Handler>
		}
		osDelay(10);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f006 fb5a 	bl	800953a <osDelay>

		//HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_RESET);
		//osThreadYield();
		osDelay(500);
 8002e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e8a:	f006 fb56 	bl	800953a <osDelay>
		printf("[Main Thread] ");
 8002e8e:	e762      	b.n	8002d56 <StartDefaultTask+0x96>
 8002e90:	00000000 	.word	0x00000000
 8002e94:	40c38800 	.word	0x40c38800
 8002e98:	200003d0 	.word	0x200003d0
 8002e9c:	20000218 	.word	0x20000218
 8002ea0:	200003cc 	.word	0x200003cc
 8002ea4:	08002b75 	.word	0x08002b75
 8002ea8:	08002bfd 	.word	0x08002bfd
 8002eac:	08002be5 	.word	0x08002be5
 8002eb0:	0800f540 	.word	0x0800f540
 8002eb4:	0800f550 	.word	0x0800f550
 8002eb8:	0800f558 	.word	0x0800f558
 8002ebc:	200001fc 	.word	0x200001fc
 8002ec0:	40590000 	.word	0x40590000
 8002ec4:	20000844 	.word	0x20000844
 8002ec8:	40900000 	.word	0x40900000
 8002ecc:	20000848 	.word	0x20000848
 8002ed0:	2000084c 	.word	0x2000084c
 8002ed4:	0800f560 	.word	0x0800f560
 8002ed8:	0800f594 	.word	0x0800f594
 8002edc:	0800f5b8 	.word	0x0800f5b8
 8002ee0:	0800f5dc 	.word	0x0800f5dc
 8002ee4:	20000214 	.word	0x20000214
 8002ee8:	2000041e 	.word	0x2000041e
 8002eec:	200002c4 	.word	0x200002c4
 8002ef0:	0800f600 	.word	0x0800f600

08002ef4 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	osDelay(500);
 8002efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f00:	f006 fb1b 	bl	800953a <osDelay>
	if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8002f04:	4b45      	ldr	r3, [pc, #276]	; (800301c <StartTask02+0x128>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f006 fbb5 	bl	800967c <osMutexAcquire>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <StartTask02+0x34>
		ssd1306_Init();
 8002f18:	f000 f8ea 	bl	80030f0 <ssd1306_Init>
		osMutexRelease(I2CBusControlHandle);
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <StartTask02+0x128>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f006 fbf6 	bl	8009712 <osMutexRelease>
 8002f26:	e002      	b.n	8002f2e <StartTask02+0x3a>
	} else {
		printf("[!Secondary Thread] I2C Busy\r\n");
 8002f28:	483d      	ldr	r0, [pc, #244]	; (8003020 <StartTask02+0x12c>)
 8002f2a:	f00a f95d 	bl	800d1e8 <puts>
	}
	/* Infinite loop */
	for (;;) {

		ssd1306_Fill(Black);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f948 	bl	80031c4 <ssd1306_Fill>
		ssd1306_Line(0, 0, SSD1306_WIDTH, 0, White);
 8002f34:	2301      	movs	r3, #1
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f000 fa9a 	bl	8003478 <ssd1306_Line>
		ssd1306_SetCursor(0, 2);
 8002f44:	2102      	movs	r1, #2
 8002f46:	2000      	movs	r0, #0
 8002f48:	f000 fa7e 	bl	8003448 <ssd1306_SetCursor>
		sprintf(h2_conc_str, "H2 Conc: %d (mV)", adc_buf[ADC_BUF_LEN - 1]);
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <StartTask02+0x130>)
 8002f4e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002f52:	461a      	mov	r2, r3
 8002f54:	4934      	ldr	r1, [pc, #208]	; (8003028 <StartTask02+0x134>)
 8002f56:	4835      	ldr	r0, [pc, #212]	; (800302c <StartTask02+0x138>)
 8002f58:	f00a f94e 	bl	800d1f8 <siprintf>
		ssd1306_WriteString(h2_conc_str, Font_7x10, White);
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <StartTask02+0x13c>)
 8002f5e:	2301      	movs	r3, #1
 8002f60:	ca06      	ldmia	r2, {r1, r2}
 8002f62:	4832      	ldr	r0, [pc, #200]	; (800302c <StartTask02+0x138>)
 8002f64:	f000 fa4a 	bl	80033fc <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 8002f68:	210c      	movs	r1, #12
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 fa6c 	bl	8003448 <ssd1306_SetCursor>
		sprintf(bme_data_str, "Temperature: %2.0fC", temperature);
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <StartTask02+0x140>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fae7 	bl	8000548 <__aeabi_f2d>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	492e      	ldr	r1, [pc, #184]	; (8003038 <StartTask02+0x144>)
 8002f80:	482e      	ldr	r0, [pc, #184]	; (800303c <StartTask02+0x148>)
 8002f82:	f00a f939 	bl	800d1f8 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8002f86:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <StartTask02+0x13c>)
 8002f88:	2301      	movs	r3, #1
 8002f8a:	ca06      	ldmia	r2, {r1, r2}
 8002f8c:	482b      	ldr	r0, [pc, #172]	; (800303c <StartTask02+0x148>)
 8002f8e:	f000 fa35 	bl	80033fc <ssd1306_WriteString>
		ssd1306_SetCursor(0, 22);
 8002f92:	2116      	movs	r1, #22
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 fa57 	bl	8003448 <ssd1306_SetCursor>

		sprintf(bme_data_str, "Humidity: %2.0f%%", humidity);
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <StartTask02+0x14c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fad2 	bl	8000548 <__aeabi_f2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4926      	ldr	r1, [pc, #152]	; (8003044 <StartTask02+0x150>)
 8002faa:	4824      	ldr	r0, [pc, #144]	; (800303c <StartTask02+0x148>)
 8002fac:	f00a f924 	bl	800d1f8 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <StartTask02+0x13c>)
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	ca06      	ldmia	r2, {r1, r2}
 8002fb6:	4821      	ldr	r0, [pc, #132]	; (800303c <StartTask02+0x148>)
 8002fb8:	f000 fa20 	bl	80033fc <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 fa42 	bl	8003448 <ssd1306_SetCursor>

		sprintf(bme_data_str, "Pressure: %3.0f hPa", pressure);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <StartTask02+0x154>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fabd 	bl	8000548 <__aeabi_f2d>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	491e      	ldr	r1, [pc, #120]	; (800304c <StartTask02+0x158>)
 8002fd4:	4819      	ldr	r0, [pc, #100]	; (800303c <StartTask02+0x148>)
 8002fd6:	f00a f90f 	bl	800d1f8 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <StartTask02+0x13c>)
 8002fdc:	2301      	movs	r3, #1
 8002fde:	ca06      	ldmia	r2, {r1, r2}
 8002fe0:	4816      	ldr	r0, [pc, #88]	; (800303c <StartTask02+0x148>)
 8002fe2:	f000 fa0b 	bl	80033fc <ssd1306_WriteString>
		ssd1306_Line(0, 42, SSD1306_WIDTH, 42, White);
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	232a      	movs	r3, #42	; 0x2a
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	212a      	movs	r1, #42	; 0x2a
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f000 fa41 	bl	8003478 <ssd1306_Line>
		osMutexAcquire(I2CBusControlHandle, osWaitForever);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <StartTask02+0x128>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 fb3c 	bl	800967c <osMutexAcquire>
		ssd1306_UpdateScreen();
 8003004:	f000 f8f6 	bl	80031f4 <ssd1306_UpdateScreen>
		osMutexRelease(I2CBusControlHandle);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <StartTask02+0x128>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f006 fb80 	bl	8009712 <osMutexRelease>
		osDelay(100);
 8003012:	2064      	movs	r0, #100	; 0x64
 8003014:	f006 fa91 	bl	800953a <osDelay>
		ssd1306_Fill(Black);
 8003018:	e789      	b.n	8002f2e <StartTask02+0x3a>
 800301a:	bf00      	nop
 800301c:	200003cc 	.word	0x200003cc
 8003020:	0800f628 	.word	0x0800f628
 8003024:	200003d0 	.word	0x200003d0
 8003028:	0800f648 	.word	0x0800f648
 800302c:	20000424 	.word	0x20000424
 8003030:	20000000 	.word	0x20000000
 8003034:	20000844 	.word	0x20000844
 8003038:	0800f65c 	.word	0x0800f65c
 800303c:	20000444 	.word	0x20000444
 8003040:	20000848 	.word	0x20000848
 8003044:	0800f670 	.word	0x0800f670
 8003048:	2000084c 	.word	0x2000084c
 800304c:	0800f684 	.word	0x0800f684

08003050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003062:	f000 fe89 	bl	8003d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00

08003074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003078:	b672      	cpsid	i
}
 800307a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800307c:	e7fe      	b.n	800307c <Error_Handler+0x8>

0800307e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af04      	add	r7, sp, #16
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	9302      	str	r3, [sp, #8]
 800309c:	2301      	movs	r3, #1
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2301      	movs	r3, #1
 80030a6:	2200      	movs	r2, #0
 80030a8:	2178      	movs	r1, #120	; 0x78
 80030aa:	4803      	ldr	r0, [pc, #12]	; (80030b8 <ssd1306_WriteCommand+0x2c>)
 80030ac:	f003 fb4e 	bl	800674c <HAL_I2C_Mem_Write>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200002ec 	.word	0x200002ec

080030bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f04f 32ff 	mov.w	r2, #4294967295
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2301      	movs	r3, #1
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	2178      	movs	r1, #120	; 0x78
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <ssd1306_WriteData+0x30>)
 80030de:	f003 fb35 	bl	800674c <HAL_I2C_Mem_Write>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200002ec 	.word	0x200002ec

080030f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030f4:	f7ff ffc3 	bl	800307e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f000 fe5d 	bl	8003db8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 fa3a 	bl	8003578 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003104:	2020      	movs	r0, #32
 8003106:	f7ff ffc1 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800310a:	2000      	movs	r0, #0
 800310c:	f7ff ffbe 	bl	800308c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003110:	20b0      	movs	r0, #176	; 0xb0
 8003112:	f7ff ffbb 	bl	800308c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003116:	20c8      	movs	r0, #200	; 0xc8
 8003118:	f7ff ffb8 	bl	800308c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff ffb5 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003122:	2010      	movs	r0, #16
 8003124:	f7ff ffb2 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003128:	2040      	movs	r0, #64	; 0x40
 800312a:	f7ff ffaf 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800312e:	20ff      	movs	r0, #255	; 0xff
 8003130:	f000 fa0e 	bl	8003550 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003134:	20a1      	movs	r0, #161	; 0xa1
 8003136:	f7ff ffa9 	bl	800308c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800313a:	20a6      	movs	r0, #166	; 0xa6
 800313c:	f7ff ffa6 	bl	800308c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003140:	20a8      	movs	r0, #168	; 0xa8
 8003142:	f7ff ffa3 	bl	800308c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003146:	203f      	movs	r0, #63	; 0x3f
 8003148:	f7ff ffa0 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800314c:	20a4      	movs	r0, #164	; 0xa4
 800314e:	f7ff ff9d 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003152:	20d3      	movs	r0, #211	; 0xd3
 8003154:	f7ff ff9a 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003158:	2000      	movs	r0, #0
 800315a:	f7ff ff97 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800315e:	20d5      	movs	r0, #213	; 0xd5
 8003160:	f7ff ff94 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003164:	20f0      	movs	r0, #240	; 0xf0
 8003166:	f7ff ff91 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800316a:	20d9      	movs	r0, #217	; 0xd9
 800316c:	f7ff ff8e 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003170:	2022      	movs	r0, #34	; 0x22
 8003172:	f7ff ff8b 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003176:	20da      	movs	r0, #218	; 0xda
 8003178:	f7ff ff88 	bl	800308c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800317c:	2012      	movs	r0, #18
 800317e:	f7ff ff85 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003182:	20db      	movs	r0, #219	; 0xdb
 8003184:	f7ff ff82 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003188:	2020      	movs	r0, #32
 800318a:	f7ff ff7f 	bl	800308c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800318e:	208d      	movs	r0, #141	; 0x8d
 8003190:	f7ff ff7c 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003194:	2014      	movs	r0, #20
 8003196:	f7ff ff79 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800319a:	2001      	movs	r0, #1
 800319c:	f000 f9ec 	bl	8003578 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f000 f80f 	bl	80031c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80031a6:	f000 f825 	bl	80031f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <ssd1306_Init+0xd0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <ssd1306_Init+0xd0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031b6:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <ssd1306_Init+0xd0>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	711a      	strb	r2, [r3, #4]
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000c50 	.word	0x20000c50

080031c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <ssd1306_Fill+0x14>
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <ssd1306_Fill+0x16>
 80031d8:	23ff      	movs	r3, #255	; 0xff
 80031da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031de:	4619      	mov	r1, r3
 80031e0:	4803      	ldr	r0, [pc, #12]	; (80031f0 <ssd1306_Fill+0x2c>)
 80031e2:	f00a f91b 	bl	800d41c <memset>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000850 	.word	0x20000850

080031f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031fa:	2300      	movs	r3, #0
 80031fc:	71fb      	strb	r3, [r7, #7]
 80031fe:	e016      	b.n	800322e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	3b50      	subs	r3, #80	; 0x50
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff40 	bl	800308c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800320c:	2000      	movs	r0, #0
 800320e:	f7ff ff3d 	bl	800308c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003212:	2010      	movs	r0, #16
 8003214:	f7ff ff3a 	bl	800308c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4a08      	ldr	r2, [pc, #32]	; (8003240 <ssd1306_UpdateScreen+0x4c>)
 800321e:	4413      	add	r3, r2
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff4a 	bl	80030bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	3301      	adds	r3, #1
 800322c:	71fb      	strb	r3, [r7, #7]
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d9e5      	bls.n	8003200 <ssd1306_UpdateScreen+0xc>
    }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000850 	.word	0x20000850

08003244 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	460b      	mov	r3, r1
 8003250:	71bb      	strb	r3, [r7, #6]
 8003252:	4613      	mov	r3, r2
 8003254:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db3d      	blt.n	80032da <ssd1306_DrawPixel+0x96>
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	2b3f      	cmp	r3, #63	; 0x3f
 8003262:	d83a      	bhi.n	80032da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003264:	797b      	ldrb	r3, [r7, #5]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11a      	bne.n	80032a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800326a:	79fa      	ldrb	r2, [r7, #7]
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	4603      	mov	r3, r0
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <ssd1306_DrawPixel+0xa4>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	b25a      	sxtb	r2, r3
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	b25b      	sxtb	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b259      	sxtb	r1, r3
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	4603      	mov	r3, r0
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	4413      	add	r3, r2
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <ssd1306_DrawPixel+0xa4>)
 800329c:	54d1      	strb	r1, [r2, r3]
 800329e:	e01d      	b.n	80032dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a0:	79fa      	ldrb	r2, [r7, #7]
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	b2d8      	uxtb	r0, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	4413      	add	r3, r2
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	4013      	ands	r3, r2
 80032c8:	b259      	sxtb	r1, r3
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4603      	mov	r3, r0
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	4413      	add	r3, r2
 80032d2:	b2c9      	uxtb	r1, r1
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032d6:	54d1      	strb	r1, [r2, r3]
 80032d8:	e000      	b.n	80032dc <ssd1306_DrawPixel+0x98>
        return;
 80032da:	bf00      	nop
    }
}
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000850 	.word	0x20000850

080032ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	1d38      	adds	r0, r7, #4
 80032f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	4613      	mov	r3, r2
 8003302:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b1f      	cmp	r3, #31
 8003308:	d902      	bls.n	8003310 <ssd1306_WriteChar+0x24>
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b7e      	cmp	r3, #126	; 0x7e
 800330e:	d901      	bls.n	8003314 <ssd1306_WriteChar+0x28>
        return 0;
 8003310:	2300      	movs	r3, #0
 8003312:	e06d      	b.n	80033f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	793b      	ldrb	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	dc06      	bgt.n	8003330 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 8003324:	885b      	ldrh	r3, [r3, #2]
 8003326:	461a      	mov	r2, r3
 8003328:	797b      	ldrb	r3, [r7, #5]
 800332a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	dd01      	ble.n	8003334 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003330:	2300      	movs	r3, #0
 8003332:	e05d      	b.n	80033f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e04c      	b.n	80033d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	3b20      	subs	r3, #32
 8003340:	7979      	ldrb	r1, [r7, #5]
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4619      	mov	r1, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	440b      	add	r3, r1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e034      	b.n	80033c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d012      	beq.n	8003390 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	b2d8      	uxtb	r0, r3
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 800337a:	885b      	ldrh	r3, [r3, #2]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4413      	add	r3, r2
 8003384:	b2db      	uxtb	r3, r3
 8003386:	7bba      	ldrb	r2, [r7, #14]
 8003388:	4619      	mov	r1, r3
 800338a:	f7ff ff5b 	bl	8003244 <ssd1306_DrawPixel>
 800338e:	e016      	b.n	80033be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4413      	add	r3, r2
 800339c:	b2d8      	uxtb	r0, r3
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 80033a0:	885b      	ldrh	r3, [r3, #2]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	b2d9      	uxtb	r1, r3
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	f7ff ff43 	bl	8003244 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	793b      	ldrb	r3, [r7, #4]
 80033c6:	461a      	mov	r2, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d3c5      	bcc.n	800335a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	797b      	ldrb	r3, [r7, #5]
 80033d6:	461a      	mov	r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4293      	cmp	r3, r2
 80033dc:	d3ad      	bcc.n	800333a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	793b      	ldrb	r3, [r7, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <ssd1306_WriteChar+0x10c>)
 80033ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3724      	adds	r7, #36	; 0x24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	20000c50 	.word	0x20000c50

080033fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	1d38      	adds	r0, r7, #4
 8003406:	e880 0006 	stmia.w	r0, {r1, r2}
 800340a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800340c:	e012      	b.n	8003434 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	7818      	ldrb	r0, [r3, #0]
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	1d3a      	adds	r2, r7, #4
 8003416:	ca06      	ldmia	r2, {r1, r2}
 8003418:	f7ff ff68 	bl	80032ec <ssd1306_WriteChar>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d002      	beq.n	800342e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	e008      	b.n	8003440 <ssd1306_WriteString+0x44>
        }
        str++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3301      	adds	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e8      	bne.n	800340e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	781b      	ldrb	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	460a      	mov	r2, r1
 8003452:	71fb      	strb	r3, [r7, #7]
 8003454:	4613      	mov	r3, r2
 8003456:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <ssd1306_SetCursor+0x2c>)
 800345e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003460:	79bb      	ldrb	r3, [r7, #6]
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <ssd1306_SetCursor+0x2c>)
 8003466:	805a      	strh	r2, [r3, #2]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000c50 	.word	0x20000c50

08003478 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4623      	mov	r3, r4
 8003488:	71fb      	strb	r3, [r7, #7]
 800348a:	4603      	mov	r3, r0
 800348c:	71bb      	strb	r3, [r7, #6]
 800348e:	460b      	mov	r3, r1
 8003490:	717b      	strb	r3, [r7, #5]
 8003492:	4613      	mov	r3, r2
 8003494:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003496:	797a      	ldrb	r2, [r7, #5]
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bfb8      	it	lt
 80034a0:	425b      	neglt	r3, r3
 80034a2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80034a4:	793a      	ldrb	r2, [r7, #4]
 80034a6:	79bb      	ldrb	r3, [r7, #6]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bfb8      	it	lt
 80034ae:	425b      	neglt	r3, r3
 80034b0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80034b2:	79fa      	ldrb	r2, [r7, #7]
 80034b4:	797b      	ldrb	r3, [r7, #5]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d201      	bcs.n	80034be <ssd1306_Line+0x46>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e001      	b.n	80034c2 <ssd1306_Line+0x4a>
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80034c4:	79ba      	ldrb	r2, [r7, #6]
 80034c6:	793b      	ldrb	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d201      	bcs.n	80034d0 <ssd1306_Line+0x58>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e001      	b.n	80034d4 <ssd1306_Line+0x5c>
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80034de:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034e2:	7939      	ldrb	r1, [r7, #4]
 80034e4:	797b      	ldrb	r3, [r7, #5]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff feac 	bl	8003244 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80034ec:	e024      	b.n	8003538 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80034ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034f2:	79b9      	ldrb	r1, [r7, #6]
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fea4 	bl	8003244 <ssd1306_DrawPixel>
        error2 = error * 2;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	425b      	negs	r3, r3
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	dd08      	ble.n	800351e <ssd1306_Line+0xa6>
            error -= deltaY;
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	4413      	add	r3, r2
 800351c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	429a      	cmp	r2, r3
 8003524:	da08      	bge.n	8003538 <ssd1306_Line+0xc0>
            error += deltaX;
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	79bb      	ldrb	r3, [r7, #6]
 8003534:	4413      	add	r3, r2
 8003536:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	797b      	ldrb	r3, [r7, #5]
 800353c:	429a      	cmp	r2, r3
 800353e:	d1d6      	bne.n	80034ee <ssd1306_Line+0x76>
 8003540:	79ba      	ldrb	r2, [r7, #6]
 8003542:	793b      	ldrb	r3, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d1d2      	bne.n	80034ee <ssd1306_Line+0x76>
        }
    }
    return;
 8003548:	bf00      	nop
}
 800354a:	3724      	adds	r7, #36	; 0x24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}

08003550 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800355a:	2381      	movs	r3, #129	; 0x81
 800355c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fd93 	bl	800308c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fd8f 	bl	800308c <ssd1306_WriteCommand>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003588:	23af      	movs	r3, #175	; 0xaf
 800358a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <ssd1306_SetDisplayOn+0x38>)
 800358e:	2201      	movs	r2, #1
 8003590:	715a      	strb	r2, [r3, #5]
 8003592:	e004      	b.n	800359e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003594:	23ae      	movs	r3, #174	; 0xae
 8003596:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <ssd1306_SetDisplayOn+0x38>)
 800359a:	2200      	movs	r2, #0
 800359c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fd73 	bl	800308c <ssd1306_WriteCommand>
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000c50 	.word	0x20000c50

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_MspInit+0x4c>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_MspInit+0x4c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6613      	str	r3, [r2, #96]	; 0x60
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_MspInit+0x4c>)
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_MspInit+0x4c>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_MspInit+0x4c>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_MspInit+0x4c>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	210f      	movs	r1, #15
 80035ee:	f06f 0001 	mvn.w	r0, #1
 80035f2:	f002 fa8d 	bl	8005b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b09e      	sub	sp, #120	; 0x78
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	2254      	movs	r2, #84	; 0x54
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f009 fef9 	bl	800d41c <memset>
  if(hadc->Instance==ADC1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3b      	ldr	r2, [pc, #236]	; (800371c <HAL_ADC_MspInit+0x118>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d16e      	bne.n	8003712 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003638:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800363a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800363e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003640:	2303      	movs	r3, #3
 8003642:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003648:	2308      	movs	r3, #8
 800364a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800364c:	2307      	movs	r3, #7
 800364e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003650:	2302      	movs	r3, #2
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003654:	2302      	movs	r3, #2
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fc18 	bl	8007e98 <HAL_RCCEx_PeriphCLKConfig>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800366e:	f7ff fd01 	bl	8003074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 8003678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800367c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = H2_SENSE_ADC_Pin;
 80036a2:	2308      	movs	r3, #8
 80036a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a6:	2303      	movs	r3, #3
 80036a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(H2_SENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b8:	f002 fc4c 	bl	8005f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_ADC_MspInit+0x124>)
 80036c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036ec:	2220      	movs	r2, #32
 80036ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036f6:	480b      	ldr	r0, [pc, #44]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036f8:	f002 fa34 	bl	8005b64 <HAL_DMA_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003702:	f7ff fcb7 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a06      	ldr	r2, [pc, #24]	; (8003724 <HAL_ADC_MspInit+0x120>)
 800370a:	64da      	str	r2, [r3, #76]	; 0x4c
 800370c:	4a05      	ldr	r2, [pc, #20]	; (8003724 <HAL_ADC_MspInit+0x120>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3778      	adds	r7, #120	; 0x78
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	50040000 	.word	0x50040000
 8003720:	40021000 	.word	0x40021000
 8003724:	2000027c 	.word	0x2000027c
 8003728:	40020008 	.word	0x40020008

0800372c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_CAN_MspInit+0x90>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d131      	bne.n	80037b2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 8003754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003758:	6593      	str	r3, [r2, #88]	; 0x58
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_CAN_MspInit+0x94>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800377e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003790:	2309      	movs	r3, #9
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	4619      	mov	r1, r3
 800379a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379e:	f002 fbd9 	bl	8005f54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2105      	movs	r1, #5
 80037a6:	2014      	movs	r0, #20
 80037a8:	f002 f9b2 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80037ac:	2014      	movs	r0, #20
 80037ae:	f002 f9cb 	bl	8005b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80037b2:	bf00      	nop
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40006400 	.word	0x40006400
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b09e      	sub	sp, #120	; 0x78
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037dc:	f107 0310 	add.w	r3, r7, #16
 80037e0:	2254      	movs	r2, #84	; 0x54
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f009 fe19 	bl	800d41c <memset>
  if(hi2c->Instance==I2C1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_I2C_MspInit+0xa8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d137      	bne.n	8003864 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f004 fb49 	bl	8007e98 <HAL_RCCEx_PeriphCLKConfig>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800380c:	f7ff fc32 	bl	8003074 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_I2C_MspInit+0xac>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_I2C_MspInit+0xac>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_I2C_MspInit+0xac>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800382e:	2312      	movs	r3, #18
 8003830:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003836:	2303      	movs	r3, #3
 8003838:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800383a:	2304      	movs	r3, #4
 800383c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f002 fb84 	bl	8005f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_I2C_MspInit+0xac>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_I2C_MspInit+0xac>)
 8003852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003856:	6593      	str	r3, [r2, #88]	; 0x58
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_I2C_MspInit+0xac>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003864:	bf00      	nop
 8003866:	3778      	adds	r7, #120	; 0x78
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40005400 	.word	0x40005400
 8003870:	40021000 	.word	0x40021000

08003874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b09e      	sub	sp, #120	; 0x78
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	2254      	movs	r2, #84	; 0x54
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f009 fdc1 	bl	800d41c <memset>
  if(huart->Instance==USART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_UART_MspInit+0xa4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d135      	bne.n	8003910 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038a8:	2300      	movs	r3, #0
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 faf1 	bl	8007e98 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038bc:	f7ff fbda 	bl	8003074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ca:	6613      	str	r3, [r2, #96]	; 0x60
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_UART_MspInit+0xa8>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038f0:	23c0      	movs	r3, #192	; 0xc0
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003900:	2307      	movs	r3, #7
 8003902:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003904:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003908:	4619      	mov	r1, r3
 800390a:	4805      	ldr	r0, [pc, #20]	; (8003920 <HAL_UART_MspInit+0xac>)
 800390c:	f002 fb22 	bl	8005f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003910:	bf00      	nop
 8003912:	3778      	adds	r7, #120	; 0x78
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40013800 	.word	0x40013800
 800391c:	40021000 	.word	0x40021000
 8003920:	48000400 	.word	0x48000400

08003924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003932:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_InitTick+0xc8>)
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <HAL_InitTick+0xc8>)
 8003938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800393c:	6613      	str	r3, [r2, #96]	; 0x60
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_InitTick+0xc8>)
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800394a:	f107 020c 	add.w	r2, r7, #12
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f004 f9e1 	bl	8007d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800395a:	f004 f9c9 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 800395e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_InitTick+0xcc>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	0c9b      	lsrs	r3, r3, #18
 800396a:	3b01      	subs	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_InitTick+0xd0>)
 8003970:	4a21      	ldr	r2, [pc, #132]	; (80039f8 <HAL_InitTick+0xd4>)
 8003972:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_InitTick+0xd0>)
 8003976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800397a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_InitTick+0xd0>)
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_InitTick+0xd0>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_InitTick+0xd0>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_InitTick+0xd0>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003994:	4817      	ldr	r0, [pc, #92]	; (80039f4 <HAL_InitTick+0xd0>)
 8003996:	f004 fd67 	bl	8008468 <HAL_TIM_Base_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80039a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11b      	bne.n	80039e0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80039a8:	4812      	ldr	r0, [pc, #72]	; (80039f4 <HAL_InitTick+0xd0>)
 80039aa:	f004 fdbf 	bl	800852c <HAL_TIM_Base_Start_IT>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80039b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d111      	bne.n	80039e0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039bc:	2019      	movs	r0, #25
 80039be:	f002 f8c3 	bl	8005b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b0f      	cmp	r3, #15
 80039c6:	d808      	bhi.n	80039da <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80039c8:	2200      	movs	r2, #0
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	2019      	movs	r0, #25
 80039ce:	f002 f89f 	bl	8005b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_InitTick+0xd8>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e002      	b.n	80039e0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80039e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	; 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	431bde83 	.word	0x431bde83
 80039f4:	20000c58 	.word	0x20000c58
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	2000000c 	.word	0x2000000c

08003a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003a04:	f004 f9cc 	bl	8007da0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a08:	e7fe      	b.n	8003a08 <NMI_Handler+0x8>
	...

08003a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8003a20:	2308      	movs	r3, #8
 8003a22:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a24:	2301      	movs	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4839      	ldr	r0, [pc, #228]	; (8003b18 <HardFault_Handler+0x10c>)
 8003a32:	f002 fa8f 	bl	8005f54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8003a36:	2310      	movs	r3, #16
 8003a38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4834      	ldr	r0, [pc, #208]	; (8003b18 <HardFault_Handler+0x10c>)
 8003a48:	f002 fa84 	bl	8005f54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	482e      	ldr	r0, [pc, #184]	; (8003b18 <HardFault_Handler+0x10c>)
 8003a5e:	f002 fa79 	bl	8005f54 <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a66:	e002      	b.n	8003a6e <HardFault_Handler+0x62>
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HardFault_Handler+0x110>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	ddf8      	ble.n	8003a68 <HardFault_Handler+0x5c>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8003a76:	2201      	movs	r2, #1
 8003a78:	2108      	movs	r1, #8
 8003a7a:	4827      	ldr	r0, [pc, #156]	; (8003b18 <HardFault_Handler+0x10c>)
 8003a7c:	f002 fbd4 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a84:	e002      	b.n	8003a8c <HardFault_Handler+0x80>
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	3301      	adds	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <HardFault_Handler+0x110>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	ddf8      	ble.n	8003a86 <HardFault_Handler+0x7a>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8003a94:	2201      	movs	r2, #1
 8003a96:	2110      	movs	r1, #16
 8003a98:	481f      	ldr	r0, [pc, #124]	; (8003b18 <HardFault_Handler+0x10c>)
 8003a9a:	f002 fbc5 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e002      	b.n	8003aaa <HardFault_Handler+0x9e>
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HardFault_Handler+0x110>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	ddf8      	ble.n	8003aa4 <HardFault_Handler+0x98>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	4818      	ldr	r0, [pc, #96]	; (8003b18 <HardFault_Handler+0x10c>)
 8003ab8:	f002 fbb6 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	e002      	b.n	8003ac8 <HardFault_Handler+0xbc>
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <HardFault_Handler+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	ddf8      	ble.n	8003ac2 <HardFault_Handler+0xb6>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2108      	movs	r1, #8
 8003ad4:	4810      	ldr	r0, [pc, #64]	; (8003b18 <HardFault_Handler+0x10c>)
 8003ad6:	f002 fba7 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e002      	b.n	8003ae6 <HardFault_Handler+0xda>
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <HardFault_Handler+0x110>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	ddf8      	ble.n	8003ae0 <HardFault_Handler+0xd4>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2110      	movs	r1, #16
 8003af2:	4809      	ldr	r0, [pc, #36]	; (8003b18 <HardFault_Handler+0x10c>)
 8003af4:	f002 fb98 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e002      	b.n	8003b04 <HardFault_Handler+0xf8>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HardFault_Handler+0x110>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	ddf8      	ble.n	8003afe <HardFault_Handler+0xf2>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2120      	movs	r1, #32
 8003b10:	4801      	ldr	r0, [pc, #4]	; (8003b18 <HardFault_Handler+0x10c>)
 8003b12:	f002 fb89 	bl	8006228 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b16:	e7a4      	b.n	8003a62 <HardFault_Handler+0x56>
 8003b18:	48000400 	.word	0x48000400
 8003b1c:	0007a11f 	.word	0x0007a11f

08003b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <MemManage_Handler+0x4>

08003b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <BusFault_Handler+0x4>

08003b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <UsageFault_Handler+0x4>

08003b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <DMA1_Channel1_IRQHandler+0x10>)
 8003b46:	f002 f925 	bl	8005d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000027c 	.word	0x2000027c

08003b54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <CAN1_RX0_IRQHandler+0x10>)
 8003b5a:	f001 fce8 	bl	800552e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200002c4 	.word	0x200002c4

08003b68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003b6e:	f004 fd31 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000c58 	.word	0x20000c58

08003b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return 1;
 8003b80:	2301      	movs	r3, #1
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_kill>:

int _kill(int pid, int sig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b96:	f009 fc93 	bl	800d4c0 <__errno>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2216      	movs	r2, #22
 8003b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_exit>:

void _exit (int status)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ffe7 	bl	8003b8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bbe:	e7fe      	b.n	8003bbe <_exit+0x12>

08003bc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e00a      	b.n	8003be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bd2:	f3af 8000 	nop.w
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	b2ca      	uxtb	r2, r1
 8003be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbf0      	blt.n	8003bd2 <_read+0x12>
  }

  return len;
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c22:	605a      	str	r2, [r3, #4]
  return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_isatty>:

int _isatty(int file)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <_sbrk+0x5c>)
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <_sbrk+0x60>)
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_sbrk+0x64>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <_sbrk+0x68>)
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d207      	bcs.n	8003ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c94:	f009 fc14 	bl	800d4c0 <__errno>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	220c      	movs	r2, #12
 8003c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	e009      	b.n	8003cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <_sbrk+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <_sbrk+0x64>)
 8003cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20010000 	.word	0x20010000
 8003cc4:	00000400 	.word	0x00000400
 8003cc8:	20000ca4 	.word	0x20000ca4
 8003ccc:	20002700 	.word	0x20002700

08003cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <SystemInit+0x20>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <SystemInit+0x20>)
 8003cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cf8:	f7ff ffea 	bl	8003cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cfc:	480c      	ldr	r0, [pc, #48]	; (8003d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cfe:	490d      	ldr	r1, [pc, #52]	; (8003d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <LoopForever+0xe>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d04:	e002      	b.n	8003d0c <LoopCopyDataInit>

08003d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0a:	3304      	adds	r3, #4

08003d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d10:	d3f9      	bcc.n	8003d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d14:	4c0a      	ldr	r4, [pc, #40]	; (8003d40 <LoopForever+0x16>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d18:	e001      	b.n	8003d1e <LoopFillZerobss>

08003d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d1c:	3204      	adds	r2, #4

08003d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d20:	d3fb      	bcc.n	8003d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d22:	f009 fbd3 	bl	800d4cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d26:	f7fe fc75 	bl	8002614 <main>

08003d2a <LoopForever>:

LoopForever:
    b LoopForever
 8003d2a:	e7fe      	b.n	8003d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d34:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003d38:	0801023c 	.word	0x0801023c
  ldr r2, =_sbss
 8003d3c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003d40:	20002700 	.word	0x20002700

08003d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d44:	e7fe      	b.n	8003d44 <ADC1_IRQHandler>

08003d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d50:	2003      	movs	r0, #3
 8003d52:	f001 fed2 	bl	8005afa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d56:	200f      	movs	r0, #15
 8003d58:	f7ff fde4 	bl	8003924 <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	e001      	b.n	8003d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d68:	f7ff fc24 	bl	80035b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_IncTick+0x20>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x24>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <HAL_IncTick+0x24>)
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	20000ca8 	.word	0x20000ca8

08003da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return uwTick;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_GetTick+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000ca8 	.word	0x20000ca8

08003db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff ffee 	bl	8003da0 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d005      	beq.n	8003dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_Delay+0x44>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dde:	bf00      	nop
 8003de0:	f7ff ffde 	bl	8003da0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d8f7      	bhi.n	8003de0 <HAL_Delay+0x28>
  {
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000010 	.word	0x20000010

08003e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3360      	adds	r3, #96	; 0x60
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <LL_ADC_SetOffset+0x44>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	03fff000 	.word	0x03fff000

08003eb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3360      	adds	r3, #96	; 0x60
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3330      	adds	r3, #48	; 0x30
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	4413      	add	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	211f      	movs	r1, #31
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0e9b      	lsrs	r3, r3, #26
 8003f70:	f003 011f 	and.w	r1, r3, #31
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0e5b      	lsrs	r3, r3, #25
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	4413      	add	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	0d1b      	lsrs	r3, r3, #20
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2107      	movs	r1, #7
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0d1b      	lsrs	r3, r3, #20
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0318 	and.w	r3, r3, #24
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <LL_ADC_SetChannelSingleDiff+0x44>)
 800400c:	40d9      	lsrs	r1, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	400b      	ands	r3, r1
 8004012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004016:	431a      	orrs	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	0007ffff 	.word	0x0007ffff

08004030 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6093      	str	r3, [r2, #8]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004068:	d101      	bne.n	800406e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800408c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004090:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b8:	d101      	bne.n	80040be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e0:	f043 0201 	orr.w	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <LL_ADC_IsEnabled+0x18>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <LL_ADC_IsEnabled+0x1a>
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800412a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d101      	bne.n	800415a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d101      	bne.n	8004180 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e12c      	b.n	8004404 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fa23 	bl	8003604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff3f 	bl	8004054 <LL_ADC_IsDeepPowerDownEnabled>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff25 	bl	8004030 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff5a 	bl	80040a4 <LL_ADC_IsInternalRegulatorEnabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d115      	bne.n	8004222 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff3e 	bl	800407c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004200:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_ADC_Init+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	4a82      	ldr	r2, [pc, #520]	; (8004410 <HAL_ADC_Init+0x280>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004214:	e002      	b.n	800421c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff3c 	bl	80040a4 <LL_ADC_IsInternalRegulatorEnabled>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0210 	orr.w	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff75 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 8004258:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 80c5 	bne.w	80043f2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80c1 	bne.w	80043f2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff35 	bl	80040f4 <LL_ADC_IsEnabled>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004290:	4860      	ldr	r0, [pc, #384]	; (8004414 <HAL_ADC_Init+0x284>)
 8004292:	f7ff ff2f 	bl	80040f4 <LL_ADC_IsEnabled>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	485d      	ldr	r0, [pc, #372]	; (8004418 <HAL_ADC_Init+0x288>)
 80042a4:	f7ff fdac 	bl	8003e00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7e5b      	ldrb	r3, [r3, #25]
 80042ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d106      	bne.n	80042e4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	3b01      	subs	r3, #1
 80042dc:	045b      	lsls	r3, r3, #17
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b45      	ldr	r3, [pc, #276]	; (800441c <HAL_ADC_Init+0x28c>)
 8004308:	4013      	ands	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	430b      	orrs	r3, r1
 8004312:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff12 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 800431e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff1f 	bl	8004168 <LL_ADC_INJ_IsConversionOngoing>
 800432a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d13d      	bne.n	80043ae <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13a      	bne.n	80043ae <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800433c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004344:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004354:	f023 0302 	bic.w	r3, r3, #2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	430b      	orrs	r3, r1
 8004360:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004368:	2b01      	cmp	r3, #1
 800436a:	d118      	bne.n	800439e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800438e:	430a      	orrs	r2, r1
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	611a      	str	r2, [r3, #16]
 800439c:	e007      	b.n	80043ae <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10c      	bne.n	80043d0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f023 010f 	bic.w	r1, r3, #15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
 80043ce:	e007      	b.n	80043e0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 020f 	bic.w	r2, r2, #15
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
 80043f0:	e007      	b.n	8004402 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f043 0210 	orr.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004402:	7ffb      	ldrb	r3, [r7, #31]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000008 	.word	0x20000008
 8004410:	053e2d63 	.word	0x053e2d63
 8004414:	50040000 	.word	0x50040000
 8004418:	50040300 	.word	0x50040300
 800441c:	fff0c007 	.word	0xfff0c007

08004420 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fe86 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d167      	bne.n	800450c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_ADC_Start_DMA+0x2a>
 8004446:	2302      	movs	r3, #2
 8004448:	e063      	b.n	8004512 <HAL_ADC_Start_DMA+0xf2>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fc52 	bl	8004cfc <ADC_Enable>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d14f      	bne.n	8004502 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f023 0206 	bic.w	r2, r3, #6
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	659a      	str	r2, [r3, #88]	; 0x58
 800448e:	e002      	b.n	8004496 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	4a20      	ldr	r2, [pc, #128]	; (800451c <HAL_ADC_Start_DMA+0xfc>)
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_ADC_Start_DMA+0x100>)
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_ADC_Start_DMA+0x104>)
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	221c      	movs	r2, #28
 80044b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0210 	orr.w	r2, r2, #16
 80044cc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3340      	adds	r3, #64	; 0x40
 80044e8:	4619      	mov	r1, r3
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f001 fbf1 	bl	8005cd4 <HAL_DMA_Start_IT>
 80044f2:	4603      	mov	r3, r0
 80044f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fe0d 	bl	800411a <LL_ADC_REG_StartConversion>
 8004500:	e006      	b.n	8004510 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800450a:	e001      	b.n	8004510 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	08004e09 	.word	0x08004e09
 8004520:	08004ee1 	.word	0x08004ee1
 8004524:	08004efd 	.word	0x08004efd

08004528 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b0b6      	sub	sp, #216	; 0xd8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_ADC_ConfigChannel+0x22>
 800455a:	2302      	movs	r3, #2
 800455c:	e3b9      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x796>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fde9 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 839e 	bne.w	8004cb4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d824      	bhi.n	80045ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	3b02      	subs	r3, #2
 8004586:	2b03      	cmp	r3, #3
 8004588:	d81b      	bhi.n	80045c2 <HAL_ADC_ConfigChannel+0x86>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <HAL_ADC_ConfigChannel+0x54>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045a9 	.word	0x080045a9
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045b9 	.word	0x080045b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	220c      	movs	r2, #12
 80045a4:	605a      	str	r2, [r3, #4]
          break;
 80045a6:	e010      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2212      	movs	r2, #18
 80045ac:	605a      	str	r2, [r3, #4]
          break;
 80045ae:	e00c      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2218      	movs	r2, #24
 80045b4:	605a      	str	r2, [r3, #4]
          break;
 80045b6:	e008      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045be:	605a      	str	r2, [r3, #4]
          break;
 80045c0:	e003      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2206      	movs	r2, #6
 80045c6:	605a      	str	r2, [r3, #4]
          break;
 80045c8:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7ff fcae 	bl	8003f38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fdae 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 80045e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fdba 	bl	8004168 <LL_ADC_INJ_IsConversionOngoing>
 80045f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 81a6 	bne.w	800494e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 81a1 	bne.w	800494e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	461a      	mov	r2, r3
 800461a:	f7ff fcb9 	bl	8003f90 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b04      	cmp	r3, #4
 800463e:	d00a      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6919      	ldr	r1, [r3, #16]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004650:	f7ff fc0a 	bl	8003e68 <LL_ADC_SetOffset>
 8004654:	e17b      	b.n	800494e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fc27 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x146>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fc1c 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 8004678:	4603      	mov	r3, r0
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	e01e      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x184>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fc11 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e004      	b.n	80046be <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80046b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x19c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	e018      	b.n	800470a <HAL_ADC_ConfigChannel+0x1ce>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80046ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80046f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	e004      	b.n	800470a <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8004700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fbe0 	bl	8003edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fbc4 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 8004728:	4603      	mov	r3, r0
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x20c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fbb9 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 800473e:	4603      	mov	r3, r0
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	f003 021f 	and.w	r2, r3, #31
 8004746:	e01e      	b.n	8004786 <HAL_ADC_ConfigChannel+0x24a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fbae 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 8004754:	4603      	mov	r3, r0
 8004756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800476a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800476e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e004      	b.n	8004784 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800477a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <HAL_ADC_ConfigChannel+0x262>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	0e9b      	lsrs	r3, r3, #26
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	e018      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x294>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80047b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80047ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80047c2:	2320      	movs	r3, #32
 80047c4:	e004      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80047c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d106      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2200      	movs	r2, #0
 80047da:	2101      	movs	r1, #1
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fb7d 	bl	8003edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fb61 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_ADC_ConfigChannel+0x2d2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2102      	movs	r1, #2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fb56 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 8004804:	4603      	mov	r3, r0
 8004806:	0e9b      	lsrs	r3, r3, #26
 8004808:	f003 021f 	and.w	r2, r3, #31
 800480c:	e01e      	b.n	800484c <HAL_ADC_ConfigChannel+0x310>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fb4b 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 800481a:	4603      	mov	r3, r0
 800481c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800482c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e004      	b.n	800484a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x328>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0e9b      	lsrs	r3, r3, #26
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	e016      	b.n	8004892 <HAL_ADC_ConfigChannel+0x356>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800487c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004884:	2320      	movs	r3, #32
 8004886:	e004      	b.n	8004892 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004892:	429a      	cmp	r2, r3
 8004894:	d106      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fb1c 	bl	8003edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2103      	movs	r1, #3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fb00 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x394>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2103      	movs	r1, #3
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff faf5 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 80048c6:	4603      	mov	r3, r0
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	f003 021f 	and.w	r2, r3, #31
 80048ce:	e017      	b.n	8004900 <HAL_ADC_ConfigChannel+0x3c4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2103      	movs	r1, #3
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff faea 	bl	8003eb0 <LL_ADC_GetOffsetChannel>
 80048dc:	4603      	mov	r3, r0
 80048de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80048e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80048ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80048f2:	2320      	movs	r3, #32
 80048f4:	e003      	b.n	80048fe <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80048f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x3dc>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	e011      	b.n	800493c <HAL_ADC_ConfigChannel+0x400>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004928:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800492a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e003      	b.n	800493c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800493c:	429a      	cmp	r2, r3
 800493e:	d106      	bne.n	800494e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	2103      	movs	r1, #3
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fac7 	bl	8003edc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fbce 	bl	80040f4 <LL_ADC_IsEnabled>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f040 8140 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	461a      	mov	r2, r3
 800496e:	f7ff fb3b 	bl	8003fe8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4a8f      	ldr	r2, [pc, #572]	; (8004bb4 <HAL_ADC_ConfigChannel+0x678>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f040 8131 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x46a>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	3301      	adds	r3, #1
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2b09      	cmp	r3, #9
 800499c:	bf94      	ite	ls
 800499e:	2301      	movls	r3, #1
 80049a0:	2300      	movhi	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e019      	b.n	80049da <HAL_ADC_ConfigChannel+0x49e>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80049b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80049b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	e003      	b.n	80049ca <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80049c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d079      	beq.n	8004ad2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x4be>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0e9b      	lsrs	r3, r3, #26
 80049f0:	3301      	adds	r3, #1
 80049f2:	069b      	lsls	r3, r3, #26
 80049f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f8:	e015      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x4ea>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e003      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	069b      	lsls	r3, r3, #26
 8004a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x50a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	0e9b      	lsrs	r3, r3, #26
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	e017      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x53a>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	e003      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8004a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	ea42 0103 	orr.w	r1, r2, r3
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x560>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	0e9b      	lsrs	r3, r3, #26
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f003 021f 	and.w	r2, r3, #31
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	051b      	lsls	r3, r3, #20
 8004a9a:	e018      	b.n	8004ace <HAL_ADC_ConfigChannel+0x592>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	e003      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f003 021f 	and.w	r2, r3, #31
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	e081      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x5b2>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0e9b      	lsrs	r3, r3, #26
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	069b      	lsls	r3, r3, #26
 8004ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aec:	e015      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x5de>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8004b06:	2320      	movs	r3, #32
 8004b08:	e003      	b.n	8004b12 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	069b      	lsls	r3, r3, #26
 8004b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x5fe>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0e9b      	lsrs	r3, r3, #26
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2101      	movs	r1, #1
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	e017      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x62e>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	61fb      	str	r3, [r7, #28]
  return result;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e003      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	fab3 f383 	clz	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	ea42 0103 	orr.w	r1, r2, r3
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x65a>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0e9b      	lsrs	r3, r3, #26
 8004b80:	3301      	adds	r3, #1
 8004b82:	f003 021f 	and.w	r2, r3, #31
 8004b86:	4613      	mov	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3b1e      	subs	r3, #30
 8004b8e:	051b      	lsls	r3, r3, #20
 8004b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b94:	e01e      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x698>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	613b      	str	r3, [r7, #16]
  return result;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004bae:	2320      	movs	r3, #32
 8004bb0:	e006      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x684>
 8004bb2:	bf00      	nop
 8004bb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f003 021f 	and.w	r2, r3, #31
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b1e      	subs	r3, #30
 8004bce:	051b      	lsls	r3, r3, #20
 8004bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	6892      	ldr	r2, [r2, #8]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f7ff f9d8 	bl	8003f90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <HAL_ADC_ConfigChannel+0x7a0>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d06c      	beq.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bec:	483c      	ldr	r0, [pc, #240]	; (8004ce0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004bee:	f7ff f92d 	bl	8003e4c <LL_ADC_GetCommonPathInternalCh>
 8004bf2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3a      	ldr	r2, [pc, #232]	; (8004ce4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d127      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d121      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d157      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c1e:	4619      	mov	r1, r3
 8004c20:	482f      	ldr	r0, [pc, #188]	; (8004ce0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c22:	f7ff f900 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c26:	4b31      	ldr	r3, [pc, #196]	; (8004cec <HAL_ADC_ConfigChannel+0x7b0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	099b      	lsrs	r3, r3, #6
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c40:	e002      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f9      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c4e:	e03a      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d113      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x746>
 8004c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d12a      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c7c:	f7ff f8d3 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c80:	e021      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d11c      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d111      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004caa:	4619      	mov	r1, r3
 8004cac:	480c      	ldr	r0, [pc, #48]	; (8004ce0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cae:	f7ff f8ba 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
 8004cb2:	e008      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	37d8      	adds	r7, #216	; 0xd8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	80080000 	.word	0x80080000
 8004ce0:	50040300 	.word	0x50040300
 8004ce4:	c7520000 	.word	0xc7520000
 8004ce8:	50040000 	.word	0x50040000
 8004cec:	20000008 	.word	0x20000008
 8004cf0:	053e2d63 	.word	0x053e2d63
 8004cf4:	cb840000 	.word	0xcb840000
 8004cf8:	80000001 	.word	0x80000001

08004cfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff f9f1 	bl	80040f4 <LL_ADC_IsEnabled>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d169      	bne.n	8004dec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <ADC_Enable+0xfc>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0210 	orr.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e055      	b.n	8004dee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f9c0 	bl	80040cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d4c:	482b      	ldr	r0, [pc, #172]	; (8004dfc <ADC_Enable+0x100>)
 8004d4e:	f7ff f87d 	bl	8003e4c <LL_ADC_GetCommonPathInternalCh>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d5c:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <ADC_Enable+0x104>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <ADC_Enable+0x108>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d76:	e002      	b.n	8004d7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f9      	bne.n	8004d78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d84:	f7ff f80c 	bl	8003da0 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d8a:	e028      	b.n	8004dde <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff f9af 	bl	80040f4 <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff f993 	bl	80040cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004da6:	f7fe fffb 	bl	8003da0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d914      	bls.n	8004dde <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d00d      	beq.n	8004dde <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f043 0210 	orr.w	r2, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	f043 0201 	orr.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e007      	b.n	8004dee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d1cf      	bne.n	8004d8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	8000003f 	.word	0x8000003f
 8004dfc:	50040300 	.word	0x50040300
 8004e00:	20000008 	.word	0x20000008
 8004e04:	053e2d63 	.word	0x053e2d63

08004e08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d14b      	bne.n	8004eba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d021      	beq.n	8004e80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f866 	bl	8003f12 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d032      	beq.n	8004eb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12b      	bne.n	8004eb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d11f      	bne.n	8004eb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f043 0201 	orr.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
 8004e7e:	e018      	b.n	8004eb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d111      	bne.n	8004eb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7fd fe4a 	bl	8002b4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004eb8:	e00e      	b.n	8004ed8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fb2e 	bl	8004528 <HAL_ADC_ErrorCallback>
}
 8004ecc:	e004      	b.n	8004ed8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7fd fe22 	bl	8002b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f043 0204 	orr.w	r2, r3, #4
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fb00 	bl	8004528 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0ed      	b.n	800511e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fe fbec 	bl	800372c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f64:	f7fe ff1c 	bl	8003da0 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f6a:	e012      	b.n	8004f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f6c:	f7fe ff18 	bl	8003da0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b0a      	cmp	r3, #10
 8004f78:	d90b      	bls.n	8004f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0c5      	b.n	800511e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0e5      	beq.n	8004f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0202 	bic.w	r2, r2, #2
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7fe fef6 	bl	8003da0 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fb6:	e012      	b.n	8004fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fb8:	f7fe fef2 	bl	8003da0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b0a      	cmp	r3, #10
 8004fc4:	d90b      	bls.n	8004fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09f      	b.n	800511e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7e1b      	ldrb	r3, [r3, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e007      	b.n	8005016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7e5b      	ldrb	r3, [r3, #25]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d108      	bne.n	8005030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7e9b      	ldrb	r3, [r3, #26]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0220 	orr.w	r2, r2, #32
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e007      	b.n	800506a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0220 	bic.w	r2, r2, #32
 8005068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7edb      	ldrb	r3, [r3, #27]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d108      	bne.n	8005084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0210 	bic.w	r2, r2, #16
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e007      	b.n	8005094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0210 	orr.w	r2, r2, #16
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7f1b      	ldrb	r3, [r3, #28]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0208 	bic.w	r2, r2, #8
 80050bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7f5b      	ldrb	r3, [r3, #29]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d108      	bne.n	80050d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0204 	orr.w	r2, r2, #4
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e007      	b.n	80050e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0204 	bic.w	r2, r2, #4
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d003      	beq.n	800514c <HAL_CAN_ConfigFilter+0x26>
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b02      	cmp	r3, #2
 8005148:	f040 80aa 	bne.w	80052a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2201      	movs	r2, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d123      	bne.n	80051ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	43db      	mvns	r3, r3
 8005190:	401a      	ands	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3248      	adds	r2, #72	; 0x48
 80051ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	3348      	adds	r3, #72	; 0x48
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d122      	bne.n	800521c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	431a      	orrs	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3248      	adds	r2, #72	; 0x48
 80051fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005210:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	3348      	adds	r3, #72	; 0x48
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	43db      	mvns	r3, r3
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005236:	e007      	b.n	8005248 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	43db      	mvns	r3, r3
 800525a:	401a      	ands	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005262:	e007      	b.n	8005274 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e006      	b.n	80052ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d12e      	bne.n	800532c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052e6:	f7fe fd5b 	bl	8003da0 <HAL_GetTick>
 80052ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052ec:	e012      	b.n	8005314 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052ee:	f7fe fd57 	bl	8003da0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b0a      	cmp	r3, #10
 80052fa:	d90b      	bls.n	8005314 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2205      	movs	r2, #5
 800530c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e012      	b.n	800533a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e006      	b.n	800533a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005342:	b480      	push	{r7}
 8005344:	b089      	sub	sp, #36	; 0x24
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005356:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d003      	beq.n	800536e <HAL_CAN_AddTxMessage+0x2c>
 8005366:	7ffb      	ldrb	r3, [r7, #31]
 8005368:	2b02      	cmp	r3, #2
 800536a:	f040 80ad 	bne.w	80054c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8095 	beq.w	80054b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	0e1b      	lsrs	r3, r3, #24
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005398:	2201      	movs	r2, #1
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	409a      	lsls	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	6809      	ldr	r1, [r1, #0]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3318      	adds	r3, #24
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	440b      	add	r3, r1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e00f      	b.n	80053e6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80053da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3318      	adds	r3, #24
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	440b      	add	r3, r1
 80053e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3318      	adds	r3, #24
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	440b      	add	r3, r1
 80053f6:	3304      	adds	r3, #4
 80053f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	7d1b      	ldrb	r3, [r3, #20]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d111      	bne.n	8005426 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3318      	adds	r3, #24
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	4413      	add	r3, r2
 800540e:	3304      	adds	r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	6811      	ldr	r1, [r2, #0]
 8005416:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3318      	adds	r3, #24
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	440b      	add	r3, r1
 8005422:	3304      	adds	r3, #4
 8005424:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3307      	adds	r3, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	061a      	lsls	r2, r3, #24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3306      	adds	r3, #6
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3305      	adds	r3, #5
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	4313      	orrs	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	3204      	adds	r2, #4
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	4610      	mov	r0, r2
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	6811      	ldr	r1, [r2, #0]
 800544e:	ea43 0200 	orr.w	r2, r3, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	440b      	add	r3, r1
 8005458:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800545c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3303      	adds	r3, #3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	061a      	lsls	r2, r3, #24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3302      	adds	r3, #2
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3301      	adds	r3, #1
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	4313      	orrs	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	4610      	mov	r0, r2
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	6811      	ldr	r1, [r2, #0]
 8005484:	ea43 0200 	orr.w	r2, r3, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	440b      	add	r3, r1
 800548e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005492:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3318      	adds	r3, #24
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3318      	adds	r3, #24
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	440b      	add	r3, r1
 80054b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e00e      	b.n	80054d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e006      	b.n	80054d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3724      	adds	r7, #36	; 0x24
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d002      	beq.n	8005500 <HAL_CAN_ActivateNotification+0x1e>
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d109      	bne.n	8005514 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6959      	ldr	r1, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e006      	b.n	8005522 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d07c      	beq.n	800566e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f983 	bl	800589c <HAL_CAN_TxMailbox0CompleteCallback>
 8005596:	e016      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	e00c      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	e002      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f989 	bl	80058d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d024      	beq.n	800561a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f963 	bl	80058b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80055ea:	e016      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
 80055fe:	e00c      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e002      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f969 	bl	80058ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d024      	beq.n	800566e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800562c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f943 	bl	80058c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800563e:	e016      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	e00c      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
 8005666:	e002      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f949 	bl	8005900 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005688:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2210      	movs	r2, #16
 8005690:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f93a 	bl	8005928 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f921 	bl	8005914 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2210      	movs	r2, #16
 80056f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2208      	movs	r2, #8
 8005710:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f91c 	bl	8005950 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f903 	bl	800593c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d006      	beq.n	8005758 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2210      	movs	r2, #16
 8005750:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f906 	bl	8005964 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8ff 	bl	8005978 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d07b      	beq.n	800587c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d072      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d043      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d03e      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d02b      	beq.n	8005858 <HAL_CAN_IRQHandler+0x32a>
 8005800:	2b60      	cmp	r3, #96	; 0x60
 8005802:	d82e      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d022      	beq.n	800584e <HAL_CAN_IRQHandler+0x320>
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d82a      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d019      	beq.n	8005844 <HAL_CAN_IRQHandler+0x316>
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d826      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d010      	beq.n	800583a <HAL_CAN_IRQHandler+0x30c>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d822      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d002      	beq.n	8005826 <HAL_CAN_IRQHandler+0x2f8>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d005      	beq.n	8005830 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005824:	e01d      	b.n	8005862 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800582e:	e019      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	f043 0310 	orr.w	r3, r3, #16
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005838:	e014      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005842:	e00f      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800584c:	e00a      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005856:	e005      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005860:	e000      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            break;
 8005862:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005872:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f87c 	bl	800598c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005894:	bf00      	nop
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <__NVIC_SetPriorityGrouping+0x44>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059bc:	4013      	ands	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059d2:	4a04      	ldr	r2, [pc, #16]	; (80059e4 <__NVIC_SetPriorityGrouping+0x44>)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	60d3      	str	r3, [r2, #12]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <__NVIC_GetPriorityGrouping+0x18>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	f003 0307 	and.w	r3, r3, #7
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	db0b      	blt.n	8005a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	f003 021f 	and.w	r2, r3, #31
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <__NVIC_EnableIRQ+0x38>)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2001      	movs	r0, #1
 8005a26:	fa00 f202 	lsl.w	r2, r0, r2
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db0a      	blt.n	8005a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	490c      	ldr	r1, [pc, #48]	; (8005a8c <__NVIC_SetPriority+0x4c>)
 8005a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5e:	0112      	lsls	r2, r2, #4
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	440b      	add	r3, r1
 8005a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a68:	e00a      	b.n	8005a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4908      	ldr	r1, [pc, #32]	; (8005a90 <__NVIC_SetPriority+0x50>)
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	3b04      	subs	r3, #4
 8005a78:	0112      	lsls	r2, r2, #4
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	761a      	strb	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	e000e100 	.word	0xe000e100
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f1c3 0307 	rsb	r3, r3, #7
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf28      	it	cs
 8005ab2:	2304      	movcs	r3, #4
 8005ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	d902      	bls.n	8005ac4 <NVIC_EncodePriority+0x30>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3b03      	subs	r3, #3
 8005ac2:	e000      	b.n	8005ac6 <NVIC_EncodePriority+0x32>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005adc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	43d9      	mvns	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aec:	4313      	orrs	r3, r2
         );
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3724      	adds	r7, #36	; 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff4c 	bl	80059a0 <__NVIC_SetPriorityGrouping>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b22:	f7ff ff61 	bl	80059e8 <__NVIC_GetPriorityGrouping>
 8005b26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	f7ff ffb1 	bl	8005a94 <NVIC_EncodePriority>
 8005b32:	4602      	mov	r2, r0
 8005b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ff80 	bl	8005a40 <__NVIC_SetPriority>
}
 8005b40:	bf00      	nop
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff ff54 	bl	8005a04 <__NVIC_EnableIRQ>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e098      	b.n	8005ca8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b4d      	ldr	r3, [pc, #308]	; (8005cb4 <HAL_DMA_Init+0x150>)
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d80f      	bhi.n	8005ba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b4b      	ldr	r3, [pc, #300]	; (8005cb8 <HAL_DMA_Init+0x154>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4a4b      	ldr	r2, [pc, #300]	; (8005cbc <HAL_DMA_Init+0x158>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	009a      	lsls	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a48      	ldr	r2, [pc, #288]	; (8005cc0 <HAL_DMA_Init+0x15c>)
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba0:	e00e      	b.n	8005bc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_DMA_Init+0x160>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4a43      	ldr	r2, [pc, #268]	; (8005cbc <HAL_DMA_Init+0x158>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	; (8005cc8 <HAL_DMA_Init+0x164>)
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c1a:	d039      	beq.n	8005c90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <HAL_DMA_Init+0x15c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d11a      	bne.n	8005c5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c26:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_DMA_Init+0x168>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f003 031c 	and.w	r3, r3, #28
 8005c32:	210f      	movs	r1, #15
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	4924      	ldr	r1, [pc, #144]	; (8005ccc <HAL_DMA_Init+0x168>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c40:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <HAL_DMA_Init+0x168>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f003 031c 	and.w	r3, r3, #28
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	491d      	ldr	r1, [pc, #116]	; (8005ccc <HAL_DMA_Init+0x168>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
 8005c5a:	e019      	b.n	8005c90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c5c:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <HAL_DMA_Init+0x16c>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	f003 031c 	and.w	r3, r3, #28
 8005c68:	210f      	movs	r1, #15
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	4917      	ldr	r1, [pc, #92]	; (8005cd0 <HAL_DMA_Init+0x16c>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c76:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <HAL_DMA_Init+0x16c>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	f003 031c 	and.w	r3, r3, #28
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	4911      	ldr	r1, [pc, #68]	; (8005cd0 <HAL_DMA_Init+0x16c>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40020407 	.word	0x40020407
 8005cb8:	bffdfff8 	.word	0xbffdfff8
 8005cbc:	cccccccd 	.word	0xcccccccd
 8005cc0:	40020000 	.word	0x40020000
 8005cc4:	bffdfbf8 	.word	0xbffdfbf8
 8005cc8:	40020400 	.word	0x40020400
 8005ccc:	400200a8 	.word	0x400200a8
 8005cd0:	400204a8 	.word	0x400204a8

08005cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_Start_IT+0x20>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e04b      	b.n	8005d8c <HAL_DMA_Start_IT+0xb8>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d13a      	bne.n	8005d7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f8e0 	bl	8005ef2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 020e 	orr.w	r2, r2, #14
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e00f      	b.n	8005d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 020a 	orr.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e005      	b.n	8005d8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
 8005d88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	f003 031c 	and.w	r3, r3, #28
 8005db4:	2204      	movs	r2, #4
 8005db6:	409a      	lsls	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d026      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x7a>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d021      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0204 	bic.w	r2, r2, #4
 8005de6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f003 021c 	and.w	r2, r3, #28
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2104      	movs	r1, #4
 8005df6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d071      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005e0c:	e06c      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f003 031c 	and.w	r3, r3, #28
 8005e16:	2202      	movs	r2, #2
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d02e      	beq.n	8005e80 <HAL_DMA_IRQHandler+0xec>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d029      	beq.n	8005e80 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 020a 	bic.w	r2, r2, #10
 8005e48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f003 021c 	and.w	r2, r3, #28
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2102      	movs	r1, #2
 8005e60:	fa01 f202 	lsl.w	r2, r1, r2
 8005e64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d038      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e7e:	e033      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	f003 031c 	and.w	r3, r3, #28
 8005e88:	2208      	movs	r2, #8
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02a      	beq.n	8005eea <HAL_DMA_IRQHandler+0x156>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d025      	beq.n	8005eea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 020e 	bic.w	r2, r2, #14
 8005eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f003 021c 	and.w	r2, r3, #28
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2101      	movs	r1, #1
 8005ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
}
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f003 021c 	and.w	r2, r3, #28
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d108      	bne.n	8005f36 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f34:	e007      	b.n	8005f46 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f62:	e148      	b.n	80061f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	2101      	movs	r1, #1
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 813a 	beq.w	80061f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d005      	beq.n	8005f94 <HAL_GPIO_Init+0x40>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d130      	bne.n	8005ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fca:	2201      	movs	r2, #1
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 0201 	and.w	r2, r3, #1
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d017      	beq.n	8006032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	2203      	movs	r2, #3
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4013      	ands	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d123      	bne.n	8006086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	08da      	lsrs	r2, r3, #3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3208      	adds	r2, #8
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	220f      	movs	r2, #15
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4013      	ands	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	08da      	lsrs	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3208      	adds	r2, #8
 8006080:	6939      	ldr	r1, [r7, #16]
 8006082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	2203      	movs	r2, #3
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	43db      	mvns	r3, r3
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4013      	ands	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 0203 	and.w	r2, r3, #3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8094 	beq.w	80061f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c8:	4b52      	ldr	r3, [pc, #328]	; (8006214 <HAL_GPIO_Init+0x2c0>)
 80060ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060cc:	4a51      	ldr	r2, [pc, #324]	; (8006214 <HAL_GPIO_Init+0x2c0>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6613      	str	r3, [r2, #96]	; 0x60
 80060d4:	4b4f      	ldr	r3, [pc, #316]	; (8006214 <HAL_GPIO_Init+0x2c0>)
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060e0:	4a4d      	ldr	r2, [pc, #308]	; (8006218 <HAL_GPIO_Init+0x2c4>)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	3302      	adds	r3, #2
 80060e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	220f      	movs	r2, #15
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800610a:	d00d      	beq.n	8006128 <HAL_GPIO_Init+0x1d4>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a43      	ldr	r2, [pc, #268]	; (800621c <HAL_GPIO_Init+0x2c8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <HAL_GPIO_Init+0x1d0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a42      	ldr	r2, [pc, #264]	; (8006220 <HAL_GPIO_Init+0x2cc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <HAL_GPIO_Init+0x1cc>
 800611c:	2302      	movs	r3, #2
 800611e:	e004      	b.n	800612a <HAL_GPIO_Init+0x1d6>
 8006120:	2307      	movs	r3, #7
 8006122:	e002      	b.n	800612a <HAL_GPIO_Init+0x1d6>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_GPIO_Init+0x1d6>
 8006128:	2300      	movs	r3, #0
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	f002 0203 	and.w	r2, r2, #3
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	4093      	lsls	r3, r2
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800613a:	4937      	ldr	r1, [pc, #220]	; (8006218 <HAL_GPIO_Init+0x2c4>)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	089b      	lsrs	r3, r3, #2
 8006140:	3302      	adds	r3, #2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	43db      	mvns	r3, r3
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4013      	ands	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800616c:	4a2d      	ldr	r2, [pc, #180]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006172:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	43db      	mvns	r3, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006196:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4013      	ands	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061c0:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4013      	ands	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061ea:	4a0e      	ldr	r2, [pc, #56]	; (8006224 <HAL_GPIO_Init+0x2d0>)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3301      	adds	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f47f aeaf 	bne.w	8005f64 <HAL_GPIO_Init+0x10>
  }
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40021000 	.word	0x40021000
 8006218:	40010000 	.word	0x40010000
 800621c:	48000400 	.word	0x48000400
 8006220:	48000800 	.word	0x48000800
 8006224:	40010400 	.word	0x40010400

08006228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006238:	787b      	ldrb	r3, [r7, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006244:	e002      	b.n	800624c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e081      	b.n	800636e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fd faa0 	bl	80037c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	e006      	b.n	80062e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d104      	bne.n	80062f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	461a      	mov	r2, r3
 8006384:	460b      	mov	r3, r1
 8006386:	817b      	strh	r3, [r7, #10]
 8006388:	4613      	mov	r3, r2
 800638a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b20      	cmp	r3, #32
 8006396:	f040 80da 	bne.w	800654e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_I2C_Master_Transmit+0x30>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0d3      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063b0:	f7fd fcf6 	bl	8003da0 <HAL_GetTick>
 80063b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2319      	movs	r3, #25
 80063bc:	2201      	movs	r2, #1
 80063be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fb4e 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e0be      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2210      	movs	r2, #16
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	893a      	ldrh	r2, [r7, #8]
 80063f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2bff      	cmp	r3, #255	; 0xff
 8006402:	d90e      	bls.n	8006422 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	22ff      	movs	r2, #255	; 0xff
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	b2da      	uxtb	r2, r3
 8006410:	8979      	ldrh	r1, [r7, #10]
 8006412:	4b51      	ldr	r3, [pc, #324]	; (8006558 <HAL_I2C_Master_Transmit+0x1e0>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fd44 	bl	8006ea8 <I2C_TransferConfig>
 8006420:	e06c      	b.n	80064fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	b2da      	uxtb	r2, r3
 8006432:	8979      	ldrh	r1, [r7, #10]
 8006434:	4b48      	ldr	r3, [pc, #288]	; (8006558 <HAL_I2C_Master_Transmit+0x1e0>)
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fd33 	bl	8006ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006442:	e05b      	b.n	80064fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	6a39      	ldr	r1, [r7, #32]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fb4b 	bl	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e07b      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d034      	beq.n	80064fc <HAL_I2C_Master_Transmit+0x184>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d130      	bne.n	80064fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2200      	movs	r2, #0
 80064a2:	2180      	movs	r1, #128	; 0x80
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fadd 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e04d      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2bff      	cmp	r3, #255	; 0xff
 80064bc:	d90e      	bls.n	80064dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	8979      	ldrh	r1, [r7, #10]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fce7 	bl	8006ea8 <I2C_TransferConfig>
 80064da:	e00f      	b.n	80064fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	8979      	ldrh	r1, [r7, #10]
 80064ee:	2300      	movs	r3, #0
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 fcd6 	bl	8006ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d19e      	bne.n	8006444 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fb2a 	bl	8006b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e01a      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2220      	movs	r2, #32
 8006520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6859      	ldr	r1, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_I2C_Master_Transmit+0x1e4>)
 800652e:	400b      	ands	r3, r1
 8006530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	80002000 	.word	0x80002000
 800655c:	fe00e800 	.word	0xfe00e800

08006560 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	461a      	mov	r2, r3
 800656c:	460b      	mov	r3, r1
 800656e:	817b      	strh	r3, [r7, #10]
 8006570:	4613      	mov	r3, r2
 8006572:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b20      	cmp	r3, #32
 800657e:	f040 80db 	bne.w	8006738 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_I2C_Master_Receive+0x30>
 800658c:	2302      	movs	r3, #2
 800658e:	e0d4      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006598:	f7fd fc02 	bl	8003da0 <HAL_GetTick>
 800659c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	2319      	movs	r3, #25
 80065a4:	2201      	movs	r2, #1
 80065a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fa5a 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e0bf      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2222      	movs	r2, #34	; 0x22
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2210      	movs	r2, #16
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	893a      	ldrh	r2, [r7, #8]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2bff      	cmp	r3, #255	; 0xff
 80065ea:	d90e      	bls.n	800660a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	8979      	ldrh	r1, [r7, #10]
 80065fa:	4b52      	ldr	r3, [pc, #328]	; (8006744 <HAL_I2C_Master_Receive+0x1e4>)
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fc50 	bl	8006ea8 <I2C_TransferConfig>
 8006608:	e06d      	b.n	80066e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006618:	b2da      	uxtb	r2, r3
 800661a:	8979      	ldrh	r1, [r7, #10]
 800661c:	4b49      	ldr	r3, [pc, #292]	; (8006744 <HAL_I2C_Master_Receive+0x1e4>)
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fc3f 	bl	8006ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800662a:	e05c      	b.n	80066e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	6a39      	ldr	r1, [r7, #32]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fad3 	bl	8006bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e07c      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d034      	beq.n	80066e6 <HAL_I2C_Master_Receive+0x186>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d130      	bne.n	80066e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2200      	movs	r2, #0
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f9e8 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e04d      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2bff      	cmp	r3, #255	; 0xff
 80066a6:	d90e      	bls.n	80066c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	8979      	ldrh	r1, [r7, #10]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fbf2 	bl	8006ea8 <I2C_TransferConfig>
 80066c4:	e00f      	b.n	80066e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fbe1 	bl	8006ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d19d      	bne.n	800662c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	6a39      	ldr	r1, [r7, #32]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fa35 	bl	8006b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e01a      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2220      	movs	r2, #32
 800670a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <HAL_I2C_Master_Receive+0x1e8>)
 8006718:	400b      	ands	r3, r1
 800671a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	80002400 	.word	0x80002400
 8006748:	fe00e800 	.word	0xfe00e800

0800674c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	461a      	mov	r2, r3
 800675a:	4603      	mov	r3, r0
 800675c:	817b      	strh	r3, [r7, #10]
 800675e:	460b      	mov	r3, r1
 8006760:	813b      	strh	r3, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b20      	cmp	r3, #32
 8006770:	f040 80f9 	bne.w	8006966 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_I2C_Mem_Write+0x34>
 800677a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0ed      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_I2C_Mem_Write+0x4e>
 8006796:	2302      	movs	r3, #2
 8006798:	e0e6      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067a2:	f7fd fafd 	bl	8003da0 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2319      	movs	r3, #25
 80067ae:	2201      	movs	r2, #1
 80067b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f955 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0d1      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2221      	movs	r2, #33	; 0x21
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067ec:	88f8      	ldrh	r0, [r7, #6]
 80067ee:	893a      	ldrh	r2, [r7, #8]
 80067f0:	8979      	ldrh	r1, [r7, #10]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	4603      	mov	r3, r0
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8b9 	bl	8006974 <I2C_RequestMemoryWrite>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0a9      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2bff      	cmp	r3, #255	; 0xff
 800681c:	d90e      	bls.n	800683c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	b2da      	uxtb	r2, r3
 800682a:	8979      	ldrh	r1, [r7, #10]
 800682c:	2300      	movs	r3, #0
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fb37 	bl	8006ea8 <I2C_TransferConfig>
 800683a:	e00f      	b.n	800685c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	b2da      	uxtb	r2, r3
 800684c:	8979      	ldrh	r1, [r7, #10]
 800684e:	2300      	movs	r3, #0
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fb26 	bl	8006ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f93f 	bl	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e07b      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d034      	beq.n	8006914 <HAL_I2C_Mem_Write+0x1c8>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d130      	bne.n	8006914 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	; 0x80
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f8d1 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e04d      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2bff      	cmp	r3, #255	; 0xff
 80068d4:	d90e      	bls.n	80068f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	22ff      	movs	r2, #255	; 0xff
 80068da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	8979      	ldrh	r1, [r7, #10]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fadb 	bl	8006ea8 <I2C_TransferConfig>
 80068f2:	e00f      	b.n	8006914 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006902:	b2da      	uxtb	r2, r3
 8006904:	8979      	ldrh	r1, [r7, #10]
 8006906:	2300      	movs	r3, #0
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 faca 	bl	8006ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d19e      	bne.n	800685c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f91e 	bl	8006b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e01a      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2220      	movs	r2, #32
 8006938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_I2C_Mem_Write+0x224>)
 8006946:	400b      	ands	r3, r1
 8006948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	fe00e800 	.word	0xfe00e800

08006974 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	4608      	mov	r0, r1
 800697e:	4611      	mov	r1, r2
 8006980:	461a      	mov	r2, r3
 8006982:	4603      	mov	r3, r0
 8006984:	817b      	strh	r3, [r7, #10]
 8006986:	460b      	mov	r3, r1
 8006988:	813b      	strh	r3, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	8979      	ldrh	r1, [r7, #10]
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <I2C_RequestMemoryWrite+0xa4>)
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fa83 	bl	8006ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f89c 	bl	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e02c      	b.n	8006a10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d105      	bne.n	80069c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069bc:	893b      	ldrh	r3, [r7, #8]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
 80069c6:	e015      	b.n	80069f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069c8:	893b      	ldrh	r3, [r7, #8]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	69b9      	ldr	r1, [r7, #24]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f882 	bl	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e012      	b.n	8006a10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f830 	bl	8006a64 <I2C_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	80002000 	.word	0x80002000

08006a1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d103      	bne.n	8006a3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d007      	beq.n	8006a58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	619a      	str	r2, [r3, #24]
  }
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a74:	e022      	b.n	8006abc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d01e      	beq.n	8006abc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7e:	f7fd f98f 	bl	8003da0 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d302      	bcc.n	8006a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d113      	bne.n	8006abc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	f043 0220 	orr.w	r2, r3, #32
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e00f      	b.n	8006adc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d0cd      	beq.n	8006a76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006af0:	e02c      	b.n	8006b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f8ea 	bl	8006cd0 <I2C_IsErrorOccurred>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e02a      	b.n	8006b5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d01e      	beq.n	8006b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd f947 	bl	8003da0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d113      	bne.n	8006b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	f043 0220 	orr.w	r2, r3, #32
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e007      	b.n	8006b5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d1cb      	bne.n	8006af2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b70:	e028      	b.n	8006bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f8aa 	bl	8006cd0 <I2C_IsErrorOccurred>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e026      	b.n	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b86:	f7fd f90b 	bl	8003da0 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d113      	bne.n	8006bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	f043 0220 	orr.w	r2, r3, #32
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e007      	b.n	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d1cf      	bne.n	8006b72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006be8:	e064      	b.n	8006cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f86e 	bl	8006cd0 <I2C_IsErrorOccurred>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e062      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d138      	bne.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d105      	bne.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e04e      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d107      	bne.n	8006c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
 8006c42:	e002      	b.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006c5e:	400b      	ands	r3, r1
 8006c60:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e022      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fd f88f 	bl	8003da0 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10f      	bne.n	8006cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e007      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d193      	bne.n	8006bea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	fe00e800 	.word	0xfe00e800

08006cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d075      	beq.n	8006de8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2210      	movs	r2, #16
 8006d02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d04:	e056      	b.n	8006db4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d052      	beq.n	8006db4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fd f847 	bl	8003da0 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <I2C_IsErrorOccurred+0x54>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d147      	bne.n	8006db4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d46:	d12e      	bne.n	8006da6 <I2C_IsErrorOccurred+0xd6>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d4e:	d02a      	beq.n	8006da6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d027      	beq.n	8006da6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d66:	f7fd f81b 	bl	8003da0 <HAL_GetTick>
 8006d6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d6c:	e01b      	b.n	8006da6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d6e:	f7fd f817 	bl	8003da0 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b19      	cmp	r3, #25
 8006d7a:	d914      	bls.n	8006da6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	f043 0220 	orr.w	r2, r3, #32
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d1dc      	bne.n	8006d6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d003      	beq.n	8006dca <I2C_IsErrorOccurred+0xfa>
 8006dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d09d      	beq.n	8006d06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f043 0304 	orr.w	r3, r3, #4
 8006de0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f043 0308 	orr.w	r3, r3, #8
 8006e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01c      	beq.n	8006e98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fddc 	bl	8006a1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <I2C_IsErrorOccurred+0x1d4>)
 8006e70:	400b      	ands	r3, r1
 8006e72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	fe00e800 	.word	0xfe00e800

08006ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	817b      	strh	r3, [r7, #10]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ec0:	7a7b      	ldrb	r3, [r7, #9]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	0d5b      	lsrs	r3, r3, #21
 8006ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <I2C_TransferConfig+0x60>)
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	43db      	mvns	r3, r3
 8006eec:	ea02 0103 	and.w	r1, r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	03ff63ff 	.word	0x03ff63ff

08006f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d138      	bne.n	8006f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e032      	b.n	8006f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2224      	movs	r2, #36	; 0x24
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6819      	ldr	r1, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d139      	bne.n	800702c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e033      	b.n	800702e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2224      	movs	r2, #36	; 0x24
 8006fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	e000      	b.n	800702e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800702c:	2302      	movs	r3, #2
  }
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <HAL_PWREx_GetVoltageRange+0x18>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007048:	4618      	mov	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40007000 	.word	0x40007000

08007058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007066:	d130      	bne.n	80070ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007074:	d038      	beq.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007076:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800707e:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007086:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2232      	movs	r2, #50	; 0x32
 800708c:	fb02 f303 	mul.w	r3, r2, r3
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	0c9b      	lsrs	r3, r3, #18
 8007098:	3301      	adds	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800709c:	e002      	b.n	80070a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070a4:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d102      	bne.n	80070b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f2      	bne.n	800709e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c4:	d110      	bne.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e00f      	b.n	80070ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d007      	beq.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070d8:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070e0:	4a05      	ldr	r2, [pc, #20]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40007000 	.word	0x40007000
 80070fc:	20000008 	.word	0x20000008
 8007100:	431bde83 	.word	0x431bde83

08007104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f000 bc02 	b.w	800791c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007118:	4b96      	ldr	r3, [pc, #600]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007122:	4b94      	ldr	r3, [pc, #592]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80e4 	beq.w	8007302 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_RCC_OscConfig+0x4c>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b0c      	cmp	r3, #12
 8007144:	f040 808b 	bne.w	800725e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b01      	cmp	r3, #1
 800714c:	f040 8087 	bne.w	800725e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007150:	4b88      	ldr	r3, [pc, #544]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_RCC_OscConfig+0x64>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e3d9      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	4b81      	ldr	r3, [pc, #516]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RCC_OscConfig+0x7e>
 8007178:	4b7e      	ldr	r3, [pc, #504]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007180:	e005      	b.n	800718e <HAL_RCC_OscConfig+0x8a>
 8007182:	4b7c      	ldr	r3, [pc, #496]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007188:	091b      	lsrs	r3, r3, #4
 800718a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800718e:	4293      	cmp	r3, r2
 8007190:	d223      	bcs.n	80071da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fe1e 	bl	8007dd8 <RCC_SetFlashLatencyFromMSIRange>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e3ba      	b.n	800791c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071a6:	4b73      	ldr	r3, [pc, #460]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a72      	ldr	r2, [pc, #456]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b70      	ldr	r3, [pc, #448]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	496d      	ldr	r1, [pc, #436]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071c4:	4b6b      	ldr	r3, [pc, #428]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	4968      	ldr	r1, [pc, #416]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	604b      	str	r3, [r1, #4]
 80071d8:	e025      	b.n	8007226 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071da:	4b66      	ldr	r3, [pc, #408]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a65      	ldr	r2, [pc, #404]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4b63      	ldr	r3, [pc, #396]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	4960      	ldr	r1, [pc, #384]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071f8:	4b5e      	ldr	r3, [pc, #376]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	495b      	ldr	r1, [pc, #364]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007208:	4313      	orrs	r3, r2
 800720a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fdde 	bl	8007dd8 <RCC_SetFlashLatencyFromMSIRange>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e37a      	b.n	800791c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007226:	f000 fcb5 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 800722a:	4602      	mov	r2, r0
 800722c:	4b51      	ldr	r3, [pc, #324]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	4950      	ldr	r1, [pc, #320]	; (8007378 <HAL_RCC_OscConfig+0x274>)
 8007238:	5ccb      	ldrb	r3, [r1, r3]
 800723a:	f003 031f 	and.w	r3, r3, #31
 800723e:	fa22 f303 	lsr.w	r3, r2, r3
 8007242:	4a4e      	ldr	r2, [pc, #312]	; (800737c <HAL_RCC_OscConfig+0x278>)
 8007244:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007246:	4b4e      	ldr	r3, [pc, #312]	; (8007380 <HAL_RCC_OscConfig+0x27c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7fc fb6a 	bl	8003924 <HAL_InitTick>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d052      	beq.n	8007300 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	e35e      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d032      	beq.n	80072cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007266:	4b43      	ldr	r3, [pc, #268]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a42      	ldr	r2, [pc, #264]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007272:	f7fc fd95 	bl	8003da0 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800727a:	f7fc fd91 	bl	8003da0 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e347      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800728c:	4b39      	ldr	r3, [pc, #228]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007298:	4b36      	ldr	r3, [pc, #216]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a35      	ldr	r2, [pc, #212]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800729e:	f043 0308 	orr.w	r3, r3, #8
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	4b33      	ldr	r3, [pc, #204]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	4930      	ldr	r1, [pc, #192]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	492b      	ldr	r1, [pc, #172]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
 80072ca:	e01a      	b.n	8007302 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80072cc:	4b29      	ldr	r3, [pc, #164]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a28      	ldr	r2, [pc, #160]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072d8:	f7fc fd62 	bl	8003da0 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072e0:	f7fc fd5e 	bl	8003da0 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e314      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072f2:	4b20      	ldr	r3, [pc, #128]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x1dc>
 80072fe:	e000      	b.n	8007302 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d073      	beq.n	80073f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b08      	cmp	r3, #8
 8007312:	d005      	beq.n	8007320 <HAL_RCC_OscConfig+0x21c>
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b0c      	cmp	r3, #12
 8007318:	d10e      	bne.n	8007338 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d10b      	bne.n	8007338 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d063      	beq.n	80073f4 <HAL_RCC_OscConfig+0x2f0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d15f      	bne.n	80073f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e2f1      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d106      	bne.n	8007350 <HAL_RCC_OscConfig+0x24c>
 8007342:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e025      	b.n	800739c <HAL_RCC_OscConfig+0x298>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007358:	d114      	bne.n	8007384 <HAL_RCC_OscConfig+0x280>
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a05      	ldr	r2, [pc, #20]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b03      	ldr	r3, [pc, #12]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a02      	ldr	r2, [pc, #8]	; (8007374 <HAL_RCC_OscConfig+0x270>)
 800736c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e013      	b.n	800739c <HAL_RCC_OscConfig+0x298>
 8007374:	40021000 	.word	0x40021000
 8007378:	0800fe74 	.word	0x0800fe74
 800737c:	20000008 	.word	0x20000008
 8007380:	2000000c 	.word	0x2000000c
 8007384:	4ba0      	ldr	r3, [pc, #640]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a9f      	ldr	r2, [pc, #636]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800738a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4b9d      	ldr	r3, [pc, #628]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a9c      	ldr	r2, [pc, #624]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d013      	beq.n	80073cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fc fcfc 	bl	8003da0 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073ac:	f7fc fcf8 	bl	8003da0 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e2ae      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073be:	4b92      	ldr	r3, [pc, #584]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x2a8>
 80073ca:	e014      	b.n	80073f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fc fce8 	bl	8003da0 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d4:	f7fc fce4 	bl	8003da0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	; 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e29a      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073e6:	4b88      	ldr	r3, [pc, #544]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x2d0>
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d060      	beq.n	80074c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d005      	beq.n	8007414 <HAL_RCC_OscConfig+0x310>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b0c      	cmp	r3, #12
 800740c:	d119      	bne.n	8007442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d116      	bne.n	8007442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007414:	4b7c      	ldr	r3, [pc, #496]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_RCC_OscConfig+0x328>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e277      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742c:	4b76      	ldr	r3, [pc, #472]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	061b      	lsls	r3, r3, #24
 800743a:	4973      	ldr	r1, [pc, #460]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800743c:	4313      	orrs	r3, r2
 800743e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007440:	e040      	b.n	80074c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d023      	beq.n	8007492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800744a:	4b6f      	ldr	r3, [pc, #444]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a6e      	ldr	r2, [pc, #440]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007456:	f7fc fca3 	bl	8003da0 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745e:	f7fc fc9f 	bl	8003da0 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e255      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007470:	4b65      	ldr	r3, [pc, #404]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747c:	4b62      	ldr	r3, [pc, #392]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	061b      	lsls	r3, r3, #24
 800748a:	495f      	ldr	r1, [pc, #380]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800748c:	4313      	orrs	r3, r2
 800748e:	604b      	str	r3, [r1, #4]
 8007490:	e018      	b.n	80074c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007492:	4b5d      	ldr	r3, [pc, #372]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a5c      	ldr	r2, [pc, #368]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800749c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fc fc7f 	bl	8003da0 <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a6:	f7fc fc7b 	bl	8003da0 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e231      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074b8:	4b53      	ldr	r3, [pc, #332]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d03c      	beq.n	800754a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01c      	beq.n	8007512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80074da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074de:	4a4a      	ldr	r2, [pc, #296]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e8:	f7fc fc5a 	bl	8003da0 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074f0:	f7fc fc56 	bl	8003da0 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e20c      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007502:	4b41      	ldr	r3, [pc, #260]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0ef      	beq.n	80074f0 <HAL_RCC_OscConfig+0x3ec>
 8007510:	e01b      	b.n	800754a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007512:	4b3d      	ldr	r3, [pc, #244]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	4a3b      	ldr	r2, [pc, #236]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007522:	f7fc fc3d 	bl	8003da0 <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800752a:	f7fc fc39 	bl	8003da0 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e1ef      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800753e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1ef      	bne.n	800752a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80a6 	beq.w	80076a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007558:	2300      	movs	r3, #0
 800755a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800756a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756c:	4a26      	ldr	r2, [pc, #152]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 800756e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007572:	6593      	str	r3, [r2, #88]	; 0x58
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 8007576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007580:	2301      	movs	r3, #1
 8007582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007584:	4b21      	ldr	r3, [pc, #132]	; (800760c <HAL_RCC_OscConfig+0x508>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d118      	bne.n	80075c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007590:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_RCC_OscConfig+0x508>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_RCC_OscConfig+0x508>)
 8007596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759c:	f7fc fc00 	bl	8003da0 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a4:	f7fc fbfc 	bl	8003da0 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e1b2      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075b6:	4b15      	ldr	r3, [pc, #84]	; (800760c <HAL_RCC_OscConfig+0x508>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d108      	bne.n	80075dc <HAL_RCC_OscConfig+0x4d8>
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075da:	e029      	b.n	8007630 <HAL_RCC_OscConfig+0x52c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d115      	bne.n	8007610 <HAL_RCC_OscConfig+0x50c>
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075ec:	f043 0304 	orr.w	r3, r3, #4
 80075f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fa:	4a03      	ldr	r2, [pc, #12]	; (8007608 <HAL_RCC_OscConfig+0x504>)
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007604:	e014      	b.n	8007630 <HAL_RCC_OscConfig+0x52c>
 8007606:	bf00      	nop
 8007608:	40021000 	.word	0x40021000
 800760c:	40007000 	.word	0x40007000
 8007610:	4b9a      	ldr	r3, [pc, #616]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007616:	4a99      	ldr	r2, [pc, #612]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007620:	4b96      	ldr	r3, [pc, #600]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007626:	4a95      	ldr	r2, [pc, #596]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007628:	f023 0304 	bic.w	r3, r3, #4
 800762c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d016      	beq.n	8007666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007638:	f7fc fbb2 	bl	8003da0 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763e:	e00a      	b.n	8007656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007640:	f7fc fbae 	bl	8003da0 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f241 3288 	movw	r2, #5000	; 0x1388
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e162      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007656:	4b89      	ldr	r3, [pc, #548]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0ed      	beq.n	8007640 <HAL_RCC_OscConfig+0x53c>
 8007664:	e015      	b.n	8007692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007666:	f7fc fb9b 	bl	8003da0 <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800766c:	e00a      	b.n	8007684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fc fb97 	bl	8003da0 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f241 3288 	movw	r2, #5000	; 0x1388
 800767c:	4293      	cmp	r3, r2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e14b      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007684:	4b7d      	ldr	r3, [pc, #500]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1ed      	bne.n	800766e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d105      	bne.n	80076a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007698:	4b78      	ldr	r3, [pc, #480]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800769a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769c:	4a77      	ldr	r2, [pc, #476]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800769e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d03c      	beq.n	800772a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01c      	beq.n	80076f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076b8:	4b70      	ldr	r3, [pc, #448]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80076ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076be:	4a6f      	ldr	r2, [pc, #444]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c8:	f7fc fb6a 	bl	8003da0 <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076d0:	f7fc fb66 	bl	8003da0 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e11c      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076e2:	4b66      	ldr	r3, [pc, #408]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80076e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0ef      	beq.n	80076d0 <HAL_RCC_OscConfig+0x5cc>
 80076f0:	e01b      	b.n	800772a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076f2:	4b62      	ldr	r3, [pc, #392]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80076f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f8:	4a60      	ldr	r2, [pc, #384]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007702:	f7fc fb4d 	bl	8003da0 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800770a:	f7fc fb49 	bl	8003da0 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e0ff      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800771c:	4b57      	ldr	r3, [pc, #348]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800771e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1ef      	bne.n	800770a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80f3 	beq.w	800791a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	2b02      	cmp	r3, #2
 800773a:	f040 80c9 	bne.w	80078d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800773e:	4b4f      	ldr	r3, [pc, #316]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f003 0203 	and.w	r2, r3, #3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	429a      	cmp	r2, r3
 8007750:	d12c      	bne.n	80077ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	3b01      	subs	r3, #1
 800775e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007760:	429a      	cmp	r2, r3
 8007762:	d123      	bne.n	80077ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d11b      	bne.n	80077ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d113      	bne.n	80077ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	3b01      	subs	r3, #1
 8007792:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d109      	bne.n	80077ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	3b01      	subs	r3, #1
 80077a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d06b      	beq.n	8007884 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b0c      	cmp	r3, #12
 80077b0:	d062      	beq.n	8007878 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80077b2:	4b32      	ldr	r3, [pc, #200]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e0ac      	b.n	800791c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2d      	ldr	r2, [pc, #180]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80077c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077ce:	f7fc fae7 	bl	8003da0 <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d6:	f7fc fae3 	bl	8003da0 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e099      	b.n	800791c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077e8:	4b24      	ldr	r3, [pc, #144]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077f4:	4b21      	ldr	r3, [pc, #132]	; (800787c <HAL_RCC_OscConfig+0x778>)
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	4b21      	ldr	r3, [pc, #132]	; (8007880 <HAL_RCC_OscConfig+0x77c>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007804:	3a01      	subs	r2, #1
 8007806:	0112      	lsls	r2, r2, #4
 8007808:	4311      	orrs	r1, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800780e:	0212      	lsls	r2, r2, #8
 8007810:	4311      	orrs	r1, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007816:	0852      	lsrs	r2, r2, #1
 8007818:	3a01      	subs	r2, #1
 800781a:	0552      	lsls	r2, r2, #21
 800781c:	4311      	orrs	r1, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007822:	0852      	lsrs	r2, r2, #1
 8007824:	3a01      	subs	r2, #1
 8007826:	0652      	lsls	r2, r2, #25
 8007828:	4311      	orrs	r1, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800782e:	06d2      	lsls	r2, r2, #27
 8007830:	430a      	orrs	r2, r1
 8007832:	4912      	ldr	r1, [pc, #72]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007834:	4313      	orrs	r3, r2
 8007836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0f      	ldr	r2, [pc, #60]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800783e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007844:	4b0d      	ldr	r3, [pc, #52]	; (800787c <HAL_RCC_OscConfig+0x778>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4a0c      	ldr	r2, [pc, #48]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800784a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800784e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007850:	f7fc faa6 	bl	8003da0 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007858:	f7fc faa2 	bl	8003da0 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e058      	b.n	800791c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <HAL_RCC_OscConfig+0x778>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007876:	e050      	b.n	800791a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e04f      	b.n	800791c <HAL_RCC_OscConfig+0x818>
 800787c:	40021000 	.word	0x40021000
 8007880:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007884:	4b27      	ldr	r3, [pc, #156]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d144      	bne.n	800791a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007890:	4b24      	ldr	r3, [pc, #144]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a23      	ldr	r2, [pc, #140]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 8007896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800789a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800789c:	4b21      	ldr	r3, [pc, #132]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4a20      	ldr	r2, [pc, #128]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 80078a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078a8:	f7fc fa7a 	bl	8003da0 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fc fa76 	bl	8003da0 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e02c      	b.n	800791c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c2:	4b18      	ldr	r3, [pc, #96]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f0      	beq.n	80078b0 <HAL_RCC_OscConfig+0x7ac>
 80078ce:	e024      	b.n	800791a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b0c      	cmp	r3, #12
 80078d4:	d01f      	beq.n	8007916 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d6:	4b13      	ldr	r3, [pc, #76]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 80078dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e2:	f7fc fa5d 	bl	8003da0 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ea:	f7fc fa59 	bl	8003da0 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e00f      	b.n	800791c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	4905      	ldr	r1, [pc, #20]	; (8007924 <HAL_RCC_OscConfig+0x820>)
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCC_OscConfig+0x824>)
 8007910:	4013      	ands	r3, r2
 8007912:	60cb      	str	r3, [r1, #12]
 8007914:	e001      	b.n	800791a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40021000 	.word	0x40021000
 8007928:	feeefffc 	.word	0xfeeefffc

0800792c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0e7      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007940:	4b75      	ldr	r3, [pc, #468]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d910      	bls.n	8007970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794e:	4b72      	ldr	r3, [pc, #456]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 0207 	bic.w	r2, r3, #7
 8007956:	4970      	ldr	r1, [pc, #448]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4313      	orrs	r3, r2
 800795c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b6e      	ldr	r3, [pc, #440]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d001      	beq.n	8007970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0cf      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	4b66      	ldr	r3, [pc, #408]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007988:	429a      	cmp	r2, r3
 800798a:	d908      	bls.n	800799e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800798c:	4b63      	ldr	r3, [pc, #396]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4960      	ldr	r1, [pc, #384]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 800799a:	4313      	orrs	r3, r2
 800799c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d04c      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d107      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079b2:	4b5a      	ldr	r3, [pc, #360]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d121      	bne.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e0a6      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d107      	bne.n	80079da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079ca:	4b54      	ldr	r3, [pc, #336]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d115      	bne.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e09a      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80079e2:	4b4e      	ldr	r3, [pc, #312]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e08e      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079f2:	4b4a      	ldr	r3, [pc, #296]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e086      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a02:	4b46      	ldr	r3, [pc, #280]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f023 0203 	bic.w	r2, r3, #3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4943      	ldr	r1, [pc, #268]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a14:	f7fc f9c4 	bl	8003da0 <HAL_GetTick>
 8007a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a1a:	e00a      	b.n	8007a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a1c:	f7fc f9c0 	bl	8003da0 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e06e      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a32:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 020c 	and.w	r2, r3, #12
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d1eb      	bne.n	8007a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d010      	beq.n	8007a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	4b31      	ldr	r3, [pc, #196]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d208      	bcs.n	8007a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a60:	4b2e      	ldr	r3, [pc, #184]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	492b      	ldr	r1, [pc, #172]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a72:	4b29      	ldr	r3, [pc, #164]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d210      	bcs.n	8007aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a80:	4b25      	ldr	r3, [pc, #148]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f023 0207 	bic.w	r2, r3, #7
 8007a88:	4923      	ldr	r1, [pc, #140]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a90:	4b21      	ldr	r3, [pc, #132]	; (8007b18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d001      	beq.n	8007aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e036      	b.n	8007b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aae:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	4918      	ldr	r1, [pc, #96]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007acc:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4910      	ldr	r1, [pc, #64]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ae0:	f000 f858 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <HAL_RCC_ClockConfig+0x1f0>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	490b      	ldr	r1, [pc, #44]	; (8007b20 <HAL_RCC_ClockConfig+0x1f4>)
 8007af2:	5ccb      	ldrb	r3, [r1, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <HAL_RCC_ClockConfig+0x1f8>)
 8007afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <HAL_RCC_ClockConfig+0x1fc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb ff0d 	bl	8003924 <HAL_InitTick>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40022000 	.word	0x40022000
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	0800fe74 	.word	0x0800fe74
 8007b24:	20000008 	.word	0x20000008
 8007b28:	2000000c 	.word	0x2000000c

08007b2c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <HAL_RCC_MCOConfig+0x64>)
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <HAL_RCC_MCOConfig+0x64>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <HAL_RCC_MCOConfig+0x64>)
 8007b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b56:	2302      	movs	r3, #2
 8007b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007b62:	2300      	movs	r3, #0
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007b66:	f107 0314 	add.w	r3, r7, #20
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b70:	f7fe f9f0 	bl	8005f54 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <HAL_RCC_MCOConfig+0x64>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	430b      	orrs	r3, r1
 8007b82:	4903      	ldr	r1, [pc, #12]	; (8007b90 <HAL_RCC_MCOConfig+0x64>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	608b      	str	r3, [r1, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	3728      	adds	r7, #40	; 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40021000 	.word	0x40021000

08007b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b089      	sub	sp, #36	; 0x24
 8007b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba2:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bac:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d121      	bne.n	8007c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d11e      	bne.n	8007c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007bc8:	4b34      	ldr	r3, [pc, #208]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007bd4:	4b31      	ldr	r3, [pc, #196]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	e005      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007be4:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007bf0:	4a2b      	ldr	r2, [pc, #172]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10d      	bne.n	8007c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c04:	e00a      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c0e:	61bb      	str	r3, [r7, #24]
 8007c10:	e004      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d101      	bne.n	8007c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c18:	4b23      	ldr	r3, [pc, #140]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b0c      	cmp	r3, #12
 8007c20:	d134      	bne.n	8007c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c22:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d003      	beq.n	8007c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d003      	beq.n	8007c40 <HAL_RCC_GetSysClockFreq+0xac>
 8007c38:	e005      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c3c:	617b      	str	r3, [r7, #20]
      break;
 8007c3e:	e005      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c42:	617b      	str	r3, [r7, #20]
      break;
 8007c44:	e002      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	617b      	str	r3, [r7, #20]
      break;
 8007c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c4c:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	3301      	adds	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007c5a:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	0a1b      	lsrs	r3, r3, #8
 8007c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	fb03 f202 	mul.w	r2, r3, r2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	0e5b      	lsrs	r3, r3, #25
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3724      	adds	r7, #36	; 0x24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	0800fe8c 	.word	0x0800fe8c
 8007ca4:	00f42400 	.word	0x00f42400
 8007ca8:	007a1200 	.word	0x007a1200

08007cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cb0:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20000008 	.word	0x20000008

08007cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cc8:	f7ff fff0 	bl	8007cac <HAL_RCC_GetHCLKFreq>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cda:	5ccb      	ldrb	r3, [r1, r3]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	0800fe84 	.word	0x0800fe84

08007cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cf4:	f7ff ffda 	bl	8007cac <HAL_RCC_GetHCLKFreq>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0adb      	lsrs	r3, r3, #11
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d06:	5ccb      	ldrb	r3, [r1, r3]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40021000 	.word	0x40021000
 8007d18:	0800fe84 	.word	0x0800fe84

08007d1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	220f      	movs	r2, #15
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007d2c:	4b12      	ldr	r3, [pc, #72]	; (8007d78 <HAL_RCC_GetClockConfig+0x5c>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0203 	and.w	r2, r3, #3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <HAL_RCC_GetClockConfig+0x5c>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007d44:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <HAL_RCC_GetClockConfig+0x5c>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007d50:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_RCC_GetClockConfig+0x5c>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <HAL_RCC_GetClockConfig+0x60>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0207 	and.w	r2, r3, #7
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	40022000 	.word	0x40022000

08007d80 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_EnableCSS+0x1c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a04      	ldr	r2, [pc, #16]	; (8007d9c <HAL_RCC_EnableCSS+0x1c>)
 8007d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d8e:	6013      	str	r3, [r2, #0]
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40021000 	.word	0x40021000

08007da0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db0:	d105      	bne.n	8007dbe <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007db2:	f000 f809 	bl	8007dc8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007db6:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dbc:	621a      	str	r2, [r3, #32]
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007de4:	4b2a      	ldr	r3, [pc, #168]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007df0:	f7ff f924 	bl	800703c <HAL_PWREx_GetVoltageRange>
 8007df4:	6178      	str	r0, [r7, #20]
 8007df6:	e014      	b.n	8007e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007df8:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfc:	4a24      	ldr	r2, [pc, #144]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e02:	6593      	str	r3, [r2, #88]	; 0x58
 8007e04:	4b22      	ldr	r3, [pc, #136]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e10:	f7ff f914 	bl	800703c <HAL_PWREx_GetVoltageRange>
 8007e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e16:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	4a1d      	ldr	r2, [pc, #116]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e28:	d10b      	bne.n	8007e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b80      	cmp	r3, #128	; 0x80
 8007e2e:	d919      	bls.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2ba0      	cmp	r3, #160	; 0xa0
 8007e34:	d902      	bls.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e36:	2302      	movs	r3, #2
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	e013      	b.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	e010      	b.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d902      	bls.n	8007e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e48:	2303      	movs	r3, #3
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	e00a      	b.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b80      	cmp	r3, #128	; 0x80
 8007e52:	d102      	bne.n	8007e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e54:	2302      	movs	r3, #2
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	e004      	b.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b70      	cmp	r3, #112	; 0x70
 8007e5e:	d101      	bne.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e60:	2301      	movs	r3, #1
 8007e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f023 0207 	bic.w	r2, r3, #7
 8007e6c:	4909      	ldr	r1, [pc, #36]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d001      	beq.n	8007e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40021000 	.word	0x40021000
 8007e94:	40022000 	.word	0x40022000

08007e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d031      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ebc:	d01a      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ec2:	d814      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ecc:	d10f      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007ece:	4b5d      	ldr	r3, [pc, #372]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	4a5c      	ldr	r2, [pc, #368]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007eda:	e00c      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f9ce 	bl	8008284 <RCCEx_PLLSAI1_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007eec:	e003      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef6:	7cfb      	ldrb	r3, [r7, #19]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efc:	4b51      	ldr	r3, [pc, #324]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	494e      	ldr	r1, [pc, #312]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f12:	e001      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	7cfb      	ldrb	r3, [r7, #19]
 8007f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 809e 	beq.w	8008062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f2a:	4b46      	ldr	r3, [pc, #280]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f40:	4b40      	ldr	r3, [pc, #256]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f44:	4a3f      	ldr	r2, [pc, #252]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4c:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f5c:	4b3a      	ldr	r3, [pc, #232]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a39      	ldr	r2, [pc, #228]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f68:	f7fb ff1a 	bl	8003da0 <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f6e:	e009      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f70:	f7fb ff16 	bl	8003da0 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d902      	bls.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	74fb      	strb	r3, [r7, #19]
        break;
 8007f82:	e005      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f84:	4b30      	ldr	r3, [pc, #192]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0ef      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007f90:	7cfb      	ldrb	r3, [r7, #19]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d15a      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f96:	4b2b      	ldr	r3, [pc, #172]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01e      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d019      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fb2:	4b24      	ldr	r3, [pc, #144]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fce:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fde:	4a19      	ldr	r2, [pc, #100]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d016      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff0:	f7fb fed6 	bl	8003da0 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff6:	e00b      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff8:	f7fb fed2 	bl	8003da0 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	4293      	cmp	r3, r2
 8008008:	d902      	bls.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	74fb      	strb	r3, [r7, #19]
            break;
 800800e:	e006      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0ec      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800801e:	7cfb      	ldrb	r3, [r7, #19]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008032:	4904      	ldr	r1, [pc, #16]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800803a:	e009      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800803c:	7cfb      	ldrb	r3, [r7, #19]
 800803e:	74bb      	strb	r3, [r7, #18]
 8008040:	e006      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000
 8008048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804c:	7cfb      	ldrb	r3, [r7, #19]
 800804e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008050:	7c7b      	ldrb	r3, [r7, #17]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d105      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008056:	4b8a      	ldr	r3, [pc, #552]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	4a89      	ldr	r2, [pc, #548]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800805c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800806e:	4b84      	ldr	r3, [pc, #528]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008074:	f023 0203 	bic.w	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	4980      	ldr	r1, [pc, #512]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008090:	4b7b      	ldr	r3, [pc, #492]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008096:	f023 020c 	bic.w	r2, r3, #12
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	4978      	ldr	r1, [pc, #480]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080b2:	4b73      	ldr	r3, [pc, #460]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	496f      	ldr	r1, [pc, #444]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080d4:	4b6a      	ldr	r3, [pc, #424]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	4967      	ldr	r1, [pc, #412]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080f6:	4b62      	ldr	r3, [pc, #392]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80080f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	495e      	ldr	r1, [pc, #376]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008118:	4b59      	ldr	r3, [pc, #356]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4956      	ldr	r1, [pc, #344]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800813a:	4b51      	ldr	r3, [pc, #324]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	494d      	ldr	r1, [pc, #308]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d028      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800815c:	4b48      	ldr	r3, [pc, #288]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	4945      	ldr	r1, [pc, #276]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800817a:	d106      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800817c:	4b40      	ldr	r3, [pc, #256]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4a3f      	ldr	r2, [pc, #252]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008186:	60d3      	str	r3, [r2, #12]
 8008188:	e011      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008192:	d10c      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	2101      	movs	r1, #1
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f872 	bl	8008284 <RCCEx_PLLSAI1_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80081aa:	7cfb      	ldrb	r3, [r7, #19]
 80081ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d028      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081ba:	4b31      	ldr	r3, [pc, #196]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c8:	492d      	ldr	r1, [pc, #180]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d8:	d106      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081da:	4b29      	ldr	r3, [pc, #164]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	4a28      	ldr	r2, [pc, #160]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081e4:	60d3      	str	r3, [r2, #12]
 80081e6:	e011      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081f0:	d10c      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f843 	bl	8008284 <RCCEx_PLLSAI1_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008202:	7cfb      	ldrb	r3, [r7, #19]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008208:	7cfb      	ldrb	r3, [r7, #19]
 800820a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01c      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008218:	4b19      	ldr	r3, [pc, #100]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008226:	4916      	ldr	r1, [pc, #88]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008236:	d10c      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	2102      	movs	r1, #2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f820 	bl	8008284 <RCCEx_PLLSAI1_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008248:	7cfb      	ldrb	r3, [r7, #19]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800824e:	7cfb      	ldrb	r3, [r7, #19]
 8008250:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800825e:	4b08      	ldr	r3, [pc, #32]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008264:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826c:	4904      	ldr	r1, [pc, #16]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008274:	7cbb      	ldrb	r3, [r7, #18]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40021000 	.word	0x40021000

08008284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008292:	4b74      	ldr	r3, [pc, #464]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d018      	beq.n	80082d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800829e:	4b71      	ldr	r3, [pc, #452]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f003 0203 	and.w	r2, r3, #3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d10d      	bne.n	80082ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
       ||
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80082b6:	4b6b      	ldr	r3, [pc, #428]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	091b      	lsrs	r3, r3, #4
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
       ||
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d047      	beq.n	800835a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	73fb      	strb	r3, [r7, #15]
 80082ce:	e044      	b.n	800835a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d018      	beq.n	800830a <RCCEx_PLLSAI1_Config+0x86>
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d825      	bhi.n	8008328 <RCCEx_PLLSAI1_Config+0xa4>
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d002      	beq.n	80082e6 <RCCEx_PLLSAI1_Config+0x62>
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d009      	beq.n	80082f8 <RCCEx_PLLSAI1_Config+0x74>
 80082e4:	e020      	b.n	8008328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082e6:	4b5f      	ldr	r3, [pc, #380]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d11d      	bne.n	800832e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082f6:	e01a      	b.n	800832e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082f8:	4b5a      	ldr	r3, [pc, #360]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008300:	2b00      	cmp	r3, #0
 8008302:	d116      	bne.n	8008332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008308:	e013      	b.n	8008332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800830a:	4b56      	ldr	r3, [pc, #344]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008316:	4b53      	ldr	r3, [pc, #332]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008326:	e006      	b.n	8008336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
      break;
 800832c:	e004      	b.n	8008338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800832e:	bf00      	nop
 8008330:	e002      	b.n	8008338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008332:	bf00      	nop
 8008334:	e000      	b.n	8008338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008336:	bf00      	nop
    }

    if(status == HAL_OK)
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10d      	bne.n	800835a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800833e:	4b49      	ldr	r3, [pc, #292]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6819      	ldr	r1, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	3b01      	subs	r3, #1
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	430b      	orrs	r3, r1
 8008354:	4943      	ldr	r1, [pc, #268]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008356:	4313      	orrs	r3, r2
 8008358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d17c      	bne.n	800845a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008360:	4b40      	ldr	r3, [pc, #256]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a3f      	ldr	r2, [pc, #252]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800836a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836c:	f7fb fd18 	bl	8003da0 <HAL_GetTick>
 8008370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008372:	e009      	b.n	8008388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008374:	f7fb fd14 	bl	8003da0 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d902      	bls.n	8008388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	73fb      	strb	r3, [r7, #15]
        break;
 8008386:	e005      	b.n	8008394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008388:	4b36      	ldr	r3, [pc, #216]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1ef      	bne.n	8008374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d15f      	bne.n	800845a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d110      	bne.n	80083c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083a0:	4b30      	ldr	r3, [pc, #192]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80083a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6892      	ldr	r2, [r2, #8]
 80083b0:	0211      	lsls	r1, r2, #8
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68d2      	ldr	r2, [r2, #12]
 80083b6:	06d2      	lsls	r2, r2, #27
 80083b8:	430a      	orrs	r2, r1
 80083ba:	492a      	ldr	r1, [pc, #168]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	610b      	str	r3, [r1, #16]
 80083c0:	e027      	b.n	8008412 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d112      	bne.n	80083ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083c8:	4b26      	ldr	r3, [pc, #152]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80083d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6892      	ldr	r2, [r2, #8]
 80083d8:	0211      	lsls	r1, r2, #8
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6912      	ldr	r2, [r2, #16]
 80083de:	0852      	lsrs	r2, r2, #1
 80083e0:	3a01      	subs	r2, #1
 80083e2:	0552      	lsls	r2, r2, #21
 80083e4:	430a      	orrs	r2, r1
 80083e6:	491f      	ldr	r1, [pc, #124]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	610b      	str	r3, [r1, #16]
 80083ec:	e011      	b.n	8008412 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083ee:	4b1d      	ldr	r3, [pc, #116]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80083f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6892      	ldr	r2, [r2, #8]
 80083fe:	0211      	lsls	r1, r2, #8
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6952      	ldr	r2, [r2, #20]
 8008404:	0852      	lsrs	r2, r2, #1
 8008406:	3a01      	subs	r2, #1
 8008408:	0652      	lsls	r2, r2, #25
 800840a:	430a      	orrs	r2, r1
 800840c:	4915      	ldr	r1, [pc, #84]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800840e:	4313      	orrs	r3, r2
 8008410:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008412:	4b14      	ldr	r3, [pc, #80]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800841c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841e:	f7fb fcbf 	bl	8003da0 <HAL_GetTick>
 8008422:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008424:	e009      	b.n	800843a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008426:	f7fb fcbb 	bl	8003da0 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d902      	bls.n	800843a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	73fb      	strb	r3, [r7, #15]
          break;
 8008438:	e005      	b.n	8008446 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ef      	beq.n	8008426 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	4903      	ldr	r1, [pc, #12]	; (8008464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008456:	4313      	orrs	r3, r2
 8008458:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40021000 	.word	0x40021000

08008468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e049      	b.n	800850e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f841 	bl	8008516 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f000 f9dc 	bl	8008864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	d001      	beq.n	8008544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e03b      	b.n	80085bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d009      	beq.n	800857a <HAL_TIM_Base_Start_IT+0x4e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856e:	d004      	beq.n	800857a <HAL_TIM_Base_Start_IT+0x4e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a15      	ldr	r2, [pc, #84]	; (80085cc <HAL_TIM_Base_Start_IT+0xa0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d115      	bne.n	80085a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8008582:	4013      	ands	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b06      	cmp	r3, #6
 800858a:	d015      	beq.n	80085b8 <HAL_TIM_Base_Start_IT+0x8c>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008592:	d011      	beq.n	80085b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a4:	e008      	b.n	80085b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e000      	b.n	80085ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	40012c00 	.word	0x40012c00
 80085cc:	40014000 	.word	0x40014000
 80085d0:	00010007 	.word	0x00010007

080085d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d122      	bne.n	8008630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d11b      	bne.n	8008630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0202 	mvn.w	r2, #2
 8008600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f905 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 800861c:	e005      	b.n	800862a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f8f7 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f908 	bl	800883a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b04      	cmp	r3, #4
 800863c:	d122      	bne.n	8008684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	d11b      	bne.n	8008684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0204 	mvn.w	r2, #4
 8008654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8db 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 8008670:	e005      	b.n	800867e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8cd 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8de 	bl	800883a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b08      	cmp	r3, #8
 8008690:	d122      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b08      	cmp	r3, #8
 800869e:	d11b      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0208 	mvn.w	r2, #8
 80086a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f8b1 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 80086c4:	e005      	b.n	80086d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f8a3 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f8b4 	bl	800883a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0310 	and.w	r3, r3, #16
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d122      	bne.n	800872c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d11b      	bne.n	800872c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f06f 0210 	mvn.w	r2, #16
 80086fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2208      	movs	r2, #8
 8008702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f887 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 8008718:	e005      	b.n	8008726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f879 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f88a 	bl	800883a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b01      	cmp	r3, #1
 8008738:	d10e      	bne.n	8008758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b01      	cmp	r3, #1
 8008746:	d107      	bne.n	8008758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0201 	mvn.w	r2, #1
 8008750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fa fc7c 	bl	8003050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d10e      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d107      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800877c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8de 	bl	8008940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008792:	d10e      	bne.n	80087b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d107      	bne.n	80087b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8d1 	bl	8008954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d10e      	bne.n	80087de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d107      	bne.n	80087de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f838 	bl	800884e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d10e      	bne.n	800880a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d107      	bne.n	800880a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f06f 0220 	mvn.w	r2, #32
 8008802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f891 	bl	800892c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a2a      	ldr	r2, [pc, #168]	; (8008920 <TIM_Base_SetConfig+0xbc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_Base_SetConfig+0x20>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008882:	d108      	bne.n	8008896 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a21      	ldr	r2, [pc, #132]	; (8008920 <TIM_Base_SetConfig+0xbc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00b      	beq.n	80088b6 <TIM_Base_SetConfig+0x52>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a4:	d007      	beq.n	80088b6 <TIM_Base_SetConfig+0x52>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <TIM_Base_SetConfig+0xc0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_Base_SetConfig+0x52>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <TIM_Base_SetConfig+0xc4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d108      	bne.n	80088c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <TIM_Base_SetConfig+0xbc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_Base_SetConfig+0xa0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a0b      	ldr	r2, [pc, #44]	; (8008924 <TIM_Base_SetConfig+0xc0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_Base_SetConfig+0xa0>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a0a      	ldr	r2, [pc, #40]	; (8008928 <TIM_Base_SetConfig+0xc4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d103      	bne.n	800890c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	615a      	str	r2, [r3, #20]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40012c00 	.word	0x40012c00
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400

0800892c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e040      	b.n	80089fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fa ff72 	bl	8003874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2224      	movs	r2, #36	; 0x24
 8008994:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f8c0 	bl	8008b2c <UART_SetConfig>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e022      	b.n	80089fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fae0 	bl	8008f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0201 	orr.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb67 	bl	80090c8 <UART_CheckIdleState>
 80089fa:	4603      	mov	r3, r0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	f040 8082 	bne.w	8008b22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_UART_Transmit+0x26>
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e07a      	b.n	8008b24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_UART_Transmit+0x38>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e073      	b.n	8008b24 <HAL_UART_Transmit+0x120>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2221      	movs	r2, #33	; 0x21
 8008a50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a52:	f7fb f9a5 	bl	8003da0 <HAL_GetTick>
 8008a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	88fa      	ldrh	r2, [r7, #6]
 8008a5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a70:	d108      	bne.n	8008a84 <HAL_UART_Transmit+0x80>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e003      	b.n	8008a8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008a94:	e02d      	b.n	8008af2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2180      	movs	r1, #128	; 0x80
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fb5a 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e039      	b.n	8008b24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	3302      	adds	r3, #2
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e008      	b.n	8008ae0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	781a      	ldrb	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	3301      	adds	r3, #1
 8008ade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1cb      	bne.n	8008a96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2140      	movs	r1, #64	; 0x40
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fb26 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e005      	b.n	8008b24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008b22:	2302      	movs	r3, #2
  }
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b08a      	sub	sp, #40	; 0x28
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4bb4      	ldr	r3, [pc, #720]	; (8008e2c <UART_SetConfig+0x300>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b64:	430b      	orrs	r3, r1
 8008b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4aa9      	ldr	r2, [pc, #676]	; (8008e30 <UART_SetConfig+0x304>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d004      	beq.n	8008b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b94:	4313      	orrs	r3, r2
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4aa0      	ldr	r2, [pc, #640]	; (8008e34 <UART_SetConfig+0x308>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d126      	bne.n	8008c04 <UART_SetConfig+0xd8>
 8008bb6:	4ba0      	ldr	r3, [pc, #640]	; (8008e38 <UART_SetConfig+0x30c>)
 8008bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d81b      	bhi.n	8008bfc <UART_SetConfig+0xd0>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <UART_SetConfig+0xa0>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008bed 	.word	0x08008bed
 8008bd4:	08008be5 	.word	0x08008be5
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be2:	e080      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008be4:	2302      	movs	r3, #2
 8008be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bea:	e07c      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008bec:	2304      	movs	r3, #4
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf2:	e078      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bfa:	e074      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008bfc:	2310      	movs	r3, #16
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c02:	e070      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a8c      	ldr	r2, [pc, #560]	; (8008e3c <UART_SetConfig+0x310>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d138      	bne.n	8008c80 <UART_SetConfig+0x154>
 8008c0e:	4b8a      	ldr	r3, [pc, #552]	; (8008e38 <UART_SetConfig+0x30c>)
 8008c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c14:	f003 030c 	and.w	r3, r3, #12
 8008c18:	2b0c      	cmp	r3, #12
 8008c1a:	d82d      	bhi.n	8008c78 <UART_SetConfig+0x14c>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0xf8>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c59 	.word	0x08008c59
 8008c28:	08008c79 	.word	0x08008c79
 8008c2c:	08008c79 	.word	0x08008c79
 8008c30:	08008c79 	.word	0x08008c79
 8008c34:	08008c69 	.word	0x08008c69
 8008c38:	08008c79 	.word	0x08008c79
 8008c3c:	08008c79 	.word	0x08008c79
 8008c40:	08008c79 	.word	0x08008c79
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c79 	.word	0x08008c79
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c71 	.word	0x08008c71
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5e:	e042      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c60:	2302      	movs	r3, #2
 8008c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c66:	e03e      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6e:	e03a      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c76:	e036      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c7e:	e032      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a6a      	ldr	r2, [pc, #424]	; (8008e30 <UART_SetConfig+0x304>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d12a      	bne.n	8008ce0 <UART_SetConfig+0x1b4>
 8008c8a:	4b6b      	ldr	r3, [pc, #428]	; (8008e38 <UART_SetConfig+0x30c>)
 8008c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c98:	d01a      	beq.n	8008cd0 <UART_SetConfig+0x1a4>
 8008c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c9e:	d81b      	bhi.n	8008cd8 <UART_SetConfig+0x1ac>
 8008ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ca4:	d00c      	beq.n	8008cc0 <UART_SetConfig+0x194>
 8008ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008caa:	d815      	bhi.n	8008cd8 <UART_SetConfig+0x1ac>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <UART_SetConfig+0x18c>
 8008cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb4:	d008      	beq.n	8008cc8 <UART_SetConfig+0x19c>
 8008cb6:	e00f      	b.n	8008cd8 <UART_SetConfig+0x1ac>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cbe:	e012      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cc6:	e00e      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cce:	e00a      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cd6:	e006      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cde:	e002      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a51      	ldr	r2, [pc, #324]	; (8008e30 <UART_SetConfig+0x304>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d17a      	bne.n	8008de6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d824      	bhi.n	8008d42 <UART_SetConfig+0x216>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0x1d4>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d43 	.word	0x08008d43
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d43 	.word	0x08008d43
 8008d10:	08008d33 	.word	0x08008d33
 8008d14:	08008d43 	.word	0x08008d43
 8008d18:	08008d43 	.word	0x08008d43
 8008d1c:	08008d43 	.word	0x08008d43
 8008d20:	08008d3b 	.word	0x08008d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d24:	f7fe ffce 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8008d28:	61f8      	str	r0, [r7, #28]
        break;
 8008d2a:	e010      	b.n	8008d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2c:	4b44      	ldr	r3, [pc, #272]	; (8008e40 <UART_SetConfig+0x314>)
 8008d2e:	61fb      	str	r3, [r7, #28]
        break;
 8008d30:	e00d      	b.n	8008d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d32:	f7fe ff2f 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8008d36:	61f8      	str	r0, [r7, #28]
        break;
 8008d38:	e009      	b.n	8008d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3e:	61fb      	str	r3, [r7, #28]
        break;
 8008d40:	e005      	b.n	8008d4e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8107 	beq.w	8008f64 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	4413      	add	r3, r2
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d305      	bcc.n	8008d72 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d903      	bls.n	8008d7a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d78:	e0f4      	b.n	8008f64 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	461c      	mov	r4, r3
 8008d80:	4615      	mov	r5, r2
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	022b      	lsls	r3, r5, #8
 8008d8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d90:	0222      	lsls	r2, r4, #8
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	6849      	ldr	r1, [r1, #4]
 8008d96:	0849      	lsrs	r1, r1, #1
 8008d98:	2000      	movs	r0, #0
 8008d9a:	4688      	mov	r8, r1
 8008d9c:	4681      	mov	r9, r0
 8008d9e:	eb12 0a08 	adds.w	sl, r2, r8
 8008da2:	eb43 0b09 	adc.w	fp, r3, r9
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	603b      	str	r3, [r7, #0]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db4:	4650      	mov	r0, sl
 8008db6:	4659      	mov	r1, fp
 8008db8:	f7f7 ff96 	bl	8000ce8 <__aeabi_uldivmod>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dca:	d308      	bcc.n	8008dde <UART_SetConfig+0x2b2>
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd2:	d204      	bcs.n	8008dde <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	60da      	str	r2, [r3, #12]
 8008ddc:	e0c2      	b.n	8008f64 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008de4:	e0be      	b.n	8008f64 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dee:	d16a      	bne.n	8008ec6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d834      	bhi.n	8008e62 <UART_SetConfig+0x336>
 8008df8:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x2d4>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e25 	.word	0x08008e25
 8008e04:	08008e45 	.word	0x08008e45
 8008e08:	08008e4d 	.word	0x08008e4d
 8008e0c:	08008e63 	.word	0x08008e63
 8008e10:	08008e53 	.word	0x08008e53
 8008e14:	08008e63 	.word	0x08008e63
 8008e18:	08008e63 	.word	0x08008e63
 8008e1c:	08008e63 	.word	0x08008e63
 8008e20:	08008e5b 	.word	0x08008e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e24:	f7fe ff4e 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8008e28:	61f8      	str	r0, [r7, #28]
        break;
 8008e2a:	e020      	b.n	8008e6e <UART_SetConfig+0x342>
 8008e2c:	efff69f3 	.word	0xefff69f3
 8008e30:	40008000 	.word	0x40008000
 8008e34:	40013800 	.word	0x40013800
 8008e38:	40021000 	.word	0x40021000
 8008e3c:	40004400 	.word	0x40004400
 8008e40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e44:	f7fe ff54 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 8008e48:	61f8      	str	r0, [r7, #28]
        break;
 8008e4a:	e010      	b.n	8008e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e4c:	4b4c      	ldr	r3, [pc, #304]	; (8008f80 <UART_SetConfig+0x454>)
 8008e4e:	61fb      	str	r3, [r7, #28]
        break;
 8008e50:	e00d      	b.n	8008e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e52:	f7fe fe9f 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8008e56:	61f8      	str	r0, [r7, #28]
        break;
 8008e58:	e009      	b.n	8008e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e5e:	61fb      	str	r3, [r7, #28]
        break;
 8008e60:	e005      	b.n	8008e6e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d077      	beq.n	8008f64 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	005a      	lsls	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	441a      	add	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b0f      	cmp	r3, #15
 8008e8e:	d916      	bls.n	8008ebe <UART_SetConfig+0x392>
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e96:	d212      	bcs.n	8008ebe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f023 030f 	bic.w	r3, r3, #15
 8008ea0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	8afb      	ldrh	r3, [r7, #22]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	8afa      	ldrh	r2, [r7, #22]
 8008eba:	60da      	str	r2, [r3, #12]
 8008ebc:	e052      	b.n	8008f64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ec4:	e04e      	b.n	8008f64 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d827      	bhi.n	8008f1e <UART_SetConfig+0x3f2>
 8008ece:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x3a8>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	08008f1f 	.word	0x08008f1f
 8008ee4:	08008f0f 	.word	0x08008f0f
 8008ee8:	08008f1f 	.word	0x08008f1f
 8008eec:	08008f1f 	.word	0x08008f1f
 8008ef0:	08008f1f 	.word	0x08008f1f
 8008ef4:	08008f17 	.word	0x08008f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef8:	f7fe fee4 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8008efc:	61f8      	str	r0, [r7, #28]
        break;
 8008efe:	e014      	b.n	8008f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f00:	f7fe fef6 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 8008f04:	61f8      	str	r0, [r7, #28]
        break;
 8008f06:	e010      	b.n	8008f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f08:	4b1d      	ldr	r3, [pc, #116]	; (8008f80 <UART_SetConfig+0x454>)
 8008f0a:	61fb      	str	r3, [r7, #28]
        break;
 8008f0c:	e00d      	b.n	8008f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f0e:	f7fe fe41 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8008f12:	61f8      	str	r0, [r7, #28]
        break;
 8008f14:	e009      	b.n	8008f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1a:	61fb      	str	r3, [r7, #28]
        break;
 8008f1c:	e005      	b.n	8008f2a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f28:	bf00      	nop
    }

    if (pclk != 0U)
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d019      	beq.n	8008f64 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	085a      	lsrs	r2, r3, #1
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d909      	bls.n	8008f5e <UART_SetConfig+0x432>
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f50:	d205      	bcs.n	8008f5e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	e002      	b.n	8008f64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008f70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3728      	adds	r7, #40	; 0x28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f7e:	bf00      	nop
 8008f80:	00f42400 	.word	0x00f42400

08008f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01a      	beq.n	800909a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009082:	d10a      	bne.n	800909a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	605a      	str	r2, [r3, #4]
  }
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090d8:	f7fa fe62 	bl	8003da0 <HAL_GetTick>
 80090dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d10e      	bne.n	800910a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f82d 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e023      	b.n	8009152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b04      	cmp	r3, #4
 8009116:	d10e      	bne.n	8009136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f817 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e00d      	b.n	8009152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b09c      	sub	sp, #112	; 0x70
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800916a:	e0a5      	b.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800916c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009172:	f000 80a1 	beq.w	80092b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009176:	f7fa fe13 	bl	8003da0 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009182:	429a      	cmp	r2, r3
 8009184:	d302      	bcc.n	800918c <UART_WaitOnFlagUntilTimeout+0x32>
 8009186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009188:	2b00      	cmp	r3, #0
 800918a:	d13e      	bne.n	800920a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800919a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800919c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091a0:	667b      	str	r3, [r7, #100]	; 0x64
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e6      	bne.n	800918c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3308      	adds	r3, #8
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	f023 0301 	bic.w	r3, r3, #1
 80091d4:	663b      	str	r3, [r7, #96]	; 0x60
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3308      	adds	r3, #8
 80091dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091de:	64ba      	str	r2, [r7, #72]	; 0x48
 80091e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e5      	bne.n	80091be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2220      	movs	r2, #32
 80091f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2220      	movs	r2, #32
 80091fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e067      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d04f      	beq.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009226:	d147      	bne.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009230:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
 8009252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e6      	bne.n	8009232 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	613b      	str	r3, [r7, #16]
   return(result);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	66bb      	str	r3, [r7, #104]	; 0x68
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3308      	adds	r3, #8
 8009282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009284:	623a      	str	r2, [r7, #32]
 8009286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69f9      	ldr	r1, [r7, #28]
 800928a:	6a3a      	ldr	r2, [r7, #32]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	61bb      	str	r3, [r7, #24]
   return(result);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e5      	bne.n	8009264 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2220      	movs	r2, #32
 800929c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e010      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	4013      	ands	r3, r2
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	bf0c      	ite	eq
 80092c8:	2301      	moveq	r3, #1
 80092ca:	2300      	movne	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	461a      	mov	r2, r3
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	f43f af4a 	beq.w	800916c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3770      	adds	r7, #112	; 0x70
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <__NVIC_SetPriority>:
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	db0a      	blt.n	800930e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	490c      	ldr	r1, [pc, #48]	; (8009330 <__NVIC_SetPriority+0x4c>)
 80092fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009302:	0112      	lsls	r2, r2, #4
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	440b      	add	r3, r1
 8009308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800930c:	e00a      	b.n	8009324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	4908      	ldr	r1, [pc, #32]	; (8009334 <__NVIC_SetPriority+0x50>)
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	3b04      	subs	r3, #4
 800931c:	0112      	lsls	r2, r2, #4
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	440b      	add	r3, r1
 8009322:	761a      	strb	r2, [r3, #24]
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	e000e100 	.word	0xe000e100
 8009334:	e000ed00 	.word	0xe000ed00

08009338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <SysTick_Handler+0x1c>)
 800933e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009340:	f002 f85e 	bl	800b400 <xTaskGetSchedulerState>
 8009344:	4603      	mov	r3, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d001      	beq.n	800934e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800934a:	f002 ff45 	bl	800c1d8 <xPortSysTickHandler>
  }
}
 800934e:	bf00      	nop
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	e000e010 	.word	0xe000e010

08009358 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800935c:	2100      	movs	r1, #0
 800935e:	f06f 0004 	mvn.w	r0, #4
 8009362:	f7ff ffbf 	bl	80092e4 <__NVIC_SetPriority>
#endif
}
 8009366:	bf00      	nop
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009372:	f3ef 8305 	mrs	r3, IPSR
 8009376:	603b      	str	r3, [r7, #0]
  return(result);
 8009378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800937e:	f06f 0305 	mvn.w	r3, #5
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e00c      	b.n	80093a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009386:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <osKernelInitialize+0x44>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <osKernelInitialize+0x44>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009394:	2300      	movs	r3, #0
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	e002      	b.n	80093a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093a0:	687b      	ldr	r3, [r7, #4]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	20000cac 	.word	0x20000cac

080093b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	603b      	str	r3, [r7, #0]
  return(result);
 80093c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80093c6:	f06f 0305 	mvn.w	r3, #5
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	e010      	b.n	80093f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <osKernelStart+0x48>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d109      	bne.n	80093ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093d6:	f7ff ffbf 	bl	8009358 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <osKernelStart+0x48>)
 80093dc:	2202      	movs	r2, #2
 80093de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093e0:	f001 fb92 	bl	800ab08 <vTaskStartScheduler>
      stat = osOK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	607b      	str	r3, [r7, #4]
 80093e8:	e002      	b.n	80093f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093f0:	687b      	ldr	r3, [r7, #4]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000cac 	.word	0x20000cac

08009400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	; 0x38
 8009404:	af04      	add	r7, sp, #16
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009410:	f3ef 8305 	mrs	r3, IPSR
 8009414:	617b      	str	r3, [r7, #20]
  return(result);
 8009416:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009418:	2b00      	cmp	r3, #0
 800941a:	d17e      	bne.n	800951a <osThreadNew+0x11a>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d07b      	beq.n	800951a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009422:	2380      	movs	r3, #128	; 0x80
 8009424:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009426:	2318      	movs	r3, #24
 8009428:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800942e:	f04f 33ff 	mov.w	r3, #4294967295
 8009432:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d045      	beq.n	80094c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <osThreadNew+0x48>
        name = attr->name;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d008      	beq.n	800946e <osThreadNew+0x6e>
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2b38      	cmp	r3, #56	; 0x38
 8009460:	d805      	bhi.n	800946e <osThreadNew+0x6e>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <osThreadNew+0x72>
        return (NULL);
 800946e:	2300      	movs	r3, #0
 8009470:	e054      	b.n	800951c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	089b      	lsrs	r3, r3, #2
 8009480:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00e      	beq.n	80094a8 <osThreadNew+0xa8>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	2b5b      	cmp	r3, #91	; 0x5b
 8009490:	d90a      	bls.n	80094a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009496:	2b00      	cmp	r3, #0
 8009498:	d006      	beq.n	80094a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <osThreadNew+0xa8>
        mem = 1;
 80094a2:	2301      	movs	r3, #1
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	e010      	b.n	80094ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10c      	bne.n	80094ca <osThreadNew+0xca>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d108      	bne.n	80094ca <osThreadNew+0xca>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <osThreadNew+0xca>
          mem = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	e001      	b.n	80094ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d110      	bne.n	80094f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094d8:	9202      	str	r2, [sp, #8]
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f001 f938 	bl	800a75c <xTaskCreateStatic>
 80094ec:	4603      	mov	r3, r0
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	e013      	b.n	800951a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d110      	bne.n	800951a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	f107 0310 	add.w	r3, r7, #16
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 f983 	bl	800a816 <xTaskCreate>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d001      	beq.n	800951a <osThreadNew+0x11a>
            hTask = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800951a:	693b      	ldr	r3, [r7, #16]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3728      	adds	r7, #40	; 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800952a:	f001 ff59 	bl	800b3e0 <xTaskGetCurrentTaskHandle>
 800952e:	6078      	str	r0, [r7, #4]

  return (id);
 8009530:	687b      	ldr	r3, [r7, #4]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009542:	f3ef 8305 	mrs	r3, IPSR
 8009546:	60bb      	str	r3, [r7, #8]
  return(result);
 8009548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <osDelay+0x1c>
    stat = osErrorISR;
 800954e:	f06f 0305 	mvn.w	r3, #5
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e007      	b.n	8009566 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fa9d 	bl	800aaa0 <vTaskDelay>
    }
  }

  return (stat);
 8009566:	68fb      	ldr	r3, [r7, #12]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800957c:	f3ef 8305 	mrs	r3, IPSR
 8009580:	60bb      	str	r3, [r7, #8]
  return(result);
 8009582:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009584:	2b00      	cmp	r3, #0
 8009586:	d174      	bne.n	8009672 <osMutexNew+0x102>
    if (attr != NULL) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <osMutexNew+0x26>
      type = attr->attr_bits;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	61bb      	str	r3, [r7, #24]
 8009594:	e001      	b.n	800959a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <osMutexNew+0x3a>
      rmtx = 1U;
 80095a4:	2301      	movs	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e001      	b.n	80095ae <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d15c      	bne.n	8009672 <osMutexNew+0x102>
      mem = -1;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d015      	beq.n	80095f0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <osMutexNew+0x6a>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b4f      	cmp	r3, #79	; 0x4f
 80095d2:	d902      	bls.n	80095da <osMutexNew+0x6a>
          mem = 1;
 80095d4:	2301      	movs	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	e00c      	b.n	80095f4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d108      	bne.n	80095f4 <osMutexNew+0x84>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <osMutexNew+0x84>
            mem = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	613b      	str	r3, [r7, #16]
 80095ee:	e001      	b.n	80095f4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d112      	bne.n	8009620 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	4619      	mov	r1, r3
 8009606:	2004      	movs	r0, #4
 8009608:	f000 fb17 	bl	8009c3a <xQueueCreateMutexStatic>
 800960c:	61f8      	str	r0, [r7, #28]
 800960e:	e016      	b.n	800963e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4619      	mov	r1, r3
 8009616:	2001      	movs	r0, #1
 8009618:	f000 fb0f 	bl	8009c3a <xQueueCreateMutexStatic>
 800961c:	61f8      	str	r0, [r7, #28]
 800961e:	e00e      	b.n	800963e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10b      	bne.n	800963e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800962c:	2004      	movs	r0, #4
 800962e:	f000 faec 	bl	8009c0a <xQueueCreateMutex>
 8009632:	61f8      	str	r0, [r7, #28]
 8009634:	e003      	b.n	800963e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009636:	2001      	movs	r0, #1
 8009638:	f000 fae7 	bl	8009c0a <xQueueCreateMutex>
 800963c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <osMutexNew+0xee>
        if (attr != NULL) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <osMutexNew+0xe2>
          name = attr->name;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e001      	b.n	8009656 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	69f8      	ldr	r0, [r7, #28]
 800965a:	f001 f821 	bl	800a6a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d006      	beq.n	8009672 <osMutexNew+0x102>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f043 0301 	orr.w	r3, r3, #1
 8009670:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009672:	69fb      	ldr	r3, [r7, #28]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3720      	adds	r7, #32
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969a:	f3ef 8305 	mrs	r3, IPSR
 800969e:	60bb      	str	r3, [r7, #8]
  return(result);
 80096a0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <osMutexAcquire+0x32>
    stat = osErrorISR;
 80096a6:	f06f 0305 	mvn.w	r3, #5
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e02c      	b.n	8009708 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80096b4:	f06f 0303 	mvn.w	r3, #3
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e025      	b.n	8009708 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d011      	beq.n	80096e6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6938      	ldr	r0, [r7, #16]
 80096c6:	f000 fb07 	bl	8009cd8 <xQueueTakeMutexRecursive>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d01b      	beq.n	8009708 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80096d6:	f06f 0301 	mvn.w	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e014      	b.n	8009708 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80096de:	f06f 0302 	mvn.w	r3, #2
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e010      	b.n	8009708 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6938      	ldr	r0, [r7, #16]
 80096ea:	f000 fda5 	bl	800a238 <xQueueSemaphoreTake>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d009      	beq.n	8009708 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80096fa:	f06f 0301 	mvn.w	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e002      	b.n	8009708 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009702:	f06f 0302 	mvn.w	r3, #2
 8009706:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009708:	697b      	ldr	r3, [r7, #20]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800972e:	f3ef 8305 	mrs	r3, IPSR
 8009732:	60bb      	str	r3, [r7, #8]
  return(result);
 8009734:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <osMutexRelease+0x30>
    stat = osErrorISR;
 800973a:	f06f 0305 	mvn.w	r3, #5
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	e01f      	b.n	8009782 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009748:	f06f 0303 	mvn.w	r3, #3
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e018      	b.n	8009782 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009756:	6938      	ldr	r0, [r7, #16]
 8009758:	f000 fa8a 	bl	8009c70 <xQueueGiveMutexRecursive>
 800975c:	4603      	mov	r3, r0
 800975e:	2b01      	cmp	r3, #1
 8009760:	d00f      	beq.n	8009782 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009762:	f06f 0302 	mvn.w	r3, #2
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e00b      	b.n	8009782 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6938      	ldr	r0, [r7, #16]
 8009772:	f000 fae7 	bl	8009d44 <xQueueGenericSend>
 8009776:	4603      	mov	r3, r0
 8009778:	2b01      	cmp	r3, #1
 800977a:	d002      	beq.n	8009782 <osMutexRelease+0x70>
        stat = osErrorResource;
 800977c:	f06f 0302 	mvn.w	r3, #2
 8009780:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009782:	697b      	ldr	r3, [r7, #20]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4a07      	ldr	r2, [pc, #28]	; (80097b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800979c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a06      	ldr	r2, [pc, #24]	; (80097bc <vApplicationGetIdleTaskMemory+0x30>)
 80097a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2280      	movs	r2, #128	; 0x80
 80097a8:	601a      	str	r2, [r3, #0]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000cb0 	.word	0x20000cb0
 80097bc:	20000d0c 	.word	0x20000d0c

080097c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a07      	ldr	r2, [pc, #28]	; (80097ec <vApplicationGetTimerTaskMemory+0x2c>)
 80097d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <vApplicationGetTimerTaskMemory+0x30>)
 80097d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	20000f0c 	.word	0x20000f0c
 80097f0:	20000f68 	.word	0x20000f68

080097f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f103 0208 	add.w	r2, r3, #8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f103 0208 	add.w	r2, r3, #8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f103 0208 	add.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]
}
 800988a:	bf00      	nop
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d103      	bne.n	80098b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e00c      	b.n	80098d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3308      	adds	r3, #8
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	e002      	b.n	80098c4 <vListInsert+0x2e>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d2f6      	bcs.n	80098be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	601a      	str	r2, [r3, #0]
}
 80098fc:	bf00      	nop
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6892      	ldr	r2, [r2, #8]
 800991e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6852      	ldr	r2, [r2, #4]
 8009928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d103      	bne.n	800993c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009986:	f002 fb95 	bl	800c0b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	441a      	add	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b6:	3b01      	subs	r3, #1
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	441a      	add	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	22ff      	movs	r2, #255	; 0xff
 80099ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	22ff      	movs	r2, #255	; 0xff
 80099d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d114      	bne.n	8009a06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01a      	beq.n	8009a1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3310      	adds	r3, #16
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 fb3b 	bl	800b064 <xTaskRemoveFromEventList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d012      	beq.n	8009a1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <xQueueGenericReset+0xcc>)
 80099f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	e009      	b.n	8009a1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3310      	adds	r3, #16
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fef2 	bl	80097f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff feed 	bl	80097f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a1a:	f002 fb7b 	bl	800c114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a1e:	2301      	movs	r3, #1
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	; 0x38
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <xQueueGenericCreateStatic+0x52>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <xQueueGenericCreateStatic+0x56>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <xQueueGenericCreateStatic+0x58>
 8009a82:	2300      	movs	r3, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	623b      	str	r3, [r7, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <xQueueGenericCreateStatic+0x7e>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <xQueueGenericCreateStatic+0x82>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e000      	b.n	8009ab0 <xQueueGenericCreateStatic+0x84>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	61fb      	str	r3, [r7, #28]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aca:	2350      	movs	r3, #80	; 0x50
 8009acc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b50      	cmp	r3, #80	; 0x50
 8009ad2:	d00a      	beq.n	8009aea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61bb      	str	r3, [r7, #24]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009aea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00d      	beq.n	8009b12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009afe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4613      	mov	r3, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f83f 	bl	8009b90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3730      	adds	r7, #48	; 0x30
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08a      	sub	sp, #40	; 0x28
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	fb02 f303 	mul.w	r3, r2, r3
 8009b4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3350      	adds	r3, #80	; 0x50
 8009b54:	4618      	mov	r0, r3
 8009b56:	f002 fbcf 	bl	800c2f8 <pvPortMalloc>
 8009b5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d011      	beq.n	8009b86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	3350      	adds	r3, #80	; 0x50
 8009b6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 f805 	bl	8009b90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b86:	69bb      	ldr	r3, [r7, #24]
	}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e002      	b.n	8009bb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	69b8      	ldr	r0, [r7, #24]
 8009bc2:	f7ff fecb 	bl	800995c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	78fa      	ldrb	r2, [r7, #3]
 8009bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00e      	beq.n	8009c02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f8a1 	bl	8009d44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	4603      	mov	r3, r0
 8009c12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6939      	ldr	r1, [r7, #16]
 8009c22:	6978      	ldr	r0, [r7, #20]
 8009c24:	f7ff ff7a 	bl	8009b1c <xQueueGenericCreate>
 8009c28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff ffd3 	bl	8009bd6 <prvInitialiseMutex>

		return xNewQueue;
 8009c30:	68fb      	ldr	r3, [r7, #12]
	}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b088      	sub	sp, #32
 8009c3e:	af02      	add	r7, sp, #8
 8009c40:	4603      	mov	r3, r0
 8009c42:	6039      	str	r1, [r7, #0]
 8009c44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c46:	2301      	movs	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2200      	movs	r2, #0
 8009c56:	6939      	ldr	r1, [r7, #16]
 8009c58:	6978      	ldr	r0, [r7, #20]
 8009c5a:	f7ff fee7 	bl	8009a2c <xQueueGenericCreateStatic>
 8009c5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff ffb8 	bl	8009bd6 <prvInitialiseMutex>

		return xNewQueue;
 8009c66:	68fb      	ldr	r3, [r7, #12]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60fb      	str	r3, [r7, #12]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	689c      	ldr	r4, [r3, #8]
 8009c9c:	f001 fba0 	bl	800b3e0 <xTaskGetCurrentTaskHandle>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d111      	bne.n	8009cca <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	1e5a      	subs	r2, r3, #1
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d105      	bne.n	8009cc4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	6938      	ldr	r0, [r7, #16]
 8009cc0:	f000 f840 	bl	8009d44 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e001      	b.n	8009cce <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009cce:	697b      	ldr	r3, [r7, #20]
	}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}

08009cd8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	60fb      	str	r3, [r7, #12]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	689c      	ldr	r4, [r3, #8]
 8009d06:	f001 fb6b 	bl	800b3e0 <xTaskGetCurrentTaskHandle>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d107      	bne.n	8009d20 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	e00c      	b.n	8009d3a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6938      	ldr	r0, [r7, #16]
 8009d24:	f000 fa88 	bl	800a238 <xQueueSemaphoreTake>
 8009d28:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009d3a:	697b      	ldr	r3, [r7, #20]
	}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	371c      	adds	r7, #28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd90      	pop	{r4, r7, pc}

08009d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08e      	sub	sp, #56	; 0x38
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d52:	2300      	movs	r3, #0
 8009d54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xQueueGenericSend+0x32>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d103      	bne.n	8009d84 <xQueueGenericSend+0x40>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <xQueueGenericSend+0x44>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <xQueueGenericSend+0x46>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <xQueueGenericSend+0x60>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d103      	bne.n	8009db2 <xQueueGenericSend+0x6e>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <xQueueGenericSend+0x72>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <xQueueGenericSend+0x74>
 8009db6:	2300      	movs	r3, #0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	623b      	str	r3, [r7, #32]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dd2:	f001 fb15 	bl	800b400 <xTaskGetSchedulerState>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <xQueueGenericSend+0x9e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <xQueueGenericSend+0xa2>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <xQueueGenericSend+0xa4>
 8009de6:	2300      	movs	r3, #0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <xQueueGenericSend+0xbe>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	61fb      	str	r3, [r7, #28]
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e02:	f002 f957 	bl	800c0b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d302      	bcc.n	8009e18 <xQueueGenericSend+0xd4>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d129      	bne.n	8009e6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e1e:	f000 fb2f 	bl	800a480 <prvCopyDataToQueue>
 8009e22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d010      	beq.n	8009e4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 f917 	bl	800b064 <xTaskRemoveFromEventList>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d013      	beq.n	8009e64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e3c:	4b3f      	ldr	r3, [pc, #252]	; (8009f3c <xQueueGenericSend+0x1f8>)
 8009e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	e00a      	b.n	8009e64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e54:	4b39      	ldr	r3, [pc, #228]	; (8009f3c <xQueueGenericSend+0x1f8>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e64:	f002 f956 	bl	800c114 <vPortExitCritical>
				return pdPASS;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e063      	b.n	8009f34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d103      	bne.n	8009e7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e72:	f002 f94f 	bl	800c114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e05c      	b.n	8009f34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e80:	f107 0314 	add.w	r3, r7, #20
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 f951 	bl	800b12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e8e:	f002 f941 	bl	800c114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e92:	f000 fe9f 	bl	800abd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e96:	f002 f90d 	bl	800c0b4 <vPortEnterCritical>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ea0:	b25b      	sxtb	r3, r3
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d103      	bne.n	8009eb0 <xQueueGenericSend+0x16c>
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebc:	d103      	bne.n	8009ec6 <xQueueGenericSend+0x182>
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec6:	f002 f925 	bl	800c114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eca:	1d3a      	adds	r2, r7, #4
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 f940 	bl	800b158 <xTaskCheckForTimeOut>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d124      	bne.n	8009f28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee0:	f000 fbc6 	bl	800a670 <prvIsQueueFull>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d018      	beq.n	8009f1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	3310      	adds	r3, #16
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 f866 	bl	800afc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009efa:	f000 fb51 	bl	800a5a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009efe:	f000 fe77 	bl	800abf0 <xTaskResumeAll>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f af7c 	bne.w	8009e02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <xQueueGenericSend+0x1f8>)
 8009f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	e772      	b.n	8009e02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1e:	f000 fb3f 	bl	800a5a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f22:	f000 fe65 	bl	800abf0 <xTaskResumeAll>
 8009f26:	e76c      	b.n	8009e02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f2a:	f000 fb39 	bl	800a5a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f2e:	f000 fe5f 	bl	800abf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3738      	adds	r7, #56	; 0x38
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	e000ed04 	.word	0xe000ed04

08009f40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b090      	sub	sp, #64	; 0x40
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <xQueueGenericSendFromISR+0x3c>
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <xQueueGenericSendFromISR+0x40>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <xQueueGenericSendFromISR+0x42>
 8009f80:	2300      	movs	r3, #0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d103      	bne.n	8009faa <xQueueGenericSendFromISR+0x6a>
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <xQueueGenericSendFromISR+0x6e>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e000      	b.n	8009fb0 <xQueueGenericSendFromISR+0x70>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	623b      	str	r3, [r7, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fca:	f002 f955 	bl	800c278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fce:	f3ef 8211 	mrs	r2, BASEPRI
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	61fa      	str	r2, [r7, #28]
 8009fe4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fe8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <xQueueGenericSendFromISR+0xbc>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d12f      	bne.n	800a05c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a012:	f000 fa35 	bl	800a480 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a016:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d112      	bne.n	800a046 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	d016      	beq.n	800a056 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	3324      	adds	r3, #36	; 0x24
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 f819 	bl	800b064 <xTaskRemoveFromEventList>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00e      	beq.n	800a056 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e007      	b.n	800a056 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a046:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a04a:	3301      	adds	r3, #1
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	b25a      	sxtb	r2, r3
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a056:	2301      	movs	r3, #1
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a05a:	e001      	b.n	800a060 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a062:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a06a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3740      	adds	r7, #64	; 0x40
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08c      	sub	sp, #48	; 0x30
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a084:	2300      	movs	r3, #0
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <xQueueReceive+0x30>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	623b      	str	r3, [r7, #32]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d103      	bne.n	800a0b6 <xQueueReceive+0x3e>
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <xQueueReceive+0x42>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <xQueueReceive+0x44>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <xQueueReceive+0x5e>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	61fb      	str	r3, [r7, #28]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0d6:	f001 f993 	bl	800b400 <xTaskGetSchedulerState>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <xQueueReceive+0x6e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <xQueueReceive+0x72>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e000      	b.n	800a0ec <xQueueReceive+0x74>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10a      	bne.n	800a106 <xQueueReceive+0x8e>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	61bb      	str	r3, [r7, #24]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a106:	f001 ffd5 	bl	800c0b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d01f      	beq.n	800a156 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11a:	f000 fa1b 	bl	800a554 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	1e5a      	subs	r2, r3, #1
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00f      	beq.n	800a14e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	3310      	adds	r3, #16
 800a132:	4618      	mov	r0, r3
 800a134:	f000 ff96 	bl	800b064 <xTaskRemoveFromEventList>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a13e:	4b3d      	ldr	r3, [pc, #244]	; (800a234 <xQueueReceive+0x1bc>)
 800a140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a14e:	f001 ffe1 	bl	800c114 <vPortExitCritical>
				return pdPASS;
 800a152:	2301      	movs	r3, #1
 800a154:	e069      	b.n	800a22a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a15c:	f001 ffda 	bl	800c114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a160:	2300      	movs	r3, #0
 800a162:	e062      	b.n	800a22a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a16a:	f107 0310 	add.w	r3, r7, #16
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 ffdc 	bl	800b12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a178:	f001 ffcc 	bl	800c114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a17c:	f000 fd2a 	bl	800abd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a180:	f001 ff98 	bl	800c0b4 <vPortEnterCritical>
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a18a:	b25b      	sxtb	r3, r3
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d103      	bne.n	800a19a <xQueueReceive+0x122>
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d103      	bne.n	800a1b0 <xQueueReceive+0x138>
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1b0:	f001 ffb0 	bl	800c114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1b4:	1d3a      	adds	r2, r7, #4
 800a1b6:	f107 0310 	add.w	r3, r7, #16
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 ffcb 	bl	800b158 <xTaskCheckForTimeOut>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d123      	bne.n	800a210 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ca:	f000 fa3b 	bl	800a644 <prvIsQueueEmpty>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d017      	beq.n	800a204 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fef1 	bl	800afc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e4:	f000 f9dc 	bl	800a5a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1e8:	f000 fd02 	bl	800abf0 <xTaskResumeAll>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d189      	bne.n	800a106 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <xQueueReceive+0x1bc>)
 800a1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	e780      	b.n	800a106 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a206:	f000 f9cb 	bl	800a5a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a20a:	f000 fcf1 	bl	800abf0 <xTaskResumeAll>
 800a20e:	e77a      	b.n	800a106 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a212:	f000 f9c5 	bl	800a5a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a216:	f000 fceb 	bl	800abf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21c:	f000 fa12 	bl	800a644 <prvIsQueueEmpty>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	f43f af6f 	beq.w	800a106 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3730      	adds	r7, #48	; 0x30
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a242:	2300      	movs	r3, #0
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	623b      	str	r3, [r7, #32]
}
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	61fb      	str	r3, [r7, #28]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a288:	f001 f8ba 	bl	800b400 <xTaskGetSchedulerState>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <xQueueSemaphoreTake+0x60>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <xQueueSemaphoreTake+0x64>
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <xQueueSemaphoreTake+0x66>
 800a29c:	2300      	movs	r3, #0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10a      	bne.n	800a2b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	61bb      	str	r3, [r7, #24]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b8:	f001 fefc 	bl	800c0b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d024      	beq.n	800a312 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	1e5a      	subs	r2, r3, #1
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2d8:	f001 fa08 	bl	800b6ec <pvTaskIncrementMutexHeldCount>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00f      	beq.n	800a30a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	3310      	adds	r3, #16
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 feb8 	bl	800b064 <xTaskRemoveFromEventList>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2fa:	4b54      	ldr	r3, [pc, #336]	; (800a44c <xQueueSemaphoreTake+0x214>)
 800a2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a30a:	f001 ff03 	bl	800c114 <vPortExitCritical>
				return pdPASS;
 800a30e:	2301      	movs	r3, #1
 800a310:	e097      	b.n	800a442 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d111      	bne.n	800a33c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	617b      	str	r3, [r7, #20]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a334:	f001 feee 	bl	800c114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a338:	2300      	movs	r3, #0
 800a33a:	e082      	b.n	800a442 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a342:	f107 030c 	add.w	r3, r7, #12
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fef0 	bl	800b12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a350:	f001 fee0 	bl	800c114 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a354:	f000 fc3e 	bl	800abd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a358:	f001 feac 	bl	800c0b4 <vPortEnterCritical>
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a368:	d103      	bne.n	800a372 <xQueueSemaphoreTake+0x13a>
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37e:	d103      	bne.n	800a388 <xQueueSemaphoreTake+0x150>
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a388:	f001 fec4 	bl	800c114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a38c:	463a      	mov	r2, r7
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fedf 	bl	800b158 <xTaskCheckForTimeOut>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d132      	bne.n	800a406 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a2:	f000 f94f 	bl	800a644 <prvIsQueueEmpty>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d026      	beq.n	800a3fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a3b4:	f001 fe7e 	bl	800c0b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f83d 	bl	800b43c <xTaskPriorityInherit>
 800a3c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3c4:	f001 fea6 	bl	800c114 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	3324      	adds	r3, #36	; 0x24
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 fdf7 	bl	800afc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d8:	f000 f8e2 	bl	800a5a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3dc:	f000 fc08 	bl	800abf0 <xTaskResumeAll>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f47f af68 	bne.w	800a2b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a3e8:	4b18      	ldr	r3, [pc, #96]	; (800a44c <xQueueSemaphoreTake+0x214>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	e75e      	b.n	800a2b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3fc:	f000 f8d0 	bl	800a5a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a400:	f000 fbf6 	bl	800abf0 <xTaskResumeAll>
 800a404:	e758      	b.n	800a2b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a408:	f000 f8ca 	bl	800a5a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a40c:	f000 fbf0 	bl	800abf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a412:	f000 f917 	bl	800a644 <prvIsQueueEmpty>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f43f af4d 	beq.w	800a2b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00d      	beq.n	800a440 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a424:	f001 fe46 	bl	800c0b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a42a:	f000 f811 	bl	800a450 <prvGetDisinheritPriorityAfterTimeout>
 800a42e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a436:	4618      	mov	r0, r3
 800a438:	f001 f8d6 	bl	800b5e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a43c:	f001 fe6a 	bl	800c114 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a442:	4618      	mov	r0, r3
 800a444:	3738      	adds	r7, #56	; 0x38
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d006      	beq.n	800a46e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e001      	b.n	800a472 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a472:	68fb      	ldr	r3, [r7, #12]
	}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10d      	bne.n	800a4ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d14d      	bne.n	800a542 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f001 f82e 	bl	800b50c <xTaskPriorityDisinherit>
 800a4b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
 800a4b8:	e043      	b.n	800a542 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d119      	bne.n	800a4f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6858      	ldr	r0, [r3, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	68b9      	ldr	r1, [r7, #8]
 800a4cc:	f003 f825 	bl	800d51a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	441a      	add	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d32b      	bcc.n	800a542 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	e026      	b.n	800a542 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	68d8      	ldr	r0, [r3, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	68b9      	ldr	r1, [r7, #8]
 800a500:	f003 f80b 	bl	800d51a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	425b      	negs	r3, r3
 800a50e:	441a      	add	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d207      	bcs.n	800a530 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	425b      	negs	r3, r3
 800a52a:	441a      	add	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d105      	bne.n	800a542 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	3b01      	subs	r3, #1
 800a540:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a54a:	697b      	ldr	r3, [r7, #20]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d018      	beq.n	800a598 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	441a      	add	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d303      	bcc.n	800a588 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68d9      	ldr	r1, [r3, #12]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	461a      	mov	r2, r3
 800a592:	6838      	ldr	r0, [r7, #0]
 800a594:	f002 ffc1 	bl	800d51a <memcpy>
	}
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a5a8:	f001 fd84 	bl	800c0b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5b4:	e011      	b.n	800a5da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d012      	beq.n	800a5e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3324      	adds	r3, #36	; 0x24
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fd4e 	bl	800b064 <xTaskRemoveFromEventList>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5ce:	f000 fe25 	bl	800b21c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	dce9      	bgt.n	800a5b6 <prvUnlockQueue+0x16>
 800a5e2:	e000      	b.n	800a5e6 <prvUnlockQueue+0x46>
					break;
 800a5e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	22ff      	movs	r2, #255	; 0xff
 800a5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5ee:	f001 fd91 	bl	800c114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5f2:	f001 fd5f 	bl	800c0b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5fe:	e011      	b.n	800a624 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d012      	beq.n	800a62e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3310      	adds	r3, #16
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fd29 	bl	800b064 <xTaskRemoveFromEventList>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a618:	f000 fe00 	bl	800b21c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	3b01      	subs	r3, #1
 800a620:	b2db      	uxtb	r3, r3
 800a622:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dce9      	bgt.n	800a600 <prvUnlockQueue+0x60>
 800a62c:	e000      	b.n	800a630 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a62e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	22ff      	movs	r2, #255	; 0xff
 800a634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a638:	f001 fd6c 	bl	800c114 <vPortExitCritical>
}
 800a63c:	bf00      	nop
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a64c:	f001 fd32 	bl	800c0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	e001      	b.n	800a662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a662:	f001 fd57 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800a666:	68fb      	ldr	r3, [r7, #12]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a678:	f001 fd1c 	bl	800c0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a684:	429a      	cmp	r2, r3
 800a686:	d102      	bne.n	800a68e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	e001      	b.n	800a692 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a692:	f001 fd3f 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800a696:	68fb      	ldr	r3, [r7, #12]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e014      	b.n	800a6da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a6b0:	4a0f      	ldr	r2, [pc, #60]	; (800a6f0 <vQueueAddToRegistry+0x50>)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6bc:	490c      	ldr	r1, [pc, #48]	; (800a6f0 <vQueueAddToRegistry+0x50>)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	; (800a6f0 <vQueueAddToRegistry+0x50>)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6d2:	e006      	b.n	800a6e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b07      	cmp	r3, #7
 800a6de:	d9e7      	bls.n	800a6b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	20001368 	.word	0x20001368

0800a6f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a704:	f001 fcd6 	bl	800c0b4 <vPortEnterCritical>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d103      	bne.n	800a71e <vQueueWaitForMessageRestricted+0x2a>
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a724:	b25b      	sxtb	r3, r3
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72a:	d103      	bne.n	800a734 <vQueueWaitForMessageRestricted+0x40>
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a734:	f001 fcee 	bl	800c114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	3324      	adds	r3, #36	; 0x24
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	68b9      	ldr	r1, [r7, #8]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fc5f 	bl	800b00c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a74e:	6978      	ldr	r0, [r7, #20]
 800a750:	f7ff ff26 	bl	800a5a0 <prvUnlockQueue>
	}
 800a754:	bf00      	nop
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af04      	add	r7, sp, #16
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
 800a768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	623b      	str	r3, [r7, #32]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	61fb      	str	r3, [r7, #28]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7a2:	235c      	movs	r3, #92	; 0x5c
 800a7a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800a7aa:	d00a      	beq.n	800a7c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	61bb      	str	r3, [r7, #24]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a7c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01e      	beq.n	800a808 <xTaskCreateStatic+0xac>
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01b      	beq.n	800a808 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	2202      	movs	r2, #2
 800a7de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	f107 0314 	add.w	r3, r7, #20
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	68b9      	ldr	r1, [r7, #8]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 f850 	bl	800a8a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a802:	f000 f8dd 	bl	800a9c0 <prvAddNewTaskToReadyList>
 800a806:	e001      	b.n	800a80c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a80c:	697b      	ldr	r3, [r7, #20]
	}
 800a80e:	4618      	mov	r0, r3
 800a810:	3728      	adds	r7, #40	; 0x28
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a816:	b580      	push	{r7, lr}
 800a818:	b08c      	sub	sp, #48	; 0x30
 800a81a:	af04      	add	r7, sp, #16
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fd64 	bl	800c2f8 <pvPortMalloc>
 800a830:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a838:	205c      	movs	r0, #92	; 0x5c
 800a83a:	f001 fd5d 	bl	800c2f8 <pvPortMalloc>
 800a83e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30
 800a84c:	e005      	b.n	800a85a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	f001 fe1e 	bl	800c490 <vPortFree>
 800a854:	e001      	b.n	800a85a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d017      	beq.n	800a890 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a868:	88fa      	ldrh	r2, [r7, #6]
 800a86a:	2300      	movs	r3, #0
 800a86c:	9303      	str	r3, [sp, #12]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f80e 	bl	800a8a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a884:	69f8      	ldr	r0, [r7, #28]
 800a886:	f000 f89b 	bl	800a9c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a88a:	2301      	movs	r3, #1
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	e002      	b.n	800a896 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a890:	f04f 33ff 	mov.w	r3, #4294967295
 800a894:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a896:	69bb      	ldr	r3, [r7, #24]
	}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	21a5      	movs	r1, #165	; 0xa5
 800a8ba:	f002 fdaf 	bl	800d41c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f023 0307 	bic.w	r3, r3, #7
 800a8d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	617b      	str	r3, [r7, #20]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01f      	beq.n	800a93e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8fe:	2300      	movs	r3, #0
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	e012      	b.n	800a92a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	4413      	add	r3, r2
 800a90a:	7819      	ldrb	r1, [r3, #0]
 800a90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4413      	add	r3, r2
 800a912:	3334      	adds	r3, #52	; 0x34
 800a914:	460a      	mov	r2, r1
 800a916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	3301      	adds	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	2b0f      	cmp	r3, #15
 800a92e:	d9e9      	bls.n	800a904 <prvInitialiseNewTask+0x64>
 800a930:	e000      	b.n	800a934 <prvInitialiseNewTask+0x94>
			{
				break;
 800a932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a93c:	e003      	b.n	800a946 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	2b37      	cmp	r3, #55	; 0x37
 800a94a:	d901      	bls.n	800a950 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a94c:	2337      	movs	r3, #55	; 0x37
 800a94e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a95a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2200      	movs	r2, #0
 800a960:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	3304      	adds	r3, #4
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe ff64 	bl	8009834 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	3318      	adds	r3, #24
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe ff5f 	bl	8009834 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a97a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	2200      	movs	r2, #0
 800a990:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	69b8      	ldr	r0, [r7, #24]
 800a9a0:	f001 fa5a 	bl	800be58 <pxPortInitialiseStack>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	3720      	adds	r7, #32
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9c8:	f001 fb74 	bl	800c0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9cc:	4b2d      	ldr	r3, [pc, #180]	; (800aa84 <prvAddNewTaskToReadyList+0xc4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	4a2c      	ldr	r2, [pc, #176]	; (800aa84 <prvAddNewTaskToReadyList+0xc4>)
 800a9d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9d6:	4b2c      	ldr	r3, [pc, #176]	; (800aa88 <prvAddNewTaskToReadyList+0xc8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d109      	bne.n	800a9f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9de:	4a2a      	ldr	r2, [pc, #168]	; (800aa88 <prvAddNewTaskToReadyList+0xc8>)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9e4:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <prvAddNewTaskToReadyList+0xc4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d110      	bne.n	800aa0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9ec:	f000 fc3a 	bl	800b264 <prvInitialiseTaskLists>
 800a9f0:	e00d      	b.n	800aa0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9f2:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <prvAddNewTaskToReadyList+0xcc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9fa:	4b23      	ldr	r3, [pc, #140]	; (800aa88 <prvAddNewTaskToReadyList+0xc8>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d802      	bhi.n	800aa0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa08:	4a1f      	ldr	r2, [pc, #124]	; (800aa88 <prvAddNewTaskToReadyList+0xc8>)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa0e:	4b20      	ldr	r3, [pc, #128]	; (800aa90 <prvAddNewTaskToReadyList+0xd0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3301      	adds	r3, #1
 800aa14:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <prvAddNewTaskToReadyList+0xd0>)
 800aa16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <prvAddNewTaskToReadyList+0xd0>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa24:	4b1b      	ldr	r3, [pc, #108]	; (800aa94 <prvAddNewTaskToReadyList+0xd4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d903      	bls.n	800aa34 <prvAddNewTaskToReadyList+0x74>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	4a18      	ldr	r2, [pc, #96]	; (800aa94 <prvAddNewTaskToReadyList+0xd4>)
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4a15      	ldr	r2, [pc, #84]	; (800aa98 <prvAddNewTaskToReadyList+0xd8>)
 800aa42:	441a      	add	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fe feff 	bl	800984e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa50:	f001 fb60 	bl	800c114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <prvAddNewTaskToReadyList+0xcc>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00e      	beq.n	800aa7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa5c:	4b0a      	ldr	r3, [pc, #40]	; (800aa88 <prvAddNewTaskToReadyList+0xc8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d207      	bcs.n	800aa7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <prvAddNewTaskToReadyList+0xdc>)
 800aa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	2000187c 	.word	0x2000187c
 800aa88:	200013a8 	.word	0x200013a8
 800aa8c:	20001888 	.word	0x20001888
 800aa90:	20001898 	.word	0x20001898
 800aa94:	20001884 	.word	0x20001884
 800aa98:	200013ac 	.word	0x200013ac
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d017      	beq.n	800aae2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aab2:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <vTaskDelay+0x60>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <vTaskDelay+0x30>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	60bb      	str	r3, [r7, #8]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aad0:	f000 f880 	bl	800abd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aad4:	2100      	movs	r1, #0
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fe1c 	bl	800b714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aadc:	f000 f888 	bl	800abf0 <xTaskResumeAll>
 800aae0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d107      	bne.n	800aaf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <vTaskDelay+0x64>)
 800aaea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200018a4 	.word	0x200018a4
 800ab04:	e000ed04 	.word	0xe000ed04

0800ab08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab16:	463a      	mov	r2, r7
 800ab18:	1d39      	adds	r1, r7, #4
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fe34 	bl	800978c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	9202      	str	r2, [sp, #8]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	2300      	movs	r3, #0
 800ab34:	460a      	mov	r2, r1
 800ab36:	4921      	ldr	r1, [pc, #132]	; (800abbc <vTaskStartScheduler+0xb4>)
 800ab38:	4821      	ldr	r0, [pc, #132]	; (800abc0 <vTaskStartScheduler+0xb8>)
 800ab3a:	f7ff fe0f 	bl	800a75c <xTaskCreateStatic>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <vTaskStartScheduler+0xbc>)
 800ab42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab44:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <vTaskStartScheduler+0xbc>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e001      	b.n	800ab56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d102      	bne.n	800ab62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab5c:	f000 fe2e 	bl	800b7bc <xTimerCreateTimerTask>
 800ab60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d116      	bne.n	800ab96 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	613b      	str	r3, [r7, #16]
}
 800ab7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab7c:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <vTaskStartScheduler+0xc0>)
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab84:	4b11      	ldr	r3, [pc, #68]	; (800abcc <vTaskStartScheduler+0xc4>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab8a:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <vTaskStartScheduler+0xc8>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab90:	f001 f9ee 	bl	800bf70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab94:	e00e      	b.n	800abb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d10a      	bne.n	800abb4 <vTaskStartScheduler+0xac>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vTaskStartScheduler+0xaa>
}
 800abb4:	bf00      	nop
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	0800f698 	.word	0x0800f698
 800abc0:	0800b235 	.word	0x0800b235
 800abc4:	200018a0 	.word	0x200018a0
 800abc8:	2000189c 	.word	0x2000189c
 800abcc:	20001888 	.word	0x20001888
 800abd0:	20001880 	.word	0x20001880

0800abd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abd8:	4b04      	ldr	r3, [pc, #16]	; (800abec <vTaskSuspendAll+0x18>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	4a03      	ldr	r2, [pc, #12]	; (800abec <vTaskSuspendAll+0x18>)
 800abe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abe2:	bf00      	nop
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	200018a4 	.word	0x200018a4

0800abf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abfe:	4b42      	ldr	r3, [pc, #264]	; (800ad08 <xTaskResumeAll+0x118>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <xTaskResumeAll+0x2c>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	603b      	str	r3, [r7, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac1c:	f001 fa4a 	bl	800c0b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac20:	4b39      	ldr	r3, [pc, #228]	; (800ad08 <xTaskResumeAll+0x118>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4a38      	ldr	r2, [pc, #224]	; (800ad08 <xTaskResumeAll+0x118>)
 800ac28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac2a:	4b37      	ldr	r3, [pc, #220]	; (800ad08 <xTaskResumeAll+0x118>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d162      	bne.n	800acf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac32:	4b36      	ldr	r3, [pc, #216]	; (800ad0c <xTaskResumeAll+0x11c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d05e      	beq.n	800acf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac3a:	e02f      	b.n	800ac9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3c:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <xTaskResumeAll+0x120>)
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3318      	adds	r3, #24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe fe5d 	bl	8009908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fe58 	bl	8009908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5c:	4b2d      	ldr	r3, [pc, #180]	; (800ad14 <xTaskResumeAll+0x124>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d903      	bls.n	800ac6c <xTaskResumeAll+0x7c>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a2a      	ldr	r2, [pc, #168]	; (800ad14 <xTaskResumeAll+0x124>)
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4a27      	ldr	r2, [pc, #156]	; (800ad18 <xTaskResumeAll+0x128>)
 800ac7a:	441a      	add	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fe fde3 	bl	800984e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8c:	4b23      	ldr	r3, [pc, #140]	; (800ad1c <xTaskResumeAll+0x12c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d302      	bcc.n	800ac9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac96:	4b22      	ldr	r3, [pc, #136]	; (800ad20 <xTaskResumeAll+0x130>)
 800ac98:	2201      	movs	r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac9c:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <xTaskResumeAll+0x120>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1cb      	bne.n	800ac3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acaa:	f000 fb79 	bl	800b3a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800acae:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <xTaskResumeAll+0x134>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d010      	beq.n	800acdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acba:	f000 f847 	bl	800ad4c <xTaskIncrementTick>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800acc4:	4b16      	ldr	r3, [pc, #88]	; (800ad20 <xTaskResumeAll+0x130>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3b01      	subs	r3, #1
 800acce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1f1      	bne.n	800acba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <xTaskResumeAll+0x134>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xTaskResumeAll+0x130>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ace8:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <xTaskResumeAll+0x138>)
 800acea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acf8:	f001 fa0c 	bl	800c114 <vPortExitCritical>

	return xAlreadyYielded;
 800acfc:	68bb      	ldr	r3, [r7, #8]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200018a4 	.word	0x200018a4
 800ad0c:	2000187c 	.word	0x2000187c
 800ad10:	2000183c 	.word	0x2000183c
 800ad14:	20001884 	.word	0x20001884
 800ad18:	200013ac 	.word	0x200013ac
 800ad1c:	200013a8 	.word	0x200013a8
 800ad20:	20001890 	.word	0x20001890
 800ad24:	2000188c 	.word	0x2000188c
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <xTaskGetTickCount+0x1c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad38:	687b      	ldr	r3, [r7, #4]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20001880 	.word	0x20001880

0800ad4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad56:	4b4f      	ldr	r3, [pc, #316]	; (800ae94 <xTaskIncrementTick+0x148>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f040 808f 	bne.w	800ae7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad60:	4b4d      	ldr	r3, [pc, #308]	; (800ae98 <xTaskIncrementTick+0x14c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad68:	4a4b      	ldr	r2, [pc, #300]	; (800ae98 <xTaskIncrementTick+0x14c>)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d120      	bne.n	800adb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad74:	4b49      	ldr	r3, [pc, #292]	; (800ae9c <xTaskIncrementTick+0x150>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <xTaskIncrementTick+0x48>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	603b      	str	r3, [r7, #0]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <xTaskIncrementTick+0x46>
 800ad94:	4b41      	ldr	r3, [pc, #260]	; (800ae9c <xTaskIncrementTick+0x150>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	4b41      	ldr	r3, [pc, #260]	; (800aea0 <xTaskIncrementTick+0x154>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a3f      	ldr	r2, [pc, #252]	; (800ae9c <xTaskIncrementTick+0x150>)
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	4a3f      	ldr	r2, [pc, #252]	; (800aea0 <xTaskIncrementTick+0x154>)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	4b3e      	ldr	r3, [pc, #248]	; (800aea4 <xTaskIncrementTick+0x158>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3301      	adds	r3, #1
 800adae:	4a3d      	ldr	r2, [pc, #244]	; (800aea4 <xTaskIncrementTick+0x158>)
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	f000 faf5 	bl	800b3a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adb6:	4b3c      	ldr	r3, [pc, #240]	; (800aea8 <xTaskIncrementTick+0x15c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d349      	bcc.n	800ae54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adc0:	4b36      	ldr	r3, [pc, #216]	; (800ae9c <xTaskIncrementTick+0x150>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d104      	bne.n	800add4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adca:	4b37      	ldr	r3, [pc, #220]	; (800aea8 <xTaskIncrementTick+0x15c>)
 800adcc:	f04f 32ff 	mov.w	r2, #4294967295
 800add0:	601a      	str	r2, [r3, #0]
					break;
 800add2:	e03f      	b.n	800ae54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add4:	4b31      	ldr	r3, [pc, #196]	; (800ae9c <xTaskIncrementTick+0x150>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d203      	bcs.n	800adf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adec:	4a2e      	ldr	r2, [pc, #184]	; (800aea8 <xTaskIncrementTick+0x15c>)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adf2:	e02f      	b.n	800ae54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fd85 	bl	8009908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3318      	adds	r3, #24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fd7c 	bl	8009908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4b25      	ldr	r3, [pc, #148]	; (800aeac <xTaskIncrementTick+0x160>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d903      	bls.n	800ae24 <xTaskIncrementTick+0xd8>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a22      	ldr	r2, [pc, #136]	; (800aeac <xTaskIncrementTick+0x160>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a1f      	ldr	r2, [pc, #124]	; (800aeb0 <xTaskIncrementTick+0x164>)
 800ae32:	441a      	add	r2, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fe fd07 	bl	800984e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <xTaskIncrementTick+0x168>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d3b8      	bcc.n	800adc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae52:	e7b5      	b.n	800adc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae54:	4b17      	ldr	r3, [pc, #92]	; (800aeb4 <xTaskIncrementTick+0x168>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5a:	4915      	ldr	r1, [pc, #84]	; (800aeb0 <xTaskIncrementTick+0x164>)
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	440b      	add	r3, r1
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d901      	bls.n	800ae70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae70:	4b11      	ldr	r3, [pc, #68]	; (800aeb8 <xTaskIncrementTick+0x16c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d007      	beq.n	800ae88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e004      	b.n	800ae88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <xTaskIncrementTick+0x170>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	4a0d      	ldr	r2, [pc, #52]	; (800aebc <xTaskIncrementTick+0x170>)
 800ae86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae88:	697b      	ldr	r3, [r7, #20]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200018a4 	.word	0x200018a4
 800ae98:	20001880 	.word	0x20001880
 800ae9c:	20001834 	.word	0x20001834
 800aea0:	20001838 	.word	0x20001838
 800aea4:	20001894 	.word	0x20001894
 800aea8:	2000189c 	.word	0x2000189c
 800aeac:	20001884 	.word	0x20001884
 800aeb0:	200013ac 	.word	0x200013ac
 800aeb4:	200013a8 	.word	0x200013a8
 800aeb8:	20001890 	.word	0x20001890
 800aebc:	2000188c 	.word	0x2000188c

0800aec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aec6:	4b3a      	ldr	r3, [pc, #232]	; (800afb0 <vTaskSwitchContext+0xf0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aece:	4b39      	ldr	r3, [pc, #228]	; (800afb4 <vTaskSwitchContext+0xf4>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aed4:	e068      	b.n	800afa8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800aed6:	4b37      	ldr	r3, [pc, #220]	; (800afb4 <vTaskSwitchContext+0xf4>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aedc:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <vTaskSwitchContext+0xf8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d111      	bne.n	800af18 <vTaskSwitchContext+0x58>
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	3304      	adds	r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d10b      	bne.n	800af18 <vTaskSwitchContext+0x58>
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3308      	adds	r3, #8
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d105      	bne.n	800af18 <vTaskSwitchContext+0x58>
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	330c      	adds	r3, #12
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	429a      	cmp	r2, r3
 800af16:	d008      	beq.n	800af2a <vTaskSwitchContext+0x6a>
 800af18:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <vTaskSwitchContext+0xf8>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	4b26      	ldr	r3, [pc, #152]	; (800afb8 <vTaskSwitchContext+0xf8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3334      	adds	r3, #52	; 0x34
 800af22:	4619      	mov	r1, r3
 800af24:	4610      	mov	r0, r2
 800af26:	f7f7 fb53 	bl	80025d0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2a:	4b24      	ldr	r3, [pc, #144]	; (800afbc <vTaskSwitchContext+0xfc>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e010      	b.n	800af54 <vTaskSwitchContext+0x94>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <vTaskSwitchContext+0x8e>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	607b      	str	r3, [r7, #4]
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <vTaskSwitchContext+0x8c>
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	3b01      	subs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	491a      	ldr	r1, [pc, #104]	; (800afc0 <vTaskSwitchContext+0x100>)
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	440b      	add	r3, r1
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0e4      	beq.n	800af32 <vTaskSwitchContext+0x72>
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <vTaskSwitchContext+0x100>)
 800af74:	4413      	add	r3, r2
 800af76:	60bb      	str	r3, [r7, #8]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	605a      	str	r2, [r3, #4]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3308      	adds	r3, #8
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d104      	bne.n	800af98 <vTaskSwitchContext+0xd8>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	605a      	str	r2, [r3, #4]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	4a06      	ldr	r2, [pc, #24]	; (800afb8 <vTaskSwitchContext+0xf8>)
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	4a06      	ldr	r2, [pc, #24]	; (800afbc <vTaskSwitchContext+0xfc>)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	6013      	str	r3, [r2, #0]
}
 800afa8:	bf00      	nop
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	200018a4 	.word	0x200018a4
 800afb4:	20001890 	.word	0x20001890
 800afb8:	200013a8 	.word	0x200013a8
 800afbc:	20001884 	.word	0x20001884
 800afc0:	200013ac 	.word	0x200013ac

0800afc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10a      	bne.n	800afea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60fb      	str	r3, [r7, #12]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <vTaskPlaceOnEventList+0x44>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3318      	adds	r3, #24
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fe fc4f 	bl	8009896 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aff8:	2101      	movs	r1, #1
 800affa:	6838      	ldr	r0, [r7, #0]
 800affc:	f000 fb8a 	bl	800b714 <prvAddCurrentTaskToDelayedList>
}
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	200013a8 	.word	0x200013a8

0800b00c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	617b      	str	r3, [r7, #20]
}
 800b030:	bf00      	nop
 800b032:	e7fe      	b.n	800b032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <vTaskPlaceOnEventListRestricted+0x54>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	3318      	adds	r3, #24
 800b03a:	4619      	mov	r1, r3
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7fe fc06 	bl	800984e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	68b8      	ldr	r0, [r7, #8]
 800b052:	f000 fb5f 	bl	800b714 <prvAddCurrentTaskToDelayedList>
	}
 800b056:	bf00      	nop
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200013a8 	.word	0x200013a8

0800b064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10a      	bne.n	800b090 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	60fb      	str	r3, [r7, #12]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	3318      	adds	r3, #24
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe fc37 	bl	8009908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b09a:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <xTaskRemoveFromEventList+0xb0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d11d      	bne.n	800b0de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fc2e 	bl	8009908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	4b19      	ldr	r3, [pc, #100]	; (800b118 <xTaskRemoveFromEventList+0xb4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <xTaskRemoveFromEventList+0x5c>
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a16      	ldr	r2, [pc, #88]	; (800b118 <xTaskRemoveFromEventList+0xb4>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a13      	ldr	r2, [pc, #76]	; (800b11c <xTaskRemoveFromEventList+0xb8>)
 800b0ce:	441a      	add	r2, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7fe fbb9 	bl	800984e <vListInsertEnd>
 800b0dc:	e005      	b.n	800b0ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	3318      	adds	r3, #24
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	480e      	ldr	r0, [pc, #56]	; (800b120 <xTaskRemoveFromEventList+0xbc>)
 800b0e6:	f7fe fbb2 	bl	800984e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	; (800b124 <xTaskRemoveFromEventList+0xc0>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d905      	bls.n	800b104 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <xTaskRemoveFromEventList+0xc4>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	e001      	b.n	800b108 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b108:	697b      	ldr	r3, [r7, #20]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	200018a4 	.word	0x200018a4
 800b118:	20001884 	.word	0x20001884
 800b11c:	200013ac 	.word	0x200013ac
 800b120:	2000183c 	.word	0x2000183c
 800b124:	200013a8 	.word	0x200013a8
 800b128:	20001890 	.word	0x20001890

0800b12c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <vTaskInternalSetTimeOutState+0x24>)
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b13c:	4b05      	ldr	r3, [pc, #20]	; (800b154 <vTaskInternalSetTimeOutState+0x28>)
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	605a      	str	r2, [r3, #4]
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	20001894 	.word	0x20001894
 800b154:	20001880 	.word	0x20001880

0800b158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10a      	bne.n	800b17e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	613b      	str	r3, [r7, #16]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	60fb      	str	r3, [r7, #12]
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b19a:	f000 ff8b 	bl	800c0b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <xTaskCheckForTimeOut+0xbc>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d102      	bne.n	800b1be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	61fb      	str	r3, [r7, #28]
 800b1bc:	e023      	b.n	800b206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <xTaskCheckForTimeOut+0xc0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d007      	beq.n	800b1da <xTaskCheckForTimeOut+0x82>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d302      	bcc.n	800b1da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	e015      	b.n	800b206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d20b      	bcs.n	800b1fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	1ad2      	subs	r2, r2, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff ff9b 	bl	800b12c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	61fb      	str	r3, [r7, #28]
 800b1fa:	e004      	b.n	800b206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b202:	2301      	movs	r3, #1
 800b204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b206:	f000 ff85 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800b20a:	69fb      	ldr	r3, [r7, #28]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3720      	adds	r7, #32
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20001880 	.word	0x20001880
 800b218:	20001894 	.word	0x20001894

0800b21c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b220:	4b03      	ldr	r3, [pc, #12]	; (800b230 <vTaskMissedYield+0x14>)
 800b222:	2201      	movs	r2, #1
 800b224:	601a      	str	r2, [r3, #0]
}
 800b226:	bf00      	nop
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20001890 	.word	0x20001890

0800b234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b23c:	f000 f852 	bl	800b2e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b240:	4b06      	ldr	r3, [pc, #24]	; (800b25c <prvIdleTask+0x28>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d9f9      	bls.n	800b23c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b248:	4b05      	ldr	r3, [pc, #20]	; (800b260 <prvIdleTask+0x2c>)
 800b24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b258:	e7f0      	b.n	800b23c <prvIdleTask+0x8>
 800b25a:	bf00      	nop
 800b25c:	200013ac 	.word	0x200013ac
 800b260:	e000ed04 	.word	0xe000ed04

0800b264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b26a:	2300      	movs	r3, #0
 800b26c:	607b      	str	r3, [r7, #4]
 800b26e:	e00c      	b.n	800b28a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4a12      	ldr	r2, [pc, #72]	; (800b2c4 <prvInitialiseTaskLists+0x60>)
 800b27c:	4413      	add	r3, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fab8 	bl	80097f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3301      	adds	r3, #1
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b37      	cmp	r3, #55	; 0x37
 800b28e:	d9ef      	bls.n	800b270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b290:	480d      	ldr	r0, [pc, #52]	; (800b2c8 <prvInitialiseTaskLists+0x64>)
 800b292:	f7fe faaf 	bl	80097f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b296:	480d      	ldr	r0, [pc, #52]	; (800b2cc <prvInitialiseTaskLists+0x68>)
 800b298:	f7fe faac 	bl	80097f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b29c:	480c      	ldr	r0, [pc, #48]	; (800b2d0 <prvInitialiseTaskLists+0x6c>)
 800b29e:	f7fe faa9 	bl	80097f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2a2:	480c      	ldr	r0, [pc, #48]	; (800b2d4 <prvInitialiseTaskLists+0x70>)
 800b2a4:	f7fe faa6 	bl	80097f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2a8:	480b      	ldr	r0, [pc, #44]	; (800b2d8 <prvInitialiseTaskLists+0x74>)
 800b2aa:	f7fe faa3 	bl	80097f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <prvInitialiseTaskLists+0x78>)
 800b2b0:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <prvInitialiseTaskLists+0x64>)
 800b2b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2b4:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <prvInitialiseTaskLists+0x7c>)
 800b2b6:	4a05      	ldr	r2, [pc, #20]	; (800b2cc <prvInitialiseTaskLists+0x68>)
 800b2b8:	601a      	str	r2, [r3, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200013ac 	.word	0x200013ac
 800b2c8:	2000180c 	.word	0x2000180c
 800b2cc:	20001820 	.word	0x20001820
 800b2d0:	2000183c 	.word	0x2000183c
 800b2d4:	20001850 	.word	0x20001850
 800b2d8:	20001868 	.word	0x20001868
 800b2dc:	20001834 	.word	0x20001834
 800b2e0:	20001838 	.word	0x20001838

0800b2e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2ea:	e019      	b.n	800b320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2ec:	f000 fee2 	bl	800c0b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f0:	4b10      	ldr	r3, [pc, #64]	; (800b334 <prvCheckTasksWaitingTermination+0x50>)
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fb03 	bl	8009908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b302:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <prvCheckTasksWaitingTermination+0x54>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3b01      	subs	r3, #1
 800b308:	4a0b      	ldr	r2, [pc, #44]	; (800b338 <prvCheckTasksWaitingTermination+0x54>)
 800b30a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b30c:	4b0b      	ldr	r3, [pc, #44]	; (800b33c <prvCheckTasksWaitingTermination+0x58>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3b01      	subs	r3, #1
 800b312:	4a0a      	ldr	r2, [pc, #40]	; (800b33c <prvCheckTasksWaitingTermination+0x58>)
 800b314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b316:	f000 fefd 	bl	800c114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f810 	bl	800b340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <prvCheckTasksWaitingTermination+0x58>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e1      	bne.n	800b2ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20001850 	.word	0x20001850
 800b338:	2000187c 	.word	0x2000187c
 800b33c:	20001864 	.word	0x20001864

0800b340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d108      	bne.n	800b364 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	4618      	mov	r0, r3
 800b358:	f001 f89a 	bl	800c490 <vPortFree>
				vPortFree( pxTCB );
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 f897 	bl	800c490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b362:	e018      	b.n	800b396 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d103      	bne.n	800b376 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f001 f88e 	bl	800c490 <vPortFree>
	}
 800b374:	e00f      	b.n	800b396 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d00a      	beq.n	800b396 <prvDeleteTCB+0x56>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60fb      	str	r3, [r7, #12]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <prvDeleteTCB+0x54>
	}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a6:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <prvResetNextTaskUnblockTime+0x38>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <prvResetNextTaskUnblockTime+0x3c>)
 800b3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3b8:	e008      	b.n	800b3cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <prvResetNextTaskUnblockTime+0x38>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4a04      	ldr	r2, [pc, #16]	; (800b3dc <prvResetNextTaskUnblockTime+0x3c>)
 800b3ca:	6013      	str	r3, [r2, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	20001834 	.word	0x20001834
 800b3dc:	2000189c 	.word	0x2000189c

0800b3e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b3e6:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <xTaskGetCurrentTaskHandle+0x1c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b3ec:	687b      	ldr	r3, [r7, #4]
	}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	200013a8 	.word	0x200013a8

0800b400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <xTaskGetSchedulerState+0x34>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d102      	bne.n	800b414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b40e:	2301      	movs	r3, #1
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e008      	b.n	800b426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <xTaskGetSchedulerState+0x38>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b41c:	2302      	movs	r3, #2
 800b41e:	607b      	str	r3, [r7, #4]
 800b420:	e001      	b.n	800b426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b422:	2300      	movs	r3, #0
 800b424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b426:	687b      	ldr	r3, [r7, #4]
	}
 800b428:	4618      	mov	r0, r3
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	20001888 	.word	0x20001888
 800b438:	200018a4 	.word	0x200018a4

0800b43c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d051      	beq.n	800b4f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	4b2a      	ldr	r3, [pc, #168]	; (800b500 <xTaskPriorityInherit+0xc4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d241      	bcs.n	800b4e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	2b00      	cmp	r3, #0
 800b466:	db06      	blt.n	800b476 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b468:	4b25      	ldr	r3, [pc, #148]	; (800b500 <xTaskPriorityInherit+0xc4>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6959      	ldr	r1, [r3, #20]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4a1f      	ldr	r2, [pc, #124]	; (800b504 <xTaskPriorityInherit+0xc8>)
 800b488:	4413      	add	r3, r2
 800b48a:	4299      	cmp	r1, r3
 800b48c:	d122      	bne.n	800b4d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	3304      	adds	r3, #4
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fa38 	bl	8009908 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b498:	4b19      	ldr	r3, [pc, #100]	; (800b500 <xTaskPriorityInherit+0xc4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	4b18      	ldr	r3, [pc, #96]	; (800b508 <xTaskPriorityInherit+0xcc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d903      	bls.n	800b4b6 <xTaskPriorityInherit+0x7a>
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	4a15      	ldr	r2, [pc, #84]	; (800b508 <xTaskPriorityInherit+0xcc>)
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4a10      	ldr	r2, [pc, #64]	; (800b504 <xTaskPriorityInherit+0xc8>)
 800b4c4:	441a      	add	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7fe f9be 	bl	800984e <vListInsertEnd>
 800b4d2:	e004      	b.n	800b4de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4d4:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <xTaskPriorityInherit+0xc4>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	e008      	b.n	800b4f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <xTaskPriorityInherit+0xc4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d201      	bcs.n	800b4f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	200013a8 	.word	0x200013a8
 800b504:	200013ac 	.word	0x200013ac
 800b508:	20001884 	.word	0x20001884

0800b50c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d056      	beq.n	800b5d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b522:	4b2e      	ldr	r3, [pc, #184]	; (800b5dc <xTaskPriorityDisinherit+0xd0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d00a      	beq.n	800b542 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	60fb      	str	r3, [r7, #12]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10a      	bne.n	800b560 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60bb      	str	r3, [r7, #8]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b564:	1e5a      	subs	r2, r3, #1
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b572:	429a      	cmp	r2, r3
 800b574:	d02c      	beq.n	800b5d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d128      	bne.n	800b5d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	3304      	adds	r3, #4
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe f9c0 	bl	8009908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a0:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <xTaskPriorityDisinherit+0xd4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d903      	bls.n	800b5b0 <xTaskPriorityDisinherit+0xa4>
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	4a0c      	ldr	r2, [pc, #48]	; (800b5e0 <xTaskPriorityDisinherit+0xd4>)
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4a09      	ldr	r2, [pc, #36]	; (800b5e4 <xTaskPriorityDisinherit+0xd8>)
 800b5be:	441a      	add	r2, r3
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7fe f941 	bl	800984e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5d0:	697b      	ldr	r3, [r7, #20]
	}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200013a8 	.word	0x200013a8
 800b5e0:	20001884 	.word	0x20001884
 800b5e4:	200013ac 	.word	0x200013ac

0800b5e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d06a      	beq.n	800b6d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	60fb      	str	r3, [r7, #12]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d902      	bls.n	800b62e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	61fb      	str	r3, [r7, #28]
 800b62c:	e002      	b.n	800b634 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b632:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	69fa      	ldr	r2, [r7, #28]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d04b      	beq.n	800b6d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	429a      	cmp	r2, r3
 800b646:	d146      	bne.n	800b6d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b648:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d10a      	bne.n	800b668 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60bb      	str	r3, [r7, #8]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	69fa      	ldr	r2, [r7, #28]
 800b672:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db04      	blt.n	800b686 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	6959      	ldr	r1, [r3, #20]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	4613      	mov	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4a13      	ldr	r2, [pc, #76]	; (800b6e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b696:	4413      	add	r3, r2
 800b698:	4299      	cmp	r1, r3
 800b69a:	d11c      	bne.n	800b6d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe f931 	bl	8009908 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6aa:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d903      	bls.n	800b6ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	4a0c      	ldr	r2, [pc, #48]	; (800b6e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6be:	4613      	mov	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4a07      	ldr	r2, [pc, #28]	; (800b6e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b6c8:	441a      	add	r2, r3
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7fe f8bc 	bl	800984e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6d6:	bf00      	nop
 800b6d8:	3720      	adds	r7, #32
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	200013a8 	.word	0x200013a8
 800b6e4:	200013ac 	.word	0x200013ac
 800b6e8:	20001884 	.word	0x20001884

0800b6ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b6f8:	4b05      	ldr	r3, [pc, #20]	; (800b710 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6fe:	3201      	adds	r2, #1
 800b700:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b702:	4b03      	ldr	r3, [pc, #12]	; (800b710 <pvTaskIncrementMutexHeldCount+0x24>)
 800b704:	681b      	ldr	r3, [r3, #0]
	}
 800b706:	4618      	mov	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	200013a8 	.word	0x200013a8

0800b714 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b71e:	4b21      	ldr	r3, [pc, #132]	; (800b7a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b724:	4b20      	ldr	r3, [pc, #128]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3304      	adds	r3, #4
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fe f8ec 	bl	8009908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d10a      	bne.n	800b74e <prvAddCurrentTaskToDelayedList+0x3a>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d007      	beq.n	800b74e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b73e:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3304      	adds	r3, #4
 800b744:	4619      	mov	r1, r3
 800b746:	4819      	ldr	r0, [pc, #100]	; (800b7ac <prvAddCurrentTaskToDelayedList+0x98>)
 800b748:	f7fe f881 	bl	800984e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b74c:	e026      	b.n	800b79c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4413      	add	r3, r2
 800b754:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	429a      	cmp	r2, r3
 800b764:	d209      	bcs.n	800b77a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b766:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3304      	adds	r3, #4
 800b770:	4619      	mov	r1, r3
 800b772:	4610      	mov	r0, r2
 800b774:	f7fe f88f 	bl	8009896 <vListInsert>
}
 800b778:	e010      	b.n	800b79c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b77a:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3304      	adds	r3, #4
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f7fe f885 	bl	8009896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	429a      	cmp	r2, r3
 800b794:	d202      	bcs.n	800b79c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b796:	4a08      	ldr	r2, [pc, #32]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6013      	str	r3, [r2, #0]
}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20001880 	.word	0x20001880
 800b7a8:	200013a8 	.word	0x200013a8
 800b7ac:	20001868 	.word	0x20001868
 800b7b0:	20001838 	.word	0x20001838
 800b7b4:	20001834 	.word	0x20001834
 800b7b8:	2000189c 	.word	0x2000189c

0800b7bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b08a      	sub	sp, #40	; 0x28
 800b7c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7c6:	f000 fb07 	bl	800bdd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7ca:	4b1c      	ldr	r3, [pc, #112]	; (800b83c <xTimerCreateTimerTask+0x80>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d021      	beq.n	800b816 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7da:	1d3a      	adds	r2, r7, #4
 800b7dc:	f107 0108 	add.w	r1, r7, #8
 800b7e0:	f107 030c 	add.w	r3, r7, #12
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fd ffeb 	bl	80097c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7ea:	6879      	ldr	r1, [r7, #4]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	9202      	str	r2, [sp, #8]
 800b7f2:	9301      	str	r3, [sp, #4]
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	460a      	mov	r2, r1
 800b7fc:	4910      	ldr	r1, [pc, #64]	; (800b840 <xTimerCreateTimerTask+0x84>)
 800b7fe:	4811      	ldr	r0, [pc, #68]	; (800b844 <xTimerCreateTimerTask+0x88>)
 800b800:	f7fe ffac 	bl	800a75c <xTaskCreateStatic>
 800b804:	4603      	mov	r3, r0
 800b806:	4a10      	ldr	r2, [pc, #64]	; (800b848 <xTimerCreateTimerTask+0x8c>)
 800b808:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b80a:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <xTimerCreateTimerTask+0x8c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b812:	2301      	movs	r3, #1
 800b814:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	613b      	str	r3, [r7, #16]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b832:	697b      	ldr	r3, [r7, #20]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	200018d8 	.word	0x200018d8
 800b840:	0800f6a0 	.word	0x0800f6a0
 800b844:	0800b981 	.word	0x0800b981
 800b848:	200018dc 	.word	0x200018dc

0800b84c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	623b      	str	r3, [r7, #32]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b87a:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <xTimerGenericCommand+0x98>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d02a      	beq.n	800b8d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b05      	cmp	r3, #5
 800b892:	dc18      	bgt.n	800b8c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b894:	f7ff fdb4 	bl	800b400 <xTaskGetSchedulerState>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d109      	bne.n	800b8b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b89e:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <xTimerGenericCommand+0x98>)
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f107 0110 	add.w	r1, r7, #16
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8aa:	f7fe fa4b 	bl	8009d44 <xQueueGenericSend>
 800b8ae:	6278      	str	r0, [r7, #36]	; 0x24
 800b8b0:	e012      	b.n	800b8d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <xTimerGenericCommand+0x98>)
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	f107 0110 	add.w	r1, r7, #16
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f7fe fa41 	bl	8009d44 <xQueueGenericSend>
 800b8c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b8c4:	e008      	b.n	800b8d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8c6:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <xTimerGenericCommand+0x98>)
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f107 0110 	add.w	r1, r7, #16
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	f7fe fb35 	bl	8009f40 <xQueueGenericSendFromISR>
 800b8d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3728      	adds	r7, #40	; 0x28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	200018d8 	.word	0x200018d8

0800b8e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af02      	add	r7, sp, #8
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f2:	4b22      	ldr	r3, [pc, #136]	; (800b97c <prvProcessExpiredTimer+0x94>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe f801 	bl	8009908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d022      	beq.n	800b95a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	699a      	ldr	r2, [r3, #24]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	18d1      	adds	r1, r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6978      	ldr	r0, [r7, #20]
 800b922:	f000 f8d1 	bl	800bac8 <prvInsertTimerInActiveList>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01f      	beq.n	800b96c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b92c:	2300      	movs	r3, #0
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	2300      	movs	r3, #0
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	2100      	movs	r1, #0
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f7ff ff88 	bl	800b84c <xTimerGenericCommand>
 800b93c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d113      	bne.n	800b96c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	60fb      	str	r3, [r7, #12]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b960:	f023 0301 	bic.w	r3, r3, #1
 800b964:	b2da      	uxtb	r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	6978      	ldr	r0, [r7, #20]
 800b972:	4798      	blx	r3
}
 800b974:	bf00      	nop
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	200018d0 	.word	0x200018d0

0800b980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f857 	bl	800ba40 <prvGetNextExpireTime>
 800b992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4619      	mov	r1, r3
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f803 	bl	800b9a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b99e:	f000 f8d5 	bl	800bb4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9a2:	e7f1      	b.n	800b988 <prvTimerTask+0x8>

0800b9a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9ae:	f7ff f911 	bl	800abd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9b2:	f107 0308 	add.w	r3, r7, #8
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 f866 	bl	800ba88 <prvSampleTimeNow>
 800b9bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d130      	bne.n	800ba26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10a      	bne.n	800b9e0 <prvProcessTimerOrBlockTask+0x3c>
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d806      	bhi.n	800b9e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9d2:	f7ff f90d 	bl	800abf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9d6:	68f9      	ldr	r1, [r7, #12]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff ff85 	bl	800b8e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9de:	e024      	b.n	800ba2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9e6:	4b13      	ldr	r3, [pc, #76]	; (800ba34 <prvProcessTimerOrBlockTask+0x90>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <prvProcessTimerOrBlockTask+0x50>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e000      	b.n	800b9f6 <prvProcessTimerOrBlockTask+0x52>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ba38 <prvProcessTimerOrBlockTask+0x94>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7fe fe75 	bl	800a6f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba0a:	f7ff f8f1 	bl	800abf0 <xTaskResumeAll>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba14:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <prvProcessTimerOrBlockTask+0x98>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	f3bf 8f6f 	isb	sy
}
 800ba24:	e001      	b.n	800ba2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba26:	f7ff f8e3 	bl	800abf0 <xTaskResumeAll>
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200018d4 	.word	0x200018d4
 800ba38:	200018d8 	.word	0x200018d8
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba48:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <prvGetNextExpireTime+0x44>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <prvGetNextExpireTime+0x16>
 800ba52:	2201      	movs	r2, #1
 800ba54:	e000      	b.n	800ba58 <prvGetNextExpireTime+0x18>
 800ba56:	2200      	movs	r2, #0
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d105      	bne.n	800ba70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba64:	4b07      	ldr	r3, [pc, #28]	; (800ba84 <prvGetNextExpireTime+0x44>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e001      	b.n	800ba74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba74:	68fb      	ldr	r3, [r7, #12]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	200018d0 	.word	0x200018d0

0800ba88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba90:	f7ff f94c 	bl	800ad2c <xTaskGetTickCount>
 800ba94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <prvSampleTimeNow+0x3c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d205      	bcs.n	800baac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800baa0:	f000 f936 	bl	800bd10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	e002      	b.n	800bab2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bab2:	4a04      	ldr	r2, [pc, #16]	; (800bac4 <prvSampleTimeNow+0x3c>)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bab8:	68fb      	ldr	r3, [r7, #12]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	200018e0 	.word	0x200018e0

0800bac8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	429a      	cmp	r2, r3
 800baec:	d812      	bhi.n	800bb14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	1ad2      	subs	r2, r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d302      	bcc.n	800bb02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bafc:	2301      	movs	r3, #1
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e01b      	b.n	800bb3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb02:	4b10      	ldr	r3, [pc, #64]	; (800bb44 <prvInsertTimerInActiveList+0x7c>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	f7fd fec2 	bl	8009896 <vListInsert>
 800bb12:	e012      	b.n	800bb3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d206      	bcs.n	800bb2a <prvInsertTimerInActiveList+0x62>
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d302      	bcc.n	800bb2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	e007      	b.n	800bb3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb2a:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <prvInsertTimerInActiveList+0x80>)
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3304      	adds	r3, #4
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7fd feae 	bl	8009896 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb3a:	697b      	ldr	r3, [r7, #20]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	200018d4 	.word	0x200018d4
 800bb48:	200018d0 	.word	0x200018d0

0800bb4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08e      	sub	sp, #56	; 0x38
 800bb50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb52:	e0ca      	b.n	800bcea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	da18      	bge.n	800bb8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb5a:	1d3b      	adds	r3, r7, #4
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	61fb      	str	r3, [r7, #28]
}
 800bb78:	bf00      	nop
 800bb7a:	e7fe      	b.n	800bb7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb82:	6850      	ldr	r0, [r2, #4]
 800bb84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb86:	6892      	ldr	r2, [r2, #8]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f2c0 80ab 	blt.w	800bcea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	3304      	adds	r3, #4
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fd feaf 	bl	8009908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbaa:	463b      	mov	r3, r7
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ff6b 	bl	800ba88 <prvSampleTimeNow>
 800bbb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b09      	cmp	r3, #9
 800bbb8:	f200 8096 	bhi.w	800bce8 <prvProcessReceivedCommands+0x19c>
 800bbbc:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <prvProcessReceivedCommands+0x78>)
 800bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc2:	bf00      	nop
 800bbc4:	0800bbed 	.word	0x0800bbed
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbed 	.word	0x0800bbed
 800bbd0:	0800bc61 	.word	0x0800bc61
 800bbd4:	0800bc75 	.word	0x0800bc75
 800bbd8:	0800bcbf 	.word	0x0800bcbf
 800bbdc:	0800bbed 	.word	0x0800bbed
 800bbe0:	0800bbed 	.word	0x0800bbed
 800bbe4:	0800bc61 	.word	0x0800bc61
 800bbe8:	0800bc75 	.word	0x0800bc75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	18d1      	adds	r1, r2, r3
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0c:	f7ff ff5c 	bl	800bac8 <prvInsertTimerInActiveList>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d069      	beq.n	800bcea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d05e      	beq.n	800bcea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	441a      	add	r2, r3
 800bc34:	2300      	movs	r3, #0
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3e:	f7ff fe05 	bl	800b84c <xTimerGenericCommand>
 800bc42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d14f      	bne.n	800bcea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	61bb      	str	r3, [r7, #24]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc66:	f023 0301 	bic.w	r3, r3, #1
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc72:	e03a      	b.n	800bcea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10a      	bne.n	800bcaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	617b      	str	r3, [r7, #20]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	699a      	ldr	r2, [r3, #24]
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	18d1      	adds	r1, r2, r3
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb8:	f7ff ff06 	bl	800bac8 <prvInsertTimerInActiveList>
					break;
 800bcbc:	e015      	b.n	800bcea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc4:	f003 0302 	and.w	r3, r3, #2
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d103      	bne.n	800bcd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f000 fbdf 	bl	800c490 <vPortFree>
 800bcd2:	e00a      	b.n	800bcea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcda:	f023 0301 	bic.w	r3, r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bce6:	e000      	b.n	800bcea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bce8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcea:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <prvProcessReceivedCommands+0x1c0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	1d39      	adds	r1, r7, #4
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fe f9c0 	bl	800a078 <xQueueReceive>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f47f af2a 	bne.w	800bb54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	3730      	adds	r7, #48	; 0x30
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200018d8 	.word	0x200018d8

0800bd10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd16:	e048      	b.n	800bdaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd18:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd22:	4b2b      	ldr	r3, [pc, #172]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fd fde9 	bl	8009908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d02e      	beq.n	800bdaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	4413      	add	r3, r2
 800bd54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d90e      	bls.n	800bd7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd6a:	4b19      	ldr	r3, [pc, #100]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3304      	adds	r3, #4
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7fd fd8e 	bl	8009896 <vListInsert>
 800bd7a:	e016      	b.n	800bdaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	2300      	movs	r3, #0
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	2100      	movs	r1, #0
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7ff fd60 	bl	800b84c <xTimerGenericCommand>
 800bd8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	603b      	str	r3, [r7, #0]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1b1      	bne.n	800bd18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdb4:	4b06      	ldr	r3, [pc, #24]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdba:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <prvSwitchTimerLists+0xc4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a04      	ldr	r2, [pc, #16]	; (800bdd0 <prvSwitchTimerLists+0xc0>)
 800bdc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdc2:	4a04      	ldr	r2, [pc, #16]	; (800bdd4 <prvSwitchTimerLists+0xc4>)
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	6013      	str	r3, [r2, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	200018d0 	.word	0x200018d0
 800bdd4:	200018d4 	.word	0x200018d4

0800bdd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdde:	f000 f969 	bl	800c0b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bde2:	4b15      	ldr	r3, [pc, #84]	; (800be38 <prvCheckForValidListAndQueue+0x60>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d120      	bne.n	800be2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdea:	4814      	ldr	r0, [pc, #80]	; (800be3c <prvCheckForValidListAndQueue+0x64>)
 800bdec:	f7fd fd02 	bl	80097f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdf0:	4813      	ldr	r0, [pc, #76]	; (800be40 <prvCheckForValidListAndQueue+0x68>)
 800bdf2:	f7fd fcff 	bl	80097f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdf6:	4b13      	ldr	r3, [pc, #76]	; (800be44 <prvCheckForValidListAndQueue+0x6c>)
 800bdf8:	4a10      	ldr	r2, [pc, #64]	; (800be3c <prvCheckForValidListAndQueue+0x64>)
 800bdfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdfc:	4b12      	ldr	r3, [pc, #72]	; (800be48 <prvCheckForValidListAndQueue+0x70>)
 800bdfe:	4a10      	ldr	r2, [pc, #64]	; (800be40 <prvCheckForValidListAndQueue+0x68>)
 800be00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be02:	2300      	movs	r3, #0
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	4b11      	ldr	r3, [pc, #68]	; (800be4c <prvCheckForValidListAndQueue+0x74>)
 800be08:	4a11      	ldr	r2, [pc, #68]	; (800be50 <prvCheckForValidListAndQueue+0x78>)
 800be0a:	2110      	movs	r1, #16
 800be0c:	200a      	movs	r0, #10
 800be0e:	f7fd fe0d 	bl	8009a2c <xQueueGenericCreateStatic>
 800be12:	4603      	mov	r3, r0
 800be14:	4a08      	ldr	r2, [pc, #32]	; (800be38 <prvCheckForValidListAndQueue+0x60>)
 800be16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <prvCheckForValidListAndQueue+0x60>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d005      	beq.n	800be2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <prvCheckForValidListAndQueue+0x60>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	490b      	ldr	r1, [pc, #44]	; (800be54 <prvCheckForValidListAndQueue+0x7c>)
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe fc3a 	bl	800a6a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be2c:	f000 f972 	bl	800c114 <vPortExitCritical>
}
 800be30:	bf00      	nop
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	200018d8 	.word	0x200018d8
 800be3c:	200018a8 	.word	0x200018a8
 800be40:	200018bc 	.word	0x200018bc
 800be44:	200018d0 	.word	0x200018d0
 800be48:	200018d4 	.word	0x200018d4
 800be4c:	20001984 	.word	0x20001984
 800be50:	200018e4 	.word	0x200018e4
 800be54:	0800f6a8 	.word	0x0800f6a8

0800be58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b04      	subs	r3, #4
 800be68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3b04      	subs	r3, #4
 800be76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f023 0201 	bic.w	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3b04      	subs	r3, #4
 800be86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be88:	4a0c      	ldr	r2, [pc, #48]	; (800bebc <pxPortInitialiseStack+0x64>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3b14      	subs	r3, #20
 800be92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f06f 0202 	mvn.w	r2, #2
 800bea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3b20      	subs	r3, #32
 800beac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beae:	68fb      	ldr	r3, [r7, #12]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	0800bec1 	.word	0x0800bec1

0800bec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beca:	4b12      	ldr	r3, [pc, #72]	; (800bf14 <prvTaskExitError+0x54>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d00a      	beq.n	800beea <prvTaskExitError+0x2a>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	60fb      	str	r3, [r7, #12]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <prvTaskExitError+0x28>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	60bb      	str	r3, [r7, #8]
}
 800befc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800befe:	bf00      	nop
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0fc      	beq.n	800bf00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	20000014 	.word	0x20000014
	...

0800bf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf20:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <pxCurrentTCBConst2>)
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	6808      	ldr	r0, [r1, #0]
 800bf26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2a:	f380 8809 	msr	PSP, r0
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f04f 0000 	mov.w	r0, #0
 800bf36:	f380 8811 	msr	BASEPRI, r0
 800bf3a:	4770      	bx	lr
 800bf3c:	f3af 8000 	nop.w

0800bf40 <pxCurrentTCBConst2>:
 800bf40:	200013a8 	.word	0x200013a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf48:	4808      	ldr	r0, [pc, #32]	; (800bf6c <prvPortStartFirstTask+0x24>)
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	6800      	ldr	r0, [r0, #0]
 800bf4e:	f380 8808 	msr	MSP, r0
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8814 	msr	CONTROL, r0
 800bf5a:	b662      	cpsie	i
 800bf5c:	b661      	cpsie	f
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	df00      	svc	0
 800bf68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf6a:	bf00      	nop
 800bf6c:	e000ed08 	.word	0xe000ed08

0800bf70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf76:	4b46      	ldr	r3, [pc, #280]	; (800c090 <xPortStartScheduler+0x120>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a46      	ldr	r2, [pc, #280]	; (800c094 <xPortStartScheduler+0x124>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d10a      	bne.n	800bf96 <xPortStartScheduler+0x26>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	613b      	str	r3, [r7, #16]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf96:	4b3e      	ldr	r3, [pc, #248]	; (800c090 <xPortStartScheduler+0x120>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a3f      	ldr	r2, [pc, #252]	; (800c098 <xPortStartScheduler+0x128>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10a      	bne.n	800bfb6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60fb      	str	r3, [r7, #12]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <xPortStartScheduler+0x12c>)
 800bfb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	22ff      	movs	r2, #255	; 0xff
 800bfc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	4b31      	ldr	r3, [pc, #196]	; (800c0a0 <xPortStartScheduler+0x130>)
 800bfdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfde:	4b31      	ldr	r3, [pc, #196]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfe4:	e009      	b.n	800bffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bfe6:	4b2f      	ldr	r3, [pc, #188]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	4a2d      	ldr	r2, [pc, #180]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c002:	2b80      	cmp	r3, #128	; 0x80
 800c004:	d0ef      	beq.n	800bfe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c006:	4b27      	ldr	r3, [pc, #156]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f1c3 0307 	rsb	r3, r3, #7
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d00a      	beq.n	800c028 <xPortStartScheduler+0xb8>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60bb      	str	r3, [r7, #8]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c028:	4b1e      	ldr	r3, [pc, #120]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	4a1d      	ldr	r2, [pc, #116]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c032:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c03a:	4a1a      	ldr	r2, [pc, #104]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c03c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	b2da      	uxtb	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c046:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c04c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c05c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c05e:	f000 f8dd 	bl	800c21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c062:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <xPortStartScheduler+0x13c>)
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c068:	f000 f8fc 	bl	800c264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c06c:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <xPortStartScheduler+0x140>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0f      	ldr	r2, [pc, #60]	; (800c0b0 <xPortStartScheduler+0x140>)
 800c072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c078:	f7ff ff66 	bl	800bf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c07c:	f7fe ff20 	bl	800aec0 <vTaskSwitchContext>
	prvTaskExitError();
 800c080:	f7ff ff1e 	bl	800bec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	e000ed00 	.word	0xe000ed00
 800c094:	410fc271 	.word	0x410fc271
 800c098:	410fc270 	.word	0x410fc270
 800c09c:	e000e400 	.word	0xe000e400
 800c0a0:	200019d4 	.word	0x200019d4
 800c0a4:	200019d8 	.word	0x200019d8
 800c0a8:	e000ed20 	.word	0xe000ed20
 800c0ac:	20000014 	.word	0x20000014
 800c0b0:	e000ef34 	.word	0xe000ef34

0800c0b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	607b      	str	r3, [r7, #4]
}
 800c0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ce:	4b0f      	ldr	r3, [pc, #60]	; (800c10c <vPortEnterCritical+0x58>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a0d      	ldr	r2, [pc, #52]	; (800c10c <vPortEnterCritical+0x58>)
 800c0d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <vPortEnterCritical+0x58>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d10f      	bne.n	800c100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <vPortEnterCritical+0x5c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	603b      	str	r3, [r7, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <vPortEnterCritical+0x4a>
	}
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	20000014 	.word	0x20000014
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c11a:	4b12      	ldr	r3, [pc, #72]	; (800c164 <vPortExitCritical+0x50>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <vPortExitCritical+0x24>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <vPortExitCritical+0x50>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	4a09      	ldr	r2, [pc, #36]	; (800c164 <vPortExitCritical+0x50>)
 800c140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c142:	4b08      	ldr	r3, [pc, #32]	; (800c164 <vPortExitCritical+0x50>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d105      	bne.n	800c156 <vPortExitCritical+0x42>
 800c14a:	2300      	movs	r3, #0
 800c14c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	f383 8811 	msr	BASEPRI, r3
}
 800c154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000014 	.word	0x20000014
	...

0800c170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c170:	f3ef 8009 	mrs	r0, PSP
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	4b15      	ldr	r3, [pc, #84]	; (800c1d0 <pxCurrentTCBConst>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	f01e 0f10 	tst.w	lr, #16
 800c180:	bf08      	it	eq
 800c182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	6010      	str	r0, [r2, #0]
 800c18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c194:	f380 8811 	msr	BASEPRI, r0
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f7fe fe8e 	bl	800aec0 <vTaskSwitchContext>
 800c1a4:	f04f 0000 	mov.w	r0, #0
 800c1a8:	f380 8811 	msr	BASEPRI, r0
 800c1ac:	bc09      	pop	{r0, r3}
 800c1ae:	6819      	ldr	r1, [r3, #0]
 800c1b0:	6808      	ldr	r0, [r1, #0]
 800c1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b6:	f01e 0f10 	tst.w	lr, #16
 800c1ba:	bf08      	it	eq
 800c1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1c0:	f380 8809 	msr	PSP, r0
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	f3af 8000 	nop.w

0800c1d0 <pxCurrentTCBConst>:
 800c1d0:	200013a8 	.word	0x200013a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1d4:	bf00      	nop
 800c1d6:	bf00      	nop

0800c1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	607b      	str	r3, [r7, #4]
}
 800c1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1f2:	f7fe fdab 	bl	800ad4c <xTaskIncrementTick>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1fc:	4b06      	ldr	r3, [pc, #24]	; (800c218 <xPortSysTickHandler+0x40>)
 800c1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f383 8811 	msr	BASEPRI, r3
}
 800c20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <vPortSetupTimerInterrupt+0x38>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c22c:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <vPortSetupTimerInterrupt+0x3c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <vPortSetupTimerInterrupt+0x40>)
 800c232:	fba2 2303 	umull	r2, r3, r2, r3
 800c236:	099b      	lsrs	r3, r3, #6
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <vPortSetupTimerInterrupt+0x44>)
 800c23a:	3b01      	subs	r3, #1
 800c23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c23e:	4b04      	ldr	r3, [pc, #16]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c240:	2207      	movs	r2, #7
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	e000e010 	.word	0xe000e010
 800c254:	e000e018 	.word	0xe000e018
 800c258:	20000008 	.word	0x20000008
 800c25c:	10624dd3 	.word	0x10624dd3
 800c260:	e000e014 	.word	0xe000e014

0800c264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c274 <vPortEnableVFP+0x10>
 800c268:	6801      	ldr	r1, [r0, #0]
 800c26a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c26e:	6001      	str	r1, [r0, #0]
 800c270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c272:	bf00      	nop
 800c274:	e000ed88 	.word	0xe000ed88

0800c278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c27e:	f3ef 8305 	mrs	r3, IPSR
 800c282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b0f      	cmp	r3, #15
 800c288:	d914      	bls.n	800c2b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <vPortValidateInterruptPriority+0x70>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c294:	4b15      	ldr	r3, [pc, #84]	; (800c2ec <vPortValidateInterruptPriority+0x74>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	7afa      	ldrb	r2, [r7, #11]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d20a      	bcs.n	800c2b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	607b      	str	r3, [r7, #4]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2b4:	4b0e      	ldr	r3, [pc, #56]	; (800c2f0 <vPortValidateInterruptPriority+0x78>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2bc:	4b0d      	ldr	r3, [pc, #52]	; (800c2f4 <vPortValidateInterruptPriority+0x7c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d90a      	bls.n	800c2da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	603b      	str	r3, [r7, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <vPortValidateInterruptPriority+0x60>
	}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	e000e3f0 	.word	0xe000e3f0
 800c2ec:	200019d4 	.word	0x200019d4
 800c2f0:	e000ed0c 	.word	0xe000ed0c
 800c2f4:	200019d8 	.word	0x200019d8

0800c2f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08a      	sub	sp, #40	; 0x28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c304:	f7fe fc66 	bl	800abd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c308:	4b5b      	ldr	r3, [pc, #364]	; (800c478 <pvPortMalloc+0x180>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c310:	f000 f920 	bl	800c554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c314:	4b59      	ldr	r3, [pc, #356]	; (800c47c <pvPortMalloc+0x184>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4013      	ands	r3, r2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f040 8093 	bne.w	800c448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01d      	beq.n	800c364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c328:	2208      	movs	r2, #8
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4413      	add	r3, r2
 800c32e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f023 0307 	bic.w	r3, r3, #7
 800c340:	3308      	adds	r3, #8
 800c342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <pvPortMalloc+0x6c>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	617b      	str	r3, [r7, #20]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d06e      	beq.n	800c448 <pvPortMalloc+0x150>
 800c36a:	4b45      	ldr	r3, [pc, #276]	; (800c480 <pvPortMalloc+0x188>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	429a      	cmp	r2, r3
 800c372:	d869      	bhi.n	800c448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c374:	4b43      	ldr	r3, [pc, #268]	; (800c484 <pvPortMalloc+0x18c>)
 800c376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c378:	4b42      	ldr	r3, [pc, #264]	; (800c484 <pvPortMalloc+0x18c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c37e:	e004      	b.n	800c38a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	429a      	cmp	r2, r3
 800c392:	d903      	bls.n	800c39c <pvPortMalloc+0xa4>
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f1      	bne.n	800c380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c39c:	4b36      	ldr	r3, [pc, #216]	; (800c478 <pvPortMalloc+0x180>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d050      	beq.n	800c448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2208      	movs	r2, #8
 800c3ac:	4413      	add	r3, r2
 800c3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d91f      	bls.n	800c408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	613b      	str	r3, [r7, #16]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c402:	69b8      	ldr	r0, [r7, #24]
 800c404:	f000 f908 	bl	800c618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c408:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <pvPortMalloc+0x188>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	4a1b      	ldr	r2, [pc, #108]	; (800c480 <pvPortMalloc+0x188>)
 800c414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c416:	4b1a      	ldr	r3, [pc, #104]	; (800c480 <pvPortMalloc+0x188>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <pvPortMalloc+0x190>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d203      	bcs.n	800c42a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c422:	4b17      	ldr	r3, [pc, #92]	; (800c480 <pvPortMalloc+0x188>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a18      	ldr	r2, [pc, #96]	; (800c488 <pvPortMalloc+0x190>)
 800c428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	4b13      	ldr	r3, [pc, #76]	; (800c47c <pvPortMalloc+0x184>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	431a      	orrs	r2, r3
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <pvPortMalloc+0x194>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	4a11      	ldr	r2, [pc, #68]	; (800c48c <pvPortMalloc+0x194>)
 800c446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c448:	f7fe fbd2 	bl	800abf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <pvPortMalloc+0x174>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60fb      	str	r3, [r7, #12]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <pvPortMalloc+0x172>
	return pvReturn;
 800c46c:	69fb      	ldr	r3, [r7, #28]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3728      	adds	r7, #40	; 0x28
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	2000259c 	.word	0x2000259c
 800c47c:	200025b0 	.word	0x200025b0
 800c480:	200025a0 	.word	0x200025a0
 800c484:	20002594 	.word	0x20002594
 800c488:	200025a4 	.word	0x200025a4
 800c48c:	200025a8 	.word	0x200025a8

0800c490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d04d      	beq.n	800c53e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	425b      	negs	r3, r3
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	4b24      	ldr	r3, [pc, #144]	; (800c548 <vPortFree+0xb8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10a      	bne.n	800c4d4 <vPortFree+0x44>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	60fb      	str	r3, [r7, #12]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <vPortFree+0x62>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	60bb      	str	r3, [r7, #8]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	4b14      	ldr	r3, [pc, #80]	; (800c548 <vPortFree+0xb8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01e      	beq.n	800c53e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11a      	bne.n	800c53e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	4b0e      	ldr	r3, [pc, #56]	; (800c548 <vPortFree+0xb8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	43db      	mvns	r3, r3
 800c512:	401a      	ands	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c518:	f7fe fb5c 	bl	800abd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <vPortFree+0xbc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4413      	add	r3, r2
 800c526:	4a09      	ldr	r2, [pc, #36]	; (800c54c <vPortFree+0xbc>)
 800c528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f000 f874 	bl	800c618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <vPortFree+0xc0>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	4a06      	ldr	r2, [pc, #24]	; (800c550 <vPortFree+0xc0>)
 800c538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c53a:	f7fe fb59 	bl	800abf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c53e:	bf00      	nop
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200025b0 	.word	0x200025b0
 800c54c:	200025a0 	.word	0x200025a0
 800c550:	200025ac 	.word	0x200025ac

0800c554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c55a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c560:	4b27      	ldr	r3, [pc, #156]	; (800c600 <prvHeapInit+0xac>)
 800c562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00c      	beq.n	800c588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3307      	adds	r3, #7
 800c572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <prvHeapInit+0xac>)
 800c584:	4413      	add	r3, r2
 800c586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c58c:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <prvHeapInit+0xb0>)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <prvHeapInit+0xb0>)
 800c594:	2200      	movs	r2, #0
 800c596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5a0:	2208      	movs	r2, #8
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	1a9b      	subs	r3, r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0307 	bic.w	r3, r3, #7
 800c5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4a15      	ldr	r2, [pc, #84]	; (800c608 <prvHeapInit+0xb4>)
 800c5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5b6:	4b14      	ldr	r3, [pc, #80]	; (800c608 <prvHeapInit+0xb4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5be:	4b12      	ldr	r3, [pc, #72]	; (800c608 <prvHeapInit+0xb4>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5d4:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <prvHeapInit+0xb4>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a0a      	ldr	r2, [pc, #40]	; (800c60c <prvHeapInit+0xb8>)
 800c5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	4a09      	ldr	r2, [pc, #36]	; (800c610 <prvHeapInit+0xbc>)
 800c5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5ec:	4b09      	ldr	r3, [pc, #36]	; (800c614 <prvHeapInit+0xc0>)
 800c5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5f2:	601a      	str	r2, [r3, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	200019dc 	.word	0x200019dc
 800c604:	20002594 	.word	0x20002594
 800c608:	2000259c 	.word	0x2000259c
 800c60c:	200025a4 	.word	0x200025a4
 800c610:	200025a0 	.word	0x200025a0
 800c614:	200025b0 	.word	0x200025b0

0800c618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c620:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <prvInsertBlockIntoFreeList+0xac>)
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	e002      	b.n	800c62c <prvInsertBlockIntoFreeList+0x14>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	429a      	cmp	r2, r3
 800c634:	d8f7      	bhi.n	800c626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	4413      	add	r3, r2
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	429a      	cmp	r2, r3
 800c646:	d108      	bne.n	800c65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	441a      	add	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d118      	bne.n	800c6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d00d      	beq.n	800c696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	441a      	add	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e008      	b.n	800c6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e003      	b.n	800c6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d002      	beq.n	800c6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20002594 	.word	0x20002594
 800c6c8:	2000259c 	.word	0x2000259c

0800c6cc <__cvt>:
 800c6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	ec55 4b10 	vmov	r4, r5, d0
 800c6d4:	2d00      	cmp	r5, #0
 800c6d6:	460e      	mov	r6, r1
 800c6d8:	4619      	mov	r1, r3
 800c6da:	462b      	mov	r3, r5
 800c6dc:	bfbb      	ittet	lt
 800c6de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6e2:	461d      	movlt	r5, r3
 800c6e4:	2300      	movge	r3, #0
 800c6e6:	232d      	movlt	r3, #45	; 0x2d
 800c6e8:	700b      	strb	r3, [r1, #0]
 800c6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c6f0:	4691      	mov	r9, r2
 800c6f2:	f023 0820 	bic.w	r8, r3, #32
 800c6f6:	bfbc      	itt	lt
 800c6f8:	4622      	movlt	r2, r4
 800c6fa:	4614      	movlt	r4, r2
 800c6fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c700:	d005      	beq.n	800c70e <__cvt+0x42>
 800c702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c706:	d100      	bne.n	800c70a <__cvt+0x3e>
 800c708:	3601      	adds	r6, #1
 800c70a:	2102      	movs	r1, #2
 800c70c:	e000      	b.n	800c710 <__cvt+0x44>
 800c70e:	2103      	movs	r1, #3
 800c710:	ab03      	add	r3, sp, #12
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	ab02      	add	r3, sp, #8
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	ec45 4b10 	vmov	d0, r4, r5
 800c71c:	4653      	mov	r3, sl
 800c71e:	4632      	mov	r2, r6
 800c720:	f000 ff92 	bl	800d648 <_dtoa_r>
 800c724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c728:	4607      	mov	r7, r0
 800c72a:	d102      	bne.n	800c732 <__cvt+0x66>
 800c72c:	f019 0f01 	tst.w	r9, #1
 800c730:	d022      	beq.n	800c778 <__cvt+0xac>
 800c732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c736:	eb07 0906 	add.w	r9, r7, r6
 800c73a:	d110      	bne.n	800c75e <__cvt+0x92>
 800c73c:	783b      	ldrb	r3, [r7, #0]
 800c73e:	2b30      	cmp	r3, #48	; 0x30
 800c740:	d10a      	bne.n	800c758 <__cvt+0x8c>
 800c742:	2200      	movs	r2, #0
 800c744:	2300      	movs	r3, #0
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f4 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c74e:	b918      	cbnz	r0, 800c758 <__cvt+0x8c>
 800c750:	f1c6 0601 	rsb	r6, r6, #1
 800c754:	f8ca 6000 	str.w	r6, [sl]
 800c758:	f8da 3000 	ldr.w	r3, [sl]
 800c75c:	4499      	add	r9, r3
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f4 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76a:	b108      	cbz	r0, 800c770 <__cvt+0xa4>
 800c76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c770:	2230      	movs	r2, #48	; 0x30
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	454b      	cmp	r3, r9
 800c776:	d307      	bcc.n	800c788 <__cvt+0xbc>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c77c:	1bdb      	subs	r3, r3, r7
 800c77e:	4638      	mov	r0, r7
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	b004      	add	sp, #16
 800c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c788:	1c59      	adds	r1, r3, #1
 800c78a:	9103      	str	r1, [sp, #12]
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	e7f0      	b.n	800c772 <__cvt+0xa6>

0800c790 <__exponent>:
 800c790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c792:	4603      	mov	r3, r0
 800c794:	2900      	cmp	r1, #0
 800c796:	bfb8      	it	lt
 800c798:	4249      	neglt	r1, r1
 800c79a:	f803 2b02 	strb.w	r2, [r3], #2
 800c79e:	bfb4      	ite	lt
 800c7a0:	222d      	movlt	r2, #45	; 0x2d
 800c7a2:	222b      	movge	r2, #43	; 0x2b
 800c7a4:	2909      	cmp	r1, #9
 800c7a6:	7042      	strb	r2, [r0, #1]
 800c7a8:	dd2a      	ble.n	800c800 <__exponent+0x70>
 800c7aa:	f10d 0207 	add.w	r2, sp, #7
 800c7ae:	4617      	mov	r7, r2
 800c7b0:	260a      	movs	r6, #10
 800c7b2:	4694      	mov	ip, r2
 800c7b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c7b8:	fb06 1415 	mls	r4, r6, r5, r1
 800c7bc:	3430      	adds	r4, #48	; 0x30
 800c7be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2c63      	cmp	r4, #99	; 0x63
 800c7c6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	dcf1      	bgt.n	800c7b2 <__exponent+0x22>
 800c7ce:	3130      	adds	r1, #48	; 0x30
 800c7d0:	f1ac 0402 	sub.w	r4, ip, #2
 800c7d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7d8:	1c41      	adds	r1, r0, #1
 800c7da:	4622      	mov	r2, r4
 800c7dc:	42ba      	cmp	r2, r7
 800c7de:	d30a      	bcc.n	800c7f6 <__exponent+0x66>
 800c7e0:	f10d 0209 	add.w	r2, sp, #9
 800c7e4:	eba2 020c 	sub.w	r2, r2, ip
 800c7e8:	42bc      	cmp	r4, r7
 800c7ea:	bf88      	it	hi
 800c7ec:	2200      	movhi	r2, #0
 800c7ee:	4413      	add	r3, r2
 800c7f0:	1a18      	subs	r0, r3, r0
 800c7f2:	b003      	add	sp, #12
 800c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7fe:	e7ed      	b.n	800c7dc <__exponent+0x4c>
 800c800:	2330      	movs	r3, #48	; 0x30
 800c802:	3130      	adds	r1, #48	; 0x30
 800c804:	7083      	strb	r3, [r0, #2]
 800c806:	70c1      	strb	r1, [r0, #3]
 800c808:	1d03      	adds	r3, r0, #4
 800c80a:	e7f1      	b.n	800c7f0 <__exponent+0x60>

0800c80c <_printf_float>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	ed2d 8b02 	vpush	{d8}
 800c814:	b08d      	sub	sp, #52	; 0x34
 800c816:	460c      	mov	r4, r1
 800c818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c81c:	4616      	mov	r6, r2
 800c81e:	461f      	mov	r7, r3
 800c820:	4605      	mov	r5, r0
 800c822:	f000 fe03 	bl	800d42c <_localeconv_r>
 800c826:	f8d0 a000 	ldr.w	sl, [r0]
 800c82a:	4650      	mov	r0, sl
 800c82c:	f7f3 fd20 	bl	8000270 <strlen>
 800c830:	2300      	movs	r3, #0
 800c832:	930a      	str	r3, [sp, #40]	; 0x28
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	f8d8 3000 	ldr.w	r3, [r8]
 800c83c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c840:	3307      	adds	r3, #7
 800c842:	f023 0307 	bic.w	r3, r3, #7
 800c846:	f103 0208 	add.w	r2, r3, #8
 800c84a:	f8c8 2000 	str.w	r2, [r8]
 800c84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c856:	9307      	str	r3, [sp, #28]
 800c858:	f8cd 8018 	str.w	r8, [sp, #24]
 800c85c:	ee08 0a10 	vmov	s16, r0
 800c860:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c868:	4b9e      	ldr	r3, [pc, #632]	; (800cae4 <_printf_float+0x2d8>)
 800c86a:	f04f 32ff 	mov.w	r2, #4294967295
 800c86e:	f7f4 f95d 	bl	8000b2c <__aeabi_dcmpun>
 800c872:	bb88      	cbnz	r0, 800c8d8 <_printf_float+0xcc>
 800c874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c878:	4b9a      	ldr	r3, [pc, #616]	; (800cae4 <_printf_float+0x2d8>)
 800c87a:	f04f 32ff 	mov.w	r2, #4294967295
 800c87e:	f7f4 f937 	bl	8000af0 <__aeabi_dcmple>
 800c882:	bb48      	cbnz	r0, 800c8d8 <_printf_float+0xcc>
 800c884:	2200      	movs	r2, #0
 800c886:	2300      	movs	r3, #0
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f4 f926 	bl	8000adc <__aeabi_dcmplt>
 800c890:	b110      	cbz	r0, 800c898 <_printf_float+0x8c>
 800c892:	232d      	movs	r3, #45	; 0x2d
 800c894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c898:	4a93      	ldr	r2, [pc, #588]	; (800cae8 <_printf_float+0x2dc>)
 800c89a:	4b94      	ldr	r3, [pc, #592]	; (800caec <_printf_float+0x2e0>)
 800c89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8a0:	bf94      	ite	ls
 800c8a2:	4690      	movls	r8, r2
 800c8a4:	4698      	movhi	r8, r3
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	6123      	str	r3, [r4, #16]
 800c8aa:	9b05      	ldr	r3, [sp, #20]
 800c8ac:	f023 0304 	bic.w	r3, r3, #4
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	f04f 0900 	mov.w	r9, #0
 800c8b6:	9700      	str	r7, [sp, #0]
 800c8b8:	4633      	mov	r3, r6
 800c8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f000 f9da 	bl	800cc78 <_printf_common>
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f040 8090 	bne.w	800c9ea <_printf_float+0x1de>
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	b00d      	add	sp, #52	; 0x34
 800c8d0:	ecbd 8b02 	vpop	{d8}
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d8:	4642      	mov	r2, r8
 800c8da:	464b      	mov	r3, r9
 800c8dc:	4640      	mov	r0, r8
 800c8de:	4649      	mov	r1, r9
 800c8e0:	f7f4 f924 	bl	8000b2c <__aeabi_dcmpun>
 800c8e4:	b140      	cbz	r0, 800c8f8 <_printf_float+0xec>
 800c8e6:	464b      	mov	r3, r9
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bfbc      	itt	lt
 800c8ec:	232d      	movlt	r3, #45	; 0x2d
 800c8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8f2:	4a7f      	ldr	r2, [pc, #508]	; (800caf0 <_printf_float+0x2e4>)
 800c8f4:	4b7f      	ldr	r3, [pc, #508]	; (800caf4 <_printf_float+0x2e8>)
 800c8f6:	e7d1      	b.n	800c89c <_printf_float+0x90>
 800c8f8:	6863      	ldr	r3, [r4, #4]
 800c8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c8fe:	9206      	str	r2, [sp, #24]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	d13f      	bne.n	800c984 <_printf_float+0x178>
 800c904:	2306      	movs	r3, #6
 800c906:	6063      	str	r3, [r4, #4]
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	6861      	ldr	r1, [r4, #4]
 800c90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c910:	2300      	movs	r3, #0
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	ab0a      	add	r3, sp, #40	; 0x28
 800c916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c91a:	ab09      	add	r3, sp, #36	; 0x24
 800c91c:	ec49 8b10 	vmov	d0, r8, r9
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	6022      	str	r2, [r4, #0]
 800c924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c928:	4628      	mov	r0, r5
 800c92a:	f7ff fecf 	bl	800c6cc <__cvt>
 800c92e:	9b06      	ldr	r3, [sp, #24]
 800c930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c932:	2b47      	cmp	r3, #71	; 0x47
 800c934:	4680      	mov	r8, r0
 800c936:	d108      	bne.n	800c94a <_printf_float+0x13e>
 800c938:	1cc8      	adds	r0, r1, #3
 800c93a:	db02      	blt.n	800c942 <_printf_float+0x136>
 800c93c:	6863      	ldr	r3, [r4, #4]
 800c93e:	4299      	cmp	r1, r3
 800c940:	dd41      	ble.n	800c9c6 <_printf_float+0x1ba>
 800c942:	f1ab 0302 	sub.w	r3, fp, #2
 800c946:	fa5f fb83 	uxtb.w	fp, r3
 800c94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c94e:	d820      	bhi.n	800c992 <_printf_float+0x186>
 800c950:	3901      	subs	r1, #1
 800c952:	465a      	mov	r2, fp
 800c954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c958:	9109      	str	r1, [sp, #36]	; 0x24
 800c95a:	f7ff ff19 	bl	800c790 <__exponent>
 800c95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c960:	1813      	adds	r3, r2, r0
 800c962:	2a01      	cmp	r2, #1
 800c964:	4681      	mov	r9, r0
 800c966:	6123      	str	r3, [r4, #16]
 800c968:	dc02      	bgt.n	800c970 <_printf_float+0x164>
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	07d2      	lsls	r2, r2, #31
 800c96e:	d501      	bpl.n	800c974 <_printf_float+0x168>
 800c970:	3301      	adds	r3, #1
 800c972:	6123      	str	r3, [r4, #16]
 800c974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d09c      	beq.n	800c8b6 <_printf_float+0xaa>
 800c97c:	232d      	movs	r3, #45	; 0x2d
 800c97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c982:	e798      	b.n	800c8b6 <_printf_float+0xaa>
 800c984:	9a06      	ldr	r2, [sp, #24]
 800c986:	2a47      	cmp	r2, #71	; 0x47
 800c988:	d1be      	bne.n	800c908 <_printf_float+0xfc>
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1bc      	bne.n	800c908 <_printf_float+0xfc>
 800c98e:	2301      	movs	r3, #1
 800c990:	e7b9      	b.n	800c906 <_printf_float+0xfa>
 800c992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c996:	d118      	bne.n	800c9ca <_printf_float+0x1be>
 800c998:	2900      	cmp	r1, #0
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	dd0b      	ble.n	800c9b6 <_printf_float+0x1aa>
 800c99e:	6121      	str	r1, [r4, #16]
 800c9a0:	b913      	cbnz	r3, 800c9a8 <_printf_float+0x19c>
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	07d0      	lsls	r0, r2, #31
 800c9a6:	d502      	bpl.n	800c9ae <_printf_float+0x1a2>
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	440b      	add	r3, r1
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9b0:	f04f 0900 	mov.w	r9, #0
 800c9b4:	e7de      	b.n	800c974 <_printf_float+0x168>
 800c9b6:	b913      	cbnz	r3, 800c9be <_printf_float+0x1b2>
 800c9b8:	6822      	ldr	r2, [r4, #0]
 800c9ba:	07d2      	lsls	r2, r2, #31
 800c9bc:	d501      	bpl.n	800c9c2 <_printf_float+0x1b6>
 800c9be:	3302      	adds	r3, #2
 800c9c0:	e7f4      	b.n	800c9ac <_printf_float+0x1a0>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e7f2      	b.n	800c9ac <_printf_float+0x1a0>
 800c9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	db05      	blt.n	800c9dc <_printf_float+0x1d0>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	6121      	str	r1, [r4, #16]
 800c9d4:	07d8      	lsls	r0, r3, #31
 800c9d6:	d5ea      	bpl.n	800c9ae <_printf_float+0x1a2>
 800c9d8:	1c4b      	adds	r3, r1, #1
 800c9da:	e7e7      	b.n	800c9ac <_printf_float+0x1a0>
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	bfd4      	ite	le
 800c9e0:	f1c1 0202 	rsble	r2, r1, #2
 800c9e4:	2201      	movgt	r2, #1
 800c9e6:	4413      	add	r3, r2
 800c9e8:	e7e0      	b.n	800c9ac <_printf_float+0x1a0>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	055a      	lsls	r2, r3, #21
 800c9ee:	d407      	bmi.n	800ca00 <_printf_float+0x1f4>
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	4642      	mov	r2, r8
 800c9f4:	4631      	mov	r1, r6
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	47b8      	blx	r7
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d12c      	bne.n	800ca58 <_printf_float+0x24c>
 800c9fe:	e764      	b.n	800c8ca <_printf_float+0xbe>
 800ca00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca04:	f240 80e0 	bls.w	800cbc8 <_printf_float+0x3bc>
 800ca08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f7f4 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d034      	beq.n	800ca82 <_printf_float+0x276>
 800ca18:	4a37      	ldr	r2, [pc, #220]	; (800caf8 <_printf_float+0x2ec>)
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af51 	beq.w	800c8ca <_printf_float+0xbe>
 800ca28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	db02      	blt.n	800ca36 <_printf_float+0x22a>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	07d8      	lsls	r0, r3, #31
 800ca34:	d510      	bpl.n	800ca58 <_printf_float+0x24c>
 800ca36:	ee18 3a10 	vmov	r3, s16
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b8      	blx	r7
 800ca42:	3001      	adds	r0, #1
 800ca44:	f43f af41 	beq.w	800c8ca <_printf_float+0xbe>
 800ca48:	f04f 0800 	mov.w	r8, #0
 800ca4c:	f104 091a 	add.w	r9, r4, #26
 800ca50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca52:	3b01      	subs	r3, #1
 800ca54:	4543      	cmp	r3, r8
 800ca56:	dc09      	bgt.n	800ca6c <_printf_float+0x260>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	079b      	lsls	r3, r3, #30
 800ca5c:	f100 8107 	bmi.w	800cc6e <_printf_float+0x462>
 800ca60:	68e0      	ldr	r0, [r4, #12]
 800ca62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca64:	4298      	cmp	r0, r3
 800ca66:	bfb8      	it	lt
 800ca68:	4618      	movlt	r0, r3
 800ca6a:	e730      	b.n	800c8ce <_printf_float+0xc2>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	464a      	mov	r2, r9
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	f43f af27 	beq.w	800c8ca <_printf_float+0xbe>
 800ca7c:	f108 0801 	add.w	r8, r8, #1
 800ca80:	e7e6      	b.n	800ca50 <_printf_float+0x244>
 800ca82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dc39      	bgt.n	800cafc <_printf_float+0x2f0>
 800ca88:	4a1b      	ldr	r2, [pc, #108]	; (800caf8 <_printf_float+0x2ec>)
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af19 	beq.w	800c8ca <_printf_float+0xbe>
 800ca98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	d102      	bne.n	800caa6 <_printf_float+0x29a>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	07d9      	lsls	r1, r3, #31
 800caa4:	d5d8      	bpl.n	800ca58 <_printf_float+0x24c>
 800caa6:	ee18 3a10 	vmov	r3, s16
 800caaa:	4652      	mov	r2, sl
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	f43f af09 	beq.w	800c8ca <_printf_float+0xbe>
 800cab8:	f04f 0900 	mov.w	r9, #0
 800cabc:	f104 0a1a 	add.w	sl, r4, #26
 800cac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac2:	425b      	negs	r3, r3
 800cac4:	454b      	cmp	r3, r9
 800cac6:	dc01      	bgt.n	800cacc <_printf_float+0x2c0>
 800cac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caca:	e792      	b.n	800c9f2 <_printf_float+0x1e6>
 800cacc:	2301      	movs	r3, #1
 800cace:	4652      	mov	r2, sl
 800cad0:	4631      	mov	r1, r6
 800cad2:	4628      	mov	r0, r5
 800cad4:	47b8      	blx	r7
 800cad6:	3001      	adds	r0, #1
 800cad8:	f43f aef7 	beq.w	800c8ca <_printf_float+0xbe>
 800cadc:	f109 0901 	add.w	r9, r9, #1
 800cae0:	e7ee      	b.n	800cac0 <_printf_float+0x2b4>
 800cae2:	bf00      	nop
 800cae4:	7fefffff 	.word	0x7fefffff
 800cae8:	0800febc 	.word	0x0800febc
 800caec:	0800fec0 	.word	0x0800fec0
 800caf0:	0800fec4 	.word	0x0800fec4
 800caf4:	0800fec8 	.word	0x0800fec8
 800caf8:	0800fecc 	.word	0x0800fecc
 800cafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb00:	429a      	cmp	r2, r3
 800cb02:	bfa8      	it	ge
 800cb04:	461a      	movge	r2, r3
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	4691      	mov	r9, r2
 800cb0a:	dc37      	bgt.n	800cb7c <_printf_float+0x370>
 800cb0c:	f04f 0b00 	mov.w	fp, #0
 800cb10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb14:	f104 021a 	add.w	r2, r4, #26
 800cb18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb1a:	9305      	str	r3, [sp, #20]
 800cb1c:	eba3 0309 	sub.w	r3, r3, r9
 800cb20:	455b      	cmp	r3, fp
 800cb22:	dc33      	bgt.n	800cb8c <_printf_float+0x380>
 800cb24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	db3b      	blt.n	800cba4 <_printf_float+0x398>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	07da      	lsls	r2, r3, #31
 800cb30:	d438      	bmi.n	800cba4 <_printf_float+0x398>
 800cb32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb36:	eba2 0903 	sub.w	r9, r2, r3
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	1ad2      	subs	r2, r2, r3
 800cb3e:	4591      	cmp	r9, r2
 800cb40:	bfa8      	it	ge
 800cb42:	4691      	movge	r9, r2
 800cb44:	f1b9 0f00 	cmp.w	r9, #0
 800cb48:	dc35      	bgt.n	800cbb6 <_printf_float+0x3aa>
 800cb4a:	f04f 0800 	mov.w	r8, #0
 800cb4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb52:	f104 0a1a 	add.w	sl, r4, #26
 800cb56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	eba3 0309 	sub.w	r3, r3, r9
 800cb60:	4543      	cmp	r3, r8
 800cb62:	f77f af79 	ble.w	800ca58 <_printf_float+0x24c>
 800cb66:	2301      	movs	r3, #1
 800cb68:	4652      	mov	r2, sl
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	f43f aeaa 	beq.w	800c8ca <_printf_float+0xbe>
 800cb76:	f108 0801 	add.w	r8, r8, #1
 800cb7a:	e7ec      	b.n	800cb56 <_printf_float+0x34a>
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4642      	mov	r2, r8
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	d1c0      	bne.n	800cb0c <_printf_float+0x300>
 800cb8a:	e69e      	b.n	800c8ca <_printf_float+0xbe>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	9205      	str	r2, [sp, #20]
 800cb94:	47b8      	blx	r7
 800cb96:	3001      	adds	r0, #1
 800cb98:	f43f ae97 	beq.w	800c8ca <_printf_float+0xbe>
 800cb9c:	9a05      	ldr	r2, [sp, #20]
 800cb9e:	f10b 0b01 	add.w	fp, fp, #1
 800cba2:	e7b9      	b.n	800cb18 <_printf_float+0x30c>
 800cba4:	ee18 3a10 	vmov	r3, s16
 800cba8:	4652      	mov	r2, sl
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d1be      	bne.n	800cb32 <_printf_float+0x326>
 800cbb4:	e689      	b.n	800c8ca <_printf_float+0xbe>
 800cbb6:	9a05      	ldr	r2, [sp, #20]
 800cbb8:	464b      	mov	r3, r9
 800cbba:	4442      	add	r2, r8
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	47b8      	blx	r7
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d1c1      	bne.n	800cb4a <_printf_float+0x33e>
 800cbc6:	e680      	b.n	800c8ca <_printf_float+0xbe>
 800cbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbca:	2a01      	cmp	r2, #1
 800cbcc:	dc01      	bgt.n	800cbd2 <_printf_float+0x3c6>
 800cbce:	07db      	lsls	r3, r3, #31
 800cbd0:	d53a      	bpl.n	800cc48 <_printf_float+0x43c>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4642      	mov	r2, r8
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	4628      	mov	r0, r5
 800cbda:	47b8      	blx	r7
 800cbdc:	3001      	adds	r0, #1
 800cbde:	f43f ae74 	beq.w	800c8ca <_printf_float+0xbe>
 800cbe2:	ee18 3a10 	vmov	r3, s16
 800cbe6:	4652      	mov	r2, sl
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4628      	mov	r0, r5
 800cbec:	47b8      	blx	r7
 800cbee:	3001      	adds	r0, #1
 800cbf0:	f43f ae6b 	beq.w	800c8ca <_printf_float+0xbe>
 800cbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cc00:	f7f3 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc04:	b9d8      	cbnz	r0, 800cc3e <_printf_float+0x432>
 800cc06:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cc0a:	f108 0201 	add.w	r2, r8, #1
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	d10e      	bne.n	800cc36 <_printf_float+0x42a>
 800cc18:	e657      	b.n	800c8ca <_printf_float+0xbe>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f ae50 	beq.w	800c8ca <_printf_float+0xbe>
 800cc2a:	f108 0801 	add.w	r8, r8, #1
 800cc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4543      	cmp	r3, r8
 800cc34:	dcf1      	bgt.n	800cc1a <_printf_float+0x40e>
 800cc36:	464b      	mov	r3, r9
 800cc38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc3c:	e6da      	b.n	800c9f4 <_printf_float+0x1e8>
 800cc3e:	f04f 0800 	mov.w	r8, #0
 800cc42:	f104 0a1a 	add.w	sl, r4, #26
 800cc46:	e7f2      	b.n	800cc2e <_printf_float+0x422>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	e7df      	b.n	800cc0e <_printf_float+0x402>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	464a      	mov	r2, r9
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f43f ae36 	beq.w	800c8ca <_printf_float+0xbe>
 800cc5e:	f108 0801 	add.w	r8, r8, #1
 800cc62:	68e3      	ldr	r3, [r4, #12]
 800cc64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc66:	1a5b      	subs	r3, r3, r1
 800cc68:	4543      	cmp	r3, r8
 800cc6a:	dcf0      	bgt.n	800cc4e <_printf_float+0x442>
 800cc6c:	e6f8      	b.n	800ca60 <_printf_float+0x254>
 800cc6e:	f04f 0800 	mov.w	r8, #0
 800cc72:	f104 0919 	add.w	r9, r4, #25
 800cc76:	e7f4      	b.n	800cc62 <_printf_float+0x456>

0800cc78 <_printf_common>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	4699      	mov	r9, r3
 800cc80:	688a      	ldr	r2, [r1, #8]
 800cc82:	690b      	ldr	r3, [r1, #16]
 800cc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	bfb8      	it	lt
 800cc8c:	4613      	movlt	r3, r2
 800cc8e:	6033      	str	r3, [r6, #0]
 800cc90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc94:	4607      	mov	r7, r0
 800cc96:	460c      	mov	r4, r1
 800cc98:	b10a      	cbz	r2, 800cc9e <_printf_common+0x26>
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	6033      	str	r3, [r6, #0]
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	0699      	lsls	r1, r3, #26
 800cca2:	bf42      	ittt	mi
 800cca4:	6833      	ldrmi	r3, [r6, #0]
 800cca6:	3302      	addmi	r3, #2
 800cca8:	6033      	strmi	r3, [r6, #0]
 800ccaa:	6825      	ldr	r5, [r4, #0]
 800ccac:	f015 0506 	ands.w	r5, r5, #6
 800ccb0:	d106      	bne.n	800ccc0 <_printf_common+0x48>
 800ccb2:	f104 0a19 	add.w	sl, r4, #25
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	6832      	ldr	r2, [r6, #0]
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	42ab      	cmp	r3, r5
 800ccbe:	dc26      	bgt.n	800cd0e <_printf_common+0x96>
 800ccc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccc4:	1e13      	subs	r3, r2, #0
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	bf18      	it	ne
 800ccca:	2301      	movne	r3, #1
 800cccc:	0692      	lsls	r2, r2, #26
 800ccce:	d42b      	bmi.n	800cd28 <_printf_common+0xb0>
 800ccd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	47c0      	blx	r8
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d01e      	beq.n	800cd1c <_printf_common+0xa4>
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	f003 0306 	and.w	r3, r3, #6
 800cce6:	2b04      	cmp	r3, #4
 800cce8:	bf02      	ittt	eq
 800ccea:	68e5      	ldreq	r5, [r4, #12]
 800ccec:	6833      	ldreq	r3, [r6, #0]
 800ccee:	1aed      	subeq	r5, r5, r3
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	bf0c      	ite	eq
 800ccf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccf8:	2500      	movne	r5, #0
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	bfc4      	itt	gt
 800ccfe:	1a9b      	subgt	r3, r3, r2
 800cd00:	18ed      	addgt	r5, r5, r3
 800cd02:	2600      	movs	r6, #0
 800cd04:	341a      	adds	r4, #26
 800cd06:	42b5      	cmp	r5, r6
 800cd08:	d11a      	bne.n	800cd40 <_printf_common+0xc8>
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	e008      	b.n	800cd20 <_printf_common+0xa8>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4652      	mov	r2, sl
 800cd12:	4649      	mov	r1, r9
 800cd14:	4638      	mov	r0, r7
 800cd16:	47c0      	blx	r8
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d103      	bne.n	800cd24 <_printf_common+0xac>
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd24:	3501      	adds	r5, #1
 800cd26:	e7c6      	b.n	800ccb6 <_printf_common+0x3e>
 800cd28:	18e1      	adds	r1, r4, r3
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	2030      	movs	r0, #48	; 0x30
 800cd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd32:	4422      	add	r2, r4
 800cd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	e7c7      	b.n	800ccd0 <_printf_common+0x58>
 800cd40:	2301      	movs	r3, #1
 800cd42:	4622      	mov	r2, r4
 800cd44:	4649      	mov	r1, r9
 800cd46:	4638      	mov	r0, r7
 800cd48:	47c0      	blx	r8
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d0e6      	beq.n	800cd1c <_printf_common+0xa4>
 800cd4e:	3601      	adds	r6, #1
 800cd50:	e7d9      	b.n	800cd06 <_printf_common+0x8e>
	...

0800cd54 <_printf_i>:
 800cd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd58:	7e0f      	ldrb	r7, [r1, #24]
 800cd5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd5c:	2f78      	cmp	r7, #120	; 0x78
 800cd5e:	4691      	mov	r9, r2
 800cd60:	4680      	mov	r8, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	469a      	mov	sl, r3
 800cd66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd6a:	d807      	bhi.n	800cd7c <_printf_i+0x28>
 800cd6c:	2f62      	cmp	r7, #98	; 0x62
 800cd6e:	d80a      	bhi.n	800cd86 <_printf_i+0x32>
 800cd70:	2f00      	cmp	r7, #0
 800cd72:	f000 80d4 	beq.w	800cf1e <_printf_i+0x1ca>
 800cd76:	2f58      	cmp	r7, #88	; 0x58
 800cd78:	f000 80c0 	beq.w	800cefc <_printf_i+0x1a8>
 800cd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd84:	e03a      	b.n	800cdfc <_printf_i+0xa8>
 800cd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd8a:	2b15      	cmp	r3, #21
 800cd8c:	d8f6      	bhi.n	800cd7c <_printf_i+0x28>
 800cd8e:	a101      	add	r1, pc, #4	; (adr r1, 800cd94 <_printf_i+0x40>)
 800cd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800ce01 	.word	0x0800ce01
 800cd9c:	0800cd7d 	.word	0x0800cd7d
 800cda0:	0800cd7d 	.word	0x0800cd7d
 800cda4:	0800cd7d 	.word	0x0800cd7d
 800cda8:	0800cd7d 	.word	0x0800cd7d
 800cdac:	0800ce01 	.word	0x0800ce01
 800cdb0:	0800cd7d 	.word	0x0800cd7d
 800cdb4:	0800cd7d 	.word	0x0800cd7d
 800cdb8:	0800cd7d 	.word	0x0800cd7d
 800cdbc:	0800cd7d 	.word	0x0800cd7d
 800cdc0:	0800cf05 	.word	0x0800cf05
 800cdc4:	0800ce2d 	.word	0x0800ce2d
 800cdc8:	0800cebf 	.word	0x0800cebf
 800cdcc:	0800cd7d 	.word	0x0800cd7d
 800cdd0:	0800cd7d 	.word	0x0800cd7d
 800cdd4:	0800cf27 	.word	0x0800cf27
 800cdd8:	0800cd7d 	.word	0x0800cd7d
 800cddc:	0800ce2d 	.word	0x0800ce2d
 800cde0:	0800cd7d 	.word	0x0800cd7d
 800cde4:	0800cd7d 	.word	0x0800cd7d
 800cde8:	0800cec7 	.word	0x0800cec7
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	1d1a      	adds	r2, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	602a      	str	r2, [r5, #0]
 800cdf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e09f      	b.n	800cf40 <_printf_i+0x1ec>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	682b      	ldr	r3, [r5, #0]
 800ce04:	0607      	lsls	r7, r0, #24
 800ce06:	f103 0104 	add.w	r1, r3, #4
 800ce0a:	6029      	str	r1, [r5, #0]
 800ce0c:	d501      	bpl.n	800ce12 <_printf_i+0xbe>
 800ce0e:	681e      	ldr	r6, [r3, #0]
 800ce10:	e003      	b.n	800ce1a <_printf_i+0xc6>
 800ce12:	0646      	lsls	r6, r0, #25
 800ce14:	d5fb      	bpl.n	800ce0e <_printf_i+0xba>
 800ce16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	da03      	bge.n	800ce26 <_printf_i+0xd2>
 800ce1e:	232d      	movs	r3, #45	; 0x2d
 800ce20:	4276      	negs	r6, r6
 800ce22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce26:	485a      	ldr	r0, [pc, #360]	; (800cf90 <_printf_i+0x23c>)
 800ce28:	230a      	movs	r3, #10
 800ce2a:	e012      	b.n	800ce52 <_printf_i+0xfe>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	1d19      	adds	r1, r3, #4
 800ce32:	6029      	str	r1, [r5, #0]
 800ce34:	0605      	lsls	r5, r0, #24
 800ce36:	d501      	bpl.n	800ce3c <_printf_i+0xe8>
 800ce38:	681e      	ldr	r6, [r3, #0]
 800ce3a:	e002      	b.n	800ce42 <_printf_i+0xee>
 800ce3c:	0641      	lsls	r1, r0, #25
 800ce3e:	d5fb      	bpl.n	800ce38 <_printf_i+0xe4>
 800ce40:	881e      	ldrh	r6, [r3, #0]
 800ce42:	4853      	ldr	r0, [pc, #332]	; (800cf90 <_printf_i+0x23c>)
 800ce44:	2f6f      	cmp	r7, #111	; 0x6f
 800ce46:	bf0c      	ite	eq
 800ce48:	2308      	moveq	r3, #8
 800ce4a:	230a      	movne	r3, #10
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce52:	6865      	ldr	r5, [r4, #4]
 800ce54:	60a5      	str	r5, [r4, #8]
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	bfa2      	ittt	ge
 800ce5a:	6821      	ldrge	r1, [r4, #0]
 800ce5c:	f021 0104 	bicge.w	r1, r1, #4
 800ce60:	6021      	strge	r1, [r4, #0]
 800ce62:	b90e      	cbnz	r6, 800ce68 <_printf_i+0x114>
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	d04b      	beq.n	800cf00 <_printf_i+0x1ac>
 800ce68:	4615      	mov	r5, r2
 800ce6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce6e:	fb03 6711 	mls	r7, r3, r1, r6
 800ce72:	5dc7      	ldrb	r7, [r0, r7]
 800ce74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce78:	4637      	mov	r7, r6
 800ce7a:	42bb      	cmp	r3, r7
 800ce7c:	460e      	mov	r6, r1
 800ce7e:	d9f4      	bls.n	800ce6a <_printf_i+0x116>
 800ce80:	2b08      	cmp	r3, #8
 800ce82:	d10b      	bne.n	800ce9c <_printf_i+0x148>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	07de      	lsls	r6, r3, #31
 800ce88:	d508      	bpl.n	800ce9c <_printf_i+0x148>
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	6861      	ldr	r1, [r4, #4]
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	bfde      	ittt	le
 800ce92:	2330      	movle	r3, #48	; 0x30
 800ce94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce9c:	1b52      	subs	r2, r2, r5
 800ce9e:	6122      	str	r2, [r4, #16]
 800cea0:	f8cd a000 	str.w	sl, [sp]
 800cea4:	464b      	mov	r3, r9
 800cea6:	aa03      	add	r2, sp, #12
 800cea8:	4621      	mov	r1, r4
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f7ff fee4 	bl	800cc78 <_printf_common>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d14a      	bne.n	800cf4a <_printf_i+0x1f6>
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	b004      	add	sp, #16
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	f043 0320 	orr.w	r3, r3, #32
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	4833      	ldr	r0, [pc, #204]	; (800cf94 <_printf_i+0x240>)
 800cec8:	2778      	movs	r7, #120	; 0x78
 800ceca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	6829      	ldr	r1, [r5, #0]
 800ced2:	061f      	lsls	r7, r3, #24
 800ced4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ced8:	d402      	bmi.n	800cee0 <_printf_i+0x18c>
 800ceda:	065f      	lsls	r7, r3, #25
 800cedc:	bf48      	it	mi
 800cede:	b2b6      	uxthmi	r6, r6
 800cee0:	07df      	lsls	r7, r3, #31
 800cee2:	bf48      	it	mi
 800cee4:	f043 0320 	orrmi.w	r3, r3, #32
 800cee8:	6029      	str	r1, [r5, #0]
 800ceea:	bf48      	it	mi
 800ceec:	6023      	strmi	r3, [r4, #0]
 800ceee:	b91e      	cbnz	r6, 800cef8 <_printf_i+0x1a4>
 800cef0:	6823      	ldr	r3, [r4, #0]
 800cef2:	f023 0320 	bic.w	r3, r3, #32
 800cef6:	6023      	str	r3, [r4, #0]
 800cef8:	2310      	movs	r3, #16
 800cefa:	e7a7      	b.n	800ce4c <_printf_i+0xf8>
 800cefc:	4824      	ldr	r0, [pc, #144]	; (800cf90 <_printf_i+0x23c>)
 800cefe:	e7e4      	b.n	800ceca <_printf_i+0x176>
 800cf00:	4615      	mov	r5, r2
 800cf02:	e7bd      	b.n	800ce80 <_printf_i+0x12c>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	6826      	ldr	r6, [r4, #0]
 800cf08:	6961      	ldr	r1, [r4, #20]
 800cf0a:	1d18      	adds	r0, r3, #4
 800cf0c:	6028      	str	r0, [r5, #0]
 800cf0e:	0635      	lsls	r5, r6, #24
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	d501      	bpl.n	800cf18 <_printf_i+0x1c4>
 800cf14:	6019      	str	r1, [r3, #0]
 800cf16:	e002      	b.n	800cf1e <_printf_i+0x1ca>
 800cf18:	0670      	lsls	r0, r6, #25
 800cf1a:	d5fb      	bpl.n	800cf14 <_printf_i+0x1c0>
 800cf1c:	8019      	strh	r1, [r3, #0]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	4615      	mov	r5, r2
 800cf24:	e7bc      	b.n	800cea0 <_printf_i+0x14c>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	1d1a      	adds	r2, r3, #4
 800cf2a:	602a      	str	r2, [r5, #0]
 800cf2c:	681d      	ldr	r5, [r3, #0]
 800cf2e:	6862      	ldr	r2, [r4, #4]
 800cf30:	2100      	movs	r1, #0
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7f3 f94c 	bl	80001d0 <memchr>
 800cf38:	b108      	cbz	r0, 800cf3e <_printf_i+0x1ea>
 800cf3a:	1b40      	subs	r0, r0, r5
 800cf3c:	6060      	str	r0, [r4, #4]
 800cf3e:	6863      	ldr	r3, [r4, #4]
 800cf40:	6123      	str	r3, [r4, #16]
 800cf42:	2300      	movs	r3, #0
 800cf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf48:	e7aa      	b.n	800cea0 <_printf_i+0x14c>
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	47d0      	blx	sl
 800cf54:	3001      	adds	r0, #1
 800cf56:	d0ad      	beq.n	800ceb4 <_printf_i+0x160>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	079b      	lsls	r3, r3, #30
 800cf5c:	d413      	bmi.n	800cf86 <_printf_i+0x232>
 800cf5e:	68e0      	ldr	r0, [r4, #12]
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	4298      	cmp	r0, r3
 800cf64:	bfb8      	it	lt
 800cf66:	4618      	movlt	r0, r3
 800cf68:	e7a6      	b.n	800ceb8 <_printf_i+0x164>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	4649      	mov	r1, r9
 800cf70:	4640      	mov	r0, r8
 800cf72:	47d0      	blx	sl
 800cf74:	3001      	adds	r0, #1
 800cf76:	d09d      	beq.n	800ceb4 <_printf_i+0x160>
 800cf78:	3501      	adds	r5, #1
 800cf7a:	68e3      	ldr	r3, [r4, #12]
 800cf7c:	9903      	ldr	r1, [sp, #12]
 800cf7e:	1a5b      	subs	r3, r3, r1
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	dcf2      	bgt.n	800cf6a <_printf_i+0x216>
 800cf84:	e7eb      	b.n	800cf5e <_printf_i+0x20a>
 800cf86:	2500      	movs	r5, #0
 800cf88:	f104 0619 	add.w	r6, r4, #25
 800cf8c:	e7f5      	b.n	800cf7a <_printf_i+0x226>
 800cf8e:	bf00      	nop
 800cf90:	0800fece 	.word	0x0800fece
 800cf94:	0800fedf 	.word	0x0800fedf

0800cf98 <std>:
 800cf98:	2300      	movs	r3, #0
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	e9c0 3300 	strd	r3, r3, [r0]
 800cfa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfa6:	6083      	str	r3, [r0, #8]
 800cfa8:	8181      	strh	r1, [r0, #12]
 800cfaa:	6643      	str	r3, [r0, #100]	; 0x64
 800cfac:	81c2      	strh	r2, [r0, #14]
 800cfae:	6183      	str	r3, [r0, #24]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	2208      	movs	r2, #8
 800cfb4:	305c      	adds	r0, #92	; 0x5c
 800cfb6:	f000 fa31 	bl	800d41c <memset>
 800cfba:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <std+0x58>)
 800cfbc:	6263      	str	r3, [r4, #36]	; 0x24
 800cfbe:	4b0d      	ldr	r3, [pc, #52]	; (800cff4 <std+0x5c>)
 800cfc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfc2:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <std+0x60>)
 800cfc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <std+0x64>)
 800cfc8:	6323      	str	r3, [r4, #48]	; 0x30
 800cfca:	4b0d      	ldr	r3, [pc, #52]	; (800d000 <std+0x68>)
 800cfcc:	6224      	str	r4, [r4, #32]
 800cfce:	429c      	cmp	r4, r3
 800cfd0:	d006      	beq.n	800cfe0 <std+0x48>
 800cfd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cfd6:	4294      	cmp	r4, r2
 800cfd8:	d002      	beq.n	800cfe0 <std+0x48>
 800cfda:	33d0      	adds	r3, #208	; 0xd0
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	d105      	bne.n	800cfec <std+0x54>
 800cfe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe8:	f000 ba94 	b.w	800d514 <__retarget_lock_init_recursive>
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	0800d239 	.word	0x0800d239
 800cff4:	0800d25b 	.word	0x0800d25b
 800cff8:	0800d293 	.word	0x0800d293
 800cffc:	0800d2b7 	.word	0x0800d2b7
 800d000:	200025b4 	.word	0x200025b4

0800d004 <stdio_exit_handler>:
 800d004:	4a02      	ldr	r2, [pc, #8]	; (800d010 <stdio_exit_handler+0xc>)
 800d006:	4903      	ldr	r1, [pc, #12]	; (800d014 <stdio_exit_handler+0x10>)
 800d008:	4803      	ldr	r0, [pc, #12]	; (800d018 <stdio_exit_handler+0x14>)
 800d00a:	f000 b869 	b.w	800d0e0 <_fwalk_sglue>
 800d00e:	bf00      	nop
 800d010:	20000018 	.word	0x20000018
 800d014:	0800f169 	.word	0x0800f169
 800d018:	20000024 	.word	0x20000024

0800d01c <cleanup_stdio>:
 800d01c:	6841      	ldr	r1, [r0, #4]
 800d01e:	4b0c      	ldr	r3, [pc, #48]	; (800d050 <cleanup_stdio+0x34>)
 800d020:	4299      	cmp	r1, r3
 800d022:	b510      	push	{r4, lr}
 800d024:	4604      	mov	r4, r0
 800d026:	d001      	beq.n	800d02c <cleanup_stdio+0x10>
 800d028:	f002 f89e 	bl	800f168 <_fflush_r>
 800d02c:	68a1      	ldr	r1, [r4, #8]
 800d02e:	4b09      	ldr	r3, [pc, #36]	; (800d054 <cleanup_stdio+0x38>)
 800d030:	4299      	cmp	r1, r3
 800d032:	d002      	beq.n	800d03a <cleanup_stdio+0x1e>
 800d034:	4620      	mov	r0, r4
 800d036:	f002 f897 	bl	800f168 <_fflush_r>
 800d03a:	68e1      	ldr	r1, [r4, #12]
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <cleanup_stdio+0x3c>)
 800d03e:	4299      	cmp	r1, r3
 800d040:	d004      	beq.n	800d04c <cleanup_stdio+0x30>
 800d042:	4620      	mov	r0, r4
 800d044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d048:	f002 b88e 	b.w	800f168 <_fflush_r>
 800d04c:	bd10      	pop	{r4, pc}
 800d04e:	bf00      	nop
 800d050:	200025b4 	.word	0x200025b4
 800d054:	2000261c 	.word	0x2000261c
 800d058:	20002684 	.word	0x20002684

0800d05c <global_stdio_init.part.0>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	4b0b      	ldr	r3, [pc, #44]	; (800d08c <global_stdio_init.part.0+0x30>)
 800d060:	4c0b      	ldr	r4, [pc, #44]	; (800d090 <global_stdio_init.part.0+0x34>)
 800d062:	4a0c      	ldr	r2, [pc, #48]	; (800d094 <global_stdio_init.part.0+0x38>)
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	4620      	mov	r0, r4
 800d068:	2200      	movs	r2, #0
 800d06a:	2104      	movs	r1, #4
 800d06c:	f7ff ff94 	bl	800cf98 <std>
 800d070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d074:	2201      	movs	r2, #1
 800d076:	2109      	movs	r1, #9
 800d078:	f7ff ff8e 	bl	800cf98 <std>
 800d07c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d080:	2202      	movs	r2, #2
 800d082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d086:	2112      	movs	r1, #18
 800d088:	f7ff bf86 	b.w	800cf98 <std>
 800d08c:	200026ec 	.word	0x200026ec
 800d090:	200025b4 	.word	0x200025b4
 800d094:	0800d005 	.word	0x0800d005

0800d098 <__sfp_lock_acquire>:
 800d098:	4801      	ldr	r0, [pc, #4]	; (800d0a0 <__sfp_lock_acquire+0x8>)
 800d09a:	f000 ba3c 	b.w	800d516 <__retarget_lock_acquire_recursive>
 800d09e:	bf00      	nop
 800d0a0:	200026f5 	.word	0x200026f5

0800d0a4 <__sfp_lock_release>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	; (800d0ac <__sfp_lock_release+0x8>)
 800d0a6:	f000 ba37 	b.w	800d518 <__retarget_lock_release_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	200026f5 	.word	0x200026f5

0800d0b0 <__sinit>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	f7ff fff0 	bl	800d098 <__sfp_lock_acquire>
 800d0b8:	6a23      	ldr	r3, [r4, #32]
 800d0ba:	b11b      	cbz	r3, 800d0c4 <__sinit+0x14>
 800d0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0c0:	f7ff bff0 	b.w	800d0a4 <__sfp_lock_release>
 800d0c4:	4b04      	ldr	r3, [pc, #16]	; (800d0d8 <__sinit+0x28>)
 800d0c6:	6223      	str	r3, [r4, #32]
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <__sinit+0x2c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1f5      	bne.n	800d0bc <__sinit+0xc>
 800d0d0:	f7ff ffc4 	bl	800d05c <global_stdio_init.part.0>
 800d0d4:	e7f2      	b.n	800d0bc <__sinit+0xc>
 800d0d6:	bf00      	nop
 800d0d8:	0800d01d 	.word	0x0800d01d
 800d0dc:	200026ec 	.word	0x200026ec

0800d0e0 <_fwalk_sglue>:
 800d0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	4688      	mov	r8, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	2600      	movs	r6, #0
 800d0ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0f0:	f1b9 0901 	subs.w	r9, r9, #1
 800d0f4:	d505      	bpl.n	800d102 <_fwalk_sglue+0x22>
 800d0f6:	6824      	ldr	r4, [r4, #0]
 800d0f8:	2c00      	cmp	r4, #0
 800d0fa:	d1f7      	bne.n	800d0ec <_fwalk_sglue+0xc>
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d907      	bls.n	800d118 <_fwalk_sglue+0x38>
 800d108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d10c:	3301      	adds	r3, #1
 800d10e:	d003      	beq.n	800d118 <_fwalk_sglue+0x38>
 800d110:	4629      	mov	r1, r5
 800d112:	4638      	mov	r0, r7
 800d114:	47c0      	blx	r8
 800d116:	4306      	orrs	r6, r0
 800d118:	3568      	adds	r5, #104	; 0x68
 800d11a:	e7e9      	b.n	800d0f0 <_fwalk_sglue+0x10>

0800d11c <iprintf>:
 800d11c:	b40f      	push	{r0, r1, r2, r3}
 800d11e:	b507      	push	{r0, r1, r2, lr}
 800d120:	4906      	ldr	r1, [pc, #24]	; (800d13c <iprintf+0x20>)
 800d122:	ab04      	add	r3, sp, #16
 800d124:	6808      	ldr	r0, [r1, #0]
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6881      	ldr	r1, [r0, #8]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f001 fe7b 	bl	800ee28 <_vfiprintf_r>
 800d132:	b003      	add	sp, #12
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b004      	add	sp, #16
 800d13a:	4770      	bx	lr
 800d13c:	20000070 	.word	0x20000070

0800d140 <_puts_r>:
 800d140:	6a03      	ldr	r3, [r0, #32]
 800d142:	b570      	push	{r4, r5, r6, lr}
 800d144:	6884      	ldr	r4, [r0, #8]
 800d146:	4605      	mov	r5, r0
 800d148:	460e      	mov	r6, r1
 800d14a:	b90b      	cbnz	r3, 800d150 <_puts_r+0x10>
 800d14c:	f7ff ffb0 	bl	800d0b0 <__sinit>
 800d150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d152:	07db      	lsls	r3, r3, #31
 800d154:	d405      	bmi.n	800d162 <_puts_r+0x22>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	0598      	lsls	r0, r3, #22
 800d15a:	d402      	bmi.n	800d162 <_puts_r+0x22>
 800d15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d15e:	f000 f9da 	bl	800d516 <__retarget_lock_acquire_recursive>
 800d162:	89a3      	ldrh	r3, [r4, #12]
 800d164:	0719      	lsls	r1, r3, #28
 800d166:	d513      	bpl.n	800d190 <_puts_r+0x50>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	b18b      	cbz	r3, 800d190 <_puts_r+0x50>
 800d16c:	3e01      	subs	r6, #1
 800d16e:	68a3      	ldr	r3, [r4, #8]
 800d170:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d174:	3b01      	subs	r3, #1
 800d176:	60a3      	str	r3, [r4, #8]
 800d178:	b9e9      	cbnz	r1, 800d1b6 <_puts_r+0x76>
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	da2e      	bge.n	800d1dc <_puts_r+0x9c>
 800d17e:	4622      	mov	r2, r4
 800d180:	210a      	movs	r1, #10
 800d182:	4628      	mov	r0, r5
 800d184:	f000 f89b 	bl	800d2be <__swbuf_r>
 800d188:	3001      	adds	r0, #1
 800d18a:	d007      	beq.n	800d19c <_puts_r+0x5c>
 800d18c:	250a      	movs	r5, #10
 800d18e:	e007      	b.n	800d1a0 <_puts_r+0x60>
 800d190:	4621      	mov	r1, r4
 800d192:	4628      	mov	r0, r5
 800d194:	f000 f8d0 	bl	800d338 <__swsetup_r>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d0e7      	beq.n	800d16c <_puts_r+0x2c>
 800d19c:	f04f 35ff 	mov.w	r5, #4294967295
 800d1a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1a2:	07da      	lsls	r2, r3, #31
 800d1a4:	d405      	bmi.n	800d1b2 <_puts_r+0x72>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	059b      	lsls	r3, r3, #22
 800d1aa:	d402      	bmi.n	800d1b2 <_puts_r+0x72>
 800d1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ae:	f000 f9b3 	bl	800d518 <__retarget_lock_release_recursive>
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	da04      	bge.n	800d1c4 <_puts_r+0x84>
 800d1ba:	69a2      	ldr	r2, [r4, #24]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	dc06      	bgt.n	800d1ce <_puts_r+0x8e>
 800d1c0:	290a      	cmp	r1, #10
 800d1c2:	d004      	beq.n	800d1ce <_puts_r+0x8e>
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	6022      	str	r2, [r4, #0]
 800d1ca:	7019      	strb	r1, [r3, #0]
 800d1cc:	e7cf      	b.n	800d16e <_puts_r+0x2e>
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f000 f874 	bl	800d2be <__swbuf_r>
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d1c9      	bne.n	800d16e <_puts_r+0x2e>
 800d1da:	e7df      	b.n	800d19c <_puts_r+0x5c>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	250a      	movs	r5, #10
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	6022      	str	r2, [r4, #0]
 800d1e4:	701d      	strb	r5, [r3, #0]
 800d1e6:	e7db      	b.n	800d1a0 <_puts_r+0x60>

0800d1e8 <puts>:
 800d1e8:	4b02      	ldr	r3, [pc, #8]	; (800d1f4 <puts+0xc>)
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	6818      	ldr	r0, [r3, #0]
 800d1ee:	f7ff bfa7 	b.w	800d140 <_puts_r>
 800d1f2:	bf00      	nop
 800d1f4:	20000070 	.word	0x20000070

0800d1f8 <siprintf>:
 800d1f8:	b40e      	push	{r1, r2, r3}
 800d1fa:	b500      	push	{lr}
 800d1fc:	b09c      	sub	sp, #112	; 0x70
 800d1fe:	ab1d      	add	r3, sp, #116	; 0x74
 800d200:	9002      	str	r0, [sp, #8]
 800d202:	9006      	str	r0, [sp, #24]
 800d204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d208:	4809      	ldr	r0, [pc, #36]	; (800d230 <siprintf+0x38>)
 800d20a:	9107      	str	r1, [sp, #28]
 800d20c:	9104      	str	r1, [sp, #16]
 800d20e:	4909      	ldr	r1, [pc, #36]	; (800d234 <siprintf+0x3c>)
 800d210:	f853 2b04 	ldr.w	r2, [r3], #4
 800d214:	9105      	str	r1, [sp, #20]
 800d216:	6800      	ldr	r0, [r0, #0]
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	a902      	add	r1, sp, #8
 800d21c:	f001 fcdc 	bl	800ebd8 <_svfiprintf_r>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	b01c      	add	sp, #112	; 0x70
 800d228:	f85d eb04 	ldr.w	lr, [sp], #4
 800d22c:	b003      	add	sp, #12
 800d22e:	4770      	bx	lr
 800d230:	20000070 	.word	0x20000070
 800d234:	ffff0208 	.word	0xffff0208

0800d238 <__sread>:
 800d238:	b510      	push	{r4, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	f000 f91a 	bl	800d478 <_read_r>
 800d244:	2800      	cmp	r0, #0
 800d246:	bfab      	itete	ge
 800d248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d24a:	89a3      	ldrhlt	r3, [r4, #12]
 800d24c:	181b      	addge	r3, r3, r0
 800d24e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d252:	bfac      	ite	ge
 800d254:	6563      	strge	r3, [r4, #84]	; 0x54
 800d256:	81a3      	strhlt	r3, [r4, #12]
 800d258:	bd10      	pop	{r4, pc}

0800d25a <__swrite>:
 800d25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25e:	461f      	mov	r7, r3
 800d260:	898b      	ldrh	r3, [r1, #12]
 800d262:	05db      	lsls	r3, r3, #23
 800d264:	4605      	mov	r5, r0
 800d266:	460c      	mov	r4, r1
 800d268:	4616      	mov	r6, r2
 800d26a:	d505      	bpl.n	800d278 <__swrite+0x1e>
 800d26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d270:	2302      	movs	r3, #2
 800d272:	2200      	movs	r2, #0
 800d274:	f000 f8ee 	bl	800d454 <_lseek_r>
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d27e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	4632      	mov	r2, r6
 800d286:	463b      	mov	r3, r7
 800d288:	4628      	mov	r0, r5
 800d28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d28e:	f000 b905 	b.w	800d49c <_write_r>

0800d292 <__sseek>:
 800d292:	b510      	push	{r4, lr}
 800d294:	460c      	mov	r4, r1
 800d296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29a:	f000 f8db 	bl	800d454 <_lseek_r>
 800d29e:	1c43      	adds	r3, r0, #1
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	bf15      	itete	ne
 800d2a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2ae:	81a3      	strheq	r3, [r4, #12]
 800d2b0:	bf18      	it	ne
 800d2b2:	81a3      	strhne	r3, [r4, #12]
 800d2b4:	bd10      	pop	{r4, pc}

0800d2b6 <__sclose>:
 800d2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ba:	f000 b8bb 	b.w	800d434 <_close_r>

0800d2be <__swbuf_r>:
 800d2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c0:	460e      	mov	r6, r1
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	b118      	cbz	r0, 800d2d0 <__swbuf_r+0x12>
 800d2c8:	6a03      	ldr	r3, [r0, #32]
 800d2ca:	b90b      	cbnz	r3, 800d2d0 <__swbuf_r+0x12>
 800d2cc:	f7ff fef0 	bl	800d0b0 <__sinit>
 800d2d0:	69a3      	ldr	r3, [r4, #24]
 800d2d2:	60a3      	str	r3, [r4, #8]
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	071a      	lsls	r2, r3, #28
 800d2d8:	d525      	bpl.n	800d326 <__swbuf_r+0x68>
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	b31b      	cbz	r3, 800d326 <__swbuf_r+0x68>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	6922      	ldr	r2, [r4, #16]
 800d2e2:	1a98      	subs	r0, r3, r2
 800d2e4:	6963      	ldr	r3, [r4, #20]
 800d2e6:	b2f6      	uxtb	r6, r6
 800d2e8:	4283      	cmp	r3, r0
 800d2ea:	4637      	mov	r7, r6
 800d2ec:	dc04      	bgt.n	800d2f8 <__swbuf_r+0x3a>
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f001 ff39 	bl	800f168 <_fflush_r>
 800d2f6:	b9e0      	cbnz	r0, 800d332 <__swbuf_r+0x74>
 800d2f8:	68a3      	ldr	r3, [r4, #8]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	60a3      	str	r3, [r4, #8]
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	1c5a      	adds	r2, r3, #1
 800d302:	6022      	str	r2, [r4, #0]
 800d304:	701e      	strb	r6, [r3, #0]
 800d306:	6962      	ldr	r2, [r4, #20]
 800d308:	1c43      	adds	r3, r0, #1
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d004      	beq.n	800d318 <__swbuf_r+0x5a>
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	07db      	lsls	r3, r3, #31
 800d312:	d506      	bpl.n	800d322 <__swbuf_r+0x64>
 800d314:	2e0a      	cmp	r6, #10
 800d316:	d104      	bne.n	800d322 <__swbuf_r+0x64>
 800d318:	4621      	mov	r1, r4
 800d31a:	4628      	mov	r0, r5
 800d31c:	f001 ff24 	bl	800f168 <_fflush_r>
 800d320:	b938      	cbnz	r0, 800d332 <__swbuf_r+0x74>
 800d322:	4638      	mov	r0, r7
 800d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d326:	4621      	mov	r1, r4
 800d328:	4628      	mov	r0, r5
 800d32a:	f000 f805 	bl	800d338 <__swsetup_r>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d0d5      	beq.n	800d2de <__swbuf_r+0x20>
 800d332:	f04f 37ff 	mov.w	r7, #4294967295
 800d336:	e7f4      	b.n	800d322 <__swbuf_r+0x64>

0800d338 <__swsetup_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4b2a      	ldr	r3, [pc, #168]	; (800d3e4 <__swsetup_r+0xac>)
 800d33c:	4605      	mov	r5, r0
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	460c      	mov	r4, r1
 800d342:	b118      	cbz	r0, 800d34c <__swsetup_r+0x14>
 800d344:	6a03      	ldr	r3, [r0, #32]
 800d346:	b90b      	cbnz	r3, 800d34c <__swsetup_r+0x14>
 800d348:	f7ff feb2 	bl	800d0b0 <__sinit>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d352:	0718      	lsls	r0, r3, #28
 800d354:	d422      	bmi.n	800d39c <__swsetup_r+0x64>
 800d356:	06d9      	lsls	r1, r3, #27
 800d358:	d407      	bmi.n	800d36a <__swsetup_r+0x32>
 800d35a:	2309      	movs	r3, #9
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	e034      	b.n	800d3d4 <__swsetup_r+0x9c>
 800d36a:	0758      	lsls	r0, r3, #29
 800d36c:	d512      	bpl.n	800d394 <__swsetup_r+0x5c>
 800d36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d370:	b141      	cbz	r1, 800d384 <__swsetup_r+0x4c>
 800d372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d376:	4299      	cmp	r1, r3
 800d378:	d002      	beq.n	800d380 <__swsetup_r+0x48>
 800d37a:	4628      	mov	r0, r5
 800d37c:	f000 ff56 	bl	800e22c <_free_r>
 800d380:	2300      	movs	r3, #0
 800d382:	6363      	str	r3, [r4, #52]	; 0x34
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	2300      	movs	r3, #0
 800d38e:	6063      	str	r3, [r4, #4]
 800d390:	6923      	ldr	r3, [r4, #16]
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	f043 0308 	orr.w	r3, r3, #8
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	b94b      	cbnz	r3, 800d3b4 <__swsetup_r+0x7c>
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3aa:	d003      	beq.n	800d3b4 <__swsetup_r+0x7c>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f001 ff28 	bl	800f204 <__smakebuf_r>
 800d3b4:	89a0      	ldrh	r0, [r4, #12]
 800d3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3ba:	f010 0301 	ands.w	r3, r0, #1
 800d3be:	d00a      	beq.n	800d3d6 <__swsetup_r+0x9e>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60a3      	str	r3, [r4, #8]
 800d3c4:	6963      	ldr	r3, [r4, #20]
 800d3c6:	425b      	negs	r3, r3
 800d3c8:	61a3      	str	r3, [r4, #24]
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	b943      	cbnz	r3, 800d3e0 <__swsetup_r+0xa8>
 800d3ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3d2:	d1c4      	bne.n	800d35e <__swsetup_r+0x26>
 800d3d4:	bd38      	pop	{r3, r4, r5, pc}
 800d3d6:	0781      	lsls	r1, r0, #30
 800d3d8:	bf58      	it	pl
 800d3da:	6963      	ldrpl	r3, [r4, #20]
 800d3dc:	60a3      	str	r3, [r4, #8]
 800d3de:	e7f4      	b.n	800d3ca <__swsetup_r+0x92>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	e7f7      	b.n	800d3d4 <__swsetup_r+0x9c>
 800d3e4:	20000070 	.word	0x20000070

0800d3e8 <memmove>:
 800d3e8:	4288      	cmp	r0, r1
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	eb01 0402 	add.w	r4, r1, r2
 800d3f0:	d902      	bls.n	800d3f8 <memmove+0x10>
 800d3f2:	4284      	cmp	r4, r0
 800d3f4:	4623      	mov	r3, r4
 800d3f6:	d807      	bhi.n	800d408 <memmove+0x20>
 800d3f8:	1e43      	subs	r3, r0, #1
 800d3fa:	42a1      	cmp	r1, r4
 800d3fc:	d008      	beq.n	800d410 <memmove+0x28>
 800d3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d406:	e7f8      	b.n	800d3fa <memmove+0x12>
 800d408:	4402      	add	r2, r0
 800d40a:	4601      	mov	r1, r0
 800d40c:	428a      	cmp	r2, r1
 800d40e:	d100      	bne.n	800d412 <memmove+0x2a>
 800d410:	bd10      	pop	{r4, pc}
 800d412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41a:	e7f7      	b.n	800d40c <memmove+0x24>

0800d41c <memset>:
 800d41c:	4402      	add	r2, r0
 800d41e:	4603      	mov	r3, r0
 800d420:	4293      	cmp	r3, r2
 800d422:	d100      	bne.n	800d426 <memset+0xa>
 800d424:	4770      	bx	lr
 800d426:	f803 1b01 	strb.w	r1, [r3], #1
 800d42a:	e7f9      	b.n	800d420 <memset+0x4>

0800d42c <_localeconv_r>:
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <_localeconv_r+0x4>)
 800d42e:	4770      	bx	lr
 800d430:	20000164 	.word	0x20000164

0800d434 <_close_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	4d06      	ldr	r5, [pc, #24]	; (800d450 <_close_r+0x1c>)
 800d438:	2300      	movs	r3, #0
 800d43a:	4604      	mov	r4, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	602b      	str	r3, [r5, #0]
 800d440:	f7f6 fbdb 	bl	8003bfa <_close>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d102      	bne.n	800d44e <_close_r+0x1a>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b103      	cbz	r3, 800d44e <_close_r+0x1a>
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	200026f0 	.word	0x200026f0

0800d454 <_lseek_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d07      	ldr	r5, [pc, #28]	; (800d474 <_lseek_r+0x20>)
 800d458:	4604      	mov	r4, r0
 800d45a:	4608      	mov	r0, r1
 800d45c:	4611      	mov	r1, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	602a      	str	r2, [r5, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	f7f6 fbf0 	bl	8003c48 <_lseek>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_lseek_r+0x1e>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_lseek_r+0x1e>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	200026f0 	.word	0x200026f0

0800d478 <_read_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d07      	ldr	r5, [pc, #28]	; (800d498 <_read_r+0x20>)
 800d47c:	4604      	mov	r4, r0
 800d47e:	4608      	mov	r0, r1
 800d480:	4611      	mov	r1, r2
 800d482:	2200      	movs	r2, #0
 800d484:	602a      	str	r2, [r5, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	f7f6 fb9a 	bl	8003bc0 <_read>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_read_r+0x1e>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_read_r+0x1e>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	200026f0 	.word	0x200026f0

0800d49c <_write_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4d07      	ldr	r5, [pc, #28]	; (800d4bc <_write_r+0x20>)
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	602a      	str	r2, [r5, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	f7f5 f89c 	bl	80025e8 <_write>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_write_r+0x1e>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_write_r+0x1e>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	200026f0 	.word	0x200026f0

0800d4c0 <__errno>:
 800d4c0:	4b01      	ldr	r3, [pc, #4]	; (800d4c8 <__errno+0x8>)
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	20000070 	.word	0x20000070

0800d4cc <__libc_init_array>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	4d0d      	ldr	r5, [pc, #52]	; (800d504 <__libc_init_array+0x38>)
 800d4d0:	4c0d      	ldr	r4, [pc, #52]	; (800d508 <__libc_init_array+0x3c>)
 800d4d2:	1b64      	subs	r4, r4, r5
 800d4d4:	10a4      	asrs	r4, r4, #2
 800d4d6:	2600      	movs	r6, #0
 800d4d8:	42a6      	cmp	r6, r4
 800d4da:	d109      	bne.n	800d4f0 <__libc_init_array+0x24>
 800d4dc:	4d0b      	ldr	r5, [pc, #44]	; (800d50c <__libc_init_array+0x40>)
 800d4de:	4c0c      	ldr	r4, [pc, #48]	; (800d510 <__libc_init_array+0x44>)
 800d4e0:	f001 ffe6 	bl	800f4b0 <_init>
 800d4e4:	1b64      	subs	r4, r4, r5
 800d4e6:	10a4      	asrs	r4, r4, #2
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	42a6      	cmp	r6, r4
 800d4ec:	d105      	bne.n	800d4fa <__libc_init_array+0x2e>
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f4:	4798      	blx	r3
 800d4f6:	3601      	adds	r6, #1
 800d4f8:	e7ee      	b.n	800d4d8 <__libc_init_array+0xc>
 800d4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fe:	4798      	blx	r3
 800d500:	3601      	adds	r6, #1
 800d502:	e7f2      	b.n	800d4ea <__libc_init_array+0x1e>
 800d504:	08010234 	.word	0x08010234
 800d508:	08010234 	.word	0x08010234
 800d50c:	08010234 	.word	0x08010234
 800d510:	08010238 	.word	0x08010238

0800d514 <__retarget_lock_init_recursive>:
 800d514:	4770      	bx	lr

0800d516 <__retarget_lock_acquire_recursive>:
 800d516:	4770      	bx	lr

0800d518 <__retarget_lock_release_recursive>:
 800d518:	4770      	bx	lr

0800d51a <memcpy>:
 800d51a:	440a      	add	r2, r1
 800d51c:	4291      	cmp	r1, r2
 800d51e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d522:	d100      	bne.n	800d526 <memcpy+0xc>
 800d524:	4770      	bx	lr
 800d526:	b510      	push	{r4, lr}
 800d528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d52c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d530:	4291      	cmp	r1, r2
 800d532:	d1f9      	bne.n	800d528 <memcpy+0xe>
 800d534:	bd10      	pop	{r4, pc}

0800d536 <quorem>:
 800d536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	6903      	ldr	r3, [r0, #16]
 800d53c:	690c      	ldr	r4, [r1, #16]
 800d53e:	42a3      	cmp	r3, r4
 800d540:	4607      	mov	r7, r0
 800d542:	db7e      	blt.n	800d642 <quorem+0x10c>
 800d544:	3c01      	subs	r4, #1
 800d546:	f101 0814 	add.w	r8, r1, #20
 800d54a:	f100 0514 	add.w	r5, r0, #20
 800d54e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d55c:	3301      	adds	r3, #1
 800d55e:	429a      	cmp	r2, r3
 800d560:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d568:	fbb2 f6f3 	udiv	r6, r2, r3
 800d56c:	d331      	bcc.n	800d5d2 <quorem+0x9c>
 800d56e:	f04f 0e00 	mov.w	lr, #0
 800d572:	4640      	mov	r0, r8
 800d574:	46ac      	mov	ip, r5
 800d576:	46f2      	mov	sl, lr
 800d578:	f850 2b04 	ldr.w	r2, [r0], #4
 800d57c:	b293      	uxth	r3, r2
 800d57e:	fb06 e303 	mla	r3, r6, r3, lr
 800d582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d586:	0c1a      	lsrs	r2, r3, #16
 800d588:	b29b      	uxth	r3, r3
 800d58a:	ebaa 0303 	sub.w	r3, sl, r3
 800d58e:	f8dc a000 	ldr.w	sl, [ip]
 800d592:	fa13 f38a 	uxtah	r3, r3, sl
 800d596:	fb06 220e 	mla	r2, r6, lr, r2
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	9b00      	ldr	r3, [sp, #0]
 800d59e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5a2:	b292      	uxth	r2, r2
 800d5a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800d5b0:	4581      	cmp	r9, r0
 800d5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d5ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5be:	d2db      	bcs.n	800d578 <quorem+0x42>
 800d5c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5c4:	b92b      	cbnz	r3, 800d5d2 <quorem+0x9c>
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	3b04      	subs	r3, #4
 800d5ca:	429d      	cmp	r5, r3
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	d32c      	bcc.n	800d62a <quorem+0xf4>
 800d5d0:	613c      	str	r4, [r7, #16]
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f001 f9a6 	bl	800e924 <__mcmp>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	db22      	blt.n	800d622 <quorem+0xec>
 800d5dc:	3601      	adds	r6, #1
 800d5de:	4629      	mov	r1, r5
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5e6:	f8d1 c000 	ldr.w	ip, [r1]
 800d5ea:	b293      	uxth	r3, r2
 800d5ec:	1ac3      	subs	r3, r0, r3
 800d5ee:	0c12      	lsrs	r2, r2, #16
 800d5f0:	fa13 f38c 	uxtah	r3, r3, ip
 800d5f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d5f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d602:	45c1      	cmp	r9, r8
 800d604:	f841 3b04 	str.w	r3, [r1], #4
 800d608:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d60c:	d2e9      	bcs.n	800d5e2 <quorem+0xac>
 800d60e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d616:	b922      	cbnz	r2, 800d622 <quorem+0xec>
 800d618:	3b04      	subs	r3, #4
 800d61a:	429d      	cmp	r5, r3
 800d61c:	461a      	mov	r2, r3
 800d61e:	d30a      	bcc.n	800d636 <quorem+0x100>
 800d620:	613c      	str	r4, [r7, #16]
 800d622:	4630      	mov	r0, r6
 800d624:	b003      	add	sp, #12
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	3b04      	subs	r3, #4
 800d62e:	2a00      	cmp	r2, #0
 800d630:	d1ce      	bne.n	800d5d0 <quorem+0x9a>
 800d632:	3c01      	subs	r4, #1
 800d634:	e7c9      	b.n	800d5ca <quorem+0x94>
 800d636:	6812      	ldr	r2, [r2, #0]
 800d638:	3b04      	subs	r3, #4
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	d1f0      	bne.n	800d620 <quorem+0xea>
 800d63e:	3c01      	subs	r4, #1
 800d640:	e7eb      	b.n	800d61a <quorem+0xe4>
 800d642:	2000      	movs	r0, #0
 800d644:	e7ee      	b.n	800d624 <quorem+0xee>
	...

0800d648 <_dtoa_r>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	ed2d 8b04 	vpush	{d8-d9}
 800d650:	69c5      	ldr	r5, [r0, #28]
 800d652:	b093      	sub	sp, #76	; 0x4c
 800d654:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d658:	ec57 6b10 	vmov	r6, r7, d0
 800d65c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d660:	9107      	str	r1, [sp, #28]
 800d662:	4604      	mov	r4, r0
 800d664:	920a      	str	r2, [sp, #40]	; 0x28
 800d666:	930d      	str	r3, [sp, #52]	; 0x34
 800d668:	b975      	cbnz	r5, 800d688 <_dtoa_r+0x40>
 800d66a:	2010      	movs	r0, #16
 800d66c:	f000 fe2a 	bl	800e2c4 <malloc>
 800d670:	4602      	mov	r2, r0
 800d672:	61e0      	str	r0, [r4, #28]
 800d674:	b920      	cbnz	r0, 800d680 <_dtoa_r+0x38>
 800d676:	4bae      	ldr	r3, [pc, #696]	; (800d930 <_dtoa_r+0x2e8>)
 800d678:	21ef      	movs	r1, #239	; 0xef
 800d67a:	48ae      	ldr	r0, [pc, #696]	; (800d934 <_dtoa_r+0x2ec>)
 800d67c:	f001 fe30 	bl	800f2e0 <__assert_func>
 800d680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d684:	6005      	str	r5, [r0, #0]
 800d686:	60c5      	str	r5, [r0, #12]
 800d688:	69e3      	ldr	r3, [r4, #28]
 800d68a:	6819      	ldr	r1, [r3, #0]
 800d68c:	b151      	cbz	r1, 800d6a4 <_dtoa_r+0x5c>
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	604a      	str	r2, [r1, #4]
 800d692:	2301      	movs	r3, #1
 800d694:	4093      	lsls	r3, r2
 800d696:	608b      	str	r3, [r1, #8]
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 ff07 	bl	800e4ac <_Bfree>
 800d69e:	69e3      	ldr	r3, [r4, #28]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	1e3b      	subs	r3, r7, #0
 800d6a6:	bfbb      	ittet	lt
 800d6a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6ac:	9303      	strlt	r3, [sp, #12]
 800d6ae:	2300      	movge	r3, #0
 800d6b0:	2201      	movlt	r2, #1
 800d6b2:	bfac      	ite	ge
 800d6b4:	f8c8 3000 	strge.w	r3, [r8]
 800d6b8:	f8c8 2000 	strlt.w	r2, [r8]
 800d6bc:	4b9e      	ldr	r3, [pc, #632]	; (800d938 <_dtoa_r+0x2f0>)
 800d6be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d6c2:	ea33 0308 	bics.w	r3, r3, r8
 800d6c6:	d11b      	bne.n	800d700 <_dtoa_r+0xb8>
 800d6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d6d4:	4333      	orrs	r3, r6
 800d6d6:	f000 8593 	beq.w	800e200 <_dtoa_r+0xbb8>
 800d6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6dc:	b963      	cbnz	r3, 800d6f8 <_dtoa_r+0xb0>
 800d6de:	4b97      	ldr	r3, [pc, #604]	; (800d93c <_dtoa_r+0x2f4>)
 800d6e0:	e027      	b.n	800d732 <_dtoa_r+0xea>
 800d6e2:	4b97      	ldr	r3, [pc, #604]	; (800d940 <_dtoa_r+0x2f8>)
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	9800      	ldr	r0, [sp, #0]
 800d6ee:	b013      	add	sp, #76	; 0x4c
 800d6f0:	ecbd 8b04 	vpop	{d8-d9}
 800d6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f8:	4b90      	ldr	r3, [pc, #576]	; (800d93c <_dtoa_r+0x2f4>)
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	3303      	adds	r3, #3
 800d6fe:	e7f3      	b.n	800d6e8 <_dtoa_r+0xa0>
 800d700:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d704:	2200      	movs	r2, #0
 800d706:	ec51 0b17 	vmov	r0, r1, d7
 800d70a:	eeb0 8a47 	vmov.f32	s16, s14
 800d70e:	eef0 8a67 	vmov.f32	s17, s15
 800d712:	2300      	movs	r3, #0
 800d714:	f7f3 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d718:	4681      	mov	r9, r0
 800d71a:	b160      	cbz	r0, 800d736 <_dtoa_r+0xee>
 800d71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d71e:	2301      	movs	r3, #1
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 8568 	beq.w	800e1fa <_dtoa_r+0xbb2>
 800d72a:	4b86      	ldr	r3, [pc, #536]	; (800d944 <_dtoa_r+0x2fc>)
 800d72c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	3b01      	subs	r3, #1
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	e7da      	b.n	800d6ec <_dtoa_r+0xa4>
 800d736:	aa10      	add	r2, sp, #64	; 0x40
 800d738:	a911      	add	r1, sp, #68	; 0x44
 800d73a:	4620      	mov	r0, r4
 800d73c:	eeb0 0a48 	vmov.f32	s0, s16
 800d740:	eef0 0a68 	vmov.f32	s1, s17
 800d744:	f001 f994 	bl	800ea70 <__d2b>
 800d748:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d74c:	4682      	mov	sl, r0
 800d74e:	2d00      	cmp	r5, #0
 800d750:	d07f      	beq.n	800d852 <_dtoa_r+0x20a>
 800d752:	ee18 3a90 	vmov	r3, s17
 800d756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d75a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d75e:	ec51 0b18 	vmov	r0, r1, d8
 800d762:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d76a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d76e:	4619      	mov	r1, r3
 800d770:	2200      	movs	r2, #0
 800d772:	4b75      	ldr	r3, [pc, #468]	; (800d948 <_dtoa_r+0x300>)
 800d774:	f7f2 fd88 	bl	8000288 <__aeabi_dsub>
 800d778:	a367      	add	r3, pc, #412	; (adr r3, 800d918 <_dtoa_r+0x2d0>)
 800d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77e:	f7f2 ff3b 	bl	80005f8 <__aeabi_dmul>
 800d782:	a367      	add	r3, pc, #412	; (adr r3, 800d920 <_dtoa_r+0x2d8>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f2 fd80 	bl	800028c <__adddf3>
 800d78c:	4606      	mov	r6, r0
 800d78e:	4628      	mov	r0, r5
 800d790:	460f      	mov	r7, r1
 800d792:	f7f2 fec7 	bl	8000524 <__aeabi_i2d>
 800d796:	a364      	add	r3, pc, #400	; (adr r3, 800d928 <_dtoa_r+0x2e0>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f7f2 ff2c 	bl	80005f8 <__aeabi_dmul>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	f7f2 fd70 	bl	800028c <__adddf3>
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	460f      	mov	r7, r1
 800d7b0:	f7f3 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4683      	mov	fp, r0
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	4639      	mov	r1, r7
 800d7be:	f7f3 f98d 	bl	8000adc <__aeabi_dcmplt>
 800d7c2:	b148      	cbz	r0, 800d7d8 <_dtoa_r+0x190>
 800d7c4:	4658      	mov	r0, fp
 800d7c6:	f7f2 fead 	bl	8000524 <__aeabi_i2d>
 800d7ca:	4632      	mov	r2, r6
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	f7f3 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7d2:	b908      	cbnz	r0, 800d7d8 <_dtoa_r+0x190>
 800d7d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7d8:	f1bb 0f16 	cmp.w	fp, #22
 800d7dc:	d857      	bhi.n	800d88e <_dtoa_r+0x246>
 800d7de:	4b5b      	ldr	r3, [pc, #364]	; (800d94c <_dtoa_r+0x304>)
 800d7e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	ec51 0b18 	vmov	r0, r1, d8
 800d7ec:	f7f3 f976 	bl	8000adc <__aeabi_dcmplt>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d04e      	beq.n	800d892 <_dtoa_r+0x24a>
 800d7f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	930c      	str	r3, [sp, #48]	; 0x30
 800d7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7fe:	1b5b      	subs	r3, r3, r5
 800d800:	1e5a      	subs	r2, r3, #1
 800d802:	bf45      	ittet	mi
 800d804:	f1c3 0301 	rsbmi	r3, r3, #1
 800d808:	9305      	strmi	r3, [sp, #20]
 800d80a:	2300      	movpl	r3, #0
 800d80c:	2300      	movmi	r3, #0
 800d80e:	9206      	str	r2, [sp, #24]
 800d810:	bf54      	ite	pl
 800d812:	9305      	strpl	r3, [sp, #20]
 800d814:	9306      	strmi	r3, [sp, #24]
 800d816:	f1bb 0f00 	cmp.w	fp, #0
 800d81a:	db3c      	blt.n	800d896 <_dtoa_r+0x24e>
 800d81c:	9b06      	ldr	r3, [sp, #24]
 800d81e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d822:	445b      	add	r3, fp
 800d824:	9306      	str	r3, [sp, #24]
 800d826:	2300      	movs	r3, #0
 800d828:	9308      	str	r3, [sp, #32]
 800d82a:	9b07      	ldr	r3, [sp, #28]
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	d868      	bhi.n	800d902 <_dtoa_r+0x2ba>
 800d830:	2b05      	cmp	r3, #5
 800d832:	bfc4      	itt	gt
 800d834:	3b04      	subgt	r3, #4
 800d836:	9307      	strgt	r3, [sp, #28]
 800d838:	9b07      	ldr	r3, [sp, #28]
 800d83a:	f1a3 0302 	sub.w	r3, r3, #2
 800d83e:	bfcc      	ite	gt
 800d840:	2500      	movgt	r5, #0
 800d842:	2501      	movle	r5, #1
 800d844:	2b03      	cmp	r3, #3
 800d846:	f200 8085 	bhi.w	800d954 <_dtoa_r+0x30c>
 800d84a:	e8df f003 	tbb	[pc, r3]
 800d84e:	3b2e      	.short	0x3b2e
 800d850:	5839      	.short	0x5839
 800d852:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d856:	441d      	add	r5, r3
 800d858:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d85c:	2b20      	cmp	r3, #32
 800d85e:	bfc1      	itttt	gt
 800d860:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d864:	fa08 f803 	lslgt.w	r8, r8, r3
 800d868:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d86c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d870:	bfd6      	itet	le
 800d872:	f1c3 0320 	rsble	r3, r3, #32
 800d876:	ea48 0003 	orrgt.w	r0, r8, r3
 800d87a:	fa06 f003 	lslle.w	r0, r6, r3
 800d87e:	f7f2 fe41 	bl	8000504 <__aeabi_ui2d>
 800d882:	2201      	movs	r2, #1
 800d884:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d888:	3d01      	subs	r5, #1
 800d88a:	920e      	str	r2, [sp, #56]	; 0x38
 800d88c:	e76f      	b.n	800d76e <_dtoa_r+0x126>
 800d88e:	2301      	movs	r3, #1
 800d890:	e7b3      	b.n	800d7fa <_dtoa_r+0x1b2>
 800d892:	900c      	str	r0, [sp, #48]	; 0x30
 800d894:	e7b2      	b.n	800d7fc <_dtoa_r+0x1b4>
 800d896:	9b05      	ldr	r3, [sp, #20]
 800d898:	eba3 030b 	sub.w	r3, r3, fp
 800d89c:	9305      	str	r3, [sp, #20]
 800d89e:	f1cb 0300 	rsb	r3, fp, #0
 800d8a2:	9308      	str	r3, [sp, #32]
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a8:	e7bf      	b.n	800d82a <_dtoa_r+0x1e2>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dc52      	bgt.n	800d95a <_dtoa_r+0x312>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	9304      	str	r3, [sp, #16]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800d8be:	e00b      	b.n	800d8d8 <_dtoa_r+0x290>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e7f3      	b.n	800d8ac <_dtoa_r+0x264>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ca:	445b      	add	r3, fp
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	9304      	str	r3, [sp, #16]
 800d8d4:	bfb8      	it	lt
 800d8d6:	2301      	movlt	r3, #1
 800d8d8:	69e0      	ldr	r0, [r4, #28]
 800d8da:	2100      	movs	r1, #0
 800d8dc:	2204      	movs	r2, #4
 800d8de:	f102 0614 	add.w	r6, r2, #20
 800d8e2:	429e      	cmp	r6, r3
 800d8e4:	d93d      	bls.n	800d962 <_dtoa_r+0x31a>
 800d8e6:	6041      	str	r1, [r0, #4]
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 fd9f 	bl	800e42c <_Balloc>
 800d8ee:	9000      	str	r0, [sp, #0]
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d139      	bne.n	800d968 <_dtoa_r+0x320>
 800d8f4:	4b16      	ldr	r3, [pc, #88]	; (800d950 <_dtoa_r+0x308>)
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	f240 11af 	movw	r1, #431	; 0x1af
 800d8fc:	e6bd      	b.n	800d67a <_dtoa_r+0x32>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e7e1      	b.n	800d8c6 <_dtoa_r+0x27e>
 800d902:	2501      	movs	r5, #1
 800d904:	2300      	movs	r3, #0
 800d906:	9307      	str	r3, [sp, #28]
 800d908:	9509      	str	r5, [sp, #36]	; 0x24
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	2200      	movs	r2, #0
 800d914:	2312      	movs	r3, #18
 800d916:	e7d1      	b.n	800d8bc <_dtoa_r+0x274>
 800d918:	636f4361 	.word	0x636f4361
 800d91c:	3fd287a7 	.word	0x3fd287a7
 800d920:	8b60c8b3 	.word	0x8b60c8b3
 800d924:	3fc68a28 	.word	0x3fc68a28
 800d928:	509f79fb 	.word	0x509f79fb
 800d92c:	3fd34413 	.word	0x3fd34413
 800d930:	0800fefd 	.word	0x0800fefd
 800d934:	0800ff14 	.word	0x0800ff14
 800d938:	7ff00000 	.word	0x7ff00000
 800d93c:	0800fef9 	.word	0x0800fef9
 800d940:	0800fef0 	.word	0x0800fef0
 800d944:	0800fecd 	.word	0x0800fecd
 800d948:	3ff80000 	.word	0x3ff80000
 800d94c:	08010000 	.word	0x08010000
 800d950:	0800ff6c 	.word	0x0800ff6c
 800d954:	2301      	movs	r3, #1
 800d956:	9309      	str	r3, [sp, #36]	; 0x24
 800d958:	e7d7      	b.n	800d90a <_dtoa_r+0x2c2>
 800d95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d95c:	9301      	str	r3, [sp, #4]
 800d95e:	9304      	str	r3, [sp, #16]
 800d960:	e7ba      	b.n	800d8d8 <_dtoa_r+0x290>
 800d962:	3101      	adds	r1, #1
 800d964:	0052      	lsls	r2, r2, #1
 800d966:	e7ba      	b.n	800d8de <_dtoa_r+0x296>
 800d968:	69e3      	ldr	r3, [r4, #28]
 800d96a:	9a00      	ldr	r2, [sp, #0]
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	9b04      	ldr	r3, [sp, #16]
 800d970:	2b0e      	cmp	r3, #14
 800d972:	f200 80a8 	bhi.w	800dac6 <_dtoa_r+0x47e>
 800d976:	2d00      	cmp	r5, #0
 800d978:	f000 80a5 	beq.w	800dac6 <_dtoa_r+0x47e>
 800d97c:	f1bb 0f00 	cmp.w	fp, #0
 800d980:	dd38      	ble.n	800d9f4 <_dtoa_r+0x3ac>
 800d982:	4bc0      	ldr	r3, [pc, #768]	; (800dc84 <_dtoa_r+0x63c>)
 800d984:	f00b 020f 	and.w	r2, fp, #15
 800d988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d98c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d990:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d994:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d998:	d019      	beq.n	800d9ce <_dtoa_r+0x386>
 800d99a:	4bbb      	ldr	r3, [pc, #748]	; (800dc88 <_dtoa_r+0x640>)
 800d99c:	ec51 0b18 	vmov	r0, r1, d8
 800d9a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9a4:	f7f2 ff52 	bl	800084c <__aeabi_ddiv>
 800d9a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ac:	f008 080f 	and.w	r8, r8, #15
 800d9b0:	2503      	movs	r5, #3
 800d9b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dc88 <_dtoa_r+0x640>
 800d9b6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ba:	d10a      	bne.n	800d9d2 <_dtoa_r+0x38a>
 800d9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	f7f2 ff42 	bl	800084c <__aeabi_ddiv>
 800d9c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9cc:	e02b      	b.n	800da26 <_dtoa_r+0x3de>
 800d9ce:	2502      	movs	r5, #2
 800d9d0:	e7ef      	b.n	800d9b2 <_dtoa_r+0x36a>
 800d9d2:	f018 0f01 	tst.w	r8, #1
 800d9d6:	d008      	beq.n	800d9ea <_dtoa_r+0x3a2>
 800d9d8:	4630      	mov	r0, r6
 800d9da:	4639      	mov	r1, r7
 800d9dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d9e0:	f7f2 fe0a 	bl	80005f8 <__aeabi_dmul>
 800d9e4:	3501      	adds	r5, #1
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460f      	mov	r7, r1
 800d9ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9ee:	f109 0908 	add.w	r9, r9, #8
 800d9f2:	e7e0      	b.n	800d9b6 <_dtoa_r+0x36e>
 800d9f4:	f000 809f 	beq.w	800db36 <_dtoa_r+0x4ee>
 800d9f8:	f1cb 0600 	rsb	r6, fp, #0
 800d9fc:	4ba1      	ldr	r3, [pc, #644]	; (800dc84 <_dtoa_r+0x63c>)
 800d9fe:	4fa2      	ldr	r7, [pc, #648]	; (800dc88 <_dtoa_r+0x640>)
 800da00:	f006 020f 	and.w	r2, r6, #15
 800da04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	ec51 0b18 	vmov	r0, r1, d8
 800da10:	f7f2 fdf2 	bl	80005f8 <__aeabi_dmul>
 800da14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da18:	1136      	asrs	r6, r6, #4
 800da1a:	2300      	movs	r3, #0
 800da1c:	2502      	movs	r5, #2
 800da1e:	2e00      	cmp	r6, #0
 800da20:	d17e      	bne.n	800db20 <_dtoa_r+0x4d8>
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1d0      	bne.n	800d9c8 <_dtoa_r+0x380>
 800da26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 8084 	beq.w	800db3a <_dtoa_r+0x4f2>
 800da32:	4b96      	ldr	r3, [pc, #600]	; (800dc8c <_dtoa_r+0x644>)
 800da34:	2200      	movs	r2, #0
 800da36:	4640      	mov	r0, r8
 800da38:	4649      	mov	r1, r9
 800da3a:	f7f3 f84f 	bl	8000adc <__aeabi_dcmplt>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d07b      	beq.n	800db3a <_dtoa_r+0x4f2>
 800da42:	9b04      	ldr	r3, [sp, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d078      	beq.n	800db3a <_dtoa_r+0x4f2>
 800da48:	9b01      	ldr	r3, [sp, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dd39      	ble.n	800dac2 <_dtoa_r+0x47a>
 800da4e:	4b90      	ldr	r3, [pc, #576]	; (800dc90 <_dtoa_r+0x648>)
 800da50:	2200      	movs	r2, #0
 800da52:	4640      	mov	r0, r8
 800da54:	4649      	mov	r1, r9
 800da56:	f7f2 fdcf 	bl	80005f8 <__aeabi_dmul>
 800da5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da5e:	9e01      	ldr	r6, [sp, #4]
 800da60:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da64:	3501      	adds	r5, #1
 800da66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7f2 fd5a 	bl	8000524 <__aeabi_i2d>
 800da70:	4642      	mov	r2, r8
 800da72:	464b      	mov	r3, r9
 800da74:	f7f2 fdc0 	bl	80005f8 <__aeabi_dmul>
 800da78:	4b86      	ldr	r3, [pc, #536]	; (800dc94 <_dtoa_r+0x64c>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	f7f2 fc06 	bl	800028c <__adddf3>
 800da80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da88:	9303      	str	r3, [sp, #12]
 800da8a:	2e00      	cmp	r6, #0
 800da8c:	d158      	bne.n	800db40 <_dtoa_r+0x4f8>
 800da8e:	4b82      	ldr	r3, [pc, #520]	; (800dc98 <_dtoa_r+0x650>)
 800da90:	2200      	movs	r2, #0
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	f7f2 fbf7 	bl	8000288 <__aeabi_dsub>
 800da9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da9e:	4680      	mov	r8, r0
 800daa0:	4689      	mov	r9, r1
 800daa2:	f7f3 f839 	bl	8000b18 <__aeabi_dcmpgt>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f040 8296 	bne.w	800dfd8 <_dtoa_r+0x990>
 800daac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dab0:	4640      	mov	r0, r8
 800dab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dab6:	4649      	mov	r1, r9
 800dab8:	f7f3 f810 	bl	8000adc <__aeabi_dcmplt>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f040 8289 	bne.w	800dfd4 <_dtoa_r+0x98c>
 800dac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f2c0 814e 	blt.w	800dd6a <_dtoa_r+0x722>
 800dace:	f1bb 0f0e 	cmp.w	fp, #14
 800dad2:	f300 814a 	bgt.w	800dd6a <_dtoa_r+0x722>
 800dad6:	4b6b      	ldr	r3, [pc, #428]	; (800dc84 <_dtoa_r+0x63c>)
 800dad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dadc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f280 80dc 	bge.w	800dca0 <_dtoa_r+0x658>
 800dae8:	9b04      	ldr	r3, [sp, #16]
 800daea:	2b00      	cmp	r3, #0
 800daec:	f300 80d8 	bgt.w	800dca0 <_dtoa_r+0x658>
 800daf0:	f040 826f 	bne.w	800dfd2 <_dtoa_r+0x98a>
 800daf4:	4b68      	ldr	r3, [pc, #416]	; (800dc98 <_dtoa_r+0x650>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	4640      	mov	r0, r8
 800dafa:	4649      	mov	r1, r9
 800dafc:	f7f2 fd7c 	bl	80005f8 <__aeabi_dmul>
 800db00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db04:	f7f2 fffe 	bl	8000b04 <__aeabi_dcmpge>
 800db08:	9e04      	ldr	r6, [sp, #16]
 800db0a:	4637      	mov	r7, r6
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f040 8245 	bne.w	800df9c <_dtoa_r+0x954>
 800db12:	9d00      	ldr	r5, [sp, #0]
 800db14:	2331      	movs	r3, #49	; 0x31
 800db16:	f805 3b01 	strb.w	r3, [r5], #1
 800db1a:	f10b 0b01 	add.w	fp, fp, #1
 800db1e:	e241      	b.n	800dfa4 <_dtoa_r+0x95c>
 800db20:	07f2      	lsls	r2, r6, #31
 800db22:	d505      	bpl.n	800db30 <_dtoa_r+0x4e8>
 800db24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db28:	f7f2 fd66 	bl	80005f8 <__aeabi_dmul>
 800db2c:	3501      	adds	r5, #1
 800db2e:	2301      	movs	r3, #1
 800db30:	1076      	asrs	r6, r6, #1
 800db32:	3708      	adds	r7, #8
 800db34:	e773      	b.n	800da1e <_dtoa_r+0x3d6>
 800db36:	2502      	movs	r5, #2
 800db38:	e775      	b.n	800da26 <_dtoa_r+0x3de>
 800db3a:	9e04      	ldr	r6, [sp, #16]
 800db3c:	465f      	mov	r7, fp
 800db3e:	e792      	b.n	800da66 <_dtoa_r+0x41e>
 800db40:	9900      	ldr	r1, [sp, #0]
 800db42:	4b50      	ldr	r3, [pc, #320]	; (800dc84 <_dtoa_r+0x63c>)
 800db44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db48:	4431      	add	r1, r6
 800db4a:	9102      	str	r1, [sp, #8]
 800db4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db4e:	eeb0 9a47 	vmov.f32	s18, s14
 800db52:	eef0 9a67 	vmov.f32	s19, s15
 800db56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db5e:	2900      	cmp	r1, #0
 800db60:	d044      	beq.n	800dbec <_dtoa_r+0x5a4>
 800db62:	494e      	ldr	r1, [pc, #312]	; (800dc9c <_dtoa_r+0x654>)
 800db64:	2000      	movs	r0, #0
 800db66:	f7f2 fe71 	bl	800084c <__aeabi_ddiv>
 800db6a:	ec53 2b19 	vmov	r2, r3, d9
 800db6e:	f7f2 fb8b 	bl	8000288 <__aeabi_dsub>
 800db72:	9d00      	ldr	r5, [sp, #0]
 800db74:	ec41 0b19 	vmov	d9, r0, r1
 800db78:	4649      	mov	r1, r9
 800db7a:	4640      	mov	r0, r8
 800db7c:	f7f2 ffec 	bl	8000b58 <__aeabi_d2iz>
 800db80:	4606      	mov	r6, r0
 800db82:	f7f2 fccf 	bl	8000524 <__aeabi_i2d>
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 fb7b 	bl	8000288 <__aeabi_dsub>
 800db92:	3630      	adds	r6, #48	; 0x30
 800db94:	f805 6b01 	strb.w	r6, [r5], #1
 800db98:	ec53 2b19 	vmov	r2, r3, d9
 800db9c:	4680      	mov	r8, r0
 800db9e:	4689      	mov	r9, r1
 800dba0:	f7f2 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d164      	bne.n	800dc72 <_dtoa_r+0x62a>
 800dba8:	4642      	mov	r2, r8
 800dbaa:	464b      	mov	r3, r9
 800dbac:	4937      	ldr	r1, [pc, #220]	; (800dc8c <_dtoa_r+0x644>)
 800dbae:	2000      	movs	r0, #0
 800dbb0:	f7f2 fb6a 	bl	8000288 <__aeabi_dsub>
 800dbb4:	ec53 2b19 	vmov	r2, r3, d9
 800dbb8:	f7f2 ff90 	bl	8000adc <__aeabi_dcmplt>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	f040 80b6 	bne.w	800dd2e <_dtoa_r+0x6e6>
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	f43f af7c 	beq.w	800dac2 <_dtoa_r+0x47a>
 800dbca:	4b31      	ldr	r3, [pc, #196]	; (800dc90 <_dtoa_r+0x648>)
 800dbcc:	ec51 0b19 	vmov	r0, r1, d9
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f7f2 fd11 	bl	80005f8 <__aeabi_dmul>
 800dbd6:	4b2e      	ldr	r3, [pc, #184]	; (800dc90 <_dtoa_r+0x648>)
 800dbd8:	ec41 0b19 	vmov	d9, r0, r1
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4640      	mov	r0, r8
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	f7f2 fd09 	bl	80005f8 <__aeabi_dmul>
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4689      	mov	r9, r1
 800dbea:	e7c5      	b.n	800db78 <_dtoa_r+0x530>
 800dbec:	ec51 0b17 	vmov	r0, r1, d7
 800dbf0:	f7f2 fd02 	bl	80005f8 <__aeabi_dmul>
 800dbf4:	9b02      	ldr	r3, [sp, #8]
 800dbf6:	9d00      	ldr	r5, [sp, #0]
 800dbf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbfa:	ec41 0b19 	vmov	d9, r0, r1
 800dbfe:	4649      	mov	r1, r9
 800dc00:	4640      	mov	r0, r8
 800dc02:	f7f2 ffa9 	bl	8000b58 <__aeabi_d2iz>
 800dc06:	4606      	mov	r6, r0
 800dc08:	f7f2 fc8c 	bl	8000524 <__aeabi_i2d>
 800dc0c:	3630      	adds	r6, #48	; 0x30
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4640      	mov	r0, r8
 800dc14:	4649      	mov	r1, r9
 800dc16:	f7f2 fb37 	bl	8000288 <__aeabi_dsub>
 800dc1a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc1e:	9b02      	ldr	r3, [sp, #8]
 800dc20:	429d      	cmp	r5, r3
 800dc22:	4680      	mov	r8, r0
 800dc24:	4689      	mov	r9, r1
 800dc26:	f04f 0200 	mov.w	r2, #0
 800dc2a:	d124      	bne.n	800dc76 <_dtoa_r+0x62e>
 800dc2c:	4b1b      	ldr	r3, [pc, #108]	; (800dc9c <_dtoa_r+0x654>)
 800dc2e:	ec51 0b19 	vmov	r0, r1, d9
 800dc32:	f7f2 fb2b 	bl	800028c <__adddf3>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	f7f2 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d173      	bne.n	800dd2e <_dtoa_r+0x6e6>
 800dc46:	ec53 2b19 	vmov	r2, r3, d9
 800dc4a:	4914      	ldr	r1, [pc, #80]	; (800dc9c <_dtoa_r+0x654>)
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f7f2 fb1b 	bl	8000288 <__aeabi_dsub>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4640      	mov	r0, r8
 800dc58:	4649      	mov	r1, r9
 800dc5a:	f7f2 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f43f af2f 	beq.w	800dac2 <_dtoa_r+0x47a>
 800dc64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc66:	1e6b      	subs	r3, r5, #1
 800dc68:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc6e:	2b30      	cmp	r3, #48	; 0x30
 800dc70:	d0f8      	beq.n	800dc64 <_dtoa_r+0x61c>
 800dc72:	46bb      	mov	fp, r7
 800dc74:	e04a      	b.n	800dd0c <_dtoa_r+0x6c4>
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <_dtoa_r+0x648>)
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	4680      	mov	r8, r0
 800dc7e:	4689      	mov	r9, r1
 800dc80:	e7bd      	b.n	800dbfe <_dtoa_r+0x5b6>
 800dc82:	bf00      	nop
 800dc84:	08010000 	.word	0x08010000
 800dc88:	0800ffd8 	.word	0x0800ffd8
 800dc8c:	3ff00000 	.word	0x3ff00000
 800dc90:	40240000 	.word	0x40240000
 800dc94:	401c0000 	.word	0x401c0000
 800dc98:	40140000 	.word	0x40140000
 800dc9c:	3fe00000 	.word	0x3fe00000
 800dca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dca4:	9d00      	ldr	r5, [sp, #0]
 800dca6:	4642      	mov	r2, r8
 800dca8:	464b      	mov	r3, r9
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 fdcd 	bl	800084c <__aeabi_ddiv>
 800dcb2:	f7f2 ff51 	bl	8000b58 <__aeabi_d2iz>
 800dcb6:	9001      	str	r0, [sp, #4]
 800dcb8:	f7f2 fc34 	bl	8000524 <__aeabi_i2d>
 800dcbc:	4642      	mov	r2, r8
 800dcbe:	464b      	mov	r3, r9
 800dcc0:	f7f2 fc9a 	bl	80005f8 <__aeabi_dmul>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 fadc 	bl	8000288 <__aeabi_dsub>
 800dcd0:	9e01      	ldr	r6, [sp, #4]
 800dcd2:	9f04      	ldr	r7, [sp, #16]
 800dcd4:	3630      	adds	r6, #48	; 0x30
 800dcd6:	f805 6b01 	strb.w	r6, [r5], #1
 800dcda:	9e00      	ldr	r6, [sp, #0]
 800dcdc:	1bae      	subs	r6, r5, r6
 800dcde:	42b7      	cmp	r7, r6
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	d134      	bne.n	800dd50 <_dtoa_r+0x708>
 800dce6:	f7f2 fad1 	bl	800028c <__adddf3>
 800dcea:	4642      	mov	r2, r8
 800dcec:	464b      	mov	r3, r9
 800dcee:	4606      	mov	r6, r0
 800dcf0:	460f      	mov	r7, r1
 800dcf2:	f7f2 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800dcf6:	b9c8      	cbnz	r0, 800dd2c <_dtoa_r+0x6e4>
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	464b      	mov	r3, r9
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd04:	b110      	cbz	r0, 800dd0c <_dtoa_r+0x6c4>
 800dd06:	9b01      	ldr	r3, [sp, #4]
 800dd08:	07db      	lsls	r3, r3, #31
 800dd0a:	d40f      	bmi.n	800dd2c <_dtoa_r+0x6e4>
 800dd0c:	4651      	mov	r1, sl
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f000 fbcc 	bl	800e4ac <_Bfree>
 800dd14:	2300      	movs	r3, #0
 800dd16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd18:	702b      	strb	r3, [r5, #0]
 800dd1a:	f10b 0301 	add.w	r3, fp, #1
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f43f ace2 	beq.w	800d6ec <_dtoa_r+0xa4>
 800dd28:	601d      	str	r5, [r3, #0]
 800dd2a:	e4df      	b.n	800d6ec <_dtoa_r+0xa4>
 800dd2c:	465f      	mov	r7, fp
 800dd2e:	462b      	mov	r3, r5
 800dd30:	461d      	mov	r5, r3
 800dd32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd36:	2a39      	cmp	r2, #57	; 0x39
 800dd38:	d106      	bne.n	800dd48 <_dtoa_r+0x700>
 800dd3a:	9a00      	ldr	r2, [sp, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d1f7      	bne.n	800dd30 <_dtoa_r+0x6e8>
 800dd40:	9900      	ldr	r1, [sp, #0]
 800dd42:	2230      	movs	r2, #48	; 0x30
 800dd44:	3701      	adds	r7, #1
 800dd46:	700a      	strb	r2, [r1, #0]
 800dd48:	781a      	ldrb	r2, [r3, #0]
 800dd4a:	3201      	adds	r2, #1
 800dd4c:	701a      	strb	r2, [r3, #0]
 800dd4e:	e790      	b.n	800dc72 <_dtoa_r+0x62a>
 800dd50:	4ba3      	ldr	r3, [pc, #652]	; (800dfe0 <_dtoa_r+0x998>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	f7f2 fc50 	bl	80005f8 <__aeabi_dmul>
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460f      	mov	r7, r1
 800dd60:	f7f2 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d09e      	beq.n	800dca6 <_dtoa_r+0x65e>
 800dd68:	e7d0      	b.n	800dd0c <_dtoa_r+0x6c4>
 800dd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd6c:	2a00      	cmp	r2, #0
 800dd6e:	f000 80ca 	beq.w	800df06 <_dtoa_r+0x8be>
 800dd72:	9a07      	ldr	r2, [sp, #28]
 800dd74:	2a01      	cmp	r2, #1
 800dd76:	f300 80ad 	bgt.w	800ded4 <_dtoa_r+0x88c>
 800dd7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd7c:	2a00      	cmp	r2, #0
 800dd7e:	f000 80a5 	beq.w	800decc <_dtoa_r+0x884>
 800dd82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd86:	9e08      	ldr	r6, [sp, #32]
 800dd88:	9d05      	ldr	r5, [sp, #20]
 800dd8a:	9a05      	ldr	r2, [sp, #20]
 800dd8c:	441a      	add	r2, r3
 800dd8e:	9205      	str	r2, [sp, #20]
 800dd90:	9a06      	ldr	r2, [sp, #24]
 800dd92:	2101      	movs	r1, #1
 800dd94:	441a      	add	r2, r3
 800dd96:	4620      	mov	r0, r4
 800dd98:	9206      	str	r2, [sp, #24]
 800dd9a:	f000 fc3d 	bl	800e618 <__i2b>
 800dd9e:	4607      	mov	r7, r0
 800dda0:	b165      	cbz	r5, 800ddbc <_dtoa_r+0x774>
 800dda2:	9b06      	ldr	r3, [sp, #24]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	dd09      	ble.n	800ddbc <_dtoa_r+0x774>
 800dda8:	42ab      	cmp	r3, r5
 800ddaa:	9a05      	ldr	r2, [sp, #20]
 800ddac:	bfa8      	it	ge
 800ddae:	462b      	movge	r3, r5
 800ddb0:	1ad2      	subs	r2, r2, r3
 800ddb2:	9205      	str	r2, [sp, #20]
 800ddb4:	9a06      	ldr	r2, [sp, #24]
 800ddb6:	1aed      	subs	r5, r5, r3
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	9306      	str	r3, [sp, #24]
 800ddbc:	9b08      	ldr	r3, [sp, #32]
 800ddbe:	b1f3      	cbz	r3, 800ddfe <_dtoa_r+0x7b6>
 800ddc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 80a3 	beq.w	800df0e <_dtoa_r+0x8c6>
 800ddc8:	2e00      	cmp	r6, #0
 800ddca:	dd10      	ble.n	800ddee <_dtoa_r+0x7a6>
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4632      	mov	r2, r6
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 fce1 	bl	800e798 <__pow5mult>
 800ddd6:	4652      	mov	r2, sl
 800ddd8:	4601      	mov	r1, r0
 800ddda:	4607      	mov	r7, r0
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 fc31 	bl	800e644 <__multiply>
 800dde2:	4651      	mov	r1, sl
 800dde4:	4680      	mov	r8, r0
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 fb60 	bl	800e4ac <_Bfree>
 800ddec:	46c2      	mov	sl, r8
 800ddee:	9b08      	ldr	r3, [sp, #32]
 800ddf0:	1b9a      	subs	r2, r3, r6
 800ddf2:	d004      	beq.n	800ddfe <_dtoa_r+0x7b6>
 800ddf4:	4651      	mov	r1, sl
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f000 fcce 	bl	800e798 <__pow5mult>
 800ddfc:	4682      	mov	sl, r0
 800ddfe:	2101      	movs	r1, #1
 800de00:	4620      	mov	r0, r4
 800de02:	f000 fc09 	bl	800e618 <__i2b>
 800de06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	4606      	mov	r6, r0
 800de0c:	f340 8081 	ble.w	800df12 <_dtoa_r+0x8ca>
 800de10:	461a      	mov	r2, r3
 800de12:	4601      	mov	r1, r0
 800de14:	4620      	mov	r0, r4
 800de16:	f000 fcbf 	bl	800e798 <__pow5mult>
 800de1a:	9b07      	ldr	r3, [sp, #28]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	4606      	mov	r6, r0
 800de20:	dd7a      	ble.n	800df18 <_dtoa_r+0x8d0>
 800de22:	f04f 0800 	mov.w	r8, #0
 800de26:	6933      	ldr	r3, [r6, #16]
 800de28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de2c:	6918      	ldr	r0, [r3, #16]
 800de2e:	f000 fba5 	bl	800e57c <__hi0bits>
 800de32:	f1c0 0020 	rsb	r0, r0, #32
 800de36:	9b06      	ldr	r3, [sp, #24]
 800de38:	4418      	add	r0, r3
 800de3a:	f010 001f 	ands.w	r0, r0, #31
 800de3e:	f000 8094 	beq.w	800df6a <_dtoa_r+0x922>
 800de42:	f1c0 0320 	rsb	r3, r0, #32
 800de46:	2b04      	cmp	r3, #4
 800de48:	f340 8085 	ble.w	800df56 <_dtoa_r+0x90e>
 800de4c:	9b05      	ldr	r3, [sp, #20]
 800de4e:	f1c0 001c 	rsb	r0, r0, #28
 800de52:	4403      	add	r3, r0
 800de54:	9305      	str	r3, [sp, #20]
 800de56:	9b06      	ldr	r3, [sp, #24]
 800de58:	4403      	add	r3, r0
 800de5a:	4405      	add	r5, r0
 800de5c:	9306      	str	r3, [sp, #24]
 800de5e:	9b05      	ldr	r3, [sp, #20]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dd05      	ble.n	800de70 <_dtoa_r+0x828>
 800de64:	4651      	mov	r1, sl
 800de66:	461a      	mov	r2, r3
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 fcef 	bl	800e84c <__lshift>
 800de6e:	4682      	mov	sl, r0
 800de70:	9b06      	ldr	r3, [sp, #24]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd05      	ble.n	800de82 <_dtoa_r+0x83a>
 800de76:	4631      	mov	r1, r6
 800de78:	461a      	mov	r2, r3
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 fce6 	bl	800e84c <__lshift>
 800de80:	4606      	mov	r6, r0
 800de82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de84:	2b00      	cmp	r3, #0
 800de86:	d072      	beq.n	800df6e <_dtoa_r+0x926>
 800de88:	4631      	mov	r1, r6
 800de8a:	4650      	mov	r0, sl
 800de8c:	f000 fd4a 	bl	800e924 <__mcmp>
 800de90:	2800      	cmp	r0, #0
 800de92:	da6c      	bge.n	800df6e <_dtoa_r+0x926>
 800de94:	2300      	movs	r3, #0
 800de96:	4651      	mov	r1, sl
 800de98:	220a      	movs	r2, #10
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fb28 	bl	800e4f0 <__multadd>
 800dea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dea6:	4682      	mov	sl, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 81b0 	beq.w	800e20e <_dtoa_r+0xbc6>
 800deae:	2300      	movs	r3, #0
 800deb0:	4639      	mov	r1, r7
 800deb2:	220a      	movs	r2, #10
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 fb1b 	bl	800e4f0 <__multadd>
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	4607      	mov	r7, r0
 800dec0:	f300 8096 	bgt.w	800dff0 <_dtoa_r+0x9a8>
 800dec4:	9b07      	ldr	r3, [sp, #28]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	dc59      	bgt.n	800df7e <_dtoa_r+0x936>
 800deca:	e091      	b.n	800dff0 <_dtoa_r+0x9a8>
 800decc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ded2:	e758      	b.n	800dd86 <_dtoa_r+0x73e>
 800ded4:	9b04      	ldr	r3, [sp, #16]
 800ded6:	1e5e      	subs	r6, r3, #1
 800ded8:	9b08      	ldr	r3, [sp, #32]
 800deda:	42b3      	cmp	r3, r6
 800dedc:	bfbf      	itttt	lt
 800dede:	9b08      	ldrlt	r3, [sp, #32]
 800dee0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dee2:	9608      	strlt	r6, [sp, #32]
 800dee4:	1af3      	sublt	r3, r6, r3
 800dee6:	bfb4      	ite	lt
 800dee8:	18d2      	addlt	r2, r2, r3
 800deea:	1b9e      	subge	r6, r3, r6
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	bfbc      	itt	lt
 800def0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800def2:	2600      	movlt	r6, #0
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfb7      	itett	lt
 800def8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800defc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800df00:	1a9d      	sublt	r5, r3, r2
 800df02:	2300      	movlt	r3, #0
 800df04:	e741      	b.n	800dd8a <_dtoa_r+0x742>
 800df06:	9e08      	ldr	r6, [sp, #32]
 800df08:	9d05      	ldr	r5, [sp, #20]
 800df0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df0c:	e748      	b.n	800dda0 <_dtoa_r+0x758>
 800df0e:	9a08      	ldr	r2, [sp, #32]
 800df10:	e770      	b.n	800ddf4 <_dtoa_r+0x7ac>
 800df12:	9b07      	ldr	r3, [sp, #28]
 800df14:	2b01      	cmp	r3, #1
 800df16:	dc19      	bgt.n	800df4c <_dtoa_r+0x904>
 800df18:	9b02      	ldr	r3, [sp, #8]
 800df1a:	b9bb      	cbnz	r3, 800df4c <_dtoa_r+0x904>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df22:	b99b      	cbnz	r3, 800df4c <_dtoa_r+0x904>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df2a:	0d1b      	lsrs	r3, r3, #20
 800df2c:	051b      	lsls	r3, r3, #20
 800df2e:	b183      	cbz	r3, 800df52 <_dtoa_r+0x90a>
 800df30:	9b05      	ldr	r3, [sp, #20]
 800df32:	3301      	adds	r3, #1
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	9b06      	ldr	r3, [sp, #24]
 800df38:	3301      	adds	r3, #1
 800df3a:	9306      	str	r3, [sp, #24]
 800df3c:	f04f 0801 	mov.w	r8, #1
 800df40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df42:	2b00      	cmp	r3, #0
 800df44:	f47f af6f 	bne.w	800de26 <_dtoa_r+0x7de>
 800df48:	2001      	movs	r0, #1
 800df4a:	e774      	b.n	800de36 <_dtoa_r+0x7ee>
 800df4c:	f04f 0800 	mov.w	r8, #0
 800df50:	e7f6      	b.n	800df40 <_dtoa_r+0x8f8>
 800df52:	4698      	mov	r8, r3
 800df54:	e7f4      	b.n	800df40 <_dtoa_r+0x8f8>
 800df56:	d082      	beq.n	800de5e <_dtoa_r+0x816>
 800df58:	9a05      	ldr	r2, [sp, #20]
 800df5a:	331c      	adds	r3, #28
 800df5c:	441a      	add	r2, r3
 800df5e:	9205      	str	r2, [sp, #20]
 800df60:	9a06      	ldr	r2, [sp, #24]
 800df62:	441a      	add	r2, r3
 800df64:	441d      	add	r5, r3
 800df66:	9206      	str	r2, [sp, #24]
 800df68:	e779      	b.n	800de5e <_dtoa_r+0x816>
 800df6a:	4603      	mov	r3, r0
 800df6c:	e7f4      	b.n	800df58 <_dtoa_r+0x910>
 800df6e:	9b04      	ldr	r3, [sp, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	dc37      	bgt.n	800dfe4 <_dtoa_r+0x99c>
 800df74:	9b07      	ldr	r3, [sp, #28]
 800df76:	2b02      	cmp	r3, #2
 800df78:	dd34      	ble.n	800dfe4 <_dtoa_r+0x99c>
 800df7a:	9b04      	ldr	r3, [sp, #16]
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	9b01      	ldr	r3, [sp, #4]
 800df80:	b963      	cbnz	r3, 800df9c <_dtoa_r+0x954>
 800df82:	4631      	mov	r1, r6
 800df84:	2205      	movs	r2, #5
 800df86:	4620      	mov	r0, r4
 800df88:	f000 fab2 	bl	800e4f0 <__multadd>
 800df8c:	4601      	mov	r1, r0
 800df8e:	4606      	mov	r6, r0
 800df90:	4650      	mov	r0, sl
 800df92:	f000 fcc7 	bl	800e924 <__mcmp>
 800df96:	2800      	cmp	r0, #0
 800df98:	f73f adbb 	bgt.w	800db12 <_dtoa_r+0x4ca>
 800df9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df9e:	9d00      	ldr	r5, [sp, #0]
 800dfa0:	ea6f 0b03 	mvn.w	fp, r3
 800dfa4:	f04f 0800 	mov.w	r8, #0
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f000 fa7e 	bl	800e4ac <_Bfree>
 800dfb0:	2f00      	cmp	r7, #0
 800dfb2:	f43f aeab 	beq.w	800dd0c <_dtoa_r+0x6c4>
 800dfb6:	f1b8 0f00 	cmp.w	r8, #0
 800dfba:	d005      	beq.n	800dfc8 <_dtoa_r+0x980>
 800dfbc:	45b8      	cmp	r8, r7
 800dfbe:	d003      	beq.n	800dfc8 <_dtoa_r+0x980>
 800dfc0:	4641      	mov	r1, r8
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 fa72 	bl	800e4ac <_Bfree>
 800dfc8:	4639      	mov	r1, r7
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 fa6e 	bl	800e4ac <_Bfree>
 800dfd0:	e69c      	b.n	800dd0c <_dtoa_r+0x6c4>
 800dfd2:	2600      	movs	r6, #0
 800dfd4:	4637      	mov	r7, r6
 800dfd6:	e7e1      	b.n	800df9c <_dtoa_r+0x954>
 800dfd8:	46bb      	mov	fp, r7
 800dfda:	4637      	mov	r7, r6
 800dfdc:	e599      	b.n	800db12 <_dtoa_r+0x4ca>
 800dfde:	bf00      	nop
 800dfe0:	40240000 	.word	0x40240000
 800dfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f000 80c8 	beq.w	800e17c <_dtoa_r+0xb34>
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	2d00      	cmp	r5, #0
 800dff2:	dd05      	ble.n	800e000 <_dtoa_r+0x9b8>
 800dff4:	4639      	mov	r1, r7
 800dff6:	462a      	mov	r2, r5
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 fc27 	bl	800e84c <__lshift>
 800dffe:	4607      	mov	r7, r0
 800e000:	f1b8 0f00 	cmp.w	r8, #0
 800e004:	d05b      	beq.n	800e0be <_dtoa_r+0xa76>
 800e006:	6879      	ldr	r1, [r7, #4]
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 fa0f 	bl	800e42c <_Balloc>
 800e00e:	4605      	mov	r5, r0
 800e010:	b928      	cbnz	r0, 800e01e <_dtoa_r+0x9d6>
 800e012:	4b83      	ldr	r3, [pc, #524]	; (800e220 <_dtoa_r+0xbd8>)
 800e014:	4602      	mov	r2, r0
 800e016:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e01a:	f7ff bb2e 	b.w	800d67a <_dtoa_r+0x32>
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	3202      	adds	r2, #2
 800e022:	0092      	lsls	r2, r2, #2
 800e024:	f107 010c 	add.w	r1, r7, #12
 800e028:	300c      	adds	r0, #12
 800e02a:	f7ff fa76 	bl	800d51a <memcpy>
 800e02e:	2201      	movs	r2, #1
 800e030:	4629      	mov	r1, r5
 800e032:	4620      	mov	r0, r4
 800e034:	f000 fc0a 	bl	800e84c <__lshift>
 800e038:	9b00      	ldr	r3, [sp, #0]
 800e03a:	3301      	adds	r3, #1
 800e03c:	9304      	str	r3, [sp, #16]
 800e03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e042:	4413      	add	r3, r2
 800e044:	9308      	str	r3, [sp, #32]
 800e046:	9b02      	ldr	r3, [sp, #8]
 800e048:	f003 0301 	and.w	r3, r3, #1
 800e04c:	46b8      	mov	r8, r7
 800e04e:	9306      	str	r3, [sp, #24]
 800e050:	4607      	mov	r7, r0
 800e052:	9b04      	ldr	r3, [sp, #16]
 800e054:	4631      	mov	r1, r6
 800e056:	3b01      	subs	r3, #1
 800e058:	4650      	mov	r0, sl
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	f7ff fa6b 	bl	800d536 <quorem>
 800e060:	4641      	mov	r1, r8
 800e062:	9002      	str	r0, [sp, #8]
 800e064:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e068:	4650      	mov	r0, sl
 800e06a:	f000 fc5b 	bl	800e924 <__mcmp>
 800e06e:	463a      	mov	r2, r7
 800e070:	9005      	str	r0, [sp, #20]
 800e072:	4631      	mov	r1, r6
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fc71 	bl	800e95c <__mdiff>
 800e07a:	68c2      	ldr	r2, [r0, #12]
 800e07c:	4605      	mov	r5, r0
 800e07e:	bb02      	cbnz	r2, 800e0c2 <_dtoa_r+0xa7a>
 800e080:	4601      	mov	r1, r0
 800e082:	4650      	mov	r0, sl
 800e084:	f000 fc4e 	bl	800e924 <__mcmp>
 800e088:	4602      	mov	r2, r0
 800e08a:	4629      	mov	r1, r5
 800e08c:	4620      	mov	r0, r4
 800e08e:	9209      	str	r2, [sp, #36]	; 0x24
 800e090:	f000 fa0c 	bl	800e4ac <_Bfree>
 800e094:	9b07      	ldr	r3, [sp, #28]
 800e096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e098:	9d04      	ldr	r5, [sp, #16]
 800e09a:	ea43 0102 	orr.w	r1, r3, r2
 800e09e:	9b06      	ldr	r3, [sp, #24]
 800e0a0:	4319      	orrs	r1, r3
 800e0a2:	d110      	bne.n	800e0c6 <_dtoa_r+0xa7e>
 800e0a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0a8:	d029      	beq.n	800e0fe <_dtoa_r+0xab6>
 800e0aa:	9b05      	ldr	r3, [sp, #20]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	dd02      	ble.n	800e0b6 <_dtoa_r+0xa6e>
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	f883 9000 	strb.w	r9, [r3]
 800e0bc:	e774      	b.n	800dfa8 <_dtoa_r+0x960>
 800e0be:	4638      	mov	r0, r7
 800e0c0:	e7ba      	b.n	800e038 <_dtoa_r+0x9f0>
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	e7e1      	b.n	800e08a <_dtoa_r+0xa42>
 800e0c6:	9b05      	ldr	r3, [sp, #20]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	db04      	blt.n	800e0d6 <_dtoa_r+0xa8e>
 800e0cc:	9907      	ldr	r1, [sp, #28]
 800e0ce:	430b      	orrs	r3, r1
 800e0d0:	9906      	ldr	r1, [sp, #24]
 800e0d2:	430b      	orrs	r3, r1
 800e0d4:	d120      	bne.n	800e118 <_dtoa_r+0xad0>
 800e0d6:	2a00      	cmp	r2, #0
 800e0d8:	dded      	ble.n	800e0b6 <_dtoa_r+0xa6e>
 800e0da:	4651      	mov	r1, sl
 800e0dc:	2201      	movs	r2, #1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 fbb4 	bl	800e84c <__lshift>
 800e0e4:	4631      	mov	r1, r6
 800e0e6:	4682      	mov	sl, r0
 800e0e8:	f000 fc1c 	bl	800e924 <__mcmp>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	dc03      	bgt.n	800e0f8 <_dtoa_r+0xab0>
 800e0f0:	d1e1      	bne.n	800e0b6 <_dtoa_r+0xa6e>
 800e0f2:	f019 0f01 	tst.w	r9, #1
 800e0f6:	d0de      	beq.n	800e0b6 <_dtoa_r+0xa6e>
 800e0f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0fc:	d1d8      	bne.n	800e0b0 <_dtoa_r+0xa68>
 800e0fe:	9a01      	ldr	r2, [sp, #4]
 800e100:	2339      	movs	r3, #57	; 0x39
 800e102:	7013      	strb	r3, [r2, #0]
 800e104:	462b      	mov	r3, r5
 800e106:	461d      	mov	r5, r3
 800e108:	3b01      	subs	r3, #1
 800e10a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e10e:	2a39      	cmp	r2, #57	; 0x39
 800e110:	d06c      	beq.n	800e1ec <_dtoa_r+0xba4>
 800e112:	3201      	adds	r2, #1
 800e114:	701a      	strb	r2, [r3, #0]
 800e116:	e747      	b.n	800dfa8 <_dtoa_r+0x960>
 800e118:	2a00      	cmp	r2, #0
 800e11a:	dd07      	ble.n	800e12c <_dtoa_r+0xae4>
 800e11c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e120:	d0ed      	beq.n	800e0fe <_dtoa_r+0xab6>
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	f109 0301 	add.w	r3, r9, #1
 800e128:	7013      	strb	r3, [r2, #0]
 800e12a:	e73d      	b.n	800dfa8 <_dtoa_r+0x960>
 800e12c:	9b04      	ldr	r3, [sp, #16]
 800e12e:	9a08      	ldr	r2, [sp, #32]
 800e130:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e134:	4293      	cmp	r3, r2
 800e136:	d043      	beq.n	800e1c0 <_dtoa_r+0xb78>
 800e138:	4651      	mov	r1, sl
 800e13a:	2300      	movs	r3, #0
 800e13c:	220a      	movs	r2, #10
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 f9d6 	bl	800e4f0 <__multadd>
 800e144:	45b8      	cmp	r8, r7
 800e146:	4682      	mov	sl, r0
 800e148:	f04f 0300 	mov.w	r3, #0
 800e14c:	f04f 020a 	mov.w	r2, #10
 800e150:	4641      	mov	r1, r8
 800e152:	4620      	mov	r0, r4
 800e154:	d107      	bne.n	800e166 <_dtoa_r+0xb1e>
 800e156:	f000 f9cb 	bl	800e4f0 <__multadd>
 800e15a:	4680      	mov	r8, r0
 800e15c:	4607      	mov	r7, r0
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	3301      	adds	r3, #1
 800e162:	9304      	str	r3, [sp, #16]
 800e164:	e775      	b.n	800e052 <_dtoa_r+0xa0a>
 800e166:	f000 f9c3 	bl	800e4f0 <__multadd>
 800e16a:	4639      	mov	r1, r7
 800e16c:	4680      	mov	r8, r0
 800e16e:	2300      	movs	r3, #0
 800e170:	220a      	movs	r2, #10
 800e172:	4620      	mov	r0, r4
 800e174:	f000 f9bc 	bl	800e4f0 <__multadd>
 800e178:	4607      	mov	r7, r0
 800e17a:	e7f0      	b.n	800e15e <_dtoa_r+0xb16>
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	9301      	str	r3, [sp, #4]
 800e180:	9d00      	ldr	r5, [sp, #0]
 800e182:	4631      	mov	r1, r6
 800e184:	4650      	mov	r0, sl
 800e186:	f7ff f9d6 	bl	800d536 <quorem>
 800e18a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e18e:	9b00      	ldr	r3, [sp, #0]
 800e190:	f805 9b01 	strb.w	r9, [r5], #1
 800e194:	1aea      	subs	r2, r5, r3
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	4293      	cmp	r3, r2
 800e19a:	dd07      	ble.n	800e1ac <_dtoa_r+0xb64>
 800e19c:	4651      	mov	r1, sl
 800e19e:	2300      	movs	r3, #0
 800e1a0:	220a      	movs	r2, #10
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f000 f9a4 	bl	800e4f0 <__multadd>
 800e1a8:	4682      	mov	sl, r0
 800e1aa:	e7ea      	b.n	800e182 <_dtoa_r+0xb3a>
 800e1ac:	9b01      	ldr	r3, [sp, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bfc8      	it	gt
 800e1b2:	461d      	movgt	r5, r3
 800e1b4:	9b00      	ldr	r3, [sp, #0]
 800e1b6:	bfd8      	it	le
 800e1b8:	2501      	movle	r5, #1
 800e1ba:	441d      	add	r5, r3
 800e1bc:	f04f 0800 	mov.w	r8, #0
 800e1c0:	4651      	mov	r1, sl
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 fb41 	bl	800e84c <__lshift>
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	f000 fba9 	bl	800e924 <__mcmp>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	dc96      	bgt.n	800e104 <_dtoa_r+0xabc>
 800e1d6:	d102      	bne.n	800e1de <_dtoa_r+0xb96>
 800e1d8:	f019 0f01 	tst.w	r9, #1
 800e1dc:	d192      	bne.n	800e104 <_dtoa_r+0xabc>
 800e1de:	462b      	mov	r3, r5
 800e1e0:	461d      	mov	r5, r3
 800e1e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1e6:	2a30      	cmp	r2, #48	; 0x30
 800e1e8:	d0fa      	beq.n	800e1e0 <_dtoa_r+0xb98>
 800e1ea:	e6dd      	b.n	800dfa8 <_dtoa_r+0x960>
 800e1ec:	9a00      	ldr	r2, [sp, #0]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d189      	bne.n	800e106 <_dtoa_r+0xabe>
 800e1f2:	f10b 0b01 	add.w	fp, fp, #1
 800e1f6:	2331      	movs	r3, #49	; 0x31
 800e1f8:	e796      	b.n	800e128 <_dtoa_r+0xae0>
 800e1fa:	4b0a      	ldr	r3, [pc, #40]	; (800e224 <_dtoa_r+0xbdc>)
 800e1fc:	f7ff ba99 	b.w	800d732 <_dtoa_r+0xea>
 800e200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e202:	2b00      	cmp	r3, #0
 800e204:	f47f aa6d 	bne.w	800d6e2 <_dtoa_r+0x9a>
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <_dtoa_r+0xbe0>)
 800e20a:	f7ff ba92 	b.w	800d732 <_dtoa_r+0xea>
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	dcb5      	bgt.n	800e180 <_dtoa_r+0xb38>
 800e214:	9b07      	ldr	r3, [sp, #28]
 800e216:	2b02      	cmp	r3, #2
 800e218:	f73f aeb1 	bgt.w	800df7e <_dtoa_r+0x936>
 800e21c:	e7b0      	b.n	800e180 <_dtoa_r+0xb38>
 800e21e:	bf00      	nop
 800e220:	0800ff6c 	.word	0x0800ff6c
 800e224:	0800fecc 	.word	0x0800fecc
 800e228:	0800fef0 	.word	0x0800fef0

0800e22c <_free_r>:
 800e22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e22e:	2900      	cmp	r1, #0
 800e230:	d044      	beq.n	800e2bc <_free_r+0x90>
 800e232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e236:	9001      	str	r0, [sp, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f1a1 0404 	sub.w	r4, r1, #4
 800e23e:	bfb8      	it	lt
 800e240:	18e4      	addlt	r4, r4, r3
 800e242:	f000 f8e7 	bl	800e414 <__malloc_lock>
 800e246:	4a1e      	ldr	r2, [pc, #120]	; (800e2c0 <_free_r+0x94>)
 800e248:	9801      	ldr	r0, [sp, #4]
 800e24a:	6813      	ldr	r3, [r2, #0]
 800e24c:	b933      	cbnz	r3, 800e25c <_free_r+0x30>
 800e24e:	6063      	str	r3, [r4, #4]
 800e250:	6014      	str	r4, [r2, #0]
 800e252:	b003      	add	sp, #12
 800e254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e258:	f000 b8e2 	b.w	800e420 <__malloc_unlock>
 800e25c:	42a3      	cmp	r3, r4
 800e25e:	d908      	bls.n	800e272 <_free_r+0x46>
 800e260:	6825      	ldr	r5, [r4, #0]
 800e262:	1961      	adds	r1, r4, r5
 800e264:	428b      	cmp	r3, r1
 800e266:	bf01      	itttt	eq
 800e268:	6819      	ldreq	r1, [r3, #0]
 800e26a:	685b      	ldreq	r3, [r3, #4]
 800e26c:	1949      	addeq	r1, r1, r5
 800e26e:	6021      	streq	r1, [r4, #0]
 800e270:	e7ed      	b.n	800e24e <_free_r+0x22>
 800e272:	461a      	mov	r2, r3
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	b10b      	cbz	r3, 800e27c <_free_r+0x50>
 800e278:	42a3      	cmp	r3, r4
 800e27a:	d9fa      	bls.n	800e272 <_free_r+0x46>
 800e27c:	6811      	ldr	r1, [r2, #0]
 800e27e:	1855      	adds	r5, r2, r1
 800e280:	42a5      	cmp	r5, r4
 800e282:	d10b      	bne.n	800e29c <_free_r+0x70>
 800e284:	6824      	ldr	r4, [r4, #0]
 800e286:	4421      	add	r1, r4
 800e288:	1854      	adds	r4, r2, r1
 800e28a:	42a3      	cmp	r3, r4
 800e28c:	6011      	str	r1, [r2, #0]
 800e28e:	d1e0      	bne.n	800e252 <_free_r+0x26>
 800e290:	681c      	ldr	r4, [r3, #0]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	6053      	str	r3, [r2, #4]
 800e296:	440c      	add	r4, r1
 800e298:	6014      	str	r4, [r2, #0]
 800e29a:	e7da      	b.n	800e252 <_free_r+0x26>
 800e29c:	d902      	bls.n	800e2a4 <_free_r+0x78>
 800e29e:	230c      	movs	r3, #12
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	e7d6      	b.n	800e252 <_free_r+0x26>
 800e2a4:	6825      	ldr	r5, [r4, #0]
 800e2a6:	1961      	adds	r1, r4, r5
 800e2a8:	428b      	cmp	r3, r1
 800e2aa:	bf04      	itt	eq
 800e2ac:	6819      	ldreq	r1, [r3, #0]
 800e2ae:	685b      	ldreq	r3, [r3, #4]
 800e2b0:	6063      	str	r3, [r4, #4]
 800e2b2:	bf04      	itt	eq
 800e2b4:	1949      	addeq	r1, r1, r5
 800e2b6:	6021      	streq	r1, [r4, #0]
 800e2b8:	6054      	str	r4, [r2, #4]
 800e2ba:	e7ca      	b.n	800e252 <_free_r+0x26>
 800e2bc:	b003      	add	sp, #12
 800e2be:	bd30      	pop	{r4, r5, pc}
 800e2c0:	200026f8 	.word	0x200026f8

0800e2c4 <malloc>:
 800e2c4:	4b02      	ldr	r3, [pc, #8]	; (800e2d0 <malloc+0xc>)
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	6818      	ldr	r0, [r3, #0]
 800e2ca:	f000 b823 	b.w	800e314 <_malloc_r>
 800e2ce:	bf00      	nop
 800e2d0:	20000070 	.word	0x20000070

0800e2d4 <sbrk_aligned>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	4e0e      	ldr	r6, [pc, #56]	; (800e310 <sbrk_aligned+0x3c>)
 800e2d8:	460c      	mov	r4, r1
 800e2da:	6831      	ldr	r1, [r6, #0]
 800e2dc:	4605      	mov	r5, r0
 800e2de:	b911      	cbnz	r1, 800e2e6 <sbrk_aligned+0x12>
 800e2e0:	f000 ffee 	bl	800f2c0 <_sbrk_r>
 800e2e4:	6030      	str	r0, [r6, #0]
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f000 ffe9 	bl	800f2c0 <_sbrk_r>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	d00a      	beq.n	800e308 <sbrk_aligned+0x34>
 800e2f2:	1cc4      	adds	r4, r0, #3
 800e2f4:	f024 0403 	bic.w	r4, r4, #3
 800e2f8:	42a0      	cmp	r0, r4
 800e2fa:	d007      	beq.n	800e30c <sbrk_aligned+0x38>
 800e2fc:	1a21      	subs	r1, r4, r0
 800e2fe:	4628      	mov	r0, r5
 800e300:	f000 ffde 	bl	800f2c0 <_sbrk_r>
 800e304:	3001      	adds	r0, #1
 800e306:	d101      	bne.n	800e30c <sbrk_aligned+0x38>
 800e308:	f04f 34ff 	mov.w	r4, #4294967295
 800e30c:	4620      	mov	r0, r4
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	200026fc 	.word	0x200026fc

0800e314 <_malloc_r>:
 800e314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e318:	1ccd      	adds	r5, r1, #3
 800e31a:	f025 0503 	bic.w	r5, r5, #3
 800e31e:	3508      	adds	r5, #8
 800e320:	2d0c      	cmp	r5, #12
 800e322:	bf38      	it	cc
 800e324:	250c      	movcc	r5, #12
 800e326:	2d00      	cmp	r5, #0
 800e328:	4607      	mov	r7, r0
 800e32a:	db01      	blt.n	800e330 <_malloc_r+0x1c>
 800e32c:	42a9      	cmp	r1, r5
 800e32e:	d905      	bls.n	800e33c <_malloc_r+0x28>
 800e330:	230c      	movs	r3, #12
 800e332:	603b      	str	r3, [r7, #0]
 800e334:	2600      	movs	r6, #0
 800e336:	4630      	mov	r0, r6
 800e338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e410 <_malloc_r+0xfc>
 800e340:	f000 f868 	bl	800e414 <__malloc_lock>
 800e344:	f8d8 3000 	ldr.w	r3, [r8]
 800e348:	461c      	mov	r4, r3
 800e34a:	bb5c      	cbnz	r4, 800e3a4 <_malloc_r+0x90>
 800e34c:	4629      	mov	r1, r5
 800e34e:	4638      	mov	r0, r7
 800e350:	f7ff ffc0 	bl	800e2d4 <sbrk_aligned>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	4604      	mov	r4, r0
 800e358:	d155      	bne.n	800e406 <_malloc_r+0xf2>
 800e35a:	f8d8 4000 	ldr.w	r4, [r8]
 800e35e:	4626      	mov	r6, r4
 800e360:	2e00      	cmp	r6, #0
 800e362:	d145      	bne.n	800e3f0 <_malloc_r+0xdc>
 800e364:	2c00      	cmp	r4, #0
 800e366:	d048      	beq.n	800e3fa <_malloc_r+0xe6>
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	4631      	mov	r1, r6
 800e36c:	4638      	mov	r0, r7
 800e36e:	eb04 0903 	add.w	r9, r4, r3
 800e372:	f000 ffa5 	bl	800f2c0 <_sbrk_r>
 800e376:	4581      	cmp	r9, r0
 800e378:	d13f      	bne.n	800e3fa <_malloc_r+0xe6>
 800e37a:	6821      	ldr	r1, [r4, #0]
 800e37c:	1a6d      	subs	r5, r5, r1
 800e37e:	4629      	mov	r1, r5
 800e380:	4638      	mov	r0, r7
 800e382:	f7ff ffa7 	bl	800e2d4 <sbrk_aligned>
 800e386:	3001      	adds	r0, #1
 800e388:	d037      	beq.n	800e3fa <_malloc_r+0xe6>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	442b      	add	r3, r5
 800e38e:	6023      	str	r3, [r4, #0]
 800e390:	f8d8 3000 	ldr.w	r3, [r8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d038      	beq.n	800e40a <_malloc_r+0xf6>
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	42a2      	cmp	r2, r4
 800e39c:	d12b      	bne.n	800e3f6 <_malloc_r+0xe2>
 800e39e:	2200      	movs	r2, #0
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	e00f      	b.n	800e3c4 <_malloc_r+0xb0>
 800e3a4:	6822      	ldr	r2, [r4, #0]
 800e3a6:	1b52      	subs	r2, r2, r5
 800e3a8:	d41f      	bmi.n	800e3ea <_malloc_r+0xd6>
 800e3aa:	2a0b      	cmp	r2, #11
 800e3ac:	d917      	bls.n	800e3de <_malloc_r+0xca>
 800e3ae:	1961      	adds	r1, r4, r5
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	6025      	str	r5, [r4, #0]
 800e3b4:	bf18      	it	ne
 800e3b6:	6059      	strne	r1, [r3, #4]
 800e3b8:	6863      	ldr	r3, [r4, #4]
 800e3ba:	bf08      	it	eq
 800e3bc:	f8c8 1000 	streq.w	r1, [r8]
 800e3c0:	5162      	str	r2, [r4, r5]
 800e3c2:	604b      	str	r3, [r1, #4]
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f104 060b 	add.w	r6, r4, #11
 800e3ca:	f000 f829 	bl	800e420 <__malloc_unlock>
 800e3ce:	f026 0607 	bic.w	r6, r6, #7
 800e3d2:	1d23      	adds	r3, r4, #4
 800e3d4:	1af2      	subs	r2, r6, r3
 800e3d6:	d0ae      	beq.n	800e336 <_malloc_r+0x22>
 800e3d8:	1b9b      	subs	r3, r3, r6
 800e3da:	50a3      	str	r3, [r4, r2]
 800e3dc:	e7ab      	b.n	800e336 <_malloc_r+0x22>
 800e3de:	42a3      	cmp	r3, r4
 800e3e0:	6862      	ldr	r2, [r4, #4]
 800e3e2:	d1dd      	bne.n	800e3a0 <_malloc_r+0x8c>
 800e3e4:	f8c8 2000 	str.w	r2, [r8]
 800e3e8:	e7ec      	b.n	800e3c4 <_malloc_r+0xb0>
 800e3ea:	4623      	mov	r3, r4
 800e3ec:	6864      	ldr	r4, [r4, #4]
 800e3ee:	e7ac      	b.n	800e34a <_malloc_r+0x36>
 800e3f0:	4634      	mov	r4, r6
 800e3f2:	6876      	ldr	r6, [r6, #4]
 800e3f4:	e7b4      	b.n	800e360 <_malloc_r+0x4c>
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	e7cc      	b.n	800e394 <_malloc_r+0x80>
 800e3fa:	230c      	movs	r3, #12
 800e3fc:	603b      	str	r3, [r7, #0]
 800e3fe:	4638      	mov	r0, r7
 800e400:	f000 f80e 	bl	800e420 <__malloc_unlock>
 800e404:	e797      	b.n	800e336 <_malloc_r+0x22>
 800e406:	6025      	str	r5, [r4, #0]
 800e408:	e7dc      	b.n	800e3c4 <_malloc_r+0xb0>
 800e40a:	605b      	str	r3, [r3, #4]
 800e40c:	deff      	udf	#255	; 0xff
 800e40e:	bf00      	nop
 800e410:	200026f8 	.word	0x200026f8

0800e414 <__malloc_lock>:
 800e414:	4801      	ldr	r0, [pc, #4]	; (800e41c <__malloc_lock+0x8>)
 800e416:	f7ff b87e 	b.w	800d516 <__retarget_lock_acquire_recursive>
 800e41a:	bf00      	nop
 800e41c:	200026f4 	.word	0x200026f4

0800e420 <__malloc_unlock>:
 800e420:	4801      	ldr	r0, [pc, #4]	; (800e428 <__malloc_unlock+0x8>)
 800e422:	f7ff b879 	b.w	800d518 <__retarget_lock_release_recursive>
 800e426:	bf00      	nop
 800e428:	200026f4 	.word	0x200026f4

0800e42c <_Balloc>:
 800e42c:	b570      	push	{r4, r5, r6, lr}
 800e42e:	69c6      	ldr	r6, [r0, #28]
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
 800e434:	b976      	cbnz	r6, 800e454 <_Balloc+0x28>
 800e436:	2010      	movs	r0, #16
 800e438:	f7ff ff44 	bl	800e2c4 <malloc>
 800e43c:	4602      	mov	r2, r0
 800e43e:	61e0      	str	r0, [r4, #28]
 800e440:	b920      	cbnz	r0, 800e44c <_Balloc+0x20>
 800e442:	4b18      	ldr	r3, [pc, #96]	; (800e4a4 <_Balloc+0x78>)
 800e444:	4818      	ldr	r0, [pc, #96]	; (800e4a8 <_Balloc+0x7c>)
 800e446:	216b      	movs	r1, #107	; 0x6b
 800e448:	f000 ff4a 	bl	800f2e0 <__assert_func>
 800e44c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e450:	6006      	str	r6, [r0, #0]
 800e452:	60c6      	str	r6, [r0, #12]
 800e454:	69e6      	ldr	r6, [r4, #28]
 800e456:	68f3      	ldr	r3, [r6, #12]
 800e458:	b183      	cbz	r3, 800e47c <_Balloc+0x50>
 800e45a:	69e3      	ldr	r3, [r4, #28]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e462:	b9b8      	cbnz	r0, 800e494 <_Balloc+0x68>
 800e464:	2101      	movs	r1, #1
 800e466:	fa01 f605 	lsl.w	r6, r1, r5
 800e46a:	1d72      	adds	r2, r6, #5
 800e46c:	0092      	lsls	r2, r2, #2
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 ff54 	bl	800f31c <_calloc_r>
 800e474:	b160      	cbz	r0, 800e490 <_Balloc+0x64>
 800e476:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e47a:	e00e      	b.n	800e49a <_Balloc+0x6e>
 800e47c:	2221      	movs	r2, #33	; 0x21
 800e47e:	2104      	movs	r1, #4
 800e480:	4620      	mov	r0, r4
 800e482:	f000 ff4b 	bl	800f31c <_calloc_r>
 800e486:	69e3      	ldr	r3, [r4, #28]
 800e488:	60f0      	str	r0, [r6, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e4      	bne.n	800e45a <_Balloc+0x2e>
 800e490:	2000      	movs	r0, #0
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	6802      	ldr	r2, [r0, #0]
 800e496:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e49a:	2300      	movs	r3, #0
 800e49c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4a0:	e7f7      	b.n	800e492 <_Balloc+0x66>
 800e4a2:	bf00      	nop
 800e4a4:	0800fefd 	.word	0x0800fefd
 800e4a8:	0800ff7d 	.word	0x0800ff7d

0800e4ac <_Bfree>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	69c6      	ldr	r6, [r0, #28]
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	b976      	cbnz	r6, 800e4d4 <_Bfree+0x28>
 800e4b6:	2010      	movs	r0, #16
 800e4b8:	f7ff ff04 	bl	800e2c4 <malloc>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	61e8      	str	r0, [r5, #28]
 800e4c0:	b920      	cbnz	r0, 800e4cc <_Bfree+0x20>
 800e4c2:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <_Bfree+0x3c>)
 800e4c4:	4809      	ldr	r0, [pc, #36]	; (800e4ec <_Bfree+0x40>)
 800e4c6:	218f      	movs	r1, #143	; 0x8f
 800e4c8:	f000 ff0a 	bl	800f2e0 <__assert_func>
 800e4cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4d0:	6006      	str	r6, [r0, #0]
 800e4d2:	60c6      	str	r6, [r0, #12]
 800e4d4:	b13c      	cbz	r4, 800e4e6 <_Bfree+0x3a>
 800e4d6:	69eb      	ldr	r3, [r5, #28]
 800e4d8:	6862      	ldr	r2, [r4, #4]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4e0:	6021      	str	r1, [r4, #0]
 800e4e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	0800fefd 	.word	0x0800fefd
 800e4ec:	0800ff7d 	.word	0x0800ff7d

0800e4f0 <__multadd>:
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	690d      	ldr	r5, [r1, #16]
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	461e      	mov	r6, r3
 800e4fc:	f101 0c14 	add.w	ip, r1, #20
 800e500:	2000      	movs	r0, #0
 800e502:	f8dc 3000 	ldr.w	r3, [ip]
 800e506:	b299      	uxth	r1, r3
 800e508:	fb02 6101 	mla	r1, r2, r1, r6
 800e50c:	0c1e      	lsrs	r6, r3, #16
 800e50e:	0c0b      	lsrs	r3, r1, #16
 800e510:	fb02 3306 	mla	r3, r2, r6, r3
 800e514:	b289      	uxth	r1, r1
 800e516:	3001      	adds	r0, #1
 800e518:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e51c:	4285      	cmp	r5, r0
 800e51e:	f84c 1b04 	str.w	r1, [ip], #4
 800e522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e526:	dcec      	bgt.n	800e502 <__multadd+0x12>
 800e528:	b30e      	cbz	r6, 800e56e <__multadd+0x7e>
 800e52a:	68a3      	ldr	r3, [r4, #8]
 800e52c:	42ab      	cmp	r3, r5
 800e52e:	dc19      	bgt.n	800e564 <__multadd+0x74>
 800e530:	6861      	ldr	r1, [r4, #4]
 800e532:	4638      	mov	r0, r7
 800e534:	3101      	adds	r1, #1
 800e536:	f7ff ff79 	bl	800e42c <_Balloc>
 800e53a:	4680      	mov	r8, r0
 800e53c:	b928      	cbnz	r0, 800e54a <__multadd+0x5a>
 800e53e:	4602      	mov	r2, r0
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <__multadd+0x84>)
 800e542:	480d      	ldr	r0, [pc, #52]	; (800e578 <__multadd+0x88>)
 800e544:	21ba      	movs	r1, #186	; 0xba
 800e546:	f000 fecb 	bl	800f2e0 <__assert_func>
 800e54a:	6922      	ldr	r2, [r4, #16]
 800e54c:	3202      	adds	r2, #2
 800e54e:	f104 010c 	add.w	r1, r4, #12
 800e552:	0092      	lsls	r2, r2, #2
 800e554:	300c      	adds	r0, #12
 800e556:	f7fe ffe0 	bl	800d51a <memcpy>
 800e55a:	4621      	mov	r1, r4
 800e55c:	4638      	mov	r0, r7
 800e55e:	f7ff ffa5 	bl	800e4ac <_Bfree>
 800e562:	4644      	mov	r4, r8
 800e564:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e568:	3501      	adds	r5, #1
 800e56a:	615e      	str	r6, [r3, #20]
 800e56c:	6125      	str	r5, [r4, #16]
 800e56e:	4620      	mov	r0, r4
 800e570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e574:	0800ff6c 	.word	0x0800ff6c
 800e578:	0800ff7d 	.word	0x0800ff7d

0800e57c <__hi0bits>:
 800e57c:	0c03      	lsrs	r3, r0, #16
 800e57e:	041b      	lsls	r3, r3, #16
 800e580:	b9d3      	cbnz	r3, 800e5b8 <__hi0bits+0x3c>
 800e582:	0400      	lsls	r0, r0, #16
 800e584:	2310      	movs	r3, #16
 800e586:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e58a:	bf04      	itt	eq
 800e58c:	0200      	lsleq	r0, r0, #8
 800e58e:	3308      	addeq	r3, #8
 800e590:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e594:	bf04      	itt	eq
 800e596:	0100      	lsleq	r0, r0, #4
 800e598:	3304      	addeq	r3, #4
 800e59a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e59e:	bf04      	itt	eq
 800e5a0:	0080      	lsleq	r0, r0, #2
 800e5a2:	3302      	addeq	r3, #2
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	db05      	blt.n	800e5b4 <__hi0bits+0x38>
 800e5a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5ac:	f103 0301 	add.w	r3, r3, #1
 800e5b0:	bf08      	it	eq
 800e5b2:	2320      	moveq	r3, #32
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	4770      	bx	lr
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e7e4      	b.n	800e586 <__hi0bits+0xa>

0800e5bc <__lo0bits>:
 800e5bc:	6803      	ldr	r3, [r0, #0]
 800e5be:	f013 0207 	ands.w	r2, r3, #7
 800e5c2:	d00c      	beq.n	800e5de <__lo0bits+0x22>
 800e5c4:	07d9      	lsls	r1, r3, #31
 800e5c6:	d422      	bmi.n	800e60e <__lo0bits+0x52>
 800e5c8:	079a      	lsls	r2, r3, #30
 800e5ca:	bf49      	itett	mi
 800e5cc:	085b      	lsrmi	r3, r3, #1
 800e5ce:	089b      	lsrpl	r3, r3, #2
 800e5d0:	6003      	strmi	r3, [r0, #0]
 800e5d2:	2201      	movmi	r2, #1
 800e5d4:	bf5c      	itt	pl
 800e5d6:	6003      	strpl	r3, [r0, #0]
 800e5d8:	2202      	movpl	r2, #2
 800e5da:	4610      	mov	r0, r2
 800e5dc:	4770      	bx	lr
 800e5de:	b299      	uxth	r1, r3
 800e5e0:	b909      	cbnz	r1, 800e5e6 <__lo0bits+0x2a>
 800e5e2:	0c1b      	lsrs	r3, r3, #16
 800e5e4:	2210      	movs	r2, #16
 800e5e6:	b2d9      	uxtb	r1, r3
 800e5e8:	b909      	cbnz	r1, 800e5ee <__lo0bits+0x32>
 800e5ea:	3208      	adds	r2, #8
 800e5ec:	0a1b      	lsrs	r3, r3, #8
 800e5ee:	0719      	lsls	r1, r3, #28
 800e5f0:	bf04      	itt	eq
 800e5f2:	091b      	lsreq	r3, r3, #4
 800e5f4:	3204      	addeq	r2, #4
 800e5f6:	0799      	lsls	r1, r3, #30
 800e5f8:	bf04      	itt	eq
 800e5fa:	089b      	lsreq	r3, r3, #2
 800e5fc:	3202      	addeq	r2, #2
 800e5fe:	07d9      	lsls	r1, r3, #31
 800e600:	d403      	bmi.n	800e60a <__lo0bits+0x4e>
 800e602:	085b      	lsrs	r3, r3, #1
 800e604:	f102 0201 	add.w	r2, r2, #1
 800e608:	d003      	beq.n	800e612 <__lo0bits+0x56>
 800e60a:	6003      	str	r3, [r0, #0]
 800e60c:	e7e5      	b.n	800e5da <__lo0bits+0x1e>
 800e60e:	2200      	movs	r2, #0
 800e610:	e7e3      	b.n	800e5da <__lo0bits+0x1e>
 800e612:	2220      	movs	r2, #32
 800e614:	e7e1      	b.n	800e5da <__lo0bits+0x1e>
	...

0800e618 <__i2b>:
 800e618:	b510      	push	{r4, lr}
 800e61a:	460c      	mov	r4, r1
 800e61c:	2101      	movs	r1, #1
 800e61e:	f7ff ff05 	bl	800e42c <_Balloc>
 800e622:	4602      	mov	r2, r0
 800e624:	b928      	cbnz	r0, 800e632 <__i2b+0x1a>
 800e626:	4b05      	ldr	r3, [pc, #20]	; (800e63c <__i2b+0x24>)
 800e628:	4805      	ldr	r0, [pc, #20]	; (800e640 <__i2b+0x28>)
 800e62a:	f240 1145 	movw	r1, #325	; 0x145
 800e62e:	f000 fe57 	bl	800f2e0 <__assert_func>
 800e632:	2301      	movs	r3, #1
 800e634:	6144      	str	r4, [r0, #20]
 800e636:	6103      	str	r3, [r0, #16]
 800e638:	bd10      	pop	{r4, pc}
 800e63a:	bf00      	nop
 800e63c:	0800ff6c 	.word	0x0800ff6c
 800e640:	0800ff7d 	.word	0x0800ff7d

0800e644 <__multiply>:
 800e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e648:	4691      	mov	r9, r2
 800e64a:	690a      	ldr	r2, [r1, #16]
 800e64c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e650:	429a      	cmp	r2, r3
 800e652:	bfb8      	it	lt
 800e654:	460b      	movlt	r3, r1
 800e656:	460c      	mov	r4, r1
 800e658:	bfbc      	itt	lt
 800e65a:	464c      	movlt	r4, r9
 800e65c:	4699      	movlt	r9, r3
 800e65e:	6927      	ldr	r7, [r4, #16]
 800e660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e664:	68a3      	ldr	r3, [r4, #8]
 800e666:	6861      	ldr	r1, [r4, #4]
 800e668:	eb07 060a 	add.w	r6, r7, sl
 800e66c:	42b3      	cmp	r3, r6
 800e66e:	b085      	sub	sp, #20
 800e670:	bfb8      	it	lt
 800e672:	3101      	addlt	r1, #1
 800e674:	f7ff feda 	bl	800e42c <_Balloc>
 800e678:	b930      	cbnz	r0, 800e688 <__multiply+0x44>
 800e67a:	4602      	mov	r2, r0
 800e67c:	4b44      	ldr	r3, [pc, #272]	; (800e790 <__multiply+0x14c>)
 800e67e:	4845      	ldr	r0, [pc, #276]	; (800e794 <__multiply+0x150>)
 800e680:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e684:	f000 fe2c 	bl	800f2e0 <__assert_func>
 800e688:	f100 0514 	add.w	r5, r0, #20
 800e68c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e690:	462b      	mov	r3, r5
 800e692:	2200      	movs	r2, #0
 800e694:	4543      	cmp	r3, r8
 800e696:	d321      	bcc.n	800e6dc <__multiply+0x98>
 800e698:	f104 0314 	add.w	r3, r4, #20
 800e69c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6a0:	f109 0314 	add.w	r3, r9, #20
 800e6a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6a8:	9202      	str	r2, [sp, #8]
 800e6aa:	1b3a      	subs	r2, r7, r4
 800e6ac:	3a15      	subs	r2, #21
 800e6ae:	f022 0203 	bic.w	r2, r2, #3
 800e6b2:	3204      	adds	r2, #4
 800e6b4:	f104 0115 	add.w	r1, r4, #21
 800e6b8:	428f      	cmp	r7, r1
 800e6ba:	bf38      	it	cc
 800e6bc:	2204      	movcc	r2, #4
 800e6be:	9201      	str	r2, [sp, #4]
 800e6c0:	9a02      	ldr	r2, [sp, #8]
 800e6c2:	9303      	str	r3, [sp, #12]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d80c      	bhi.n	800e6e2 <__multiply+0x9e>
 800e6c8:	2e00      	cmp	r6, #0
 800e6ca:	dd03      	ble.n	800e6d4 <__multiply+0x90>
 800e6cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d05b      	beq.n	800e78c <__multiply+0x148>
 800e6d4:	6106      	str	r6, [r0, #16]
 800e6d6:	b005      	add	sp, #20
 800e6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6dc:	f843 2b04 	str.w	r2, [r3], #4
 800e6e0:	e7d8      	b.n	800e694 <__multiply+0x50>
 800e6e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6e6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ea:	d024      	beq.n	800e736 <__multiply+0xf2>
 800e6ec:	f104 0e14 	add.w	lr, r4, #20
 800e6f0:	46a9      	mov	r9, r5
 800e6f2:	f04f 0c00 	mov.w	ip, #0
 800e6f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6fa:	f8d9 1000 	ldr.w	r1, [r9]
 800e6fe:	fa1f fb82 	uxth.w	fp, r2
 800e702:	b289      	uxth	r1, r1
 800e704:	fb0a 110b 	mla	r1, sl, fp, r1
 800e708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e70c:	f8d9 2000 	ldr.w	r2, [r9]
 800e710:	4461      	add	r1, ip
 800e712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e716:	fb0a c20b 	mla	r2, sl, fp, ip
 800e71a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e71e:	b289      	uxth	r1, r1
 800e720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e724:	4577      	cmp	r7, lr
 800e726:	f849 1b04 	str.w	r1, [r9], #4
 800e72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e72e:	d8e2      	bhi.n	800e6f6 <__multiply+0xb2>
 800e730:	9a01      	ldr	r2, [sp, #4]
 800e732:	f845 c002 	str.w	ip, [r5, r2]
 800e736:	9a03      	ldr	r2, [sp, #12]
 800e738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e73c:	3304      	adds	r3, #4
 800e73e:	f1b9 0f00 	cmp.w	r9, #0
 800e742:	d021      	beq.n	800e788 <__multiply+0x144>
 800e744:	6829      	ldr	r1, [r5, #0]
 800e746:	f104 0c14 	add.w	ip, r4, #20
 800e74a:	46ae      	mov	lr, r5
 800e74c:	f04f 0a00 	mov.w	sl, #0
 800e750:	f8bc b000 	ldrh.w	fp, [ip]
 800e754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e758:	fb09 220b 	mla	r2, r9, fp, r2
 800e75c:	4452      	add	r2, sl
 800e75e:	b289      	uxth	r1, r1
 800e760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e764:	f84e 1b04 	str.w	r1, [lr], #4
 800e768:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e76c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e770:	f8be 1000 	ldrh.w	r1, [lr]
 800e774:	fb09 110a 	mla	r1, r9, sl, r1
 800e778:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e77c:	4567      	cmp	r7, ip
 800e77e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e782:	d8e5      	bhi.n	800e750 <__multiply+0x10c>
 800e784:	9a01      	ldr	r2, [sp, #4]
 800e786:	50a9      	str	r1, [r5, r2]
 800e788:	3504      	adds	r5, #4
 800e78a:	e799      	b.n	800e6c0 <__multiply+0x7c>
 800e78c:	3e01      	subs	r6, #1
 800e78e:	e79b      	b.n	800e6c8 <__multiply+0x84>
 800e790:	0800ff6c 	.word	0x0800ff6c
 800e794:	0800ff7d 	.word	0x0800ff7d

0800e798 <__pow5mult>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4615      	mov	r5, r2
 800e79e:	f012 0203 	ands.w	r2, r2, #3
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	d007      	beq.n	800e7b8 <__pow5mult+0x20>
 800e7a8:	4c25      	ldr	r4, [pc, #148]	; (800e840 <__pow5mult+0xa8>)
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7b2:	f7ff fe9d 	bl	800e4f0 <__multadd>
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	10ad      	asrs	r5, r5, #2
 800e7ba:	d03d      	beq.n	800e838 <__pow5mult+0xa0>
 800e7bc:	69f4      	ldr	r4, [r6, #28]
 800e7be:	b97c      	cbnz	r4, 800e7e0 <__pow5mult+0x48>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7ff fd7f 	bl	800e2c4 <malloc>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	61f0      	str	r0, [r6, #28]
 800e7ca:	b928      	cbnz	r0, 800e7d8 <__pow5mult+0x40>
 800e7cc:	4b1d      	ldr	r3, [pc, #116]	; (800e844 <__pow5mult+0xac>)
 800e7ce:	481e      	ldr	r0, [pc, #120]	; (800e848 <__pow5mult+0xb0>)
 800e7d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e7d4:	f000 fd84 	bl	800f2e0 <__assert_func>
 800e7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7dc:	6004      	str	r4, [r0, #0]
 800e7de:	60c4      	str	r4, [r0, #12]
 800e7e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7e8:	b94c      	cbnz	r4, 800e7fe <__pow5mult+0x66>
 800e7ea:	f240 2171 	movw	r1, #625	; 0x271
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7ff ff12 	bl	800e618 <__i2b>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	6003      	str	r3, [r0, #0]
 800e7fe:	f04f 0900 	mov.w	r9, #0
 800e802:	07eb      	lsls	r3, r5, #31
 800e804:	d50a      	bpl.n	800e81c <__pow5mult+0x84>
 800e806:	4639      	mov	r1, r7
 800e808:	4622      	mov	r2, r4
 800e80a:	4630      	mov	r0, r6
 800e80c:	f7ff ff1a 	bl	800e644 <__multiply>
 800e810:	4639      	mov	r1, r7
 800e812:	4680      	mov	r8, r0
 800e814:	4630      	mov	r0, r6
 800e816:	f7ff fe49 	bl	800e4ac <_Bfree>
 800e81a:	4647      	mov	r7, r8
 800e81c:	106d      	asrs	r5, r5, #1
 800e81e:	d00b      	beq.n	800e838 <__pow5mult+0xa0>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	b938      	cbnz	r0, 800e834 <__pow5mult+0x9c>
 800e824:	4622      	mov	r2, r4
 800e826:	4621      	mov	r1, r4
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff ff0b 	bl	800e644 <__multiply>
 800e82e:	6020      	str	r0, [r4, #0]
 800e830:	f8c0 9000 	str.w	r9, [r0]
 800e834:	4604      	mov	r4, r0
 800e836:	e7e4      	b.n	800e802 <__pow5mult+0x6a>
 800e838:	4638      	mov	r0, r7
 800e83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83e:	bf00      	nop
 800e840:	080100c8 	.word	0x080100c8
 800e844:	0800fefd 	.word	0x0800fefd
 800e848:	0800ff7d 	.word	0x0800ff7d

0800e84c <__lshift>:
 800e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e850:	460c      	mov	r4, r1
 800e852:	6849      	ldr	r1, [r1, #4]
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e85a:	68a3      	ldr	r3, [r4, #8]
 800e85c:	4607      	mov	r7, r0
 800e85e:	4691      	mov	r9, r2
 800e860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e864:	f108 0601 	add.w	r6, r8, #1
 800e868:	42b3      	cmp	r3, r6
 800e86a:	db0b      	blt.n	800e884 <__lshift+0x38>
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff fddd 	bl	800e42c <_Balloc>
 800e872:	4605      	mov	r5, r0
 800e874:	b948      	cbnz	r0, 800e88a <__lshift+0x3e>
 800e876:	4602      	mov	r2, r0
 800e878:	4b28      	ldr	r3, [pc, #160]	; (800e91c <__lshift+0xd0>)
 800e87a:	4829      	ldr	r0, [pc, #164]	; (800e920 <__lshift+0xd4>)
 800e87c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e880:	f000 fd2e 	bl	800f2e0 <__assert_func>
 800e884:	3101      	adds	r1, #1
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	e7ee      	b.n	800e868 <__lshift+0x1c>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f100 0114 	add.w	r1, r0, #20
 800e890:	f100 0210 	add.w	r2, r0, #16
 800e894:	4618      	mov	r0, r3
 800e896:	4553      	cmp	r3, sl
 800e898:	db33      	blt.n	800e902 <__lshift+0xb6>
 800e89a:	6920      	ldr	r0, [r4, #16]
 800e89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8a0:	f104 0314 	add.w	r3, r4, #20
 800e8a4:	f019 091f 	ands.w	r9, r9, #31
 800e8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8b0:	d02b      	beq.n	800e90a <__lshift+0xbe>
 800e8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8b6:	468a      	mov	sl, r1
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e8c0:	4310      	orrs	r0, r2
 800e8c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ca:	459c      	cmp	ip, r3
 800e8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8d0:	d8f3      	bhi.n	800e8ba <__lshift+0x6e>
 800e8d2:	ebac 0304 	sub.w	r3, ip, r4
 800e8d6:	3b15      	subs	r3, #21
 800e8d8:	f023 0303 	bic.w	r3, r3, #3
 800e8dc:	3304      	adds	r3, #4
 800e8de:	f104 0015 	add.w	r0, r4, #21
 800e8e2:	4584      	cmp	ip, r0
 800e8e4:	bf38      	it	cc
 800e8e6:	2304      	movcc	r3, #4
 800e8e8:	50ca      	str	r2, [r1, r3]
 800e8ea:	b10a      	cbz	r2, 800e8f0 <__lshift+0xa4>
 800e8ec:	f108 0602 	add.w	r6, r8, #2
 800e8f0:	3e01      	subs	r6, #1
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	612e      	str	r6, [r5, #16]
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f7ff fdd8 	bl	800e4ac <_Bfree>
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	f842 0f04 	str.w	r0, [r2, #4]!
 800e906:	3301      	adds	r3, #1
 800e908:	e7c5      	b.n	800e896 <__lshift+0x4a>
 800e90a:	3904      	subs	r1, #4
 800e90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e910:	f841 2f04 	str.w	r2, [r1, #4]!
 800e914:	459c      	cmp	ip, r3
 800e916:	d8f9      	bhi.n	800e90c <__lshift+0xc0>
 800e918:	e7ea      	b.n	800e8f0 <__lshift+0xa4>
 800e91a:	bf00      	nop
 800e91c:	0800ff6c 	.word	0x0800ff6c
 800e920:	0800ff7d 	.word	0x0800ff7d

0800e924 <__mcmp>:
 800e924:	b530      	push	{r4, r5, lr}
 800e926:	6902      	ldr	r2, [r0, #16]
 800e928:	690c      	ldr	r4, [r1, #16]
 800e92a:	1b12      	subs	r2, r2, r4
 800e92c:	d10e      	bne.n	800e94c <__mcmp+0x28>
 800e92e:	f100 0314 	add.w	r3, r0, #20
 800e932:	3114      	adds	r1, #20
 800e934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e93c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e944:	42a5      	cmp	r5, r4
 800e946:	d003      	beq.n	800e950 <__mcmp+0x2c>
 800e948:	d305      	bcc.n	800e956 <__mcmp+0x32>
 800e94a:	2201      	movs	r2, #1
 800e94c:	4610      	mov	r0, r2
 800e94e:	bd30      	pop	{r4, r5, pc}
 800e950:	4283      	cmp	r3, r0
 800e952:	d3f3      	bcc.n	800e93c <__mcmp+0x18>
 800e954:	e7fa      	b.n	800e94c <__mcmp+0x28>
 800e956:	f04f 32ff 	mov.w	r2, #4294967295
 800e95a:	e7f7      	b.n	800e94c <__mcmp+0x28>

0800e95c <__mdiff>:
 800e95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	460c      	mov	r4, r1
 800e962:	4606      	mov	r6, r0
 800e964:	4611      	mov	r1, r2
 800e966:	4620      	mov	r0, r4
 800e968:	4690      	mov	r8, r2
 800e96a:	f7ff ffdb 	bl	800e924 <__mcmp>
 800e96e:	1e05      	subs	r5, r0, #0
 800e970:	d110      	bne.n	800e994 <__mdiff+0x38>
 800e972:	4629      	mov	r1, r5
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff fd59 	bl	800e42c <_Balloc>
 800e97a:	b930      	cbnz	r0, 800e98a <__mdiff+0x2e>
 800e97c:	4b3a      	ldr	r3, [pc, #232]	; (800ea68 <__mdiff+0x10c>)
 800e97e:	4602      	mov	r2, r0
 800e980:	f240 2137 	movw	r1, #567	; 0x237
 800e984:	4839      	ldr	r0, [pc, #228]	; (800ea6c <__mdiff+0x110>)
 800e986:	f000 fcab 	bl	800f2e0 <__assert_func>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e994:	bfa4      	itt	ge
 800e996:	4643      	movge	r3, r8
 800e998:	46a0      	movge	r8, r4
 800e99a:	4630      	mov	r0, r6
 800e99c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9a0:	bfa6      	itte	ge
 800e9a2:	461c      	movge	r4, r3
 800e9a4:	2500      	movge	r5, #0
 800e9a6:	2501      	movlt	r5, #1
 800e9a8:	f7ff fd40 	bl	800e42c <_Balloc>
 800e9ac:	b920      	cbnz	r0, 800e9b8 <__mdiff+0x5c>
 800e9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ea68 <__mdiff+0x10c>)
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	f240 2145 	movw	r1, #581	; 0x245
 800e9b6:	e7e5      	b.n	800e984 <__mdiff+0x28>
 800e9b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9bc:	6926      	ldr	r6, [r4, #16]
 800e9be:	60c5      	str	r5, [r0, #12]
 800e9c0:	f104 0914 	add.w	r9, r4, #20
 800e9c4:	f108 0514 	add.w	r5, r8, #20
 800e9c8:	f100 0e14 	add.w	lr, r0, #20
 800e9cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9d4:	f108 0210 	add.w	r2, r8, #16
 800e9d8:	46f2      	mov	sl, lr
 800e9da:	2100      	movs	r1, #0
 800e9dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9e4:	fa11 f88b 	uxtah	r8, r1, fp
 800e9e8:	b299      	uxth	r1, r3
 800e9ea:	0c1b      	lsrs	r3, r3, #16
 800e9ec:	eba8 0801 	sub.w	r8, r8, r1
 800e9f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9f8:	fa1f f888 	uxth.w	r8, r8
 800e9fc:	1419      	asrs	r1, r3, #16
 800e9fe:	454e      	cmp	r6, r9
 800ea00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea04:	f84a 3b04 	str.w	r3, [sl], #4
 800ea08:	d8e8      	bhi.n	800e9dc <__mdiff+0x80>
 800ea0a:	1b33      	subs	r3, r6, r4
 800ea0c:	3b15      	subs	r3, #21
 800ea0e:	f023 0303 	bic.w	r3, r3, #3
 800ea12:	3304      	adds	r3, #4
 800ea14:	3415      	adds	r4, #21
 800ea16:	42a6      	cmp	r6, r4
 800ea18:	bf38      	it	cc
 800ea1a:	2304      	movcc	r3, #4
 800ea1c:	441d      	add	r5, r3
 800ea1e:	4473      	add	r3, lr
 800ea20:	469e      	mov	lr, r3
 800ea22:	462e      	mov	r6, r5
 800ea24:	4566      	cmp	r6, ip
 800ea26:	d30e      	bcc.n	800ea46 <__mdiff+0xea>
 800ea28:	f10c 0203 	add.w	r2, ip, #3
 800ea2c:	1b52      	subs	r2, r2, r5
 800ea2e:	f022 0203 	bic.w	r2, r2, #3
 800ea32:	3d03      	subs	r5, #3
 800ea34:	45ac      	cmp	ip, r5
 800ea36:	bf38      	it	cc
 800ea38:	2200      	movcc	r2, #0
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ea40:	b17a      	cbz	r2, 800ea62 <__mdiff+0x106>
 800ea42:	6107      	str	r7, [r0, #16]
 800ea44:	e7a4      	b.n	800e990 <__mdiff+0x34>
 800ea46:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea4a:	fa11 f288 	uxtah	r2, r1, r8
 800ea4e:	1414      	asrs	r4, r2, #16
 800ea50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea54:	b292      	uxth	r2, r2
 800ea56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea5a:	f84e 2b04 	str.w	r2, [lr], #4
 800ea5e:	1421      	asrs	r1, r4, #16
 800ea60:	e7e0      	b.n	800ea24 <__mdiff+0xc8>
 800ea62:	3f01      	subs	r7, #1
 800ea64:	e7ea      	b.n	800ea3c <__mdiff+0xe0>
 800ea66:	bf00      	nop
 800ea68:	0800ff6c 	.word	0x0800ff6c
 800ea6c:	0800ff7d 	.word	0x0800ff7d

0800ea70 <__d2b>:
 800ea70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea74:	460f      	mov	r7, r1
 800ea76:	2101      	movs	r1, #1
 800ea78:	ec59 8b10 	vmov	r8, r9, d0
 800ea7c:	4616      	mov	r6, r2
 800ea7e:	f7ff fcd5 	bl	800e42c <_Balloc>
 800ea82:	4604      	mov	r4, r0
 800ea84:	b930      	cbnz	r0, 800ea94 <__d2b+0x24>
 800ea86:	4602      	mov	r2, r0
 800ea88:	4b24      	ldr	r3, [pc, #144]	; (800eb1c <__d2b+0xac>)
 800ea8a:	4825      	ldr	r0, [pc, #148]	; (800eb20 <__d2b+0xb0>)
 800ea8c:	f240 310f 	movw	r1, #783	; 0x30f
 800ea90:	f000 fc26 	bl	800f2e0 <__assert_func>
 800ea94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea9c:	bb2d      	cbnz	r5, 800eaea <__d2b+0x7a>
 800ea9e:	9301      	str	r3, [sp, #4]
 800eaa0:	f1b8 0300 	subs.w	r3, r8, #0
 800eaa4:	d026      	beq.n	800eaf4 <__d2b+0x84>
 800eaa6:	4668      	mov	r0, sp
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	f7ff fd87 	bl	800e5bc <__lo0bits>
 800eaae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eab2:	b1e8      	cbz	r0, 800eaf0 <__d2b+0x80>
 800eab4:	f1c0 0320 	rsb	r3, r0, #32
 800eab8:	fa02 f303 	lsl.w	r3, r2, r3
 800eabc:	430b      	orrs	r3, r1
 800eabe:	40c2      	lsrs	r2, r0
 800eac0:	6163      	str	r3, [r4, #20]
 800eac2:	9201      	str	r2, [sp, #4]
 800eac4:	9b01      	ldr	r3, [sp, #4]
 800eac6:	61a3      	str	r3, [r4, #24]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	bf14      	ite	ne
 800eacc:	2202      	movne	r2, #2
 800eace:	2201      	moveq	r2, #1
 800ead0:	6122      	str	r2, [r4, #16]
 800ead2:	b1bd      	cbz	r5, 800eb04 <__d2b+0x94>
 800ead4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ead8:	4405      	add	r5, r0
 800eada:	603d      	str	r5, [r7, #0]
 800eadc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eae0:	6030      	str	r0, [r6, #0]
 800eae2:	4620      	mov	r0, r4
 800eae4:	b003      	add	sp, #12
 800eae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaee:	e7d6      	b.n	800ea9e <__d2b+0x2e>
 800eaf0:	6161      	str	r1, [r4, #20]
 800eaf2:	e7e7      	b.n	800eac4 <__d2b+0x54>
 800eaf4:	a801      	add	r0, sp, #4
 800eaf6:	f7ff fd61 	bl	800e5bc <__lo0bits>
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	6163      	str	r3, [r4, #20]
 800eafe:	3020      	adds	r0, #32
 800eb00:	2201      	movs	r2, #1
 800eb02:	e7e5      	b.n	800ead0 <__d2b+0x60>
 800eb04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb0c:	6038      	str	r0, [r7, #0]
 800eb0e:	6918      	ldr	r0, [r3, #16]
 800eb10:	f7ff fd34 	bl	800e57c <__hi0bits>
 800eb14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb18:	e7e2      	b.n	800eae0 <__d2b+0x70>
 800eb1a:	bf00      	nop
 800eb1c:	0800ff6c 	.word	0x0800ff6c
 800eb20:	0800ff7d 	.word	0x0800ff7d

0800eb24 <__ssputs_r>:
 800eb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb28:	688e      	ldr	r6, [r1, #8]
 800eb2a:	461f      	mov	r7, r3
 800eb2c:	42be      	cmp	r6, r7
 800eb2e:	680b      	ldr	r3, [r1, #0]
 800eb30:	4682      	mov	sl, r0
 800eb32:	460c      	mov	r4, r1
 800eb34:	4690      	mov	r8, r2
 800eb36:	d82c      	bhi.n	800eb92 <__ssputs_r+0x6e>
 800eb38:	898a      	ldrh	r2, [r1, #12]
 800eb3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb3e:	d026      	beq.n	800eb8e <__ssputs_r+0x6a>
 800eb40:	6965      	ldr	r5, [r4, #20]
 800eb42:	6909      	ldr	r1, [r1, #16]
 800eb44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb48:	eba3 0901 	sub.w	r9, r3, r1
 800eb4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb50:	1c7b      	adds	r3, r7, #1
 800eb52:	444b      	add	r3, r9
 800eb54:	106d      	asrs	r5, r5, #1
 800eb56:	429d      	cmp	r5, r3
 800eb58:	bf38      	it	cc
 800eb5a:	461d      	movcc	r5, r3
 800eb5c:	0553      	lsls	r3, r2, #21
 800eb5e:	d527      	bpl.n	800ebb0 <__ssputs_r+0x8c>
 800eb60:	4629      	mov	r1, r5
 800eb62:	f7ff fbd7 	bl	800e314 <_malloc_r>
 800eb66:	4606      	mov	r6, r0
 800eb68:	b360      	cbz	r0, 800ebc4 <__ssputs_r+0xa0>
 800eb6a:	6921      	ldr	r1, [r4, #16]
 800eb6c:	464a      	mov	r2, r9
 800eb6e:	f7fe fcd4 	bl	800d51a <memcpy>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb7c:	81a3      	strh	r3, [r4, #12]
 800eb7e:	6126      	str	r6, [r4, #16]
 800eb80:	6165      	str	r5, [r4, #20]
 800eb82:	444e      	add	r6, r9
 800eb84:	eba5 0509 	sub.w	r5, r5, r9
 800eb88:	6026      	str	r6, [r4, #0]
 800eb8a:	60a5      	str	r5, [r4, #8]
 800eb8c:	463e      	mov	r6, r7
 800eb8e:	42be      	cmp	r6, r7
 800eb90:	d900      	bls.n	800eb94 <__ssputs_r+0x70>
 800eb92:	463e      	mov	r6, r7
 800eb94:	6820      	ldr	r0, [r4, #0]
 800eb96:	4632      	mov	r2, r6
 800eb98:	4641      	mov	r1, r8
 800eb9a:	f7fe fc25 	bl	800d3e8 <memmove>
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	1b9b      	subs	r3, r3, r6
 800eba2:	60a3      	str	r3, [r4, #8]
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	4433      	add	r3, r6
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb0:	462a      	mov	r2, r5
 800ebb2:	f000 fbdb 	bl	800f36c <_realloc_r>
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d1e0      	bne.n	800eb7e <__ssputs_r+0x5a>
 800ebbc:	6921      	ldr	r1, [r4, #16]
 800ebbe:	4650      	mov	r0, sl
 800ebc0:	f7ff fb34 	bl	800e22c <_free_r>
 800ebc4:	230c      	movs	r3, #12
 800ebc6:	f8ca 3000 	str.w	r3, [sl]
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebd0:	81a3      	strh	r3, [r4, #12]
 800ebd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd6:	e7e9      	b.n	800ebac <__ssputs_r+0x88>

0800ebd8 <_svfiprintf_r>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	4698      	mov	r8, r3
 800ebde:	898b      	ldrh	r3, [r1, #12]
 800ebe0:	061b      	lsls	r3, r3, #24
 800ebe2:	b09d      	sub	sp, #116	; 0x74
 800ebe4:	4607      	mov	r7, r0
 800ebe6:	460d      	mov	r5, r1
 800ebe8:	4614      	mov	r4, r2
 800ebea:	d50e      	bpl.n	800ec0a <_svfiprintf_r+0x32>
 800ebec:	690b      	ldr	r3, [r1, #16]
 800ebee:	b963      	cbnz	r3, 800ec0a <_svfiprintf_r+0x32>
 800ebf0:	2140      	movs	r1, #64	; 0x40
 800ebf2:	f7ff fb8f 	bl	800e314 <_malloc_r>
 800ebf6:	6028      	str	r0, [r5, #0]
 800ebf8:	6128      	str	r0, [r5, #16]
 800ebfa:	b920      	cbnz	r0, 800ec06 <_svfiprintf_r+0x2e>
 800ebfc:	230c      	movs	r3, #12
 800ebfe:	603b      	str	r3, [r7, #0]
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295
 800ec04:	e0d0      	b.n	800eda8 <_svfiprintf_r+0x1d0>
 800ec06:	2340      	movs	r3, #64	; 0x40
 800ec08:	616b      	str	r3, [r5, #20]
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0e:	2320      	movs	r3, #32
 800ec10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec18:	2330      	movs	r3, #48	; 0x30
 800ec1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800edc0 <_svfiprintf_r+0x1e8>
 800ec1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec22:	f04f 0901 	mov.w	r9, #1
 800ec26:	4623      	mov	r3, r4
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec2e:	b10a      	cbz	r2, 800ec34 <_svfiprintf_r+0x5c>
 800ec30:	2a25      	cmp	r2, #37	; 0x25
 800ec32:	d1f9      	bne.n	800ec28 <_svfiprintf_r+0x50>
 800ec34:	ebba 0b04 	subs.w	fp, sl, r4
 800ec38:	d00b      	beq.n	800ec52 <_svfiprintf_r+0x7a>
 800ec3a:	465b      	mov	r3, fp
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4629      	mov	r1, r5
 800ec40:	4638      	mov	r0, r7
 800ec42:	f7ff ff6f 	bl	800eb24 <__ssputs_r>
 800ec46:	3001      	adds	r0, #1
 800ec48:	f000 80a9 	beq.w	800ed9e <_svfiprintf_r+0x1c6>
 800ec4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec4e:	445a      	add	r2, fp
 800ec50:	9209      	str	r2, [sp, #36]	; 0x24
 800ec52:	f89a 3000 	ldrb.w	r3, [sl]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80a1 	beq.w	800ed9e <_svfiprintf_r+0x1c6>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec66:	f10a 0a01 	add.w	sl, sl, #1
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	9307      	str	r3, [sp, #28]
 800ec6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec72:	931a      	str	r3, [sp, #104]	; 0x68
 800ec74:	4654      	mov	r4, sl
 800ec76:	2205      	movs	r2, #5
 800ec78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7c:	4850      	ldr	r0, [pc, #320]	; (800edc0 <_svfiprintf_r+0x1e8>)
 800ec7e:	f7f1 faa7 	bl	80001d0 <memchr>
 800ec82:	9a04      	ldr	r2, [sp, #16]
 800ec84:	b9d8      	cbnz	r0, 800ecbe <_svfiprintf_r+0xe6>
 800ec86:	06d0      	lsls	r0, r2, #27
 800ec88:	bf44      	itt	mi
 800ec8a:	2320      	movmi	r3, #32
 800ec8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec90:	0711      	lsls	r1, r2, #28
 800ec92:	bf44      	itt	mi
 800ec94:	232b      	movmi	r3, #43	; 0x2b
 800ec96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b2a      	cmp	r3, #42	; 0x2a
 800eca0:	d015      	beq.n	800ecce <_svfiprintf_r+0xf6>
 800eca2:	9a07      	ldr	r2, [sp, #28]
 800eca4:	4654      	mov	r4, sl
 800eca6:	2000      	movs	r0, #0
 800eca8:	f04f 0c0a 	mov.w	ip, #10
 800ecac:	4621      	mov	r1, r4
 800ecae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecb2:	3b30      	subs	r3, #48	; 0x30
 800ecb4:	2b09      	cmp	r3, #9
 800ecb6:	d94d      	bls.n	800ed54 <_svfiprintf_r+0x17c>
 800ecb8:	b1b0      	cbz	r0, 800ece8 <_svfiprintf_r+0x110>
 800ecba:	9207      	str	r2, [sp, #28]
 800ecbc:	e014      	b.n	800ece8 <_svfiprintf_r+0x110>
 800ecbe:	eba0 0308 	sub.w	r3, r0, r8
 800ecc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	46a2      	mov	sl, r4
 800eccc:	e7d2      	b.n	800ec74 <_svfiprintf_r+0x9c>
 800ecce:	9b03      	ldr	r3, [sp, #12]
 800ecd0:	1d19      	adds	r1, r3, #4
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	9103      	str	r1, [sp, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	bfbb      	ittet	lt
 800ecda:	425b      	neglt	r3, r3
 800ecdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ece0:	9307      	strge	r3, [sp, #28]
 800ece2:	9307      	strlt	r3, [sp, #28]
 800ece4:	bfb8      	it	lt
 800ece6:	9204      	strlt	r2, [sp, #16]
 800ece8:	7823      	ldrb	r3, [r4, #0]
 800ecea:	2b2e      	cmp	r3, #46	; 0x2e
 800ecec:	d10c      	bne.n	800ed08 <_svfiprintf_r+0x130>
 800ecee:	7863      	ldrb	r3, [r4, #1]
 800ecf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecf2:	d134      	bne.n	800ed5e <_svfiprintf_r+0x186>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	1d1a      	adds	r2, r3, #4
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	9203      	str	r2, [sp, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bfb8      	it	lt
 800ed00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed04:	3402      	adds	r4, #2
 800ed06:	9305      	str	r3, [sp, #20]
 800ed08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800edd0 <_svfiprintf_r+0x1f8>
 800ed0c:	7821      	ldrb	r1, [r4, #0]
 800ed0e:	2203      	movs	r2, #3
 800ed10:	4650      	mov	r0, sl
 800ed12:	f7f1 fa5d 	bl	80001d0 <memchr>
 800ed16:	b138      	cbz	r0, 800ed28 <_svfiprintf_r+0x150>
 800ed18:	9b04      	ldr	r3, [sp, #16]
 800ed1a:	eba0 000a 	sub.w	r0, r0, sl
 800ed1e:	2240      	movs	r2, #64	; 0x40
 800ed20:	4082      	lsls	r2, r0
 800ed22:	4313      	orrs	r3, r2
 800ed24:	3401      	adds	r4, #1
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed2c:	4825      	ldr	r0, [pc, #148]	; (800edc4 <_svfiprintf_r+0x1ec>)
 800ed2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed32:	2206      	movs	r2, #6
 800ed34:	f7f1 fa4c 	bl	80001d0 <memchr>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d038      	beq.n	800edae <_svfiprintf_r+0x1d6>
 800ed3c:	4b22      	ldr	r3, [pc, #136]	; (800edc8 <_svfiprintf_r+0x1f0>)
 800ed3e:	bb1b      	cbnz	r3, 800ed88 <_svfiprintf_r+0x1b0>
 800ed40:	9b03      	ldr	r3, [sp, #12]
 800ed42:	3307      	adds	r3, #7
 800ed44:	f023 0307 	bic.w	r3, r3, #7
 800ed48:	3308      	adds	r3, #8
 800ed4a:	9303      	str	r3, [sp, #12]
 800ed4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed4e:	4433      	add	r3, r6
 800ed50:	9309      	str	r3, [sp, #36]	; 0x24
 800ed52:	e768      	b.n	800ec26 <_svfiprintf_r+0x4e>
 800ed54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed58:	460c      	mov	r4, r1
 800ed5a:	2001      	movs	r0, #1
 800ed5c:	e7a6      	b.n	800ecac <_svfiprintf_r+0xd4>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	3401      	adds	r4, #1
 800ed62:	9305      	str	r3, [sp, #20]
 800ed64:	4619      	mov	r1, r3
 800ed66:	f04f 0c0a 	mov.w	ip, #10
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed70:	3a30      	subs	r2, #48	; 0x30
 800ed72:	2a09      	cmp	r2, #9
 800ed74:	d903      	bls.n	800ed7e <_svfiprintf_r+0x1a6>
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d0c6      	beq.n	800ed08 <_svfiprintf_r+0x130>
 800ed7a:	9105      	str	r1, [sp, #20]
 800ed7c:	e7c4      	b.n	800ed08 <_svfiprintf_r+0x130>
 800ed7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed82:	4604      	mov	r4, r0
 800ed84:	2301      	movs	r3, #1
 800ed86:	e7f0      	b.n	800ed6a <_svfiprintf_r+0x192>
 800ed88:	ab03      	add	r3, sp, #12
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	462a      	mov	r2, r5
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <_svfiprintf_r+0x1f4>)
 800ed90:	a904      	add	r1, sp, #16
 800ed92:	4638      	mov	r0, r7
 800ed94:	f7fd fd3a 	bl	800c80c <_printf_float>
 800ed98:	1c42      	adds	r2, r0, #1
 800ed9a:	4606      	mov	r6, r0
 800ed9c:	d1d6      	bne.n	800ed4c <_svfiprintf_r+0x174>
 800ed9e:	89ab      	ldrh	r3, [r5, #12]
 800eda0:	065b      	lsls	r3, r3, #25
 800eda2:	f53f af2d 	bmi.w	800ec00 <_svfiprintf_r+0x28>
 800eda6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eda8:	b01d      	add	sp, #116	; 0x74
 800edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edae:	ab03      	add	r3, sp, #12
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	462a      	mov	r2, r5
 800edb4:	4b05      	ldr	r3, [pc, #20]	; (800edcc <_svfiprintf_r+0x1f4>)
 800edb6:	a904      	add	r1, sp, #16
 800edb8:	4638      	mov	r0, r7
 800edba:	f7fd ffcb 	bl	800cd54 <_printf_i>
 800edbe:	e7eb      	b.n	800ed98 <_svfiprintf_r+0x1c0>
 800edc0:	080100d4 	.word	0x080100d4
 800edc4:	080100de 	.word	0x080100de
 800edc8:	0800c80d 	.word	0x0800c80d
 800edcc:	0800eb25 	.word	0x0800eb25
 800edd0:	080100da 	.word	0x080100da

0800edd4 <__sfputc_r>:
 800edd4:	6893      	ldr	r3, [r2, #8]
 800edd6:	3b01      	subs	r3, #1
 800edd8:	2b00      	cmp	r3, #0
 800edda:	b410      	push	{r4}
 800eddc:	6093      	str	r3, [r2, #8]
 800edde:	da08      	bge.n	800edf2 <__sfputc_r+0x1e>
 800ede0:	6994      	ldr	r4, [r2, #24]
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	db01      	blt.n	800edea <__sfputc_r+0x16>
 800ede6:	290a      	cmp	r1, #10
 800ede8:	d103      	bne.n	800edf2 <__sfputc_r+0x1e>
 800edea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edee:	f7fe ba66 	b.w	800d2be <__swbuf_r>
 800edf2:	6813      	ldr	r3, [r2, #0]
 800edf4:	1c58      	adds	r0, r3, #1
 800edf6:	6010      	str	r0, [r2, #0]
 800edf8:	7019      	strb	r1, [r3, #0]
 800edfa:	4608      	mov	r0, r1
 800edfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <__sfputs_r>:
 800ee02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	4614      	mov	r4, r2
 800ee0a:	18d5      	adds	r5, r2, r3
 800ee0c:	42ac      	cmp	r4, r5
 800ee0e:	d101      	bne.n	800ee14 <__sfputs_r+0x12>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e007      	b.n	800ee24 <__sfputs_r+0x22>
 800ee14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee18:	463a      	mov	r2, r7
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7ff ffda 	bl	800edd4 <__sfputc_r>
 800ee20:	1c43      	adds	r3, r0, #1
 800ee22:	d1f3      	bne.n	800ee0c <__sfputs_r+0xa>
 800ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee28 <_vfiprintf_r>:
 800ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	b09d      	sub	sp, #116	; 0x74
 800ee30:	4614      	mov	r4, r2
 800ee32:	4698      	mov	r8, r3
 800ee34:	4606      	mov	r6, r0
 800ee36:	b118      	cbz	r0, 800ee40 <_vfiprintf_r+0x18>
 800ee38:	6a03      	ldr	r3, [r0, #32]
 800ee3a:	b90b      	cbnz	r3, 800ee40 <_vfiprintf_r+0x18>
 800ee3c:	f7fe f938 	bl	800d0b0 <__sinit>
 800ee40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee42:	07d9      	lsls	r1, r3, #31
 800ee44:	d405      	bmi.n	800ee52 <_vfiprintf_r+0x2a>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	059a      	lsls	r2, r3, #22
 800ee4a:	d402      	bmi.n	800ee52 <_vfiprintf_r+0x2a>
 800ee4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee4e:	f7fe fb62 	bl	800d516 <__retarget_lock_acquire_recursive>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	071b      	lsls	r3, r3, #28
 800ee56:	d501      	bpl.n	800ee5c <_vfiprintf_r+0x34>
 800ee58:	692b      	ldr	r3, [r5, #16]
 800ee5a:	b99b      	cbnz	r3, 800ee84 <_vfiprintf_r+0x5c>
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f7fe fa6a 	bl	800d338 <__swsetup_r>
 800ee64:	b170      	cbz	r0, 800ee84 <_vfiprintf_r+0x5c>
 800ee66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee68:	07dc      	lsls	r4, r3, #31
 800ee6a:	d504      	bpl.n	800ee76 <_vfiprintf_r+0x4e>
 800ee6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee70:	b01d      	add	sp, #116	; 0x74
 800ee72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee76:	89ab      	ldrh	r3, [r5, #12]
 800ee78:	0598      	lsls	r0, r3, #22
 800ee7a:	d4f7      	bmi.n	800ee6c <_vfiprintf_r+0x44>
 800ee7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee7e:	f7fe fb4b 	bl	800d518 <__retarget_lock_release_recursive>
 800ee82:	e7f3      	b.n	800ee6c <_vfiprintf_r+0x44>
 800ee84:	2300      	movs	r3, #0
 800ee86:	9309      	str	r3, [sp, #36]	; 0x24
 800ee88:	2320      	movs	r3, #32
 800ee8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee92:	2330      	movs	r3, #48	; 0x30
 800ee94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f048 <_vfiprintf_r+0x220>
 800ee98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee9c:	f04f 0901 	mov.w	r9, #1
 800eea0:	4623      	mov	r3, r4
 800eea2:	469a      	mov	sl, r3
 800eea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea8:	b10a      	cbz	r2, 800eeae <_vfiprintf_r+0x86>
 800eeaa:	2a25      	cmp	r2, #37	; 0x25
 800eeac:	d1f9      	bne.n	800eea2 <_vfiprintf_r+0x7a>
 800eeae:	ebba 0b04 	subs.w	fp, sl, r4
 800eeb2:	d00b      	beq.n	800eecc <_vfiprintf_r+0xa4>
 800eeb4:	465b      	mov	r3, fp
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	4629      	mov	r1, r5
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ffa1 	bl	800ee02 <__sfputs_r>
 800eec0:	3001      	adds	r0, #1
 800eec2:	f000 80a9 	beq.w	800f018 <_vfiprintf_r+0x1f0>
 800eec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eec8:	445a      	add	r2, fp
 800eeca:	9209      	str	r2, [sp, #36]	; 0x24
 800eecc:	f89a 3000 	ldrb.w	r3, [sl]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f000 80a1 	beq.w	800f018 <_vfiprintf_r+0x1f0>
 800eed6:	2300      	movs	r3, #0
 800eed8:	f04f 32ff 	mov.w	r2, #4294967295
 800eedc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eee0:	f10a 0a01 	add.w	sl, sl, #1
 800eee4:	9304      	str	r3, [sp, #16]
 800eee6:	9307      	str	r3, [sp, #28]
 800eee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeec:	931a      	str	r3, [sp, #104]	; 0x68
 800eeee:	4654      	mov	r4, sl
 800eef0:	2205      	movs	r2, #5
 800eef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef6:	4854      	ldr	r0, [pc, #336]	; (800f048 <_vfiprintf_r+0x220>)
 800eef8:	f7f1 f96a 	bl	80001d0 <memchr>
 800eefc:	9a04      	ldr	r2, [sp, #16]
 800eefe:	b9d8      	cbnz	r0, 800ef38 <_vfiprintf_r+0x110>
 800ef00:	06d1      	lsls	r1, r2, #27
 800ef02:	bf44      	itt	mi
 800ef04:	2320      	movmi	r3, #32
 800ef06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef0a:	0713      	lsls	r3, r2, #28
 800ef0c:	bf44      	itt	mi
 800ef0e:	232b      	movmi	r3, #43	; 0x2b
 800ef10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef14:	f89a 3000 	ldrb.w	r3, [sl]
 800ef18:	2b2a      	cmp	r3, #42	; 0x2a
 800ef1a:	d015      	beq.n	800ef48 <_vfiprintf_r+0x120>
 800ef1c:	9a07      	ldr	r2, [sp, #28]
 800ef1e:	4654      	mov	r4, sl
 800ef20:	2000      	movs	r0, #0
 800ef22:	f04f 0c0a 	mov.w	ip, #10
 800ef26:	4621      	mov	r1, r4
 800ef28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef2c:	3b30      	subs	r3, #48	; 0x30
 800ef2e:	2b09      	cmp	r3, #9
 800ef30:	d94d      	bls.n	800efce <_vfiprintf_r+0x1a6>
 800ef32:	b1b0      	cbz	r0, 800ef62 <_vfiprintf_r+0x13a>
 800ef34:	9207      	str	r2, [sp, #28]
 800ef36:	e014      	b.n	800ef62 <_vfiprintf_r+0x13a>
 800ef38:	eba0 0308 	sub.w	r3, r0, r8
 800ef3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ef40:	4313      	orrs	r3, r2
 800ef42:	9304      	str	r3, [sp, #16]
 800ef44:	46a2      	mov	sl, r4
 800ef46:	e7d2      	b.n	800eeee <_vfiprintf_r+0xc6>
 800ef48:	9b03      	ldr	r3, [sp, #12]
 800ef4a:	1d19      	adds	r1, r3, #4
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	9103      	str	r1, [sp, #12]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	bfbb      	ittet	lt
 800ef54:	425b      	neglt	r3, r3
 800ef56:	f042 0202 	orrlt.w	r2, r2, #2
 800ef5a:	9307      	strge	r3, [sp, #28]
 800ef5c:	9307      	strlt	r3, [sp, #28]
 800ef5e:	bfb8      	it	lt
 800ef60:	9204      	strlt	r2, [sp, #16]
 800ef62:	7823      	ldrb	r3, [r4, #0]
 800ef64:	2b2e      	cmp	r3, #46	; 0x2e
 800ef66:	d10c      	bne.n	800ef82 <_vfiprintf_r+0x15a>
 800ef68:	7863      	ldrb	r3, [r4, #1]
 800ef6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef6c:	d134      	bne.n	800efd8 <_vfiprintf_r+0x1b0>
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	1d1a      	adds	r2, r3, #4
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	9203      	str	r2, [sp, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	bfb8      	it	lt
 800ef7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef7e:	3402      	adds	r4, #2
 800ef80:	9305      	str	r3, [sp, #20]
 800ef82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f058 <_vfiprintf_r+0x230>
 800ef86:	7821      	ldrb	r1, [r4, #0]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	f7f1 f920 	bl	80001d0 <memchr>
 800ef90:	b138      	cbz	r0, 800efa2 <_vfiprintf_r+0x17a>
 800ef92:	9b04      	ldr	r3, [sp, #16]
 800ef94:	eba0 000a 	sub.w	r0, r0, sl
 800ef98:	2240      	movs	r2, #64	; 0x40
 800ef9a:	4082      	lsls	r2, r0
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	3401      	adds	r4, #1
 800efa0:	9304      	str	r3, [sp, #16]
 800efa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa6:	4829      	ldr	r0, [pc, #164]	; (800f04c <_vfiprintf_r+0x224>)
 800efa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efac:	2206      	movs	r2, #6
 800efae:	f7f1 f90f 	bl	80001d0 <memchr>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d03f      	beq.n	800f036 <_vfiprintf_r+0x20e>
 800efb6:	4b26      	ldr	r3, [pc, #152]	; (800f050 <_vfiprintf_r+0x228>)
 800efb8:	bb1b      	cbnz	r3, 800f002 <_vfiprintf_r+0x1da>
 800efba:	9b03      	ldr	r3, [sp, #12]
 800efbc:	3307      	adds	r3, #7
 800efbe:	f023 0307 	bic.w	r3, r3, #7
 800efc2:	3308      	adds	r3, #8
 800efc4:	9303      	str	r3, [sp, #12]
 800efc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc8:	443b      	add	r3, r7
 800efca:	9309      	str	r3, [sp, #36]	; 0x24
 800efcc:	e768      	b.n	800eea0 <_vfiprintf_r+0x78>
 800efce:	fb0c 3202 	mla	r2, ip, r2, r3
 800efd2:	460c      	mov	r4, r1
 800efd4:	2001      	movs	r0, #1
 800efd6:	e7a6      	b.n	800ef26 <_vfiprintf_r+0xfe>
 800efd8:	2300      	movs	r3, #0
 800efda:	3401      	adds	r4, #1
 800efdc:	9305      	str	r3, [sp, #20]
 800efde:	4619      	mov	r1, r3
 800efe0:	f04f 0c0a 	mov.w	ip, #10
 800efe4:	4620      	mov	r0, r4
 800efe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efea:	3a30      	subs	r2, #48	; 0x30
 800efec:	2a09      	cmp	r2, #9
 800efee:	d903      	bls.n	800eff8 <_vfiprintf_r+0x1d0>
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0c6      	beq.n	800ef82 <_vfiprintf_r+0x15a>
 800eff4:	9105      	str	r1, [sp, #20]
 800eff6:	e7c4      	b.n	800ef82 <_vfiprintf_r+0x15a>
 800eff8:	fb0c 2101 	mla	r1, ip, r1, r2
 800effc:	4604      	mov	r4, r0
 800effe:	2301      	movs	r3, #1
 800f000:	e7f0      	b.n	800efe4 <_vfiprintf_r+0x1bc>
 800f002:	ab03      	add	r3, sp, #12
 800f004:	9300      	str	r3, [sp, #0]
 800f006:	462a      	mov	r2, r5
 800f008:	4b12      	ldr	r3, [pc, #72]	; (800f054 <_vfiprintf_r+0x22c>)
 800f00a:	a904      	add	r1, sp, #16
 800f00c:	4630      	mov	r0, r6
 800f00e:	f7fd fbfd 	bl	800c80c <_printf_float>
 800f012:	4607      	mov	r7, r0
 800f014:	1c78      	adds	r0, r7, #1
 800f016:	d1d6      	bne.n	800efc6 <_vfiprintf_r+0x19e>
 800f018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f01a:	07d9      	lsls	r1, r3, #31
 800f01c:	d405      	bmi.n	800f02a <_vfiprintf_r+0x202>
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	059a      	lsls	r2, r3, #22
 800f022:	d402      	bmi.n	800f02a <_vfiprintf_r+0x202>
 800f024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f026:	f7fe fa77 	bl	800d518 <__retarget_lock_release_recursive>
 800f02a:	89ab      	ldrh	r3, [r5, #12]
 800f02c:	065b      	lsls	r3, r3, #25
 800f02e:	f53f af1d 	bmi.w	800ee6c <_vfiprintf_r+0x44>
 800f032:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f034:	e71c      	b.n	800ee70 <_vfiprintf_r+0x48>
 800f036:	ab03      	add	r3, sp, #12
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	462a      	mov	r2, r5
 800f03c:	4b05      	ldr	r3, [pc, #20]	; (800f054 <_vfiprintf_r+0x22c>)
 800f03e:	a904      	add	r1, sp, #16
 800f040:	4630      	mov	r0, r6
 800f042:	f7fd fe87 	bl	800cd54 <_printf_i>
 800f046:	e7e4      	b.n	800f012 <_vfiprintf_r+0x1ea>
 800f048:	080100d4 	.word	0x080100d4
 800f04c:	080100de 	.word	0x080100de
 800f050:	0800c80d 	.word	0x0800c80d
 800f054:	0800ee03 	.word	0x0800ee03
 800f058:	080100da 	.word	0x080100da

0800f05c <__sflush_r>:
 800f05c:	898a      	ldrh	r2, [r1, #12]
 800f05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f062:	4605      	mov	r5, r0
 800f064:	0710      	lsls	r0, r2, #28
 800f066:	460c      	mov	r4, r1
 800f068:	d458      	bmi.n	800f11c <__sflush_r+0xc0>
 800f06a:	684b      	ldr	r3, [r1, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dc05      	bgt.n	800f07c <__sflush_r+0x20>
 800f070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f072:	2b00      	cmp	r3, #0
 800f074:	dc02      	bgt.n	800f07c <__sflush_r+0x20>
 800f076:	2000      	movs	r0, #0
 800f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f07e:	2e00      	cmp	r6, #0
 800f080:	d0f9      	beq.n	800f076 <__sflush_r+0x1a>
 800f082:	2300      	movs	r3, #0
 800f084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f088:	682f      	ldr	r7, [r5, #0]
 800f08a:	6a21      	ldr	r1, [r4, #32]
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	d032      	beq.n	800f0f6 <__sflush_r+0x9a>
 800f090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	075a      	lsls	r2, r3, #29
 800f096:	d505      	bpl.n	800f0a4 <__sflush_r+0x48>
 800f098:	6863      	ldr	r3, [r4, #4]
 800f09a:	1ac0      	subs	r0, r0, r3
 800f09c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f09e:	b10b      	cbz	r3, 800f0a4 <__sflush_r+0x48>
 800f0a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0a2:	1ac0      	subs	r0, r0, r3
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0aa:	6a21      	ldr	r1, [r4, #32]
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	47b0      	blx	r6
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	d106      	bne.n	800f0c4 <__sflush_r+0x68>
 800f0b6:	6829      	ldr	r1, [r5, #0]
 800f0b8:	291d      	cmp	r1, #29
 800f0ba:	d82b      	bhi.n	800f114 <__sflush_r+0xb8>
 800f0bc:	4a29      	ldr	r2, [pc, #164]	; (800f164 <__sflush_r+0x108>)
 800f0be:	410a      	asrs	r2, r1
 800f0c0:	07d6      	lsls	r6, r2, #31
 800f0c2:	d427      	bmi.n	800f114 <__sflush_r+0xb8>
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	6062      	str	r2, [r4, #4]
 800f0c8:	04d9      	lsls	r1, r3, #19
 800f0ca:	6922      	ldr	r2, [r4, #16]
 800f0cc:	6022      	str	r2, [r4, #0]
 800f0ce:	d504      	bpl.n	800f0da <__sflush_r+0x7e>
 800f0d0:	1c42      	adds	r2, r0, #1
 800f0d2:	d101      	bne.n	800f0d8 <__sflush_r+0x7c>
 800f0d4:	682b      	ldr	r3, [r5, #0]
 800f0d6:	b903      	cbnz	r3, 800f0da <__sflush_r+0x7e>
 800f0d8:	6560      	str	r0, [r4, #84]	; 0x54
 800f0da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0dc:	602f      	str	r7, [r5, #0]
 800f0de:	2900      	cmp	r1, #0
 800f0e0:	d0c9      	beq.n	800f076 <__sflush_r+0x1a>
 800f0e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0e6:	4299      	cmp	r1, r3
 800f0e8:	d002      	beq.n	800f0f0 <__sflush_r+0x94>
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f7ff f89e 	bl	800e22c <_free_r>
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	6360      	str	r0, [r4, #52]	; 0x34
 800f0f4:	e7c0      	b.n	800f078 <__sflush_r+0x1c>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	47b0      	blx	r6
 800f0fc:	1c41      	adds	r1, r0, #1
 800f0fe:	d1c8      	bne.n	800f092 <__sflush_r+0x36>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d0c5      	beq.n	800f092 <__sflush_r+0x36>
 800f106:	2b1d      	cmp	r3, #29
 800f108:	d001      	beq.n	800f10e <__sflush_r+0xb2>
 800f10a:	2b16      	cmp	r3, #22
 800f10c:	d101      	bne.n	800f112 <__sflush_r+0xb6>
 800f10e:	602f      	str	r7, [r5, #0]
 800f110:	e7b1      	b.n	800f076 <__sflush_r+0x1a>
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f118:	81a3      	strh	r3, [r4, #12]
 800f11a:	e7ad      	b.n	800f078 <__sflush_r+0x1c>
 800f11c:	690f      	ldr	r7, [r1, #16]
 800f11e:	2f00      	cmp	r7, #0
 800f120:	d0a9      	beq.n	800f076 <__sflush_r+0x1a>
 800f122:	0793      	lsls	r3, r2, #30
 800f124:	680e      	ldr	r6, [r1, #0]
 800f126:	bf08      	it	eq
 800f128:	694b      	ldreq	r3, [r1, #20]
 800f12a:	600f      	str	r7, [r1, #0]
 800f12c:	bf18      	it	ne
 800f12e:	2300      	movne	r3, #0
 800f130:	eba6 0807 	sub.w	r8, r6, r7
 800f134:	608b      	str	r3, [r1, #8]
 800f136:	f1b8 0f00 	cmp.w	r8, #0
 800f13a:	dd9c      	ble.n	800f076 <__sflush_r+0x1a>
 800f13c:	6a21      	ldr	r1, [r4, #32]
 800f13e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f140:	4643      	mov	r3, r8
 800f142:	463a      	mov	r2, r7
 800f144:	4628      	mov	r0, r5
 800f146:	47b0      	blx	r6
 800f148:	2800      	cmp	r0, #0
 800f14a:	dc06      	bgt.n	800f15a <__sflush_r+0xfe>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	f04f 30ff 	mov.w	r0, #4294967295
 800f158:	e78e      	b.n	800f078 <__sflush_r+0x1c>
 800f15a:	4407      	add	r7, r0
 800f15c:	eba8 0800 	sub.w	r8, r8, r0
 800f160:	e7e9      	b.n	800f136 <__sflush_r+0xda>
 800f162:	bf00      	nop
 800f164:	dfbffffe 	.word	0xdfbffffe

0800f168 <_fflush_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	690b      	ldr	r3, [r1, #16]
 800f16c:	4605      	mov	r5, r0
 800f16e:	460c      	mov	r4, r1
 800f170:	b913      	cbnz	r3, 800f178 <_fflush_r+0x10>
 800f172:	2500      	movs	r5, #0
 800f174:	4628      	mov	r0, r5
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	b118      	cbz	r0, 800f182 <_fflush_r+0x1a>
 800f17a:	6a03      	ldr	r3, [r0, #32]
 800f17c:	b90b      	cbnz	r3, 800f182 <_fflush_r+0x1a>
 800f17e:	f7fd ff97 	bl	800d0b0 <__sinit>
 800f182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d0f3      	beq.n	800f172 <_fflush_r+0xa>
 800f18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f18c:	07d0      	lsls	r0, r2, #31
 800f18e:	d404      	bmi.n	800f19a <_fflush_r+0x32>
 800f190:	0599      	lsls	r1, r3, #22
 800f192:	d402      	bmi.n	800f19a <_fflush_r+0x32>
 800f194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f196:	f7fe f9be 	bl	800d516 <__retarget_lock_acquire_recursive>
 800f19a:	4628      	mov	r0, r5
 800f19c:	4621      	mov	r1, r4
 800f19e:	f7ff ff5d 	bl	800f05c <__sflush_r>
 800f1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1a4:	07da      	lsls	r2, r3, #31
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	d4e4      	bmi.n	800f174 <_fflush_r+0xc>
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	059b      	lsls	r3, r3, #22
 800f1ae:	d4e1      	bmi.n	800f174 <_fflush_r+0xc>
 800f1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1b2:	f7fe f9b1 	bl	800d518 <__retarget_lock_release_recursive>
 800f1b6:	e7dd      	b.n	800f174 <_fflush_r+0xc>

0800f1b8 <__swhatbuf_r>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c0:	2900      	cmp	r1, #0
 800f1c2:	b096      	sub	sp, #88	; 0x58
 800f1c4:	4615      	mov	r5, r2
 800f1c6:	461e      	mov	r6, r3
 800f1c8:	da0d      	bge.n	800f1e6 <__swhatbuf_r+0x2e>
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f1d0:	f04f 0100 	mov.w	r1, #0
 800f1d4:	bf0c      	ite	eq
 800f1d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f1da:	2340      	movne	r3, #64	; 0x40
 800f1dc:	2000      	movs	r0, #0
 800f1de:	6031      	str	r1, [r6, #0]
 800f1e0:	602b      	str	r3, [r5, #0]
 800f1e2:	b016      	add	sp, #88	; 0x58
 800f1e4:	bd70      	pop	{r4, r5, r6, pc}
 800f1e6:	466a      	mov	r2, sp
 800f1e8:	f000 f848 	bl	800f27c <_fstat_r>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	dbec      	blt.n	800f1ca <__swhatbuf_r+0x12>
 800f1f0:	9901      	ldr	r1, [sp, #4]
 800f1f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1fa:	4259      	negs	r1, r3
 800f1fc:	4159      	adcs	r1, r3
 800f1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f202:	e7eb      	b.n	800f1dc <__swhatbuf_r+0x24>

0800f204 <__smakebuf_r>:
 800f204:	898b      	ldrh	r3, [r1, #12]
 800f206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f208:	079d      	lsls	r5, r3, #30
 800f20a:	4606      	mov	r6, r0
 800f20c:	460c      	mov	r4, r1
 800f20e:	d507      	bpl.n	800f220 <__smakebuf_r+0x1c>
 800f210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	6123      	str	r3, [r4, #16]
 800f218:	2301      	movs	r3, #1
 800f21a:	6163      	str	r3, [r4, #20]
 800f21c:	b002      	add	sp, #8
 800f21e:	bd70      	pop	{r4, r5, r6, pc}
 800f220:	ab01      	add	r3, sp, #4
 800f222:	466a      	mov	r2, sp
 800f224:	f7ff ffc8 	bl	800f1b8 <__swhatbuf_r>
 800f228:	9900      	ldr	r1, [sp, #0]
 800f22a:	4605      	mov	r5, r0
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7ff f871 	bl	800e314 <_malloc_r>
 800f232:	b948      	cbnz	r0, 800f248 <__smakebuf_r+0x44>
 800f234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f238:	059a      	lsls	r2, r3, #22
 800f23a:	d4ef      	bmi.n	800f21c <__smakebuf_r+0x18>
 800f23c:	f023 0303 	bic.w	r3, r3, #3
 800f240:	f043 0302 	orr.w	r3, r3, #2
 800f244:	81a3      	strh	r3, [r4, #12]
 800f246:	e7e3      	b.n	800f210 <__smakebuf_r+0xc>
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	6020      	str	r0, [r4, #0]
 800f24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f250:	81a3      	strh	r3, [r4, #12]
 800f252:	9b00      	ldr	r3, [sp, #0]
 800f254:	6163      	str	r3, [r4, #20]
 800f256:	9b01      	ldr	r3, [sp, #4]
 800f258:	6120      	str	r0, [r4, #16]
 800f25a:	b15b      	cbz	r3, 800f274 <__smakebuf_r+0x70>
 800f25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f260:	4630      	mov	r0, r6
 800f262:	f000 f81d 	bl	800f2a0 <_isatty_r>
 800f266:	b128      	cbz	r0, 800f274 <__smakebuf_r+0x70>
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	f023 0303 	bic.w	r3, r3, #3
 800f26e:	f043 0301 	orr.w	r3, r3, #1
 800f272:	81a3      	strh	r3, [r4, #12]
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	431d      	orrs	r5, r3
 800f278:	81a5      	strh	r5, [r4, #12]
 800f27a:	e7cf      	b.n	800f21c <__smakebuf_r+0x18>

0800f27c <_fstat_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	; (800f29c <_fstat_r+0x20>)
 800f280:	2300      	movs	r3, #0
 800f282:	4604      	mov	r4, r0
 800f284:	4608      	mov	r0, r1
 800f286:	4611      	mov	r1, r2
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	f7f4 fcc2 	bl	8003c12 <_fstat>
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	d102      	bne.n	800f298 <_fstat_r+0x1c>
 800f292:	682b      	ldr	r3, [r5, #0]
 800f294:	b103      	cbz	r3, 800f298 <_fstat_r+0x1c>
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	bd38      	pop	{r3, r4, r5, pc}
 800f29a:	bf00      	nop
 800f29c:	200026f0 	.word	0x200026f0

0800f2a0 <_isatty_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d06      	ldr	r5, [pc, #24]	; (800f2bc <_isatty_r+0x1c>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	f7f4 fcc1 	bl	8003c32 <_isatty>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_isatty_r+0x1a>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_isatty_r+0x1a>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	200026f0 	.word	0x200026f0

0800f2c0 <_sbrk_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d06      	ldr	r5, [pc, #24]	; (800f2dc <_sbrk_r+0x1c>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	602b      	str	r3, [r5, #0]
 800f2cc:	f7f4 fcca 	bl	8003c64 <_sbrk>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d102      	bne.n	800f2da <_sbrk_r+0x1a>
 800f2d4:	682b      	ldr	r3, [r5, #0]
 800f2d6:	b103      	cbz	r3, 800f2da <_sbrk_r+0x1a>
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	200026f0 	.word	0x200026f0

0800f2e0 <__assert_func>:
 800f2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2e2:	4614      	mov	r4, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <__assert_func+0x2c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	68d8      	ldr	r0, [r3, #12]
 800f2ee:	b14c      	cbz	r4, 800f304 <__assert_func+0x24>
 800f2f0:	4b07      	ldr	r3, [pc, #28]	; (800f310 <__assert_func+0x30>)
 800f2f2:	9100      	str	r1, [sp, #0]
 800f2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2f8:	4906      	ldr	r1, [pc, #24]	; (800f314 <__assert_func+0x34>)
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	f000 f872 	bl	800f3e4 <fiprintf>
 800f300:	f000 f882 	bl	800f408 <abort>
 800f304:	4b04      	ldr	r3, [pc, #16]	; (800f318 <__assert_func+0x38>)
 800f306:	461c      	mov	r4, r3
 800f308:	e7f3      	b.n	800f2f2 <__assert_func+0x12>
 800f30a:	bf00      	nop
 800f30c:	20000070 	.word	0x20000070
 800f310:	080100ef 	.word	0x080100ef
 800f314:	080100fc 	.word	0x080100fc
 800f318:	0801012a 	.word	0x0801012a

0800f31c <_calloc_r>:
 800f31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f31e:	fba1 2402 	umull	r2, r4, r1, r2
 800f322:	b94c      	cbnz	r4, 800f338 <_calloc_r+0x1c>
 800f324:	4611      	mov	r1, r2
 800f326:	9201      	str	r2, [sp, #4]
 800f328:	f7fe fff4 	bl	800e314 <_malloc_r>
 800f32c:	9a01      	ldr	r2, [sp, #4]
 800f32e:	4605      	mov	r5, r0
 800f330:	b930      	cbnz	r0, 800f340 <_calloc_r+0x24>
 800f332:	4628      	mov	r0, r5
 800f334:	b003      	add	sp, #12
 800f336:	bd30      	pop	{r4, r5, pc}
 800f338:	220c      	movs	r2, #12
 800f33a:	6002      	str	r2, [r0, #0]
 800f33c:	2500      	movs	r5, #0
 800f33e:	e7f8      	b.n	800f332 <_calloc_r+0x16>
 800f340:	4621      	mov	r1, r4
 800f342:	f7fe f86b 	bl	800d41c <memset>
 800f346:	e7f4      	b.n	800f332 <_calloc_r+0x16>

0800f348 <__ascii_mbtowc>:
 800f348:	b082      	sub	sp, #8
 800f34a:	b901      	cbnz	r1, 800f34e <__ascii_mbtowc+0x6>
 800f34c:	a901      	add	r1, sp, #4
 800f34e:	b142      	cbz	r2, 800f362 <__ascii_mbtowc+0x1a>
 800f350:	b14b      	cbz	r3, 800f366 <__ascii_mbtowc+0x1e>
 800f352:	7813      	ldrb	r3, [r2, #0]
 800f354:	600b      	str	r3, [r1, #0]
 800f356:	7812      	ldrb	r2, [r2, #0]
 800f358:	1e10      	subs	r0, r2, #0
 800f35a:	bf18      	it	ne
 800f35c:	2001      	movne	r0, #1
 800f35e:	b002      	add	sp, #8
 800f360:	4770      	bx	lr
 800f362:	4610      	mov	r0, r2
 800f364:	e7fb      	b.n	800f35e <__ascii_mbtowc+0x16>
 800f366:	f06f 0001 	mvn.w	r0, #1
 800f36a:	e7f8      	b.n	800f35e <__ascii_mbtowc+0x16>

0800f36c <_realloc_r>:
 800f36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f370:	4680      	mov	r8, r0
 800f372:	4614      	mov	r4, r2
 800f374:	460e      	mov	r6, r1
 800f376:	b921      	cbnz	r1, 800f382 <_realloc_r+0x16>
 800f378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	4611      	mov	r1, r2
 800f37e:	f7fe bfc9 	b.w	800e314 <_malloc_r>
 800f382:	b92a      	cbnz	r2, 800f390 <_realloc_r+0x24>
 800f384:	f7fe ff52 	bl	800e22c <_free_r>
 800f388:	4625      	mov	r5, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	f000 f841 	bl	800f416 <_malloc_usable_size_r>
 800f394:	4284      	cmp	r4, r0
 800f396:	4607      	mov	r7, r0
 800f398:	d802      	bhi.n	800f3a0 <_realloc_r+0x34>
 800f39a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f39e:	d812      	bhi.n	800f3c6 <_realloc_r+0x5a>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	f7fe ffb6 	bl	800e314 <_malloc_r>
 800f3a8:	4605      	mov	r5, r0
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d0ed      	beq.n	800f38a <_realloc_r+0x1e>
 800f3ae:	42bc      	cmp	r4, r7
 800f3b0:	4622      	mov	r2, r4
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	bf28      	it	cs
 800f3b6:	463a      	movcs	r2, r7
 800f3b8:	f7fe f8af 	bl	800d51a <memcpy>
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4640      	mov	r0, r8
 800f3c0:	f7fe ff34 	bl	800e22c <_free_r>
 800f3c4:	e7e1      	b.n	800f38a <_realloc_r+0x1e>
 800f3c6:	4635      	mov	r5, r6
 800f3c8:	e7df      	b.n	800f38a <_realloc_r+0x1e>

0800f3ca <__ascii_wctomb>:
 800f3ca:	b149      	cbz	r1, 800f3e0 <__ascii_wctomb+0x16>
 800f3cc:	2aff      	cmp	r2, #255	; 0xff
 800f3ce:	bf85      	ittet	hi
 800f3d0:	238a      	movhi	r3, #138	; 0x8a
 800f3d2:	6003      	strhi	r3, [r0, #0]
 800f3d4:	700a      	strbls	r2, [r1, #0]
 800f3d6:	f04f 30ff 	movhi.w	r0, #4294967295
 800f3da:	bf98      	it	ls
 800f3dc:	2001      	movls	r0, #1
 800f3de:	4770      	bx	lr
 800f3e0:	4608      	mov	r0, r1
 800f3e2:	4770      	bx	lr

0800f3e4 <fiprintf>:
 800f3e4:	b40e      	push	{r1, r2, r3}
 800f3e6:	b503      	push	{r0, r1, lr}
 800f3e8:	4601      	mov	r1, r0
 800f3ea:	ab03      	add	r3, sp, #12
 800f3ec:	4805      	ldr	r0, [pc, #20]	; (800f404 <fiprintf+0x20>)
 800f3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f2:	6800      	ldr	r0, [r0, #0]
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	f7ff fd17 	bl	800ee28 <_vfiprintf_r>
 800f3fa:	b002      	add	sp, #8
 800f3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f400:	b003      	add	sp, #12
 800f402:	4770      	bx	lr
 800f404:	20000070 	.word	0x20000070

0800f408 <abort>:
 800f408:	b508      	push	{r3, lr}
 800f40a:	2006      	movs	r0, #6
 800f40c:	f000 f834 	bl	800f478 <raise>
 800f410:	2001      	movs	r0, #1
 800f412:	f7f4 fbcb 	bl	8003bac <_exit>

0800f416 <_malloc_usable_size_r>:
 800f416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f41a:	1f18      	subs	r0, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	bfbc      	itt	lt
 800f420:	580b      	ldrlt	r3, [r1, r0]
 800f422:	18c0      	addlt	r0, r0, r3
 800f424:	4770      	bx	lr

0800f426 <_raise_r>:
 800f426:	291f      	cmp	r1, #31
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4604      	mov	r4, r0
 800f42c:	460d      	mov	r5, r1
 800f42e:	d904      	bls.n	800f43a <_raise_r+0x14>
 800f430:	2316      	movs	r3, #22
 800f432:	6003      	str	r3, [r0, #0]
 800f434:	f04f 30ff 	mov.w	r0, #4294967295
 800f438:	bd38      	pop	{r3, r4, r5, pc}
 800f43a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f43c:	b112      	cbz	r2, 800f444 <_raise_r+0x1e>
 800f43e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f442:	b94b      	cbnz	r3, 800f458 <_raise_r+0x32>
 800f444:	4620      	mov	r0, r4
 800f446:	f000 f831 	bl	800f4ac <_getpid_r>
 800f44a:	462a      	mov	r2, r5
 800f44c:	4601      	mov	r1, r0
 800f44e:	4620      	mov	r0, r4
 800f450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f454:	f000 b818 	b.w	800f488 <_kill_r>
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d00a      	beq.n	800f472 <_raise_r+0x4c>
 800f45c:	1c59      	adds	r1, r3, #1
 800f45e:	d103      	bne.n	800f468 <_raise_r+0x42>
 800f460:	2316      	movs	r3, #22
 800f462:	6003      	str	r3, [r0, #0]
 800f464:	2001      	movs	r0, #1
 800f466:	e7e7      	b.n	800f438 <_raise_r+0x12>
 800f468:	2400      	movs	r4, #0
 800f46a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f46e:	4628      	mov	r0, r5
 800f470:	4798      	blx	r3
 800f472:	2000      	movs	r0, #0
 800f474:	e7e0      	b.n	800f438 <_raise_r+0x12>
	...

0800f478 <raise>:
 800f478:	4b02      	ldr	r3, [pc, #8]	; (800f484 <raise+0xc>)
 800f47a:	4601      	mov	r1, r0
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f7ff bfd2 	b.w	800f426 <_raise_r>
 800f482:	bf00      	nop
 800f484:	20000070 	.word	0x20000070

0800f488 <_kill_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4d07      	ldr	r5, [pc, #28]	; (800f4a8 <_kill_r+0x20>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	4611      	mov	r1, r2
 800f494:	602b      	str	r3, [r5, #0]
 800f496:	f7f4 fb79 	bl	8003b8c <_kill>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	d102      	bne.n	800f4a4 <_kill_r+0x1c>
 800f49e:	682b      	ldr	r3, [r5, #0]
 800f4a0:	b103      	cbz	r3, 800f4a4 <_kill_r+0x1c>
 800f4a2:	6023      	str	r3, [r4, #0]
 800f4a4:	bd38      	pop	{r3, r4, r5, pc}
 800f4a6:	bf00      	nop
 800f4a8:	200026f0 	.word	0x200026f0

0800f4ac <_getpid_r>:
 800f4ac:	f7f4 bb66 	b.w	8003b7c <_getpid>

0800f4b0 <_init>:
 800f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b2:	bf00      	nop
 800f4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4b6:	bc08      	pop	{r3}
 800f4b8:	469e      	mov	lr, r3
 800f4ba:	4770      	bx	lr

0800f4bc <_fini>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	bf00      	nop
 800f4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4c2:	bc08      	pop	{r3}
 800f4c4:	469e      	mov	lr, r3
 800f4c6:	4770      	bx	lr
