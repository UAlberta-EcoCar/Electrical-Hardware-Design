
BatteryPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800c980  0800c980  0001c980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceac  0800ceac  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb4  0800ceb4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ceb8  0800ceb8  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d10  200001d8  0800d094  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ee8  0800d094  00022ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002103e  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000412a  00000000  00000000  00041289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  000453b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000152f  00000000  00000000  00046f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005130  00000000  00000000  00048437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df70  00000000  00000000  0004d567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9384  00000000  00000000  0006b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084bc  00000000  00000000  0015485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0015cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c968 	.word	0x0800c968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c968 	.word	0x0800c968

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_write>:
void StartCanDataTask(void *argument);
void StartBattMonTask(void *argument);

/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <_write+0x28>)
 8000ebc:	f004 ff34 	bl	8005d28 <HAL_UART_Transmit>
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002c8 	.word	0x200002c8

08000ed0 <HAL_ADC_ConvCpltCallback>:

uint32_t conversion_completed = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d104      	bne.n	8000eee <HAL_ADC_ConvCpltCallback+0x1e>
		osSemaphoreRelease(ADCConvCmpltSHandle);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fdff 	bl	8006aec <osSemaphoreRelease>
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001f4 	.word	0x200001f4
 8000efc:	200012a8 	.word	0x200012a8

08000f00 <HAL_CAN_RxFifo0MsgPendingCallback>:

// NICK: I edited how my Callbacks work to be a little safer, check it out
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f002 fab1 	bl	8003476 <HAL_CAN_GetRxMessage>
	if (RxHeader.RTR == CAN_RTR_REMOTE) {
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d107      	bne.n	8000f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		osMessageQueuePut(canRxRtrQueueHandle, &RxHeader.StdId, 0U, 0UL);
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	4915      	ldr	r1, [pc, #84]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f26:	f005 fe99 	bl	8006c5c <osMessageQueuePut>
		} else {
			osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
			osMessageQueuePut(canRxDataQueueHandle, &RxData[4], 0U, 0UL);
		}
	}
}
 8000f2a:	e020      	b.n	8000f6e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		osMessageQueuePut(canRxDataQueueHandle, &RxHeader.StdId, 0U, 0UL);
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	2200      	movs	r2, #0
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f36:	f005 fe91 	bl	8006c5c <osMessageQueuePut>
		if (RxHeader.DLC <= 4UL) {
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d807      	bhi.n	8000f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f4c:	f005 fe86 	bl	8006c5c <osMessageQueuePut>
}
 8000f50:	e00d      	b.n	8000f6e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
			osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4907      	ldr	r1, [pc, #28]	; (8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f5c:	f005 fe7e 	bl	8006c5c <osMessageQueuePut>
			osMessageQueuePut(canRxDataQueueHandle, &RxData[4], 0U, 0UL);
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000f6a:	f005 fe77 	bl	8006c5c <osMessageQueuePut>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000139c 	.word	0x2000139c
 8000f7c:	20001380 	.word	0x20001380
 8000f80:	20000e00 	.word	0x20000e00
 8000f84:	20001054 	.word	0x20001054
 8000f88:	200013a0 	.word	0x200013a0

08000f8c <HAL_CAN_TxMailbox0CompleteCallback>:

/* Transmit Completed Callbacks for Message Sent Confirmations */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if (TxMailboxCanTask == CAN_TX_MAILBOX0) {
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d102      	bne.n	8000fa2 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
		// osSemaphoreRelease(canMsgReceivedSemHandle);
		TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200013a4 	.word	0x200013a4

08000fb4 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (TxMailboxCanTask == CAN_TX_MAILBOX1) {
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d102      	bne.n	8000fca <HAL_CAN_TxMailbox1CompleteCallback+0x16>
		// osSemaphoreRelease(canMsgReceivedSemHandle);
		TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	}
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200013a4 	.word	0x200013a4

08000fdc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (TxMailboxCanTask == CAN_TX_MAILBOX2) {
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d102      	bne.n	8000ff2 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
		// osSemaphoreRelease(canMsgReceivedSemHandle);
		TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200013a4 	.word	0x200013a4

08001004 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001008:	f001 f81f 	bl	800204a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100c:	f000 f86c 	bl	80010e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001010:	f000 f9e6 	bl	80013e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001014:	f000 f9c6 	bl	80013a4 <MX_DMA_Init>
	MX_CAN1_Init();
 8001018:	f000 f95e 	bl	80012d8 <MX_CAN1_Init>
	MX_USART1_UART_Init();
 800101c:	f000 f992 	bl	8001344 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001020:	f000 f8b4 	bl	800118c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001024:	f005 fb90 	bl	8006748 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of ADCConvCmpltS */
	ADCConvCmpltSHandle = osSemaphoreNew(1, 0, &ADCConvCmpltS_attributes);
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <main+0x9c>)
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f005 fc82 	bl	8006936 <osSemaphoreNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <main+0xa0>)
 8001036:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of canRxRtrQueue */
	canRxRtrQueueHandle = osMessageQueueNew(128, sizeof(uint32_t),
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <main+0xa4>)
 800103a:	2104      	movs	r1, #4
 800103c:	2080      	movs	r0, #128	; 0x80
 800103e:	f005 fd99 	bl	8006b74 <osMessageQueueNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <main+0xa8>)
 8001046:	6013      	str	r3, [r2, #0]
			&canRxRtrQueue_attributes);

	/* creation of canRxDataQueue */
	canRxDataQueueHandle = osMessageQueueNew(128, sizeof(uint32_t),
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <main+0xac>)
 800104a:	2104      	movs	r1, #4
 800104c:	2080      	movs	r0, #128	; 0x80
 800104e:	f005 fd91 	bl	8006b74 <osMessageQueueNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <main+0xb0>)
 8001056:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of AdcTask */
	AdcTaskHandle = osThreadNew(StartAdcTask, NULL, &AdcTask_attributes);
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <main+0xb4>)
 800105a:	2100      	movs	r1, #0
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <main+0xb8>)
 800105e:	f005 fbbd 	bl	80067dc <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <main+0xbc>)
 8001066:	6013      	str	r3, [r2, #0]

	/* creation of CanRtrTask */
	CanRtrTaskHandle = osThreadNew(StartCanRtrTask, NULL,
 8001068:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <main+0xc0>)
 800106a:	2100      	movs	r1, #0
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <main+0xc4>)
 800106e:	f005 fbb5 	bl	80067dc <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <main+0xc8>)
 8001076:	6013      	str	r3, [r2, #0]
			&CanRtrTask_attributes);

	/* creation of CanDataTask */
	CanDataTaskHandle = osThreadNew(StartCanDataTask, NULL,
 8001078:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <main+0xcc>)
 800107a:	2100      	movs	r1, #0
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <main+0xd0>)
 800107e:	f005 fbad 	bl	80067dc <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <main+0xd4>)
 8001086:	6013      	str	r3, [r2, #0]
			&CanDataTask_attributes);

	/* creation of BattMonTask */
	BattMonTaskHandle = osThreadNew(StartBattMonTask, NULL,
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <main+0xd8>)
 800108a:	2100      	movs	r1, #0
 800108c:	4814      	ldr	r0, [pc, #80]	; (80010e0 <main+0xdc>)
 800108e:	f005 fba5 	bl	80067dc <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <main+0xe0>)
 8001096:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001098:	f005 fb7a 	bl	8006790 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800109c:	e7fe      	b.n	800109c <main+0x98>
 800109e:	bf00      	nop
 80010a0:	0800cae0 	.word	0x0800cae0
 80010a4:	200012a8 	.word	0x200012a8
 80010a8:	0800cab0 	.word	0x0800cab0
 80010ac:	20000e00 	.word	0x20000e00
 80010b0:	0800cac8 	.word	0x0800cac8
 80010b4:	20001054 	.word	0x20001054
 80010b8:	0800ca20 	.word	0x0800ca20
 80010bc:	08001545 	.word	0x08001545
 80010c0:	20000350 	.word	0x20000350
 80010c4:	0800ca44 	.word	0x0800ca44
 80010c8:	080016a9 	.word	0x080016a9
 80010cc:	200005fc 	.word	0x200005fc
 80010d0:	0800ca68 	.word	0x0800ca68
 80010d4:	080016e1 	.word	0x080016e1
 80010d8:	200008a8 	.word	0x200008a8
 80010dc:	0800ca8c 	.word	0x0800ca8c
 80010e0:	08001735 	.word	0x08001735
 80010e4:	20000b54 	.word	0x20000b54

080010e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b096      	sub	sp, #88	; 0x58
 80010ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2244      	movs	r2, #68	; 0x44
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f009 fc8d 	bl	800aa16 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800110a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110e:	f003 f9b3 	bl	8004478 <HAL_PWREx_ControlVoltageScaling>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001118:	f000 fbbe 	bl	8001898 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001124:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112e:	2302      	movs	r3, #2
 8001130:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001136:	230a      	movs	r3, #10
 8001138:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800113a:	2307      	movs	r3, #7
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f9ea 	bl	8004524 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x72>
		Error_Handler();
 8001156:	f000 fb9f 	bl	8001898 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2303      	movs	r3, #3
 8001160:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800116e:	463b      	mov	r3, r7
 8001170:	2104      	movs	r1, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fdea 	bl	8004d4c <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x9a>
		Error_Handler();
 800117e:	f000 fb8b 	bl	8001898 <Error_Handler>
	}
}
 8001182:	bf00      	nop
 8001184:	3758      	adds	r7, #88	; 0x58
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <MX_ADC1_Init+0x130>)
 80011a4:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <MX_ADC1_Init+0x134>)
 80011a6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011a8:	4b44      	ldr	r3, [pc, #272]	; (80012bc <MX_ADC1_Init+0x130>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <MX_ADC1_Init+0x130>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <MX_ADC1_Init+0x130>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <MX_ADC1_Init+0x130>)
 80011bc:	2201      	movs	r2, #1
 80011be:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <MX_ADC1_Init+0x130>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <MX_ADC1_Init+0x130>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <MX_ADC1_Init+0x130>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 5;
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <MX_ADC1_Init+0x130>)
 80011d4:	2205      	movs	r2, #5
 80011d6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <MX_ADC1_Init+0x130>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <MX_ADC1_Init+0x130>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <MX_ADC1_Init+0x130>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <MX_ADC1_Init+0x130>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <MX_ADC1_Init+0x130>)
 80011f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <MX_ADC1_Init+0x130>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001204:	482d      	ldr	r0, [pc, #180]	; (80012bc <MX_ADC1_Init+0x130>)
 8001206:	f001 f921 	bl	800244c <HAL_ADC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x88>
		Error_Handler();
 8001210:	f000 fb42 	bl	8001898 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <MX_ADC1_Init+0x138>)
 8001216:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001218:	2306      	movs	r3, #6
 800121a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001220:	237f      	movs	r3, #127	; 0x7f
 8001222:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001224:	2304      	movs	r3, #4
 8001226:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <MX_ADC1_Init+0x130>)
 8001232:	f001 fae5 	bl	8002800 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xb4>
		Error_Handler();
 800123c:	f000 fb2c 	bl	8001898 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_ADC1_Init+0x13c>)
 8001242:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001244:	230c      	movs	r3, #12
 8001246:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_ADC1_Init+0x130>)
 800124e:	f001 fad7 	bl	8002800 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0xd0>
		Error_Handler();
 8001258:	f000 fb1e 	bl	8001898 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_ADC1_Init+0x140>)
 800125e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001260:	2312      	movs	r3, #18
 8001262:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_ADC1_Init+0x130>)
 800126a:	f001 fac9 	bl	8002800 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0xec>
		Error_Handler();
 8001274:	f000 fb10 	bl	8001898 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_ADC1_Init+0x144>)
 800127a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800127c:	2318      	movs	r3, #24
 800127e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_ADC1_Init+0x130>)
 8001286:	f001 fabb 	bl	8002800 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x108>
		Error_Handler();
 8001290:	f000 fb02 	bl	8001898 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_ADC1_Init+0x148>)
 8001296:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_ADC1_Init+0x130>)
 80012a4:	f001 faac 	bl	8002800 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0x126>
		Error_Handler();
 80012ae:	f000 faf3 	bl	8001898 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	50040000 	.word	0x50040000
 80012c4:	19200040 	.word	0x19200040
 80012c8:	1d500080 	.word	0x1d500080
 80012cc:	21800100 	.word	0x21800100
 80012d0:	25b00200 	.word	0x25b00200
 80012d4:	2a000400 	.word	0x2a000400

080012d8 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_CAN1_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_CAN1_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_CAN1_Init+0x64>)
 80012e4:	2205      	movs	r2, #5
 80012e6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_CAN1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_CAN1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_CAN1_Init+0x64>)
 80012f6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80012fa:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_CAN1_Init+0x64>)
 80012fe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001302:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_CAN1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_CAN1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_CAN1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_CAN1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_CAN1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_CAN1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_CAN1_Init+0x64>)
 800132a:	f001 ff65 	bl	80031f8 <HAL_CAN_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_CAN1_Init+0x60>
		Error_Handler();
 8001334:	f000 fab0 	bl	8001898 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002a0 	.word	0x200002a0
 8001340:	40006400 	.word	0x40006400

08001344 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART1_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_USART1_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_USART1_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART1_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART1_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART1_UART_Init+0x58>)
 8001388:	f004 fc80 	bl	8005c8c <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001392:	f000 fa81 	bl	8001898 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002c8 	.word	0x200002c8
 80013a0:	40013800 	.word	0x40013800

080013a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_DMA_Init+0x38>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <MX_DMA_Init+0x38>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6493      	str	r3, [r2, #72]	; 0x48
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_DMA_Init+0x38>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	200b      	movs	r0, #11
 80013c8:	f002 fc66 	bl	8003c98 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013cc:	200b      	movs	r0, #11
 80013ce:	f002 fc7f 	bl	8003cd0 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <MX_GPIO_Init+0x154>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <MX_GPIO_Init+0x154>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <MX_GPIO_Init+0x154>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <MX_GPIO_Init+0x154>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a48      	ldr	r2, [pc, #288]	; (8001534 <MX_GPIO_Init+0x154>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <MX_GPIO_Init+0x154>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <MX_GPIO_Init+0x154>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a42      	ldr	r2, [pc, #264]	; (8001534 <MX_GPIO_Init+0x154>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <MX_GPIO_Init+0x154>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <MX_GPIO_Init+0x154>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a3c      	ldr	r2, [pc, #240]	; (8001534 <MX_GPIO_Init+0x154>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <MX_GPIO_Init+0x154>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPLED3_Pin | GPLED2_Pin | GPLED1_Pin,
 8001456:	2200      	movs	r2, #0
 8001458:	2138      	movs	r1, #56	; 0x38
 800145a:	4837      	ldr	r0, [pc, #220]	; (8001538 <MX_GPIO_Init+0x158>)
 800145c:	f002 ffa8 	bl	80043b0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001464:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800146a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <MX_GPIO_Init+0x15c>)
 8001478:	f002 fe30 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001480:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	482a      	ldr	r0, [pc, #168]	; (800153c <MX_GPIO_Init+0x15c>)
 8001492:	f002 fe23 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA6 PA7 PA8
	 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001496:	f240 73c1 	movw	r3, #1985	; 0x7c1
 800149a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f002 fe15 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80014b2:	2303      	movs	r3, #3
 80014b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	2303      	movs	r3, #3
 80014b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	481c      	ldr	r0, [pc, #112]	; (8001538 <MX_GPIO_Init+0x158>)
 80014c6:	f002 fe09 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_STBY_Pin */
	GPIO_InitStruct.Pin = CAN_STBY_Pin;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f002 fdfb 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pins : GPLED3_Pin GPLED2_Pin GPLED1_Pin */
	GPIO_InitStruct.Pin = GPLED3_Pin | GPLED2_Pin | GPLED1_Pin;
 80014e6:	2338      	movs	r3, #56	; 0x38
 80014e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_GPIO_Init+0x158>)
 80014fe:	f002 fded 	bl	80040dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001502:	2308      	movs	r3, #8
 8001504:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <MX_GPIO_Init+0x160>)
 8001516:	f002 fde1 	bl	80040dc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	2028      	movs	r0, #40	; 0x28
 8001520:	f002 fbba 	bl	8003c98 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001524:	2028      	movs	r0, #40	; 0x28
 8001526:	f002 fbd3 	bl	8003cd0 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48001c00 	.word	0x48001c00

08001544 <StartAdcTask>:
 * @brief  Function implementing the AdcTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResults, 5);
 800154c:	2205      	movs	r2, #5
 800154e:	494f      	ldr	r1, [pc, #316]	; (800168c <StartAdcTask+0x148>)
 8001550:	484f      	ldr	r0, [pc, #316]	; (8001690 <StartAdcTask+0x14c>)
 8001552:	f001 f8bd 	bl	80026d0 <HAL_ADC_Start_DMA>

	uint8_t i = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for (;;) {
		if (osSemaphoreAcquire(ADCConvCmpltSHandle, osWaitForever) == osOK) {
 800155a:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <StartAdcTask+0x150>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f04f 31ff 	mov.w	r1, #4294967295
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fa70 	bl	8006a48 <osSemaphoreAcquire>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 808a 	bne.w	8001684 <StartAdcTask+0x140>
			battery_board_data[i].batt_volt = ((float) adcResults[0] * ADC_VOLT_REF
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <StartAdcTask+0x148>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001698 <StartAdcTask+0x154>
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	7bfa      	ldrb	r2, [r7, #15]
					* BATTERY_VOLT_DIVIDER);
 8001588:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800169c <StartAdcTask+0x158>
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
			battery_board_data[i].batt_volt = ((float) adcResults[0] * ADC_VOLT_REF
 8001590:	4943      	ldr	r1, [pc, #268]	; (80016a0 <StartAdcTask+0x15c>)
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	edc3 7a00 	vstr	s15, [r3]
			battery_board_data[i].batt_cur = adcResults[1] * ADC_VOLT_REF
 80015a0:	4b3a      	ldr	r3, [pc, #232]	; (800168c <StartAdcTask+0x148>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ae:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001698 <StartAdcTask+0x154>
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
					* VOLT_TO_CURR;
 80015b8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
			battery_board_data[i].batt_cur = adcResults[1] * ADC_VOLT_REF
 80015c0:	4937      	ldr	r1, [pc, #220]	; (80016a0 <StartAdcTask+0x15c>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3304      	adds	r3, #4
 80015ce:	edc3 7a00 	vstr	s15, [r3]
			battery_board_data[i].output_cur = adcResults[2] * ADC_VOLT_REF
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <StartAdcTask+0x148>)
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001698 <StartAdcTask+0x154>
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
					* VOLT_TO_CURR;
 80015ea:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
			battery_board_data[i].output_cur = adcResults[2] * ADC_VOLT_REF
 80015f2:	492b      	ldr	r1, [pc, #172]	; (80016a0 <StartAdcTask+0x15c>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	edc3 7a00 	vstr	s15, [r3]
			battery_board_data[i].output_volt = adcResults[3] * ADC_VOLT_REF
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <StartAdcTask+0x148>)
 8001606:	88db      	ldrh	r3, [r3, #6]
 8001608:	b29b      	uxth	r3, r3
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001698 <StartAdcTask+0x154>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	7bfa      	ldrb	r2, [r7, #15]
					* OUTPUT_VOLT_DIVIDER;
 800161c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016a4 <StartAdcTask+0x160>
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
			battery_board_data[i].output_volt = adcResults[3] * ADC_VOLT_REF
 8001624:	491e      	ldr	r1, [pc, #120]	; (80016a0 <StartAdcTask+0x15c>)
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	edc3 7a00 	vstr	s15, [r3]
			battery_board_data[i].output_cur = adcResults[4] * ADC_VOLT_REF
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <StartAdcTask+0x148>)
 8001638:	891b      	ldrh	r3, [r3, #8]
 800163a:	b29b      	uxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001698 <StartAdcTask+0x154>
 8001648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164c:	7bfa      	ldrb	r2, [r7, #15]
					* VOLT_TO_CURR;
 800164e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
			battery_board_data[i].output_cur = adcResults[4] * ADC_VOLT_REF
 8001656:	4912      	ldr	r1, [pc, #72]	; (80016a0 <StartAdcTask+0x15c>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	edc3 7a00 	vstr	s15, [r3]

			if (i == 9) {
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b09      	cmp	r3, #9
 800166c:	d102      	bne.n	8001674 <StartAdcTask+0x130>
				i = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e002      	b.n	800167a <StartAdcTask+0x136>
			} else {
				i++;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
			}

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResults, 5);
 800167a:	2205      	movs	r2, #5
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <StartAdcTask+0x148>)
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <StartAdcTask+0x14c>)
 8001680:	f001 f826 	bl	80026d0 <HAL_ADC_Start_DMA>
		}
		osDelay(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f005 f93b 	bl	8006900 <osDelay>
		if (osSemaphoreAcquire(ADCConvCmpltSHandle, osWaitForever) == osOK) {
 800168a:	e766      	b.n	800155a <StartAdcTask+0x16>
 800168c:	20001374 	.word	0x20001374
 8001690:	200001f4 	.word	0x200001f4
 8001694:	200012a8 	.word	0x200012a8
 8001698:	3a533333 	.word	0x3a533333
 800169c:	413a169b 	.word	0x413a169b
 80016a0:	200012ac 	.word	0x200012ac
 80016a4:	40e33333 	.word	0x40e33333

080016a8 <StartCanRtrTask>:
 * @brief Function implementing the CanRtrTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRtrTask */
void StartCanRtrTask(void *argument) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_stat;
	uint32_t queueData;
	float floatPackage[2];
	/* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(canRxRtrQueueHandle, &queueData, 0U,
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <StartCanRtrTask+0x34>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	f107 0114 	add.w	r1, r7, #20
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	2200      	movs	r2, #0
 80016be:	f005 fb2d 	bl	8006d1c <osMessageQueueGet>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <StartCanRtrTask+0x2a>
		osWaitForever) == osOK) {
			switch (queueData) {
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f240 2201 	movw	r2, #513	; 0x201
 80016ce:	4293      	cmp	r3, r2
			case INTERNAL_FUEL_CELL_PACKET:
				break;
			default:
				// this shouldn't happen
				break;
 80016d0:	bf00      	nop
			}
		}
		osDelay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f005 f914 	bl	8006900 <osDelay>
		if (osMessageQueueGet(canRxRtrQueueHandle, &queueData, 0U,
 80016d8:	e7ea      	b.n	80016b0 <StartCanRtrTask+0x8>
 80016da:	bf00      	nop
 80016dc:	20000e00 	.word	0x20000e00

080016e0 <StartCanDataTask>:
 * @brief Function implementing the CanDataTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanDataTask */
void StartCanDataTask(void *argument) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanDataTask */
	HAL_CAN_Start(&hcan1);
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <StartCanDataTask+0x4c>)
 80016ea:	f001 fe80 	bl	80033ee <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80016ee:	2102      	movs	r1, #2
 80016f0:	480e      	ldr	r0, [pc, #56]	; (800172c <StartCanDataTask+0x4c>)
 80016f2:	f001 ffe2 	bl	80036ba <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80016f6:	2110      	movs	r1, #16
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <StartCanDataTask+0x4c>)
 80016fa:	f001 ffde 	bl	80036ba <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80016fe:	2101      	movs	r1, #1
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <StartCanDataTask+0x4c>)
 8001702:	f001 ffda 	bl	80036ba <HAL_CAN_ActivateNotification>
#define H2_ALARM_HIGH 1

	/* Infinite loop */
	uint32_t queueData;
	for (;;) {
		if (osMessageQueueGet(canRxDataQueueHandle, &queueData, 0U,
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <StartCanDataTask+0x50>)
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	f107 010c 	add.w	r1, r7, #12
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	2200      	movs	r2, #0
 8001714:	f005 fb02 	bl	8006d1c <osMessageQueueGet>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <StartCanDataTask+0x44>
		osWaitForever) == osOK) {
			switch (queueData) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b01      	cmp	r3, #1
				// if (canData.H2_OK == H2_ALARM_HIGH) {
				//  Potentially do something here
				//}
				break;
			default:
				break;
 8001722:	bf00      	nop
			}
		}
		osDelay(10);
 8001724:	200a      	movs	r0, #10
 8001726:	f005 f8eb 	bl	8006900 <osDelay>
		if (osMessageQueueGet(canRxDataQueueHandle, &queueData, 0U,
 800172a:	e7ec      	b.n	8001706 <StartCanDataTask+0x26>
 800172c:	200002a0 	.word	0x200002a0
 8001730:	20001054 	.word	0x20001054

08001734 <StartBattMonTask>:
 * @brief Function implementing the BattMonTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBattMonTask */
void StartBattMonTask(void *argument) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBattMonTask */
	// first convert adc value to real analoge voltage.
	// to do so first find the adc constant
	// ADC = V_IN * Res_ADC / V_REF
	// Use ADC_VOLT_REF
	float batt_volt = 0.0f;
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPLED1_GPIO_Port, GPLED1_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	4848      	ldr	r0, [pc, #288]	; (8001868 <StartBattMonTask+0x134>)
 8001748:	f002 fe32 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPLED2_GPIO_Port, GPLED2_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	4845      	ldr	r0, [pc, #276]	; (8001868 <StartBattMonTask+0x134>)
 8001752:	f002 fe2d 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPLED3_GPIO_Port, GPLED3_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2108      	movs	r1, #8
 800175a:	4843      	ldr	r0, [pc, #268]	; (8001868 <StartBattMonTask+0x134>)
 800175c:	f002 fe28 	bl	80043b0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {

		batt_volt = battery_board_data[0].batt_volt;
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <StartBattMonTask+0x138>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]

		printf("[!BatteryMonitorTask]: Battery Voltage: %f", batt_volt);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	483f      	ldr	r0, [pc, #252]	; (8001870 <StartBattMonTask+0x13c>)
 8001772:	f009 f8fb 	bl	800a96c <iprintf>

		if (batt_volt > BATTERY_MAX_CHARGE) { // Fully charged
 8001776:	edd7 7a03 	vldr	s15, [r7, #12]
 800177a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	dd0f      	ble.n	80017a8 <StartBattMonTask+0x74>
			// Stay Solid green with all other leds on
			HAL_GPIO_WritePin(GPLED1_GPIO_Port, GPLED1_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2120      	movs	r1, #32
 800178c:	4836      	ldr	r0, [pc, #216]	; (8001868 <StartBattMonTask+0x134>)
 800178e:	f002 fe0f 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED2_GPIO_Port, GPLED2_Pin, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2110      	movs	r1, #16
 8001796:	4834      	ldr	r0, [pc, #208]	; (8001868 <StartBattMonTask+0x134>)
 8001798:	f002 fe0a 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED3_GPIO_Port, GPLED3_Pin, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	2108      	movs	r1, #8
 80017a0:	4831      	ldr	r0, [pc, #196]	; (8001868 <StartBattMonTask+0x134>)
 80017a2:	f002 fe05 	bl	80043b0 <HAL_GPIO_WritePin>
 80017a6:	e059      	b.n	800185c <StartBattMonTask+0x128>
		} else if (batt_volt >= BATTERY_MED_CHARGE
 80017a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ac:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	db17      	blt.n	80017ea <StartBattMonTask+0xb6>
				&& batt_volt < BATTERY_MAX_CHARGE) { // Usable
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d50e      	bpl.n	80017ea <StartBattMonTask+0xb6>
			// solid yellow with all others on
			HAL_GPIO_TogglePin(GPLED1_GPIO_Port, GPLED1_Pin);
 80017cc:	2120      	movs	r1, #32
 80017ce:	4826      	ldr	r0, [pc, #152]	; (8001868 <StartBattMonTask+0x134>)
 80017d0:	f002 fe06 	bl	80043e0 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPLED2_GPIO_Port, GPLED2_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2110      	movs	r1, #16
 80017d8:	4823      	ldr	r0, [pc, #140]	; (8001868 <StartBattMonTask+0x134>)
 80017da:	f002 fde9 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED3_GPIO_Port, GPLED3_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2108      	movs	r1, #8
 80017e2:	4821      	ldr	r0, [pc, #132]	; (8001868 <StartBattMonTask+0x134>)
 80017e4:	f002 fde4 	bl	80043b0 <HAL_GPIO_WritePin>
 80017e8:	e038      	b.n	800185c <StartBattMonTask+0x128>
		} else if (batt_volt < BATTERY_MED_CHARGE
 80017ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ee:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80017f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d518      	bpl.n	800182e <StartBattMonTask+0xfa>
				&& batt_volt > BATTERY_LOW_CHARGE) {
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dd0f      	ble.n	800182e <StartBattMonTask+0xfa>
			// Solid Red
			HAL_GPIO_WritePin(GPLED1_GPIO_Port, GPLED1_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2120      	movs	r1, #32
 8001812:	4815      	ldr	r0, [pc, #84]	; (8001868 <StartBattMonTask+0x134>)
 8001814:	f002 fdcc 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED2_GPIO_Port, GPLED2_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2110      	movs	r1, #16
 800181c:	4812      	ldr	r0, [pc, #72]	; (8001868 <StartBattMonTask+0x134>)
 800181e:	f002 fdc7 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED3_GPIO_Port, GPLED3_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2108      	movs	r1, #8
 8001826:	4810      	ldr	r0, [pc, #64]	; (8001868 <StartBattMonTask+0x134>)
 8001828:	f002 fdc2 	bl	80043b0 <HAL_GPIO_WritePin>
 800182c:	e016      	b.n	800185c <StartBattMonTask+0x128>
		} else if (batt_volt < BATTERY_LOW_CHARGE) {
 800182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001832:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	d50d      	bpl.n	800185c <StartBattMonTask+0x128>
			// Rapidly blink red.
			HAL_GPIO_WritePin(GPLED1_GPIO_Port, GPLED1_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <StartBattMonTask+0x134>)
 8001846:	f002 fdb3 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPLED2_GPIO_Port, GPLED2_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2110      	movs	r1, #16
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <StartBattMonTask+0x134>)
 8001850:	f002 fdae 	bl	80043b0 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPLED3_GPIO_Port, GPLED3_Pin);
 8001854:	2108      	movs	r1, #8
 8001856:	4804      	ldr	r0, [pc, #16]	; (8001868 <StartBattMonTask+0x134>)
 8001858:	f002 fdc2 	bl	80043e0 <HAL_GPIO_TogglePin>
		}
		osDelay(500);
 800185c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001860:	f005 f84e 	bl	8006900 <osDelay>
	for (;;) {
 8001864:	e77c      	b.n	8001760 <StartBattMonTask+0x2c>
 8001866:	bf00      	nop
 8001868:	48000400 	.word	0x48000400
 800186c:	200012ac 	.word	0x200012ac
 8001870:	0800c9dc 	.word	0x0800c9dc

08001874 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001886:	f000 fbf9 	bl	800207c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012c00 	.word	0x40012c00

08001898 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_MspInit+0x4c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_MspInit+0x4c>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	210f      	movs	r1, #15
 80018de:	f06f 0001 	mvn.w	r0, #1
 80018e2:	f002 f9d9 	bl	8003c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b09e      	sub	sp, #120	; 0x78
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	2254      	movs	r2, #84	; 0x54
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f009 f87e 	bl	800aa16 <memset>
  if(hadc->Instance==ADC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <HAL_ADC_MspInit+0x118>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d16f      	bne.n	8001a04 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001928:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800192a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800192e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001938:	2308      	movs	r3, #8
 800193a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800193c:	2307      	movs	r3, #7
 800193e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fc50 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800195e:	f7ff ff9b 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 8001968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_ADC_MspInit+0x11c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ACD_Battery_Voltage_Pin|Battery_Curr_Pin|Current_Out_12V_Pin|ADC_12V_Voltage_Out_Pin
 8001992:	233e      	movs	r3, #62	; 0x3e
 8001994:	667b      	str	r3, [r7, #100]	; 0x64
                          |Current_Buck_12V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001996:	230b      	movs	r3, #11
 8001998:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f002 fb98 	bl	80040dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019ae:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_ADC_MspInit+0x124>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019dc:	2220      	movs	r2, #32
 80019de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019ea:	f002 f97f 	bl	8003cec <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80019f4:	f7ff ff50 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 80019fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <HAL_ADC_MspInit+0x120>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3778      	adds	r7, #120	; 0x78
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	50040000 	.word	0x50040000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	20000258 	.word	0x20000258
 8001a18:	40020008 	.word	0x40020008

08001a1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_CAN_MspInit+0xd4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d153      	bne.n	8001ae6 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_CAN_MspInit+0xd8>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a80:	2309      	movs	r3, #9
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f002 fb25 	bl	80040dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001aa4:	2309      	movs	r3, #9
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f002 fb13 	bl	80040dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	2013      	movs	r0, #19
 8001abc:	f002 f8ec 	bl	8003c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ac0:	2013      	movs	r0, #19
 8001ac2:	f002 f905 	bl	8003cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2105      	movs	r1, #5
 8001aca:	2014      	movs	r0, #20
 8001acc:	f002 f8e4 	bl	8003c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ad0:	2014      	movs	r0, #20
 8001ad2:	f002 f8fd 	bl	8003cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2105      	movs	r1, #5
 8001ada:	2015      	movs	r0, #21
 8001adc:	f002 f8dc 	bl	8003c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ae0:	2015      	movs	r0, #21
 8001ae2:	f002 f8f5 	bl	8003cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40006400 	.word	0x40006400
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b09e      	sub	sp, #120	; 0x78
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2254      	movs	r2, #84	; 0x54
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f008 ff7c 	bl	800aa16 <memset>
  if(huart->Instance==USART1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <HAL_UART_MspInit+0xa4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d135      	bne.n	8001b94 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 fb5f 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b40:	f7ff feaa 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_UART_MspInit+0xa8>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_UART_MspInit+0xac>)
 8001b90:	f002 faa4 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3778      	adds	r7, #120	; 0x78
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_InitTick+0xc8>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	4a2d      	ldr	r2, [pc, #180]	; (8001c70 <HAL_InitTick+0xc8>)
 8001bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_InitTick+0xc8>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fa7b 	bl	80050d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bde:	f003 fa63 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8001be2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <HAL_InitTick+0xcc>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	0c9b      	lsrs	r3, r3, #18
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_InitTick+0xd0>)
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_InitTick+0xd4>)
 8001bf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_InitTick+0xd0>)
 8001bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c00:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c18:	4817      	ldr	r0, [pc, #92]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c1a:	f003 fdd5 	bl	80057c8 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11b      	bne.n	8001c64 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_InitTick+0xd0>)
 8001c2e:	f003 fe2d 	bl	800588c <HAL_TIM_Base_Start_IT>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d111      	bne.n	8001c64 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c40:	2019      	movs	r0, #25
 8001c42:	f002 f845 	bl	8003cd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d808      	bhi.n	8001c5e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	2019      	movs	r0, #25
 8001c52:	f002 f821 	bl	8003c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_InitTick+0xd8>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e002      	b.n	8001c64 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3730      	adds	r7, #48	; 0x30
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	431bde83 	.word	0x431bde83
 8001c78:	200013a8 	.word	0x200013a8
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	20000004 	.word	0x20000004

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>
	...

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <HardFault_Handler+0x154>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HardFault_Handler+0x154>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HardFault_Handler+0x154>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HardFault_Handler+0x154>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <HardFault_Handler+0x154>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HardFault_Handler+0x154>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HardFault_Handler+0x154>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HardFault_Handler+0x154>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HardFault_Handler+0x154>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HardFault_Handler+0x154>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <HardFault_Handler+0x154>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HardFault_Handler+0x154>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPLED1_Pin | GPLED2_Pin | GPLED3_Pin,
 8001d02:	2200      	movs	r2, #0
 8001d04:	2138      	movs	r1, #56	; 0x38
 8001d06:	4837      	ldr	r0, [pc, #220]	; (8001de4 <HardFault_Handler+0x158>)
 8001d08:	f002 fb52 	bl	80043b0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	GPIO_InitStruct.Pin = GPLED1_Pin | GPLED2_Pin | GPLED3_Pin;
 8001d0c:	2338      	movs	r3, #56	; 0x38
 8001d0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4830      	ldr	r0, [pc, #192]	; (8001de4 <HardFault_Handler+0x158>)
 8001d24:	f002 f9da 	bl	80040dc <HAL_GPIO_Init>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2c:	e002      	b.n	8001d34 <HardFault_Handler+0xa8>
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d30:	3301      	adds	r3, #1
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <HardFault_Handler+0x15c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	ddf8      	ble.n	8001d2e <HardFault_Handler+0xa2>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED1_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	4828      	ldr	r0, [pc, #160]	; (8001de4 <HardFault_Handler+0x158>)
 8001d42:	f002 fb35 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d4a:	e002      	b.n	8001d52 <HardFault_Handler+0xc6>
 8001d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4e:	3301      	adds	r3, #1
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HardFault_Handler+0x15c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	ddf8      	ble.n	8001d4c <HardFault_Handler+0xc0>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED2_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4821      	ldr	r0, [pc, #132]	; (8001de4 <HardFault_Handler+0x158>)
 8001d60:	f002 fb26 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	e002      	b.n	8001d70 <HardFault_Handler+0xe4>
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HardFault_Handler+0x15c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	ddf8      	ble.n	8001d6a <HardFault_Handler+0xde>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED3_Pin, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	4819      	ldr	r0, [pc, #100]	; (8001de4 <HardFault_Handler+0x158>)
 8001d7e:	f002 fb17 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
 8001d86:	e002      	b.n	8001d8e <HardFault_Handler+0x102>
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HardFault_Handler+0x15c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	ddf8      	ble.n	8001d88 <HardFault_Handler+0xfc>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED1_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2120      	movs	r1, #32
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <HardFault_Handler+0x158>)
 8001d9c:	f002 fb08 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da4:	e002      	b.n	8001dac <HardFault_Handler+0x120>
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	3301      	adds	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HardFault_Handler+0x15c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	ddf8      	ble.n	8001da6 <HardFault_Handler+0x11a>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED2_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2110      	movs	r1, #16
 8001db8:	480a      	ldr	r0, [pc, #40]	; (8001de4 <HardFault_Handler+0x158>)
 8001dba:	f002 faf9 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc2:	e002      	b.n	8001dca <HardFault_Handler+0x13e>
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HardFault_Handler+0x15c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	ddf8      	ble.n	8001dc4 <HardFault_Handler+0x138>
			;
		HAL_GPIO_WritePin(GPIOB, GPLED3_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <HardFault_Handler+0x158>)
 8001dd8:	f002 faea 	bl	80043b0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001ddc:	e7a4      	b.n	8001d28 <HardFault_Handler+0x9c>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	0007a11f 	.word	0x0007a11f

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Channel1_IRQHandler+0x10>)
 8001e12:	f002 f883 	bl	8003f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000258 	.word	0x20000258

08001e20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <CAN1_TX_IRQHandler+0x10>)
 8001e26:	f001 fc6e 	bl	8003706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002a0 	.word	0x200002a0

08001e34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <CAN1_RX0_IRQHandler+0x10>)
 8001e3a:	f001 fc64 	bl	8003706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002a0 	.word	0x200002a0

08001e48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <CAN1_RX1_IRQHandler+0x10>)
 8001e4e:	f001 fc5a 	bl	8003706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200002a0 	.word	0x200002a0

08001e5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e62:	f003 fd67 	bl	8005934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200013a8 	.word	0x200013a8

08001e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e78:	f002 facc 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_kill>:

int _kill(int pid, int sig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9a:	f008 fe65 	bl	800ab68 <__errno>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2216      	movs	r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_exit>:

void _exit (int status)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ffe7 	bl	8001e90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec2:	e7fe      	b.n	8001ec2 <_exit+0x12>

08001ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
  }

  return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f008 fde6 	bl	800ab68 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20010000 	.word	0x20010000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	200013f4 	.word	0x200013f4
 8001fd0:	20002ee8 	.word	0x20002ee8

08001fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ffc:	f7ff ffea 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <LoopForever+0x6>)
  ldr r1, =_edata
 8002002:	490d      	ldr	r1, [pc, #52]	; (8002038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <LoopForever+0xe>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002018:	4c0a      	ldr	r4, [pc, #40]	; (8002044 <LoopForever+0x16>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f008 fda5 	bl	800ab74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800202a:	f7fe ffeb 	bl	8001004 <main>

0800202e <LoopForever>:

LoopForever:
    b LoopForever
 800202e:	e7fe      	b.n	800202e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002030:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800203c:	0800cebc 	.word	0x0800cebc
  ldr r2, =_sbss
 8002040:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002044:	20002ee8 	.word	0x20002ee8

08002048 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_IRQHandler>

0800204a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f001 fe14 	bl	8003c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	200f      	movs	r0, #15
 800205c:	f7ff fda4 	bl	8001ba8 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	e001      	b.n	8002070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800206c:	f7ff fc1a 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002070:	79fb      	ldrb	r3, [r7, #7]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x20>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x24>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_IncTick+0x24>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000008 	.word	0x20000008
 80020a0:	200013f8 	.word	0x200013f8

080020a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_GetTick+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	200013f8 	.word	0x200013f8

080020bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <LL_ADC_SetOffset+0x44>)
 8002146:	4013      	ands	r3, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	4313      	orrs	r3, r2
 8002154:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	03fff000 	.word	0x03fff000

0800216c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3360      	adds	r3, #96	; 0x60
 800217a:	461a      	mov	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3330      	adds	r3, #48	; 0x30
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	211f      	movs	r1, #31
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 011f 	and.w	r1, r3, #31
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	431a      	orrs	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3314      	adds	r3, #20
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0e5b      	lsrs	r3, r3, #25
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0d1b      	lsrs	r3, r3, #20
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2107      	movs	r1, #7
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	401a      	ands	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0318 	and.w	r3, r3, #24
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c8:	40d9      	lsrs	r1, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	400b      	ands	r3, r1
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0007ffff 	.word	0x0007ffff

080022ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002324:	d101      	bne.n	800232a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002374:	d101      	bne.n	800237a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_IsEnabled+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_IsEnabled+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ea:	f043 0204 	orr.w	r2, r3, #4
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d101      	bne.n	8002416 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d101      	bne.n	800243c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e126      	b.n	80026b4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fa3d 	bl	80018f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff3f 	bl	8002310 <LL_ADC_IsDeepPowerDownEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff25 	bl	80022ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff5a 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff3e 	bl	8002338 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024bc:	4b7f      	ldr	r3, [pc, #508]	; (80026bc <HAL_ADC_Init+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	4a7f      	ldr	r2, [pc, #508]	; (80026c0 <HAL_ADC_Init+0x274>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff3c 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff75 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 8002514:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80bf 	bne.w	80026a2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 80bb 	bne.w	80026a2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff35 	bl	80023b0 <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800254c:	485d      	ldr	r0, [pc, #372]	; (80026c4 <HAL_ADC_Init+0x278>)
 800254e:	f7ff ff2f 	bl	80023b0 <LL_ADC_IsEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	485a      	ldr	r0, [pc, #360]	; (80026c8 <HAL_ADC_Init+0x27c>)
 8002560:	f7ff fdac 	bl	80020bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e5b      	ldrb	r3, [r3, #25]
 8002568:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800256e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002574:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800257a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002582:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	3b01      	subs	r3, #1
 8002598:	045b      	lsls	r3, r3, #17
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b42      	ldr	r3, [pc, #264]	; (80026cc <HAL_ADC_Init+0x280>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff25 	bl	8002424 <LL_ADC_INJ_IsConversionOngoing>
 80025da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d13d      	bne.n	800265e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d13a      	bne.n	800265e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002604:	f023 0302 	bic.w	r3, r3, #2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d118      	bne.n	800264e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002626:	f023 0304 	bic.w	r3, r3, #4
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800263e:	430a      	orrs	r2, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	e007      	b.n	800265e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10c      	bne.n	8002680 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f023 010f 	bic.w	r1, r3, #15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
 800267e:	e007      	b.n	8002690 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020f 	bic.w	r2, r2, #15
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f023 0303 	bic.w	r3, r3, #3
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
 80026a0:	e007      	b.n	80026b2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000000 	.word	0x20000000
 80026c0:	053e2d63 	.word	0x053e2d63
 80026c4:	50040000 	.word	0x50040000
 80026c8:	50040300 	.word	0x50040300
 80026cc:	fff0c007 	.word	0xfff0c007

080026d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe8c 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d167      	bne.n	80027bc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Start_DMA+0x2a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e063      	b.n	80027c2 <HAL_ADC_Start_DMA+0xf2>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fc5e 	bl	8002fc4 <ADC_Enable>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14f      	bne.n	80027b2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	f023 0206 	bic.w	r2, r3, #6
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	659a      	str	r2, [r3, #88]	; 0x58
 800273e:	e002      	b.n	8002746 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_ADC_Start_DMA+0xfc>)
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_ADC_Start_DMA+0x100>)
 8002754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <HAL_ADC_Start_DMA+0x104>)
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	221c      	movs	r2, #28
 8002764:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0210 	orr.w	r2, r2, #16
 800277c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3340      	adds	r3, #64	; 0x40
 8002798:	4619      	mov	r1, r3
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f001 fb5d 	bl	8003e5c <HAL_DMA_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe13 	bl	80023d6 <LL_ADC_REG_StartConversion>
 80027b0:	e006      	b.n	80027c0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027ba:	e001      	b.n	80027c0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	080030d1 	.word	0x080030d1
 80027d0:	080031a9 	.word	0x080031a9
 80027d4:	080031c5 	.word	0x080031c5

080027d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b0b6      	sub	sp, #216	; 0xd8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x22>
 800281e:	2302      	movs	r3, #2
 8002820:	e3bb      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x79a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fde5 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 83a0 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d824      	bhi.n	8002896 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	3b02      	subs	r3, #2
 8002852:	2b03      	cmp	r3, #3
 8002854:	d81b      	bhi.n	800288e <HAL_ADC_ConfigChannel+0x8e>
 8002856:	a201      	add	r2, pc, #4	; (adr r2, 800285c <HAL_ADC_ConfigChannel+0x5c>)
 8002858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002875 	.word	0x08002875
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002885 	.word	0x08002885
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800286c:	230c      	movs	r3, #12
 800286e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002872:	e010      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002874:	2312      	movs	r3, #18
 8002876:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800287a:	e00c      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800287c:	2318      	movs	r3, #24
 800287e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002882:	e008      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800288e:	2306      	movs	r3, #6
 8002890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002894:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80028a4:	f7ff fca6 	bl	80021f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fda6 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 80028b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fdb2 	bl	8002424 <LL_ADC_INJ_IsConversionOngoing>
 80028c0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 81a4 	bne.w	8002c16 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 819f 	bne.w	8002c16 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff fcb1 	bl	800224c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00a      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6919      	ldr	r1, [r3, #16]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291c:	f7ff fc02 	bl	8002124 <LL_ADC_SetOffset>
 8002920:	e179      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fc1f 	bl	800216c <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <HAL_ADC_ConfigChannel+0x14e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fc14 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	e01e      	b.n	800298c <HAL_ADC_ConfigChannel+0x18c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fc09 	bl	800216c <LL_ADC_GetOffsetChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800296c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e004      	b.n	800298a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1a4>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	e018      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x1d6>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80029b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e004      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80029cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fbd8 	bl	8002198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fbbc 	bl	800216c <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x214>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fbb1 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	e01e      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x252>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fba6 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e004      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x26a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	e018      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x29c>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e004      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fb75 	bl	8002198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fb59 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x2da>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fb4e 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	e01e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x318>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fb43 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x330>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	e014      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x35a>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e004      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2102      	movs	r1, #2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fb16 	bl	8002198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2103      	movs	r1, #3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fafa 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x398>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2103      	movs	r1, #3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff faef 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	e017      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x3c8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fae4 	bl	800216c <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e003      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x3e0>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	e011      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x404>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2103      	movs	r1, #3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fac1 	bl	8002198 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fbc8 	bl	80023b0 <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8140 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f7ff fb35 	bl	80022a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a8f      	ldr	r2, [pc, #572]	; (8002e7c <HAL_ADC_ConfigChannel+0x67c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	f040 8131 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x46e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	bf94      	ite	ls
 8002c66:	2301      	movls	r3, #1
 8002c68:	2300      	movhi	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e019      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x4a2>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d079      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4c2>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	3301      	adds	r3, #1
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc0:	e015      	b.n	8002cee <HAL_ADC_ConfigChannel+0x4ee>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e003      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	069b      	lsls	r3, r3, #26
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x50e>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	e017      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x53e>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	ea42 0103 	orr.w	r1, r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x564>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	051b      	lsls	r3, r3, #20
 8002d62:	e018      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x596>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d96:	430b      	orrs	r3, r1
 8002d98:	e081      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x5b6>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	3301      	adds	r3, #1
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db4:	e015      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x5e2>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x602>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	e017      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x632>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	ea42 0103 	orr.w	r1, r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x65e>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 021f 	and.w	r2, r3, #31
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	3b1e      	subs	r3, #30
 8002e56:	051b      	lsls	r3, r3, #20
 8002e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	e01e      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x69c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e006      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x688>
 8002e7a:	bf00      	nop
 8002e7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1e      	subs	r3, #30
 8002e96:	051b      	lsls	r3, r3, #20
 8002e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff f9d2 	bl	800224c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d06c      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb4:	483c      	ldr	r0, [pc, #240]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eb6:	f7ff f927 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 8002eba:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_ADC_ConfigChannel+0x7ac>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d127      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d121      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d157      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	482f      	ldr	r0, [pc, #188]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eea:	f7ff f8fa 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	4a30      	ldr	r2, [pc, #192]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f16:	e03a      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_ADC_ConfigChannel+0x7bc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d113      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d12a      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f40:	4619      	mov	r1, r3
 8002f42:	4819      	ldr	r0, [pc, #100]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f44:	f7ff f8cd 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f48:	e021      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d11c      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f76:	f7ff f8b4 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
 8002f7a:	e008      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	37d8      	adds	r7, #216	; 0xd8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	80080000 	.word	0x80080000
 8002fa8:	50040300 	.word	0x50040300
 8002fac:	c7520000 	.word	0xc7520000
 8002fb0:	50040000 	.word	0x50040000
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	053e2d63 	.word	0x053e2d63
 8002fbc:	cb840000 	.word	0xcb840000
 8002fc0:	80000001 	.word	0x80000001

08002fc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f9eb 	bl	80023b0 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d169      	bne.n	80030b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <ADC_Enable+0xfc>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e055      	b.n	80030b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f9ba 	bl	8002388 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003014:	482b      	ldr	r0, [pc, #172]	; (80030c4 <ADC_Enable+0x100>)
 8003016:	f7ff f877 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 800301a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <ADC_Enable+0x104>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	4a28      	ldr	r2, [pc, #160]	; (80030cc <ADC_Enable+0x108>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800303e:	e002      	b.n	8003046 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3b01      	subs	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f9      	bne.n	8003040 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800304c:	f7ff f82a 	bl	80020a4 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003052:	e028      	b.n	80030a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f9a9 	bl	80023b0 <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f98d 	bl	8002388 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800306e:	f7ff f819 	bl	80020a4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d914      	bls.n	80030a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d00d      	beq.n	80030a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d1cf      	bne.n	8003054 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	8000003f 	.word	0x8000003f
 80030c4:	50040300 	.word	0x50040300
 80030c8:	20000000 	.word	0x20000000
 80030cc:	053e2d63 	.word	0x053e2d63

080030d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d14b      	bne.n	8003182 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f860 	bl	80021ce <LL_ADC_REG_IsTriggerSourceSWStart>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d032      	beq.n	800317a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12b      	bne.n	800317a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
 8003146:	e018      	b.n	800317a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d111      	bne.n	800317a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7fd fea8 	bl	8000ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003180:	e00e      	b.n	80031a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fb2c 	bl	80027ec <HAL_ADC_ErrorCallback>
}
 8003194:	e004      	b.n	80031a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fb0e 	bl	80027d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f7ff fafe 	bl	80027ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0ed      	b.n	80033e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fc00 	bl	8001a1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800322c:	f7fe ff3a 	bl	80020a4 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003232:	e012      	b.n	800325a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003234:	f7fe ff36 	bl	80020a4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b0a      	cmp	r3, #10
 8003240:	d90b      	bls.n	800325a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0c5      	b.n	80033e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0e5      	beq.n	8003234 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0202 	bic.w	r2, r2, #2
 8003276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003278:	f7fe ff14 	bl	80020a4 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800327e:	e012      	b.n	80032a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003280:	f7fe ff10 	bl	80020a4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b0a      	cmp	r3, #10
 800328c:	d90b      	bls.n	80032a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2205      	movs	r2, #5
 800329e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e09f      	b.n	80033e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7e1b      	ldrb	r3, [r3, #24]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e007      	b.n	80032de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7e5b      	ldrb	r3, [r3, #25]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d108      	bne.n	80032f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e007      	b.n	8003308 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e9b      	ldrb	r3, [r3, #26]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d108      	bne.n	8003322 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e007      	b.n	8003332 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0220 	bic.w	r2, r2, #32
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7edb      	ldrb	r3, [r3, #27]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0210 	bic.w	r2, r2, #16
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e007      	b.n	800335c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0210 	orr.w	r2, r2, #16
 800335a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7f1b      	ldrb	r3, [r3, #28]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d108      	bne.n	8003376 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e007      	b.n	8003386 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0208 	bic.w	r2, r2, #8
 8003384:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7f5b      	ldrb	r3, [r3, #29]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0204 	orr.w	r2, r2, #4
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e007      	b.n	80033b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	1e5a      	subs	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d12e      	bne.n	8003460 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800341a:	f7fe fe43 	bl	80020a4 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003420:	e012      	b.n	8003448 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003422:	f7fe fe3f 	bl	80020a4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b0a      	cmp	r3, #10
 800342e:	d90b      	bls.n	8003448 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2205      	movs	r2, #5
 8003440:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e012      	b.n	800346e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e5      	bne.n	8003422 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e006      	b.n	800346e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <HAL_CAN_GetRxMessage+0x24>
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 8103 	bne.w	80036a0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10e      	bne.n	80034be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0f7      	b.n	80036ae <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d107      	bne.n	80034dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0e8      	b.n	80036ae <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	331b      	adds	r3, #27
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0204 	and.w	r2, r3, #4
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	331b      	adds	r3, #27
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4413      	add	r3, r2
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0d5b      	lsrs	r3, r3, #21
 800350a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e00b      	b.n	800352c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	331b      	adds	r3, #27
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4413      	add	r3, r2
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	331b      	adds	r3, #27
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	4413      	add	r3, r2
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0202 	and.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	331b      	adds	r3, #27
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	3304      	adds	r3, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2208      	movs	r2, #8
 800355e:	611a      	str	r2, [r3, #16]
 8003560:	e00b      	b.n	800357a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	331b      	adds	r3, #27
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	331b      	adds	r3, #27
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b2da      	uxtb	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	331b      	adds	r3, #27
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0a1a      	lsrs	r2, r3, #8
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0c1a      	lsrs	r2, r3, #16
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	3302      	adds	r3, #2
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e1a      	lsrs	r2, r3, #24
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3303      	adds	r3, #3
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	3304      	adds	r3, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4413      	add	r3, r2
 8003630:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0a1a      	lsrs	r2, r3, #8
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	3305      	adds	r3, #5
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0c1a      	lsrs	r2, r3, #16
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3306      	adds	r3, #6
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e1a      	lsrs	r2, r3, #24
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3307      	adds	r3, #7
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0220 	orr.w	r2, r2, #32
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e007      	b.n	800369c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e006      	b.n	80036ae <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <HAL_CAN_ActivateNotification+0x1e>
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d109      	bne.n	80036ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6959      	ldr	r1, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e006      	b.n	80036fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08a      	sub	sp, #40	; 0x28
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07c      	beq.n	8003846 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d023      	beq.n	800379e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fc0f 	bl	8000f8c <HAL_CAN_TxMailbox0CompleteCallback>
 800376e:	e016      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	e00c      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	e002      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f96b 	bl	8003a74 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d024      	beq.n	80037f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd fbf9 	bl	8000fb4 <HAL_CAN_TxMailbox1CompleteCallback>
 80037c2:	e016      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e00c      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e002      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f94b 	bl	8003a88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d024      	beq.n	8003846 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fbe3 	bl	8000fdc <HAL_CAN_TxMailbox2CompleteCallback>
 8003816:	e016      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e00c      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e002      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f92b 	bl	8003a9c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2210      	movs	r2, #16
 8003868:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f912 	bl	8003ab0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd fb2b 	bl	8000f00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2210      	movs	r2, #16
 80038cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2208      	movs	r2, #8
 80038e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8f4 	bl	8003ad8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8db 	bl	8003ac4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8de 	bl	8003aec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8d7 	bl	8003b00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07b      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d072      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d043      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03e      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d4:	2b60      	cmp	r3, #96	; 0x60
 80039d6:	d02b      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x32a>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d82e      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039dc:	2b50      	cmp	r3, #80	; 0x50
 80039de:	d022      	beq.n	8003a26 <HAL_CAN_IRQHandler+0x320>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d82a      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d019      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x316>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d826      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039ec:	2b30      	cmp	r3, #48	; 0x30
 80039ee:	d010      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x30c>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d822      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d002      	beq.n	80039fe <HAL_CAN_IRQHandler+0x2f8>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d005      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039fc:	e01d      	b.n	8003a3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a06:	e019      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f043 0310 	orr.w	r3, r3, #16
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a10:	e014      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a1a:	e00f      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a24:	e00a      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a2e:	e005      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a38:	e000      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            break;
 8003a3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2204      	movs	r2, #4
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f854 	bl	8003b14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	60d3      	str	r3, [r2, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <__NVIC_GetPriorityGrouping+0x18>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0307 	and.w	r3, r3, #7
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db0b      	blt.n	8003bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4907      	ldr	r1, [pc, #28]	; (8003bc4 <__NVIC_EnableIRQ+0x38>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2001      	movs	r0, #1
 8003bae:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db0a      	blt.n	8003bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	490c      	ldr	r1, [pc, #48]	; (8003c14 <__NVIC_SetPriority+0x4c>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf0:	e00a      	b.n	8003c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <__NVIC_SetPriority+0x50>)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	440b      	add	r3, r1
 8003c06:	761a      	strb	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000e100 	.word	0xe000e100
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf28      	it	cs
 8003c3a:	2304      	movcs	r3, #4
 8003c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d902      	bls.n	8003c4c <NVIC_EncodePriority+0x30>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <NVIC_EncodePriority+0x32>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	401a      	ands	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	4313      	orrs	r3, r2
         );
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff4c 	bl	8003b28 <__NVIC_SetPriorityGrouping>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003caa:	f7ff ff61 	bl	8003b70 <__NVIC_GetPriorityGrouping>
 8003cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	6978      	ldr	r0, [r7, #20]
 8003cb6:	f7ff ffb1 	bl	8003c1c <NVIC_EncodePriority>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff80 	bl	8003bc8 <__NVIC_SetPriority>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff54 	bl	8003b8c <__NVIC_EnableIRQ>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e098      	b.n	8003e30 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <HAL_DMA_Init+0x150>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d80f      	bhi.n	8003d2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_DMA_Init+0x154>)
 8003d12:	4413      	add	r3, r2
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_DMA_Init+0x158>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a48      	ldr	r2, [pc, #288]	; (8003e48 <HAL_DMA_Init+0x15c>)
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
 8003d28:	e00e      	b.n	8003d48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_DMA_Init+0x160>)
 8003d32:	4413      	add	r3, r2
 8003d34:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_DMA_Init+0x158>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	009a      	lsls	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_DMA_Init+0x164>)
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d039      	beq.n	8003e18 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <HAL_DMA_Init+0x15c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d11a      	bne.n	8003de4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_DMA_Init+0x168>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f003 031c 	and.w	r3, r3, #28
 8003dba:	210f      	movs	r1, #15
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	4924      	ldr	r1, [pc, #144]	; (8003e54 <HAL_DMA_Init+0x168>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_DMA_Init+0x168>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 031c 	and.w	r3, r3, #28
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	491d      	ldr	r1, [pc, #116]	; (8003e54 <HAL_DMA_Init+0x168>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
 8003de2:	e019      	b.n	8003e18 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <HAL_DMA_Init+0x16c>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 031c 	and.w	r3, r3, #28
 8003df0:	210f      	movs	r1, #15
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	4917      	ldr	r1, [pc, #92]	; (8003e58 <HAL_DMA_Init+0x16c>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_DMA_Init+0x16c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f003 031c 	and.w	r3, r3, #28
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	4911      	ldr	r1, [pc, #68]	; (8003e58 <HAL_DMA_Init+0x16c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40020407 	.word	0x40020407
 8003e40:	bffdfff8 	.word	0xbffdfff8
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	bffdfbf8 	.word	0xbffdfbf8
 8003e50:	40020400 	.word	0x40020400
 8003e54:	400200a8 	.word	0x400200a8
 8003e58:	400204a8 	.word	0x400204a8

08003e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Start_IT+0x20>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e04b      	b.n	8003f14 <HAL_DMA_Start_IT+0xb8>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d13a      	bne.n	8003f06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f8e0 	bl	800407a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 020e 	orr.w	r2, r2, #14
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0204 	bic.w	r2, r2, #4
 8003ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 020a 	orr.w	r2, r2, #10
 8003ef2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e005      	b.n	8003f12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f003 031c 	and.w	r3, r3, #28
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d026      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x7a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d021      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f003 021c 	and.w	r2, r3, #28
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f82:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d071      	beq.n	8004070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f94:	e06c      	b.n	8004070 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f003 031c 	and.w	r3, r3, #28
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d02e      	beq.n	8004008 <HAL_DMA_IRQHandler+0xec>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d029      	beq.n	8004008 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 020a 	bic.w	r2, r2, #10
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f003 021c 	and.w	r2, r3, #28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d038      	beq.n	8004070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004006:	e033      	b.n	8004070 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f003 031c 	and.w	r3, r3, #28
 8004010:	2208      	movs	r2, #8
 8004012:	409a      	lsls	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02a      	beq.n	8004072 <HAL_DMA_IRQHandler+0x156>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d025      	beq.n	8004072 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 020e 	bic.w	r2, r2, #14
 8004034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f003 021c 	and.w	r2, r3, #28
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004070:	bf00      	nop
 8004072:	bf00      	nop
}
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f003 021c 	and.w	r2, r3, #28
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f202 	lsl.w	r2, r1, r2
 800409a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d108      	bne.n	80040be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040bc:	e007      	b.n	80040ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ea:	e148      	b.n	800437e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2101      	movs	r1, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	4013      	ands	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 813a 	beq.w	8004378 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d005      	beq.n	800411c <HAL_GPIO_Init+0x40>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d130      	bne.n	800417e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004152:	2201      	movs	r2, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 0201 	and.w	r2, r3, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b03      	cmp	r3, #3
 8004188:	d017      	beq.n	80041ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d123      	bne.n	800420e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	08da      	lsrs	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3208      	adds	r2, #8
 80041ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	08da      	lsrs	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3208      	adds	r2, #8
 8004208:	6939      	ldr	r1, [r7, #16]
 800420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	2203      	movs	r2, #3
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0203 	and.w	r2, r3, #3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8094 	beq.w	8004378 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004250:	4b52      	ldr	r3, [pc, #328]	; (800439c <HAL_GPIO_Init+0x2c0>)
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	4a51      	ldr	r2, [pc, #324]	; (800439c <HAL_GPIO_Init+0x2c0>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6613      	str	r3, [r2, #96]	; 0x60
 800425c:	4b4f      	ldr	r3, [pc, #316]	; (800439c <HAL_GPIO_Init+0x2c0>)
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004268:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_GPIO_Init+0x2c4>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	3302      	adds	r3, #2
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004292:	d00d      	beq.n	80042b0 <HAL_GPIO_Init+0x1d4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a43      	ldr	r2, [pc, #268]	; (80043a4 <HAL_GPIO_Init+0x2c8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <HAL_GPIO_Init+0x1d0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a42      	ldr	r2, [pc, #264]	; (80043a8 <HAL_GPIO_Init+0x2cc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_GPIO_Init+0x1cc>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e004      	b.n	80042b2 <HAL_GPIO_Init+0x1d6>
 80042a8:	2307      	movs	r3, #7
 80042aa:	e002      	b.n	80042b2 <HAL_GPIO_Init+0x1d6>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_GPIO_Init+0x1d6>
 80042b0:	2300      	movs	r3, #0
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	f002 0203 	and.w	r2, r2, #3
 80042b8:	0092      	lsls	r2, r2, #2
 80042ba:	4093      	lsls	r3, r2
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042c2:	4937      	ldr	r1, [pc, #220]	; (80043a0 <HAL_GPIO_Init+0x2c4>)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43db      	mvns	r3, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	43db      	mvns	r3, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800431e:	4a23      	ldr	r2, [pc, #140]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f aeaf 	bne.w	80040ec <HAL_GPIO_Init+0x10>
  }
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40021000 	.word	0x40021000
 80043a0:	40010000 	.word	0x40010000
 80043a4:	48000400 	.word	0x48000400
 80043a8:	48000800 	.word	0x48000800
 80043ac:	40010400 	.word	0x40010400

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043cc:	e002      	b.n	80043d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4013      	ands	r3, r2
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43d9      	mvns	r1, r3
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	400b      	ands	r3, r1
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f806 	bl	8004444 <HAL_GPIO_EXTI_Callback>
  }
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40010400 	.word	0x40010400

08004444 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_PWREx_GetVoltageRange+0x18>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40007000 	.word	0x40007000

08004478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004486:	d130      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004488:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d038      	beq.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2232      	movs	r2, #50	; 0x32
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0c9b      	lsrs	r3, r3, #18
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044bc:	e002      	b.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d102      	bne.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f2      	bne.n	80044be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e4:	d110      	bne.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e00f      	b.n	800450a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f6:	d007      	beq.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004500:	4a05      	ldr	r2, [pc, #20]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40007000 	.word	0x40007000
 800451c:	20000000 	.word	0x20000000
 8004520:	431bde83 	.word	0x431bde83

08004524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f000 bc02 	b.w	8004d3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004538:	4b96      	ldr	r3, [pc, #600]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004542:	4b94      	ldr	r3, [pc, #592]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80e4 	beq.w	8004722 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_RCC_OscConfig+0x4c>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	f040 808b 	bne.w	800467e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 8087 	bne.w	800467e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004570:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_OscConfig+0x64>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e3d9      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_RCC_OscConfig+0x7e>
 8004598:	4b7e      	ldr	r3, [pc, #504]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a0:	e005      	b.n	80045ae <HAL_RCC_OscConfig+0x8a>
 80045a2:	4b7c      	ldr	r3, [pc, #496]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d223      	bcs.n	80045fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fdbe 	bl	8005138 <RCC_SetFlashLatencyFromMSIRange>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e3ba      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c6:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a72      	ldr	r2, [pc, #456]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045cc:	f043 0308 	orr.w	r3, r3, #8
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b70      	ldr	r3, [pc, #448]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	496d      	ldr	r1, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e4:	4b6b      	ldr	r3, [pc, #428]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	4968      	ldr	r1, [pc, #416]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	e025      	b.n	8004646 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045fa:	4b66      	ldr	r3, [pc, #408]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	4960      	ldr	r1, [pc, #384]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004618:	4b5e      	ldr	r3, [pc, #376]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	495b      	ldr	r1, [pc, #364]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fd7e 	bl	8005138 <RCC_SetFlashLatencyFromMSIRange>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e37a      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004646:	f000 fc81 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 800464a:	4602      	mov	r2, r0
 800464c:	4b51      	ldr	r3, [pc, #324]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4950      	ldr	r1, [pc, #320]	; (8004798 <HAL_RCC_OscConfig+0x274>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	4a4e      	ldr	r2, [pc, #312]	; (800479c <HAL_RCC_OscConfig+0x278>)
 8004664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004666:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd fa9c 	bl	8001ba8 <HAL_InitTick>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d052      	beq.n	8004720 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	e35e      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d032      	beq.n	80046ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004686:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a42      	ldr	r2, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004692:	f7fd fd07 	bl	80020a4 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469a:	f7fd fd03 	bl	80020a4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e347      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046ac:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a35      	ldr	r2, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046be:	f043 0308 	orr.w	r3, r3, #8
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4930      	ldr	r1, [pc, #192]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	492b      	ldr	r1, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
 80046ea:	e01a      	b.n	8004722 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046ec:	4b29      	ldr	r3, [pc, #164]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a28      	ldr	r2, [pc, #160]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f8:	f7fd fcd4 	bl	80020a4 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004700:	f7fd fcd0 	bl	80020a4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e314      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x1dc>
 800471e:	e000      	b.n	8004722 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d073      	beq.n	8004816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x21c>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d10e      	bne.n	8004758 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d10b      	bne.n	8004758 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d063      	beq.n	8004814 <HAL_RCC_OscConfig+0x2f0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d15f      	bne.n	8004814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e2f1      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x24c>
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e025      	b.n	80047bc <HAL_RCC_OscConfig+0x298>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004778:	d114      	bne.n	80047a4 <HAL_RCC_OscConfig+0x280>
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a02      	ldr	r2, [pc, #8]	; (8004794 <HAL_RCC_OscConfig+0x270>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e013      	b.n	80047bc <HAL_RCC_OscConfig+0x298>
 8004794:	40021000 	.word	0x40021000
 8004798:	0800caf0 	.word	0x0800caf0
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004
 80047a4:	4ba0      	ldr	r3, [pc, #640]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a9f      	ldr	r2, [pc, #636]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b9d      	ldr	r3, [pc, #628]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a9c      	ldr	r2, [pc, #624]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fc6e 	bl	80020a4 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fd fc6a 	bl	80020a4 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e2ae      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047de:	4b92      	ldr	r3, [pc, #584]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x2a8>
 80047ea:	e014      	b.n	8004816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd fc5a 	bl	80020a4 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fd fc56 	bl	80020a4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e29a      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004806:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2d0>
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d060      	beq.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x310>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d119      	bne.n	8004862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d116      	bne.n	8004862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004834:	4b7c      	ldr	r3, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_OscConfig+0x328>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e277      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4b76      	ldr	r3, [pc, #472]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	4973      	ldr	r1, [pc, #460]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004860:	e040      	b.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d023      	beq.n	80048b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800486a:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6e      	ldr	r2, [pc, #440]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd fc15 	bl	80020a4 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487e:	f7fd fc11 	bl	80020a4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e255      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004890:	4b65      	ldr	r3, [pc, #404]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b62      	ldr	r3, [pc, #392]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	495f      	ldr	r1, [pc, #380]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	e018      	b.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b2:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a5c      	ldr	r2, [pc, #368]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80048b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd fbf1 	bl	80020a4 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fd fbed 	bl	80020a4 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e231      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d03c      	beq.n	800496a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01c      	beq.n	8004932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f8:	4b4b      	ldr	r3, [pc, #300]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fd fbcc 	bl	80020a4 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004910:	f7fd fbc8 	bl	80020a4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e20c      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ef      	beq.n	8004910 <HAL_RCC_OscConfig+0x3ec>
 8004930:	e01b      	b.n	800496a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004938:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fd fbaf 	bl	80020a4 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7fd fbab 	bl	80020a4 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e1ef      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ef      	bne.n	800494a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80a6 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004978:	2300      	movs	r3, #0
 800497a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800497c:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004992:	6593      	str	r3, [r2, #88]	; 0x58
 8004994:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a0:	2301      	movs	r3, #1
 80049a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCC_OscConfig+0x508>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d118      	bne.n	80049e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <HAL_RCC_OscConfig+0x508>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_RCC_OscConfig+0x508>)
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049bc:	f7fd fb72 	bl	80020a4 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c4:	f7fd fb6e 	bl	80020a4 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e1b2      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <HAL_RCC_OscConfig+0x508>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d108      	bne.n	80049fc <HAL_RCC_OscConfig+0x4d8>
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049fa:	e029      	b.n	8004a50 <HAL_RCC_OscConfig+0x52c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	d115      	bne.n	8004a30 <HAL_RCC_OscConfig+0x50c>
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <HAL_RCC_OscConfig+0x504>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a24:	e014      	b.n	8004a50 <HAL_RCC_OscConfig+0x52c>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
 8004a30:	4b9a      	ldr	r3, [pc, #616]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	4a99      	ldr	r2, [pc, #612]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a40:	4b96      	ldr	r3, [pc, #600]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a95      	ldr	r2, [pc, #596]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004a48:	f023 0304 	bic.w	r3, r3, #4
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fb24 	bl	80020a4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd fb20 	bl	80020a4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e162      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a76:	4b89      	ldr	r3, [pc, #548]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ed      	beq.n	8004a60 <HAL_RCC_OscConfig+0x53c>
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7fd fb0d 	bl	80020a4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fd fb09 	bl	80020a4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e14b      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa4:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ed      	bne.n	8004a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab8:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	4a77      	ldr	r2, [pc, #476]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d03c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ad8:	4b70      	ldr	r3, [pc, #448]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ade:	4a6f      	ldr	r2, [pc, #444]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd fadc 	bl	80020a4 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af0:	f7fd fad8 	bl	80020a4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e11c      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b02:	4b66      	ldr	r3, [pc, #408]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ef      	beq.n	8004af0 <HAL_RCC_OscConfig+0x5cc>
 8004b10:	e01b      	b.n	8004b4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b12:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b18:	4a60      	ldr	r2, [pc, #384]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fd fabf 	bl	80020a4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2a:	f7fd fabb 	bl	80020a4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0ff      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b3c:	4b57      	ldr	r3, [pc, #348]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ef      	bne.n	8004b2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80f3 	beq.w	8004d3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f040 80c9 	bne.w	8004cf0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b5e:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f003 0203 	and.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d12c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d123      	bne.n	8004bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d11b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d113      	bne.n	8004bcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d06b      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d062      	beq.n	8004c98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bd2:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0ac      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004be2:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bee:	f7fd fa59 	bl	80020a4 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fd fa55 	bl	80020a4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e099      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <HAL_RCC_OscConfig+0x77c>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c24:	3a01      	subs	r2, #1
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c2e:	0212      	lsls	r2, r2, #8
 8004c30:	4311      	orrs	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c36:	0852      	lsrs	r2, r2, #1
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	0552      	lsls	r2, r2, #21
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c42:	0852      	lsrs	r2, r2, #1
 8004c44:	3a01      	subs	r2, #1
 8004c46:	0652      	lsls	r2, r2, #25
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4e:	06d2      	lsls	r2, r2, #27
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4912      	ldr	r1, [pc, #72]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c70:	f7fd fa18 	bl	80020a4 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fd fa14 	bl	80020a4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c96:	e050      	b.n	8004d3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e04f      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca4:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d144      	bne.n	8004d3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cbc:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cc8:	f7fd f9ec 	bl	80020a4 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd f9e8 	bl	80020a4 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e02c      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x7ac>
 8004cee:	e024      	b.n	8004d3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d01f      	beq.n	8004d36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd f9cf 	bl	80020a4 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd f9cb 	bl	80020a4 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4905      	ldr	r1, [pc, #20]	; (8004d44 <HAL_RCC_OscConfig+0x820>)
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCC_OscConfig+0x824>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
 8004d34:	e001      	b.n	8004d3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	feeefffc 	.word	0xfeeefffc

08004d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0e7      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d60:	4b75      	ldr	r3, [pc, #468]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d910      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b72      	ldr	r3, [pc, #456]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 0207 	bic.w	r2, r3, #7
 8004d76:	4970      	ldr	r1, [pc, #448]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b6e      	ldr	r3, [pc, #440]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cf      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d010      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d908      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4960      	ldr	r1, [pc, #384]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04c      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d121      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0a6      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dea:	4b54      	ldr	r3, [pc, #336]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e09a      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e08e      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e086      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e22:	4b46      	ldr	r3, [pc, #280]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4943      	ldr	r1, [pc, #268]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e34:	f7fd f936 	bl	80020a4 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fd f932 	bl	80020a4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e06e      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 020c 	and.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1eb      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d208      	bcs.n	8004e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	492b      	ldr	r1, [pc, #172]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d210      	bcs.n	8004ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 0207 	bic.w	r2, r3, #7
 8004ea8:	4923      	ldr	r1, [pc, #140]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_ClockConfig+0x1ec>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e036      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4918      	ldr	r1, [pc, #96]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eec:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4910      	ldr	r1, [pc, #64]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f00:	f000 f824 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <HAL_RCC_ClockConfig+0x1f0>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	490b      	ldr	r1, [pc, #44]	; (8004f40 <HAL_RCC_ClockConfig+0x1f4>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1fc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fc fe3f 	bl	8001ba8 <HAL_InitTick>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	0800caf0 	.word	0x0800caf0
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000004 	.word	0x20000004

08004f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	; 0x24
 8004f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f64:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0x34>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d121      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11e      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f80:	4b34      	ldr	r3, [pc, #208]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f8c:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e005      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f9c:	4b2d      	ldr	r3, [pc, #180]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d102      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e004      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fd0:	4b23      	ldr	r3, [pc, #140]	; (8005060 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d134      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ff0:	e005      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ff4:	617b      	str	r3, [r7, #20]
      break;
 8004ff6:	e005      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ffa:	617b      	str	r3, [r7, #20]
      break;
 8004ffc:	e002      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	617b      	str	r3, [r7, #20]
      break;
 8005002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	3301      	adds	r3, #1
 8005010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	fb03 f202 	mul.w	r2, r3, r2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_GetSysClockFreq+0x108>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	0e5b      	lsrs	r3, r3, #25
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	3301      	adds	r3, #1
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005044:	69bb      	ldr	r3, [r7, #24]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000
 8005058:	0800cb08 	.word	0x0800cb08
 800505c:	00f42400 	.word	0x00f42400
 8005060:	007a1200 	.word	0x007a1200

08005064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4904      	ldr	r1, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	0800cb00 	.word	0x0800cb00

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050ac:	f7ff ffda 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0adb      	lsrs	r3, r3, #11
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	0800cb00 	.word	0x0800cb00

080050d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	220f      	movs	r2, #15
 80050e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_GetClockConfig+0x5c>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0203 	and.w	r2, r3, #3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCC_GetClockConfig+0x5c>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <HAL_RCC_GetClockConfig+0x5c>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_GetClockConfig+0x5c>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	08db      	lsrs	r3, r3, #3
 800510e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <HAL_RCC_GetClockConfig+0x60>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0207 	and.w	r2, r3, #7
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	40022000 	.word	0x40022000

08005138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005144:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005150:	f7ff f984 	bl	800445c <HAL_PWREx_GetVoltageRange>
 8005154:	6178      	str	r0, [r7, #20]
 8005156:	e014      	b.n	8005182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6593      	str	r3, [r2, #88]	; 0x58
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005170:	f7ff f974 	bl	800445c <HAL_PWREx_GetVoltageRange>
 8005174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005176:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005188:	d10b      	bne.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d919      	bls.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2ba0      	cmp	r3, #160	; 0xa0
 8005194:	d902      	bls.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005196:	2302      	movs	r3, #2
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e013      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800519c:	2301      	movs	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e010      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d902      	bls.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051a8:	2303      	movs	r3, #3
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e00a      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d102      	bne.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051b4:	2302      	movs	r3, #2
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e004      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b70      	cmp	r3, #112	; 0x70
 80051be:	d101      	bne.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c0:	2301      	movs	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 0207 	bic.w	r2, r3, #7
 80051cc:	4909      	ldr	r1, [pc, #36]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40022000 	.word	0x40022000

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005200:	2300      	movs	r3, #0
 8005202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	2b00      	cmp	r3, #0
 8005212:	d031      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800521c:	d01a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800521e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005222:	d814      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800522c:	d10f      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800522e:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800523a:	e00c      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9ce 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	74fb      	strb	r3, [r7, #19]
      break;
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800525c:	4b51      	ldr	r3, [pc, #324]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	494e      	ldr	r1, [pc, #312]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005272:	e001      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 809e 	beq.w	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800528a:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a0:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052aa:	6593      	str	r3, [r2, #88]	; 0x58
 80052ac:	4b3d      	ldr	r3, [pc, #244]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b8:	2301      	movs	r3, #1
 80052ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a39      	ldr	r2, [pc, #228]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c8:	f7fc feec 	bl	80020a4 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ce:	e009      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d0:	f7fc fee8 	bl	80020a4 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	74fb      	strb	r3, [r7, #19]
        break;
 80052e2:	e005      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052e4:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d15a      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052f6:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	429a      	cmp	r2, r3
 8005310:	d019      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800531e:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800532e:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800533e:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fc fea8 	bl	80020a4 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	e00b      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fc fea4 	bl	80020a4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d902      	bls.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	74fb      	strb	r3, [r7, #19]
            break;
 800536e:	e006      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ec      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005384:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	4904      	ldr	r1, [pc, #16]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800539a:	e009      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
 80053a0:	e006      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053b0:	7c7b      	ldrb	r3, [r7, #17]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b6:	4b8a      	ldr	r3, [pc, #552]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	4a89      	ldr	r2, [pc, #548]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ce:	4b84      	ldr	r3, [pc, #528]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f023 0203 	bic.w	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4980      	ldr	r1, [pc, #512]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053f0:	4b7b      	ldr	r3, [pc, #492]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 020c 	bic.w	r2, r3, #12
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	4978      	ldr	r1, [pc, #480]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005412:	4b73      	ldr	r3, [pc, #460]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	496f      	ldr	r1, [pc, #444]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005434:	4b6a      	ldr	r3, [pc, #424]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005442:	4967      	ldr	r1, [pc, #412]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005456:	4b62      	ldr	r3, [pc, #392]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	495e      	ldr	r1, [pc, #376]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4956      	ldr	r1, [pc, #344]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800549a:	4b51      	ldr	r3, [pc, #324]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	494d      	ldr	r1, [pc, #308]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d028      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054bc:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	4945      	ldr	r1, [pc, #276]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e011      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2101      	movs	r1, #1
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f872 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d028      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	492d      	ldr	r1, [pc, #180]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553a:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005544:	60d3      	str	r3, [r2, #12]
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f843 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01c      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005586:	4916      	ldr	r1, [pc, #88]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005596:	d10c      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f820 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000

080055e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055f2:	4b74      	ldr	r3, [pc, #464]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055fe:	4b71      	ldr	r3, [pc, #452]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
       ||
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005616:	4b6b      	ldr	r3, [pc, #428]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
       ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d047      	beq.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	e044      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d018      	beq.n	800566a <RCCEx_PLLSAI1_Config+0x86>
 8005638:	2b03      	cmp	r3, #3
 800563a:	d825      	bhi.n	8005688 <RCCEx_PLLSAI1_Config+0xa4>
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <RCCEx_PLLSAI1_Config+0x62>
 8005640:	2b02      	cmp	r3, #2
 8005642:	d009      	beq.n	8005658 <RCCEx_PLLSAI1_Config+0x74>
 8005644:	e020      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11d      	bne.n	800568e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005656:	e01a      	b.n	800568e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005658:	4b5a      	ldr	r3, [pc, #360]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005668:	e013      	b.n	8005692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800566a:	4b56      	ldr	r3, [pc, #344]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005676:	4b53      	ldr	r3, [pc, #332]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005686:	e006      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e004      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005696:	bf00      	nop
    }

    if(status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	430b      	orrs	r3, r1
 80056b4:	4943      	ldr	r1, [pc, #268]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d17c      	bne.n	80057ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056c0:	4b40      	ldr	r3, [pc, #256]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a3f      	ldr	r2, [pc, #252]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056cc:	f7fc fcea 	bl	80020a4 <HAL_GetTick>
 80056d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d2:	e009      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d4:	f7fc fce6 	bl	80020a4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d902      	bls.n	80056e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	73fb      	strb	r3, [r7, #15]
        break;
 80056e6:	e005      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056e8:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ef      	bne.n	80056d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d15f      	bne.n	80057ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d110      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005700:	4b30      	ldr	r3, [pc, #192]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	0211      	lsls	r1, r2, #8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	06d2      	lsls	r2, r2, #27
 8005718:	430a      	orrs	r2, r1
 800571a:	492a      	ldr	r1, [pc, #168]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571c:	4313      	orrs	r3, r2
 800571e:	610b      	str	r3, [r1, #16]
 8005720:	e027      	b.n	8005772 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d112      	bne.n	800574e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005728:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6892      	ldr	r2, [r2, #8]
 8005738:	0211      	lsls	r1, r2, #8
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6912      	ldr	r2, [r2, #16]
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	3a01      	subs	r2, #1
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	430a      	orrs	r2, r1
 8005746:	491f      	ldr	r1, [pc, #124]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005748:	4313      	orrs	r3, r2
 800574a:	610b      	str	r3, [r1, #16]
 800574c:	e011      	b.n	8005772 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6892      	ldr	r2, [r2, #8]
 800575e:	0211      	lsls	r1, r2, #8
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6952      	ldr	r2, [r2, #20]
 8005764:	0852      	lsrs	r2, r2, #1
 8005766:	3a01      	subs	r2, #1
 8005768:	0652      	lsls	r2, r2, #25
 800576a:	430a      	orrs	r2, r1
 800576c:	4915      	ldr	r1, [pc, #84]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800577c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fc fc91 	bl	80020a4 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005784:	e009      	b.n	800579a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005786:	f7fc fc8d 	bl	80020a4 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d902      	bls.n	800579a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	73fb      	strb	r3, [r7, #15]
          break;
 8005798:	e005      	b.n	80057a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ef      	beq.n	8005786 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	4903      	ldr	r1, [pc, #12]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000

080057c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e049      	b.n	800586e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f841 	bl	8005876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 f9be 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e03b      	b.n	800591c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <HAL_TIM_Base_Start_IT+0x9c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x4e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d004      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x4e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a15      	ldr	r2, [pc, #84]	; (800592c <HAL_TIM_Base_Start_IT+0xa0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d115      	bne.n	8005906 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_TIM_Base_Start_IT+0xa4>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d015      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x8c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d011      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	e008      	b.n	8005918 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e000      	b.n	800591a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40014000 	.word	0x40014000
 8005930:	00010007 	.word	0x00010007

08005934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0202 	mvn.w	r2, #2
 8005968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8e4 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8d6 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8e7 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0204 	mvn.w	r2, #4
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8be 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b0 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8c1 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d020      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0208 	mvn.w	r2, #8
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f898 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f88a 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f89b 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d020      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01b      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0210 	mvn.w	r2, #16
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2208      	movs	r2, #8
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f872 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f864 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f875 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00c      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0201 	mvn.w	r2, #1
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb feea 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8d0 	bl	8005c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8c8 	bl	8005c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f834 	bl	8005b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0220 	mvn.w	r2, #32
 8005b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f890 	bl	8005c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <TIM_Base_SetConfig+0xbc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0x20>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d108      	bne.n	8005bba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <TIM_Base_SetConfig+0xbc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <TIM_Base_SetConfig+0x52>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d007      	beq.n	8005bda <TIM_Base_SetConfig+0x52>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <TIM_Base_SetConfig+0xc0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_Base_SetConfig+0x52>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <TIM_Base_SetConfig+0xc4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d108      	bne.n	8005bec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <TIM_Base_SetConfig+0xbc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0xa0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <TIM_Base_SetConfig+0xc0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0xa0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <TIM_Base_SetConfig+0xc4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	615a      	str	r2, [r3, #20]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400

08005c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e040      	b.n	8005d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb ff22 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	; 0x24
 8005cb8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fade 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8af 	bl	8005e3c <UART_SetConfig>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01b      	b.n	8005d20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb5d 	bl	80063d8 <UART_CheckIdleState>
 8005d1e:	4603      	mov	r3, r0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d178      	bne.n	8005e32 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_UART_Transmit+0x24>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e071      	b.n	8005e34 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2221      	movs	r2, #33	; 0x21
 8005d5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d5e:	f7fc f9a1 	bl	80020a4 <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	d108      	bne.n	8005d90 <HAL_UART_Transmit+0x68>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	e003      	b.n	8005d98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d98:	e030      	b.n	8005dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fbbf 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e03c      	b.n	8005e34 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dcc:	b292      	uxth	r2, r2
 8005dce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	e008      	b.n	8005dea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	b292      	uxth	r2, r2
 8005de2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	3301      	adds	r3, #1
 8005de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1c8      	bne.n	8005d9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2140      	movs	r1, #64	; 0x40
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fb88 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e005      	b.n	8005e34 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b08a      	sub	sp, #40	; 0x28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4bb4      	ldr	r3, [pc, #720]	; (800613c <UART_SetConfig+0x300>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4aa9      	ldr	r2, [pc, #676]	; (8006140 <UART_SetConfig+0x304>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4aa0      	ldr	r2, [pc, #640]	; (8006144 <UART_SetConfig+0x308>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d126      	bne.n	8005f14 <UART_SetConfig+0xd8>
 8005ec6:	4ba0      	ldr	r3, [pc, #640]	; (8006148 <UART_SetConfig+0x30c>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d81b      	bhi.n	8005f0c <UART_SetConfig+0xd0>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0xa0>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e080      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e07c      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e078      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e074      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e070      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a8c      	ldr	r2, [pc, #560]	; (800614c <UART_SetConfig+0x310>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d138      	bne.n	8005f90 <UART_SetConfig+0x154>
 8005f1e:	4b8a      	ldr	r3, [pc, #552]	; (8006148 <UART_SetConfig+0x30c>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d82d      	bhi.n	8005f88 <UART_SetConfig+0x14c>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xf8>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f71 	.word	0x08005f71
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e042      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e03e      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e03a      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e036      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e032      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6a      	ldr	r2, [pc, #424]	; (8006140 <UART_SetConfig+0x304>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d12a      	bne.n	8005ff0 <UART_SetConfig+0x1b4>
 8005f9a:	4b6b      	ldr	r3, [pc, #428]	; (8006148 <UART_SetConfig+0x30c>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa8:	d01a      	beq.n	8005fe0 <UART_SetConfig+0x1a4>
 8005faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fae:	d81b      	bhi.n	8005fe8 <UART_SetConfig+0x1ac>
 8005fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb4:	d00c      	beq.n	8005fd0 <UART_SetConfig+0x194>
 8005fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fba:	d815      	bhi.n	8005fe8 <UART_SetConfig+0x1ac>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <UART_SetConfig+0x18c>
 8005fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc4:	d008      	beq.n	8005fd8 <UART_SetConfig+0x19c>
 8005fc6:	e00f      	b.n	8005fe8 <UART_SetConfig+0x1ac>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e012      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e00e      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e00a      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e006      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e002      	b.n	8005ff6 <UART_SetConfig+0x1ba>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a51      	ldr	r2, [pc, #324]	; (8006140 <UART_SetConfig+0x304>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d17a      	bne.n	80060f6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006004:	2b08      	cmp	r3, #8
 8006006:	d824      	bhi.n	8006052 <UART_SetConfig+0x216>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <UART_SetConfig+0x1d4>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006035 	.word	0x08006035
 8006014:	08006053 	.word	0x08006053
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006053 	.word	0x08006053
 8006020:	08006043 	.word	0x08006043
 8006024:	08006053 	.word	0x08006053
 8006028:	08006053 	.word	0x08006053
 800602c:	08006053 	.word	0x08006053
 8006030:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7ff f822 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8006038:	61f8      	str	r0, [r7, #28]
        break;
 800603a:	e010      	b.n	800605e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b44      	ldr	r3, [pc, #272]	; (8006150 <UART_SetConfig+0x314>)
 800603e:	61fb      	str	r3, [r7, #28]
        break;
 8006040:	e00d      	b.n	800605e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe ff83 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8006046:	61f8      	str	r0, [r7, #28]
        break;
 8006048:	e009      	b.n	800605e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	61fb      	str	r3, [r7, #28]
        break;
 8006050:	e005      	b.n	800605e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800605c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8107 	beq.w	8006274 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	429a      	cmp	r2, r3
 8006074:	d305      	bcc.n	8006082 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	429a      	cmp	r2, r3
 8006080:	d903      	bls.n	800608a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006088:	e0f4      	b.n	8006274 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2200      	movs	r2, #0
 800608e:	461c      	mov	r4, r3
 8006090:	4615      	mov	r5, r2
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	022b      	lsls	r3, r5, #8
 800609c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060a0:	0222      	lsls	r2, r4, #8
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6849      	ldr	r1, [r1, #4]
 80060a6:	0849      	lsrs	r1, r1, #1
 80060a8:	2000      	movs	r0, #0
 80060aa:	4688      	mov	r8, r1
 80060ac:	4681      	mov	r9, r0
 80060ae:	eb12 0a08 	adds.w	sl, r2, r8
 80060b2:	eb43 0b09 	adc.w	fp, r3, r9
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c4:	4650      	mov	r0, sl
 80060c6:	4659      	mov	r1, fp
 80060c8:	f7fa fd6e 	bl	8000ba8 <__aeabi_uldivmod>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4613      	mov	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060da:	d308      	bcc.n	80060ee <UART_SetConfig+0x2b2>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e2:	d204      	bcs.n	80060ee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	e0c2      	b.n	8006274 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060f4:	e0be      	b.n	8006274 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	d16a      	bne.n	80061d6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006104:	2b08      	cmp	r3, #8
 8006106:	d834      	bhi.n	8006172 <UART_SetConfig+0x336>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0x2d4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006135 	.word	0x08006135
 8006114:	08006155 	.word	0x08006155
 8006118:	0800615d 	.word	0x0800615d
 800611c:	08006173 	.word	0x08006173
 8006120:	08006163 	.word	0x08006163
 8006124:	08006173 	.word	0x08006173
 8006128:	08006173 	.word	0x08006173
 800612c:	08006173 	.word	0x08006173
 8006130:	0800616b 	.word	0x0800616b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006134:	f7fe ffa2 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8006138:	61f8      	str	r0, [r7, #28]
        break;
 800613a:	e020      	b.n	800617e <UART_SetConfig+0x342>
 800613c:	efff69f3 	.word	0xefff69f3
 8006140:	40008000 	.word	0x40008000
 8006144:	40013800 	.word	0x40013800
 8006148:	40021000 	.word	0x40021000
 800614c:	40004400 	.word	0x40004400
 8006150:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7fe ffa8 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006158:	61f8      	str	r0, [r7, #28]
        break;
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800615c:	4b4c      	ldr	r3, [pc, #304]	; (8006290 <UART_SetConfig+0x454>)
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e00d      	b.n	800617e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006162:	f7fe fef3 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8006166:	61f8      	str	r0, [r7, #28]
        break;
 8006168:	e009      	b.n	800617e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e005      	b.n	800617e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800617c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d077      	beq.n	8006274 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005a      	lsls	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d916      	bls.n	80061ce <UART_SetConfig+0x392>
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a6:	d212      	bcs.n	80061ce <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f023 030f 	bic.w	r3, r3, #15
 80061b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	b29a      	uxth	r2, r3
 80061be:	8afb      	ldrh	r3, [r7, #22]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	8afa      	ldrh	r2, [r7, #22]
 80061ca:	60da      	str	r2, [r3, #12]
 80061cc:	e052      	b.n	8006274 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061d4:	e04e      	b.n	8006274 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d827      	bhi.n	800622e <UART_SetConfig+0x3f2>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x3a8>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	0800621f 	.word	0x0800621f
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fe ff38 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 800620c:	61f8      	str	r0, [r7, #28]
        break;
 800620e:	e014      	b.n	800623a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fe ff4a 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e010      	b.n	800623a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <UART_SetConfig+0x454>)
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e00d      	b.n	800623a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7fe fe95 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8006222:	61f8      	str	r0, [r7, #28]
        break;
 8006224:	e009      	b.n	800623a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e005      	b.n	800623a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006238:	bf00      	nop
    }

    if (pclk != 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d019      	beq.n	8006274 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	085a      	lsrs	r2, r3, #1
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	441a      	add	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d909      	bls.n	800626e <UART_SetConfig+0x432>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d205      	bcs.n	800626e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e002      	b.n	8006274 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628e:	bf00      	nop
 8006290:	00f42400 	.word	0x00f42400

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b098      	sub	sp, #96	; 0x60
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e8:	f7fb fe5c 	bl	80020a4 <HAL_GetTick>
 80063ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d12e      	bne.n	800645a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f88c 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d021      	beq.n	800645a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	653b      	str	r3, [r7, #80]	; 0x50
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
 8006436:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e062      	b.n	8006520 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b04      	cmp	r3, #4
 8006466:	d149      	bne.n	80064fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006470:	2200      	movs	r2, #0
 8006472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f856 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d03c      	beq.n	80064fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	623b      	str	r3, [r7, #32]
   return(result);
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
 80064a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	61fa      	str	r2, [r7, #28]
 80064d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	69b9      	ldr	r1, [r7, #24]
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	617b      	str	r3, [r7, #20]
   return(result);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e011      	b.n	8006520 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3758      	adds	r7, #88	; 0x58
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	e049      	b.n	80065ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d045      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fb fdaf 	bl	80020a4 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <UART_WaitOnFlagUntilTimeout+0x30>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e048      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d031      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d110      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f838 	bl	80065f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2208      	movs	r2, #8
 800658a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e029      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d111      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f81e 	bl	80065f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e00f      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d0a6      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b095      	sub	sp, #84	; 0x54
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
 800661e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	64bb      	str	r3, [r7, #72]	; 0x48
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e5      	bne.n	8006630 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	2b01      	cmp	r3, #1
 800666a:	d118      	bne.n	800669e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	60bb      	str	r3, [r7, #8]
   return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066b2:	bf00      	nop
 80066b4:	3754      	adds	r7, #84	; 0x54
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <__NVIC_SetPriority>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db0a      	blt.n	80066ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <__NVIC_SetPriority+0x4c>)
 80066da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066e8:	e00a      	b.n	8006700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4908      	ldr	r1, [pc, #32]	; (8006710 <__NVIC_SetPriority+0x50>)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3b04      	subs	r3, #4
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	440b      	add	r3, r1
 80066fe:	761a      	strb	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000e100 	.word	0xe000e100
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <SysTick_Handler+0x1c>)
 800671a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800671c:	f002 fa9a 	bl	8008c54 <xTaskGetSchedulerState>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d001      	beq.n	800672a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006726:	f003 f97f 	bl	8009a28 <xPortSysTickHandler>
  }
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000e010 	.word	0xe000e010

08006734 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006738:	2100      	movs	r1, #0
 800673a:	f06f 0004 	mvn.w	r0, #4
 800673e:	f7ff ffbf 	bl	80066c0 <__NVIC_SetPriority>
#endif
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	603b      	str	r3, [r7, #0]
  return(result);
 8006754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800675a:	f06f 0305 	mvn.w	r3, #5
 800675e:	607b      	str	r3, [r7, #4]
 8006760:	e00c      	b.n	800677c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <osKernelInitialize+0x44>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <osKernelInitialize+0x44>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006770:	2300      	movs	r3, #0
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	e002      	b.n	800677c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800677c:	687b      	ldr	r3, [r7, #4]
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	200013fc 	.word	0x200013fc

08006790 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006796:	f3ef 8305 	mrs	r3, IPSR
 800679a:	603b      	str	r3, [r7, #0]
  return(result);
 800679c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80067a2:	f06f 0305 	mvn.w	r3, #5
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e010      	b.n	80067cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <osKernelStart+0x48>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d109      	bne.n	80067c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067b2:	f7ff ffbf 	bl	8006734 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <osKernelStart+0x48>)
 80067b8:	2202      	movs	r2, #2
 80067ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067bc:	f001 fdee 	bl	800839c <vTaskStartScheduler>
      stat = osOK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e002      	b.n	80067cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067c6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067cc:	687b      	ldr	r3, [r7, #4]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200013fc 	.word	0x200013fc

080067dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af04      	add	r7, sp, #16
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ec:	f3ef 8305 	mrs	r3, IPSR
 80067f0:	617b      	str	r3, [r7, #20]
  return(result);
 80067f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d17e      	bne.n	80068f6 <osThreadNew+0x11a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d07b      	beq.n	80068f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006802:	2318      	movs	r3, #24
 8006804:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d045      	beq.n	80068a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osThreadNew+0x48>
        name = attr->name;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <osThreadNew+0x6e>
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b38      	cmp	r3, #56	; 0x38
 800683c:	d805      	bhi.n	800684a <osThreadNew+0x6e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <osThreadNew+0x72>
        return (NULL);
 800684a:	2300      	movs	r3, #0
 800684c:	e054      	b.n	80068f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <osThreadNew+0xa8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2ba7      	cmp	r3, #167	; 0xa7
 800686c:	d90a      	bls.n	8006884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <osThreadNew+0xa8>
        mem = 1;
 800687e:	2301      	movs	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e010      	b.n	80068a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10c      	bne.n	80068a6 <osThreadNew+0xca>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d108      	bne.n	80068a6 <osThreadNew+0xca>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <osThreadNew+0xca>
          mem = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e001      	b.n	80068a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d110      	bne.n	80068ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068b4:	9202      	str	r2, [sp, #8]
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f001 fb7e 	bl	8007fc4 <xTaskCreateStatic>
 80068c8:	4603      	mov	r3, r0
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	e013      	b.n	80068f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f107 0310 	add.w	r3, r7, #16
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 fbc9 	bl	800807e <xTaskCreate>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d001      	beq.n	80068f6 <osThreadNew+0x11a>
            hTask = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068f6:	693b      	ldr	r3, [r7, #16]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006908:	f3ef 8305 	mrs	r3, IPSR
 800690c:	60bb      	str	r3, [r7, #8]
  return(result);
 800690e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <osDelay+0x1c>
    stat = osErrorISR;
 8006914:	f06f 0305 	mvn.w	r3, #5
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e007      	b.n	800692c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fd04 	bl	8008334 <vTaskDelay>
    }
  }

  return (stat);
 800692c:	68fb      	ldr	r3, [r7, #12]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006936:	b580      	push	{r7, lr}
 8006938:	b08a      	sub	sp, #40	; 0x28
 800693a:	af02      	add	r7, sp, #8
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006946:	f3ef 8305 	mrs	r3, IPSR
 800694a:	613b      	str	r3, [r7, #16]
  return(result);
 800694c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800694e:	2b00      	cmp	r3, #0
 8006950:	d175      	bne.n	8006a3e <osSemaphoreNew+0x108>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d072      	beq.n	8006a3e <osSemaphoreNew+0x108>
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d86e      	bhi.n	8006a3e <osSemaphoreNew+0x108>
    mem = -1;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d015      	beq.n	8006998 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d006      	beq.n	8006982 <osSemaphoreNew+0x4c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b4f      	cmp	r3, #79	; 0x4f
 800697a:	d902      	bls.n	8006982 <osSemaphoreNew+0x4c>
        mem = 1;
 800697c:	2301      	movs	r3, #1
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e00c      	b.n	800699c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <osSemaphoreNew+0x66>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <osSemaphoreNew+0x66>
          mem = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e001      	b.n	800699c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d04c      	beq.n	8006a3e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d128      	bne.n	80069fc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10a      	bne.n	80069c6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2203      	movs	r2, #3
 80069b6:	9200      	str	r2, [sp, #0]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2100      	movs	r1, #0
 80069bc:	2001      	movs	r0, #1
 80069be:	f000 fb5b 	bl	8007078 <xQueueGenericCreateStatic>
 80069c2:	61f8      	str	r0, [r7, #28]
 80069c4:	e005      	b.n	80069d2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80069c6:	2203      	movs	r2, #3
 80069c8:	2100      	movs	r1, #0
 80069ca:	2001      	movs	r0, #1
 80069cc:	f000 fbcc 	bl	8007168 <xQueueGenericCreate>
 80069d0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d022      	beq.n	8006a1e <osSemaphoreNew+0xe8>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01f      	beq.n	8006a1e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069de:	2300      	movs	r3, #0
 80069e0:	2200      	movs	r2, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	69f8      	ldr	r0, [r7, #28]
 80069e6:	f000 fc87 	bl	80072f8 <xQueueGenericSend>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d016      	beq.n	8006a1e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80069f0:	69f8      	ldr	r0, [r7, #28]
 80069f2:	f001 f913 	bl	8007c1c <vQueueDelete>
            hSemaphore = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e010      	b.n	8006a1e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d108      	bne.n	8006a14 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fc09 	bl	8007222 <xQueueCreateCountingSemaphoreStatic>
 8006a10:	61f8      	str	r0, [r7, #28]
 8006a12:	e004      	b.n	8006a1e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fc3a 	bl	8007290 <xQueueCreateCountingSemaphore>
 8006a1c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e001      	b.n	8006a36 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	69f8      	ldr	r0, [r7, #28]
 8006a3a:	f001 fa3b 	bl	8007eb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006a60:	f06f 0303 	mvn.w	r3, #3
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	e039      	b.n	8006adc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a68:	f3ef 8305 	mrs	r3, IPSR
 8006a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d022      	beq.n	8006aba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006a7a:	f06f 0303 	mvn.w	r3, #3
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e02c      	b.n	8006adc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f001 f844 	bl	8007b1c <xQueueReceiveFromISR>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d003      	beq.n	8006aa2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006a9a:	f06f 0302 	mvn.w	r3, #2
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e01c      	b.n	8006adc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d019      	beq.n	8006adc <osSemaphoreAcquire+0x94>
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <osSemaphoreAcquire+0xa0>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	e010      	b.n	8006adc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6938      	ldr	r0, [r7, #16]
 8006abe:	f000 ff21 	bl	8007904 <xQueueSemaphoreTake>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d009      	beq.n	8006adc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006ace:	f06f 0301 	mvn.w	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e002      	b.n	8006adc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006ad6:	f06f 0302 	mvn.w	r3, #2
 8006ada:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006adc:	697b      	ldr	r3, [r7, #20]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b02:	f06f 0303 	mvn.w	r3, #3
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e02c      	b.n	8006b64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b0a:	f3ef 8305 	mrs	r3, IPSR
 8006b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01a      	beq.n	8006b4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6938      	ldr	r0, [r7, #16]
 8006b22:	f000 fd82 	bl	800762a <xQueueGiveFromISR>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006b2c:	f06f 0302 	mvn.w	r3, #2
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e017      	b.n	8006b64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <osSemaphoreRelease+0x78>
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <osSemaphoreRelease+0x84>)
 8006b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	e00b      	b.n	8006b64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f000 fbd0 	bl	80072f8 <xQueueGenericSend>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d002      	beq.n	8006b64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006b5e:	f06f 0302 	mvn.w	r3, #2
 8006b62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006b64:	697b      	ldr	r3, [r7, #20]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b84:	f3ef 8305 	mrs	r3, IPSR
 8006b88:	613b      	str	r3, [r7, #16]
  return(result);
 8006b8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d15f      	bne.n	8006c50 <osMessageQueueNew+0xdc>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05c      	beq.n	8006c50 <osMessageQueueNew+0xdc>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d059      	beq.n	8006c50 <osMessageQueueNew+0xdc>
    mem = -1;
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d029      	beq.n	8006bfc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <osMessageQueueNew+0x62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b4f      	cmp	r3, #79	; 0x4f
 8006bb6:	d90e      	bls.n	8006bd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <osMessageQueueNew+0x62>
        mem = 1;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e014      	b.n	8006c00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <osMessageQueueNew+0x8c>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d108      	bne.n	8006c00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <osMessageQueueNew+0x8c>
          mem = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e001      	b.n	8006c00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10b      	bne.n	8006c1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2100      	movs	r1, #0
 8006c10:	9100      	str	r1, [sp, #0]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa2f 	bl	8007078 <xQueueGenericCreateStatic>
 8006c1a:	61f8      	str	r0, [r7, #28]
 8006c1c:	e008      	b.n	8006c30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006c24:	2200      	movs	r2, #0
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fa9d 	bl	8007168 <xQueueGenericCreate>
 8006c2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e001      	b.n	8006c48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c48:	6979      	ldr	r1, [r7, #20]
 8006c4a:	69f8      	ldr	r0, [r7, #28]
 8006c4c:	f001 f932 	bl	8007eb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c50:	69fb      	ldr	r3, [r7, #28]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c74:	f3ef 8305 	mrs	r3, IPSR
 8006c78:	617b      	str	r3, [r7, #20]
  return(result);
 8006c7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d028      	beq.n	8006cd2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <osMessageQueuePut+0x36>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <osMessageQueuePut+0x36>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c92:	f06f 0303 	mvn.w	r3, #3
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e038      	b.n	8006d0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c9e:	f107 0210 	add.w	r2, r7, #16
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	69b8      	ldr	r0, [r7, #24]
 8006ca8:	f000 fc24 	bl	80074f4 <xQueueGenericSendFromISR>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d003      	beq.n	8006cba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006cb2:	f06f 0302 	mvn.w	r3, #2
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e028      	b.n	8006d0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d025      	beq.n	8006d0c <osMessageQueuePut+0xb0>
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <osMessageQueuePut+0xbc>)
 8006cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	e01c      	b.n	8006d0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <osMessageQueuePut+0x82>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006cde:	f06f 0303 	mvn.w	r3, #3
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	e012      	b.n	8006d0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f000 fb03 	bl	80072f8 <xQueueGenericSend>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d009      	beq.n	8006d0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006cfe:	f06f 0301 	mvn.w	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	e002      	b.n	8006d0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006d06:	f06f 0302 	mvn.w	r3, #2
 8006d0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d32:	f3ef 8305 	mrs	r3, IPSR
 8006d36:	617b      	str	r3, [r7, #20]
  return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d028      	beq.n	8006d90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <osMessageQueueGet+0x34>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <osMessageQueueGet+0x34>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006d50:	f06f 0303 	mvn.w	r3, #3
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	e037      	b.n	8006dc8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d5c:	f107 0310 	add.w	r3, r7, #16
 8006d60:	461a      	mov	r2, r3
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f000 fed9 	bl	8007b1c <xQueueReceiveFromISR>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d003      	beq.n	8006d78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006d70:	f06f 0302 	mvn.w	r3, #2
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e027      	b.n	8006dc8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d024      	beq.n	8006dc8 <osMessageQueueGet+0xac>
 8006d7e:	4b15      	ldr	r3, [pc, #84]	; (8006dd4 <osMessageQueueGet+0xb8>)
 8006d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	e01b      	b.n	8006dc8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <osMessageQueueGet+0x80>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006d9c:	f06f 0303 	mvn.w	r3, #3
 8006da0:	61fb      	str	r3, [r7, #28]
 8006da2:	e011      	b.n	8006dc8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	69b8      	ldr	r0, [r7, #24]
 8006daa:	f000 fccb 	bl	8007744 <xQueueReceive>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d009      	beq.n	8006dc8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006dba:	f06f 0301 	mvn.w	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e002      	b.n	8006dc8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006dc2:	f06f 0302 	mvn.w	r3, #2
 8006dc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8006de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <vApplicationGetIdleTaskMemory+0x30>)
 8006dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20001400 	.word	0x20001400
 8006e08:	200014a8 	.word	0x200014a8

08006e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4a07      	ldr	r2, [pc, #28]	; (8006e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	4a06      	ldr	r2, [pc, #24]	; (8006e3c <vApplicationGetTimerTaskMemory+0x30>)
 8006e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e2a:	601a      	str	r2, [r3, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	200016a8 	.word	0x200016a8
 8006e3c:	20001750 	.word	0x20001750

08006e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f103 0208 	add.w	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f103 0208 	add.w	r2, r3, #8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f103 0208 	add.w	r2, r3, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d103      	bne.n	8006f02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e00c      	b.n	8006f1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3308      	adds	r3, #8
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e002      	b.n	8006f10 <vListInsert+0x2e>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d2f6      	bcs.n	8006f0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6892      	ldr	r2, [r2, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6852      	ldr	r2, [r2, #4]
 8006f74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d103      	bne.n	8006f88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	1e5a      	subs	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fd2:	f002 fc97 	bl	8009904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	3b01      	subs	r3, #1
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	441a      	add	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d114      	bne.n	8007052 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01a      	beq.n	8007066 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3310      	adds	r3, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fc4b 	bl	80088d0 <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d012      	beq.n	8007066 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <xQueueGenericReset+0xcc>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e009      	b.n	8007066 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3310      	adds	r3, #16
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fef2 	bl	8006e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3324      	adds	r3, #36	; 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff feed 	bl	8006e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007066:	f002 fc7d 	bl	8009964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800706a:	2301      	movs	r3, #1
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08e      	sub	sp, #56	; 0x38
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <xQueueGenericCreateStatic+0x52>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <xQueueGenericCreateStatic+0x56>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <xQueueGenericCreateStatic+0x58>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	623b      	str	r3, [r7, #32]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <xQueueGenericCreateStatic+0x7e>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <xQueueGenericCreateStatic+0x82>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericCreateStatic+0x84>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	61fb      	str	r3, [r7, #28]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007116:	2350      	movs	r3, #80	; 0x50
 8007118:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d00a      	beq.n	8007136 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61bb      	str	r3, [r7, #24]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007136:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800714a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f83f 	bl	80071dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007160:	4618      	mov	r0, r3
 8007162:	3730      	adds	r7, #48	; 0x30
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xQueueGenericCreate+0x2a>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	613b      	str	r3, [r7, #16]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3350      	adds	r3, #80	; 0x50
 80071a0:	4618      	mov	r0, r3
 80071a2:	f002 fcd1 	bl	8009b48 <pvPortMalloc>
 80071a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	3350      	adds	r3, #80	; 0x50
 80071b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071c0:	79fa      	ldrb	r2, [r7, #7]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f805 	bl	80071dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071d2:	69bb      	ldr	r3, [r7, #24]
	}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800720a:	2101      	movs	r1, #1
 800720c:	69b8      	ldr	r0, [r7, #24]
 800720e:	f7ff fecb 	bl	8006fa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007222:	b580      	push	{r7, lr}
 8007224:	b08a      	sub	sp, #40	; 0x28
 8007226:	af02      	add	r7, sp, #8
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	61bb      	str	r3, [r7, #24]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	429a      	cmp	r2, r3
 8007250:	d90a      	bls.n	8007268 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	617b      	str	r3, [r7, #20]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007268:	2302      	movs	r3, #2
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ff00 	bl	8007078 <xQueueGenericCreateStatic>
 8007278:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007286:	69fb      	ldr	r3, [r7, #28]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	3720      	adds	r7, #32
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	613b      	str	r3, [r7, #16]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d90a      	bls.n	80072d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072d4:	2202      	movs	r2, #2
 80072d6:	2100      	movs	r1, #0
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff45 	bl	8007168 <xQueueGenericCreate>
 80072de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072ec:	697b      	ldr	r3, [r7, #20]
	}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08e      	sub	sp, #56	; 0x38
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xQueueGenericSend+0x32>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d103      	bne.n	8007338 <xQueueGenericSend+0x40>
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <xQueueGenericSend+0x44>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <xQueueGenericSend+0x46>
 800733c:	2300      	movs	r3, #0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <xQueueGenericSend+0x60>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d103      	bne.n	8007366 <xQueueGenericSend+0x6e>
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <xQueueGenericSend+0x72>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <xQueueGenericSend+0x74>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xQueueGenericSend+0x8e>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	623b      	str	r3, [r7, #32]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007386:	f001 fc65 	bl	8008c54 <xTaskGetSchedulerState>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <xQueueGenericSend+0x9e>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <xQueueGenericSend+0xa2>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueGenericSend+0xa4>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61fb      	str	r3, [r7, #28]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073b6:	f002 faa5 	bl	8009904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <xQueueGenericSend+0xd4>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d129      	bne.n	8007420 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d2:	f000 fc5e 	bl	8007c92 <prvCopyDataToQueue>
 80073d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fa73 	bl	80088d0 <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d013      	beq.n	8007418 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <xQueueGenericSend+0x1f8>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	e00a      	b.n	8007418 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007408:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <xQueueGenericSend+0x1f8>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007418:	f002 faa4 	bl	8009964 <vPortExitCritical>
				return pdPASS;
 800741c:	2301      	movs	r3, #1
 800741e:	e063      	b.n	80074e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007426:	f002 fa9d 	bl	8009964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800742a:	2300      	movs	r3, #0
 800742c:	e05c      	b.n	80074e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007434:	f107 0314 	add.w	r3, r7, #20
 8007438:	4618      	mov	r0, r3
 800743a:	f001 faad 	bl	8008998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007442:	f002 fa8f 	bl	8009964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007446:	f001 f819 	bl	800847c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800744a:	f002 fa5b 	bl	8009904 <vPortEnterCritical>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007454:	b25b      	sxtb	r3, r3
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d103      	bne.n	8007464 <xQueueGenericSend+0x16c>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800746a:	b25b      	sxtb	r3, r3
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d103      	bne.n	800747a <xQueueGenericSend+0x182>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800747a:	f002 fa73 	bl	8009964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800747e:	1d3a      	adds	r2, r7, #4
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	4611      	mov	r1, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f001 fa9c 	bl	80089c4 <xTaskCheckForTimeOut>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d124      	bne.n	80074dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007494:	f000 fcf5 	bl	8007e82 <prvIsQueueFull>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d018      	beq.n	80074d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	3310      	adds	r3, #16
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 f9c2 	bl	8008830 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ae:	f000 fc80 	bl	8007db2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074b2:	f000 fff1 	bl	8008498 <xTaskResumeAll>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f af7c 	bne.w	80073b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <xQueueGenericSend+0x1f8>)
 80074c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	e772      	b.n	80073b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d2:	f000 fc6e 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d6:	f000 ffdf 	bl	8008498 <xTaskResumeAll>
 80074da:	e76c      	b.n	80073b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074de:	f000 fc68 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e2:	f000 ffd9 	bl	8008498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3738      	adds	r7, #56	; 0x38
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b090      	sub	sp, #64	; 0x40
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <xQueueGenericSendFromISR+0x3c>
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <xQueueGenericSendFromISR+0x40>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <xQueueGenericSendFromISR+0x42>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d103      	bne.n	800755e <xQueueGenericSendFromISR+0x6a>
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <xQueueGenericSendFromISR+0x6e>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueGenericSendFromISR+0x70>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	623b      	str	r3, [r7, #32]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757e:	f002 faa3 	bl	8009ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007582:	f3ef 8211 	mrs	r2, BASEPRI
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61fa      	str	r2, [r7, #28]
 8007598:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800759a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <xQueueGenericSendFromISR+0xbc>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d12f      	bne.n	8007610 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075c6:	f000 fb64 	bl	8007c92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d112      	bne.n	80075fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d016      	beq.n	800760a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 f975 	bl	80088d0 <xTaskRemoveFromEventList>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00e      	beq.n	800760a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	e007      	b.n	800760a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075fe:	3301      	adds	r3, #1
 8007600:	b2db      	uxtb	r3, r3
 8007602:	b25a      	sxtb	r2, r3
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800760a:	2301      	movs	r3, #1
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800760e:	e001      	b.n	8007614 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007610:	2300      	movs	r3, #0
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800761e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007622:	4618      	mov	r0, r3
 8007624:	3740      	adds	r7, #64	; 0x40
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08e      	sub	sp, #56	; 0x38
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	623b      	str	r3, [r7, #32]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <xQueueGiveFromISR+0x48>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	61fb      	str	r3, [r7, #28]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <xQueueGiveFromISR+0x58>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <xQueueGiveFromISR+0x5c>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueGiveFromISR+0x5e>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	61bb      	str	r3, [r7, #24]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a2:	f002 fa11 	bl	8009ac8 <vPortValidateInterruptPriority>
	__asm volatile
 80076a6:	f3ef 8211 	mrs	r2, BASEPRI
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	617a      	str	r2, [r7, #20]
 80076bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d22b      	bcs.n	800772a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d112      	bne.n	8007714 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 f8e8 	bl	80088d0 <xTaskRemoveFromEventList>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00e      	beq.n	8007724 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e007      	b.n	8007724 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007718:	3301      	adds	r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	b25a      	sxtb	r2, r3
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	e001      	b.n	800772e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800772a:	2300      	movs	r3, #0
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f383 8811 	msr	BASEPRI, r3
}
 8007738:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800773c:	4618      	mov	r0, r3
 800773e:	3738      	adds	r7, #56	; 0x38
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <xQueueReceive+0x30>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	623b      	str	r3, [r7, #32]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <xQueueReceive+0x3e>
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <xQueueReceive+0x42>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <xQueueReceive+0x44>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xQueueReceive+0x5e>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	61fb      	str	r3, [r7, #28]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077a2:	f001 fa57 	bl	8008c54 <xTaskGetSchedulerState>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <xQueueReceive+0x6e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <xQueueReceive+0x72>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueReceive+0x74>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueReceive+0x8e>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	61bb      	str	r3, [r7, #24]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077d2:	f002 f897 	bl	8009904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01f      	beq.n	8007822 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e6:	f000 fabe 	bl	8007d66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	1e5a      	subs	r2, r3, #1
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00f      	beq.n	800781a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	3310      	adds	r3, #16
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 f866 	bl	80088d0 <xTaskRemoveFromEventList>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800780a:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <xQueueReceive+0x1bc>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800781a:	f002 f8a3 	bl	8009964 <vPortExitCritical>
				return pdPASS;
 800781e:	2301      	movs	r3, #1
 8007820:	e069      	b.n	80078f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007828:	f002 f89c 	bl	8009964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800782c:	2300      	movs	r3, #0
 800782e:	e062      	b.n	80078f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007836:	f107 0310 	add.w	r3, r7, #16
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f8ac 	bl	8008998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007844:	f002 f88e 	bl	8009964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007848:	f000 fe18 	bl	800847c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800784c:	f002 f85a 	bl	8009904 <vPortEnterCritical>
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007856:	b25b      	sxtb	r3, r3
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d103      	bne.n	8007866 <xQueueReceive+0x122>
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800786c:	b25b      	sxtb	r3, r3
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d103      	bne.n	800787c <xQueueReceive+0x138>
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800787c:	f002 f872 	bl	8009964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007880:	1d3a      	adds	r2, r7, #4
 8007882:	f107 0310 	add.w	r3, r7, #16
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f001 f89b 	bl	80089c4 <xTaskCheckForTimeOut>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d123      	bne.n	80078dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007896:	f000 fade 	bl	8007e56 <prvIsQueueEmpty>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ffc1 	bl	8008830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b0:	f000 fa7f 	bl	8007db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078b4:	f000 fdf0 	bl	8008498 <xTaskResumeAll>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d189      	bne.n	80077d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078be:	4b10      	ldr	r3, [pc, #64]	; (8007900 <xQueueReceive+0x1bc>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	e780      	b.n	80077d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d2:	f000 fa6e 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078d6:	f000 fddf 	bl	8008498 <xTaskResumeAll>
 80078da:	e77a      	b.n	80077d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078de:	f000 fa68 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078e2:	f000 fdd9 	bl	8008498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e8:	f000 fab5 	bl	8007e56 <prvIsQueueEmpty>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f43f af6f 	beq.w	80077d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3730      	adds	r7, #48	; 0x30
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08e      	sub	sp, #56	; 0x38
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	623b      	str	r3, [r7, #32]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	61fb      	str	r3, [r7, #28]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007954:	f001 f97e 	bl	8008c54 <xTaskGetSchedulerState>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <xQueueSemaphoreTake+0x60>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <xQueueSemaphoreTake+0x64>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <xQueueSemaphoreTake+0x66>
 8007968:	2300      	movs	r3, #0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61bb      	str	r3, [r7, #24]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007984:	f001 ffbe 	bl	8009904 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d024      	beq.n	80079de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	1e5a      	subs	r2, r3, #1
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079a4:	f001 facc 	bl	8008f40 <pvTaskIncrementMutexHeldCount>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	3310      	adds	r3, #16
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 ff88 	bl	80088d0 <xTaskRemoveFromEventList>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079c6:	4b54      	ldr	r3, [pc, #336]	; (8007b18 <xQueueSemaphoreTake+0x214>)
 80079c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079d6:	f001 ffc5 	bl	8009964 <vPortExitCritical>
				return pdPASS;
 80079da:	2301      	movs	r3, #1
 80079dc:	e097      	b.n	8007b0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d111      	bne.n	8007a08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	617b      	str	r3, [r7, #20]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a00:	f001 ffb0 	bl	8009964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e082      	b.n	8007b0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 ffc0 	bl	8008998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a1c:	f001 ffa2 	bl	8009964 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a20:	f000 fd2c 	bl	800847c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a24:	f001 ff6e 	bl	8009904 <vPortEnterCritical>
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2e:	b25b      	sxtb	r3, r3
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d103      	bne.n	8007a3e <xQueueSemaphoreTake+0x13a>
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a44:	b25b      	sxtb	r3, r3
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d103      	bne.n	8007a54 <xQueueSemaphoreTake+0x150>
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a54:	f001 ff86 	bl	8009964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a58:	463a      	mov	r2, r7
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 ffaf 	bl	80089c4 <xTaskCheckForTimeOut>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d132      	bne.n	8007ad2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a6e:	f000 f9f2 	bl	8007e56 <prvIsQueueEmpty>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d026      	beq.n	8007ac6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a80:	f001 ff40 	bl	8009904 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 f901 	bl	8008c90 <xTaskPriorityInherit>
 8007a8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a90:	f001 ff68 	bl	8009964 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	3324      	adds	r3, #36	; 0x24
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fec7 	bl	8008830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aa4:	f000 f985 	bl	8007db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007aa8:	f000 fcf6 	bl	8008498 <xTaskResumeAll>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f47f af68 	bne.w	8007984 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <xQueueSemaphoreTake+0x214>)
 8007ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	e75e      	b.n	8007984 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac8:	f000 f973 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007acc:	f000 fce4 	bl	8008498 <xTaskResumeAll>
 8007ad0:	e758      	b.n	8007984 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad4:	f000 f96d 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad8:	f000 fcde 	bl	8008498 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ade:	f000 f9ba 	bl	8007e56 <prvIsQueueEmpty>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f43f af4d 	beq.w	8007984 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00d      	beq.n	8007b0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007af0:	f001 ff08 	bl	8009904 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af6:	f000 f8b4 	bl	8007c62 <prvGetDisinheritPriorityAfterTimeout>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 f99a 	bl	8008e3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b08:	f001 ff2c 	bl	8009964 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3738      	adds	r7, #56	; 0x38
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	; 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	623b      	str	r3, [r7, #32]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <xQueueReceiveFromISR+0x3a>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <xQueueReceiveFromISR+0x3e>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <xQueueReceiveFromISR+0x40>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61fb      	str	r3, [r7, #28]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b76:	f001 ffa7 	bl	8009ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8007b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	61ba      	str	r2, [r7, #24]
 8007b90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d02f      	beq.n	8007c02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb0:	f000 f8d9 	bl	8007d66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	1e5a      	subs	r2, r3, #1
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d112      	bne.n	8007bec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	3310      	adds	r3, #16
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fe7c 	bl	80088d0 <xTaskRemoveFromEventList>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00e      	beq.n	8007bfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e007      	b.n	8007bfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	b25a      	sxtb	r2, r3
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	e001      	b.n	8007c06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f383 8811 	msr	BASEPRI, r3
}
 8007c10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3738      	adds	r7, #56	; 0x38
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <vQueueDelete+0x28>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60bb      	str	r3, [r7, #8]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f95f 	bl	8007f08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f002 f843 	bl	8009ce0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e001      	b.n	8007c84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c84:	68fb      	ldr	r3, [r7, #12]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10d      	bne.n	8007ccc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d14d      	bne.n	8007d54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 f84f 	bl	8008d60 <xTaskPriorityDisinherit>
 8007cc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
 8007cca:	e043      	b.n	8007d54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d119      	bne.n	8007d06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6858      	ldr	r0, [r3, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	f002 ff70 	bl	800abc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	441a      	add	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d32b      	bcc.n	8007d54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]
 8007d04:	e026      	b.n	8007d54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68d8      	ldr	r0, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	f002 ff56 	bl	800abc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	425b      	negs	r3, r3
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d207      	bcs.n	8007d42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	425b      	negs	r3, r3
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d105      	bne.n	8007d54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d5c:	697b      	ldr	r3, [r7, #20]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d303      	bcc.n	8007d9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68d9      	ldr	r1, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	461a      	mov	r2, r3
 8007da4:	6838      	ldr	r0, [r7, #0]
 8007da6:	f002 ff0c 	bl	800abc2 <memcpy>
	}
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dba:	f001 fda3 	bl	8009904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dc6:	e011      	b.n	8007dec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d012      	beq.n	8007df6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fd7b 	bl	80088d0 <xTaskRemoveFromEventList>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de0:	f000 fe52 	bl	8008a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dce9      	bgt.n	8007dc8 <prvUnlockQueue+0x16>
 8007df4:	e000      	b.n	8007df8 <prvUnlockQueue+0x46>
					break;
 8007df6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	22ff      	movs	r2, #255	; 0xff
 8007dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e00:	f001 fdb0 	bl	8009964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e04:	f001 fd7e 	bl	8009904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e10:	e011      	b.n	8007e36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fd56 	bl	80088d0 <xTaskRemoveFromEventList>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e2a:	f000 fe2d 	bl	8008a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dce9      	bgt.n	8007e12 <prvUnlockQueue+0x60>
 8007e3e:	e000      	b.n	8007e42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e4a:	f001 fd8b 	bl	8009964 <vPortExitCritical>
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e5e:	f001 fd51 	bl	8009904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e001      	b.n	8007e74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e74:	f001 fd76 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e8a:	f001 fd3b 	bl	8009904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d102      	bne.n	8007ea0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	e001      	b.n	8007ea4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea4:	f001 fd5e 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e014      	b.n	8007eee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	; (8007f04 <vQueueAddToRegistry+0x50>)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed0:	490c      	ldr	r1, [pc, #48]	; (8007f04 <vQueueAddToRegistry+0x50>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eda:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <vQueueAddToRegistry+0x50>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ee6:	e006      	b.n	8007ef6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b07      	cmp	r3, #7
 8007ef2:	d9e7      	bls.n	8007ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20001b50 	.word	0x20001b50

08007f08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e016      	b.n	8007f44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <vQueueUnregisterQueue+0x50>)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d10b      	bne.n	8007f3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f26:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <vQueueUnregisterQueue+0x50>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f30:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <vQueueUnregisterQueue+0x50>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	4413      	add	r3, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	605a      	str	r2, [r3, #4]
				break;
 8007f3c:	e006      	b.n	8007f4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b07      	cmp	r3, #7
 8007f48:	d9e5      	bls.n	8007f16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20001b50 	.word	0x20001b50

08007f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f6c:	f001 fcca 	bl	8009904 <vPortEnterCritical>
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d103      	bne.n	8007f86 <vQueueWaitForMessageRestricted+0x2a>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d103      	bne.n	8007f9c <vQueueWaitForMessageRestricted+0x40>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f9c:	f001 fce2 	bl	8009964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fc61 	bl	8008878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f7ff fefb 	bl	8007db2 <prvUnlockQueue>
	}
 8007fbc:	bf00      	nop
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08e      	sub	sp, #56	; 0x38
 8007fc8:	af04      	add	r7, sp, #16
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	623b      	str	r3, [r7, #32]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xTaskCreateStatic+0x46>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	61fb      	str	r3, [r7, #28]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800800a:	23a8      	movs	r3, #168	; 0xa8
 800800c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	2ba8      	cmp	r3, #168	; 0xa8
 8008012:	d00a      	beq.n	800802a <xTaskCreateStatic+0x66>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61bb      	str	r3, [r7, #24]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800802a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01e      	beq.n	8008070 <xTaskCreateStatic+0xac>
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008040:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2202      	movs	r2, #2
 8008046:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800804a:	2300      	movs	r3, #0
 800804c:	9303      	str	r3, [sp, #12]
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	9302      	str	r3, [sp, #8]
 8008052:	f107 0314 	add.w	r3, r7, #20
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f850 	bl	8008108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800806a:	f000 f8f3 	bl	8008254 <prvAddNewTaskToReadyList>
 800806e:	e001      	b.n	8008074 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008074:	697b      	ldr	r3, [r7, #20]
	}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	; 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800807e:	b580      	push	{r7, lr}
 8008080:	b08c      	sub	sp, #48	; 0x30
 8008082:	af04      	add	r7, sp, #16
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	4613      	mov	r3, r2
 800808c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fd58 	bl	8009b48 <pvPortMalloc>
 8008098:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080a0:	20a8      	movs	r0, #168	; 0xa8
 80080a2:	f001 fd51 	bl	8009b48 <pvPortMalloc>
 80080a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30
 80080b4:	e005      	b.n	80080c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f001 fe12 	bl	8009ce0 <vPortFree>
 80080bc:	e001      	b.n	80080c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d017      	beq.n	80080f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080d0:	88fa      	ldrh	r2, [r7, #6]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	9302      	str	r3, [sp, #8]
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f80e 	bl	8008108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080ec:	69f8      	ldr	r0, [r7, #28]
 80080ee:	f000 f8b1 	bl	8008254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080f2:	2301      	movs	r3, #1
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e002      	b.n	80080fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080f8:	f04f 33ff 	mov.w	r3, #4294967295
 80080fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080fe:	69bb      	ldr	r3, [r7, #24]
	}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	461a      	mov	r2, r3
 8008120:	21a5      	movs	r1, #165	; 0xa5
 8008122:	f002 fc78 	bl	800aa16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008130:	3b01      	subs	r3, #1
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <prvInitialiseNewTask+0x58>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	617b      	str	r3, [r7, #20]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01f      	beq.n	80081a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e012      	b.n	8008192 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	7819      	ldrb	r1, [r3, #0]
 8008174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	3334      	adds	r3, #52	; 0x34
 800817c:	460a      	mov	r2, r1
 800817e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b0f      	cmp	r3, #15
 8008196:	d9e9      	bls.n	800816c <prvInitialiseNewTask+0x64>
 8008198:	e000      	b.n	800819c <prvInitialiseNewTask+0x94>
			{
				break;
 800819a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a4:	e003      	b.n	80081ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	2b37      	cmp	r3, #55	; 0x37
 80081b2:	d901      	bls.n	80081b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081b4:	2337      	movs	r3, #55	; 0x37
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	2200      	movs	r2, #0
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	3304      	adds	r3, #4
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fe56 	bl	8006e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	3318      	adds	r3, #24
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fe51 	bl	8006e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	3354      	adds	r3, #84	; 0x54
 8008208:	224c      	movs	r2, #76	; 0x4c
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f002 fc02 	bl	800aa16 <memset>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <prvInitialiseNewTask+0x140>)
 8008216:	659a      	str	r2, [r3, #88]	; 0x58
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	4a0c      	ldr	r2, [pc, #48]	; (800824c <prvInitialiseNewTask+0x144>)
 800821c:	65da      	str	r2, [r3, #92]	; 0x5c
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	4a0b      	ldr	r2, [pc, #44]	; (8008250 <prvInitialiseNewTask+0x148>)
 8008222:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	69b8      	ldr	r0, [r7, #24]
 800822a:	f001 fa3f 	bl	80096ac <pxPortInitialiseStack>
 800822e:	4602      	mov	r2, r0
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008240:	bf00      	nop
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20002d9c 	.word	0x20002d9c
 800824c:	20002e04 	.word	0x20002e04
 8008250:	20002e6c 	.word	0x20002e6c

08008254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800825c:	f001 fb52 	bl	8009904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008260:	4b2d      	ldr	r3, [pc, #180]	; (8008318 <prvAddNewTaskToReadyList+0xc4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	4a2c      	ldr	r2, [pc, #176]	; (8008318 <prvAddNewTaskToReadyList+0xc4>)
 8008268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800826a:	4b2c      	ldr	r3, [pc, #176]	; (800831c <prvAddNewTaskToReadyList+0xc8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008272:	4a2a      	ldr	r2, [pc, #168]	; (800831c <prvAddNewTaskToReadyList+0xc8>)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008278:	4b27      	ldr	r3, [pc, #156]	; (8008318 <prvAddNewTaskToReadyList+0xc4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d110      	bne.n	80082a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008280:	f000 fc26 	bl	8008ad0 <prvInitialiseTaskLists>
 8008284:	e00d      	b.n	80082a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008286:	4b26      	ldr	r3, [pc, #152]	; (8008320 <prvAddNewTaskToReadyList+0xcc>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800828e:	4b23      	ldr	r3, [pc, #140]	; (800831c <prvAddNewTaskToReadyList+0xc8>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	429a      	cmp	r2, r3
 800829a:	d802      	bhi.n	80082a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800829c:	4a1f      	ldr	r2, [pc, #124]	; (800831c <prvAddNewTaskToReadyList+0xc8>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082a2:	4b20      	ldr	r3, [pc, #128]	; (8008324 <prvAddNewTaskToReadyList+0xd0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	4a1e      	ldr	r2, [pc, #120]	; (8008324 <prvAddNewTaskToReadyList+0xd0>)
 80082aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082ac:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <prvAddNewTaskToReadyList+0xd0>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <prvAddNewTaskToReadyList+0xd4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d903      	bls.n	80082c8 <prvAddNewTaskToReadyList+0x74>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	4a18      	ldr	r2, [pc, #96]	; (8008328 <prvAddNewTaskToReadyList+0xd4>)
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4a15      	ldr	r2, [pc, #84]	; (800832c <prvAddNewTaskToReadyList+0xd8>)
 80082d6:	441a      	add	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7fe fddb 	bl	8006e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082e4:	f001 fb3e 	bl	8009964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082e8:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <prvAddNewTaskToReadyList+0xcc>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00e      	beq.n	800830e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <prvAddNewTaskToReadyList+0xc8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d207      	bcs.n	800830e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <prvAddNewTaskToReadyList+0xdc>)
 8008300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20002064 	.word	0x20002064
 800831c:	20001b90 	.word	0x20001b90
 8008320:	20002070 	.word	0x20002070
 8008324:	20002080 	.word	0x20002080
 8008328:	2000206c 	.word	0x2000206c
 800832c:	20001b94 	.word	0x20001b94
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d017      	beq.n	8008376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <vTaskDelay+0x60>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <vTaskDelay+0x30>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60bb      	str	r3, [r7, #8]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008364:	f000 f88a 	bl	800847c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fdfc 	bl	8008f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008370:	f000 f892 	bl	8008498 <xTaskResumeAll>
 8008374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <vTaskDelay+0x64>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	2000208c 	.word	0x2000208c
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	; 0x28
 80083a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083aa:	463a      	mov	r2, r7
 80083ac:	1d39      	adds	r1, r7, #4
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fd10 	bl	8006dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	9202      	str	r2, [sp, #8]
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	2300      	movs	r3, #0
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	2300      	movs	r3, #0
 80083c8:	460a      	mov	r2, r1
 80083ca:	4924      	ldr	r1, [pc, #144]	; (800845c <vTaskStartScheduler+0xc0>)
 80083cc:	4824      	ldr	r0, [pc, #144]	; (8008460 <vTaskStartScheduler+0xc4>)
 80083ce:	f7ff fdf9 	bl	8007fc4 <xTaskCreateStatic>
 80083d2:	4603      	mov	r3, r0
 80083d4:	4a23      	ldr	r2, [pc, #140]	; (8008464 <vTaskStartScheduler+0xc8>)
 80083d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083d8:	4b22      	ldr	r3, [pc, #136]	; (8008464 <vTaskStartScheduler+0xc8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083e0:	2301      	movs	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e001      	b.n	80083ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d102      	bne.n	80083f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083f0:	f000 fe0e 	bl	8009010 <xTimerCreateTimerTask>
 80083f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d11b      	bne.n	8008434 <vTaskStartScheduler+0x98>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	613b      	str	r3, [r7, #16]
}
 800840e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <vTaskStartScheduler+0xcc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3354      	adds	r3, #84	; 0x54
 8008416:	4a15      	ldr	r2, [pc, #84]	; (800846c <vTaskStartScheduler+0xd0>)
 8008418:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <vTaskStartScheduler+0xd4>)
 800841c:	f04f 32ff 	mov.w	r2, #4294967295
 8008420:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008422:	4b14      	ldr	r3, [pc, #80]	; (8008474 <vTaskStartScheduler+0xd8>)
 8008424:	2201      	movs	r2, #1
 8008426:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008428:	4b13      	ldr	r3, [pc, #76]	; (8008478 <vTaskStartScheduler+0xdc>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800842e:	f001 f9c7 	bl	80097c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008432:	e00e      	b.n	8008452 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d10a      	bne.n	8008452 <vTaskStartScheduler+0xb6>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <vTaskStartScheduler+0xb4>
}
 8008452:	bf00      	nop
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	0800ca08 	.word	0x0800ca08
 8008460:	08008aa1 	.word	0x08008aa1
 8008464:	20002088 	.word	0x20002088
 8008468:	20001b90 	.word	0x20001b90
 800846c:	20000068 	.word	0x20000068
 8008470:	20002084 	.word	0x20002084
 8008474:	20002070 	.word	0x20002070
 8008478:	20002068 	.word	0x20002068

0800847c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <vTaskSuspendAll+0x18>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a03      	ldr	r2, [pc, #12]	; (8008494 <vTaskSuspendAll+0x18>)
 8008488:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800848a:	bf00      	nop
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	2000208c 	.word	0x2000208c

08008498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084a6:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <xTaskResumeAll+0x118>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	603b      	str	r3, [r7, #0]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084c4:	f001 fa1e 	bl	8009904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084c8:	4b39      	ldr	r3, [pc, #228]	; (80085b0 <xTaskResumeAll+0x118>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	4a38      	ldr	r2, [pc, #224]	; (80085b0 <xTaskResumeAll+0x118>)
 80084d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d2:	4b37      	ldr	r3, [pc, #220]	; (80085b0 <xTaskResumeAll+0x118>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d162      	bne.n	80085a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084da:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <xTaskResumeAll+0x11c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d05e      	beq.n	80085a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084e2:	e02f      	b.n	8008544 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e4:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <xTaskResumeAll+0x120>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3318      	adds	r3, #24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fd2f 	bl	8006f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fd2a 	bl	8006f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008504:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <xTaskResumeAll+0x124>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d903      	bls.n	8008514 <xTaskResumeAll+0x7c>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4a2a      	ldr	r2, [pc, #168]	; (80085bc <xTaskResumeAll+0x124>)
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <xTaskResumeAll+0x128>)
 8008522:	441a      	add	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3304      	adds	r3, #4
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7fe fcb5 	bl	8006e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <xTaskResumeAll+0x12c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	429a      	cmp	r2, r3
 800853c:	d302      	bcc.n	8008544 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800853e:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <xTaskResumeAll+0x130>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008544:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <xTaskResumeAll+0x120>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1cb      	bne.n	80084e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008552:	f000 fb5f 	bl	8008c14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008556:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <xTaskResumeAll+0x134>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d010      	beq.n	8008584 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008562:	f000 f847 	bl	80085f4 <xTaskIncrementTick>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800856c:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <xTaskResumeAll+0x130>)
 800856e:	2201      	movs	r2, #1
 8008570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3b01      	subs	r3, #1
 8008576:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f1      	bne.n	8008562 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <xTaskResumeAll+0x134>)
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008584:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <xTaskResumeAll+0x130>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008590:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <xTaskResumeAll+0x138>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085a0:	f001 f9e0 	bl	8009964 <vPortExitCritical>

	return xAlreadyYielded;
 80085a4:	68bb      	ldr	r3, [r7, #8]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	2000208c 	.word	0x2000208c
 80085b4:	20002064 	.word	0x20002064
 80085b8:	20002024 	.word	0x20002024
 80085bc:	2000206c 	.word	0x2000206c
 80085c0:	20001b94 	.word	0x20001b94
 80085c4:	20001b90 	.word	0x20001b90
 80085c8:	20002078 	.word	0x20002078
 80085cc:	20002074 	.word	0x20002074
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <xTaskGetTickCount+0x1c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085e0:	687b      	ldr	r3, [r7, #4]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20002068 	.word	0x20002068

080085f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fe:	4b4f      	ldr	r3, [pc, #316]	; (800873c <xTaskIncrementTick+0x148>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 808f 	bne.w	8008726 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008608:	4b4d      	ldr	r3, [pc, #308]	; (8008740 <xTaskIncrementTick+0x14c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008610:	4a4b      	ldr	r2, [pc, #300]	; (8008740 <xTaskIncrementTick+0x14c>)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d120      	bne.n	800865e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800861c:	4b49      	ldr	r3, [pc, #292]	; (8008744 <xTaskIncrementTick+0x150>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <xTaskIncrementTick+0x48>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	603b      	str	r3, [r7, #0]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <xTaskIncrementTick+0x46>
 800863c:	4b41      	ldr	r3, [pc, #260]	; (8008744 <xTaskIncrementTick+0x150>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	4b41      	ldr	r3, [pc, #260]	; (8008748 <xTaskIncrementTick+0x154>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a3f      	ldr	r2, [pc, #252]	; (8008744 <xTaskIncrementTick+0x150>)
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4a3f      	ldr	r2, [pc, #252]	; (8008748 <xTaskIncrementTick+0x154>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	4b3e      	ldr	r3, [pc, #248]	; (800874c <xTaskIncrementTick+0x158>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3301      	adds	r3, #1
 8008656:	4a3d      	ldr	r2, [pc, #244]	; (800874c <xTaskIncrementTick+0x158>)
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	f000 fadb 	bl	8008c14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800865e:	4b3c      	ldr	r3, [pc, #240]	; (8008750 <xTaskIncrementTick+0x15c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	429a      	cmp	r2, r3
 8008666:	d349      	bcc.n	80086fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008668:	4b36      	ldr	r3, [pc, #216]	; (8008744 <xTaskIncrementTick+0x150>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d104      	bne.n	800867c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008672:	4b37      	ldr	r3, [pc, #220]	; (8008750 <xTaskIncrementTick+0x15c>)
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	601a      	str	r2, [r3, #0]
					break;
 800867a:	e03f      	b.n	80086fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867c:	4b31      	ldr	r3, [pc, #196]	; (8008744 <xTaskIncrementTick+0x150>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	429a      	cmp	r2, r3
 8008692:	d203      	bcs.n	800869c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <xTaskIncrementTick+0x15c>)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800869a:	e02f      	b.n	80086fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3304      	adds	r3, #4
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe fc57 	bl	8006f54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	3318      	adds	r3, #24
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fc4e 	bl	8006f54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086bc:	4b25      	ldr	r3, [pc, #148]	; (8008754 <xTaskIncrementTick+0x160>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d903      	bls.n	80086cc <xTaskIncrementTick+0xd8>
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	4a22      	ldr	r2, [pc, #136]	; (8008754 <xTaskIncrementTick+0x160>)
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <xTaskIncrementTick+0x164>)
 80086da:	441a      	add	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fbd9 	bl	8006e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	4b1b      	ldr	r3, [pc, #108]	; (800875c <xTaskIncrementTick+0x168>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d3b8      	bcc.n	8008668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086f6:	2301      	movs	r3, #1
 80086f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fa:	e7b5      	b.n	8008668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <xTaskIncrementTick+0x168>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	4915      	ldr	r1, [pc, #84]	; (8008758 <xTaskIncrementTick+0x164>)
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d901      	bls.n	8008718 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008714:	2301      	movs	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <xTaskIncrementTick+0x16c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d007      	beq.n	8008730 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	e004      	b.n	8008730 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <xTaskIncrementTick+0x170>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3301      	adds	r3, #1
 800872c:	4a0d      	ldr	r2, [pc, #52]	; (8008764 <xTaskIncrementTick+0x170>)
 800872e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008730:	697b      	ldr	r3, [r7, #20]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	2000208c 	.word	0x2000208c
 8008740:	20002068 	.word	0x20002068
 8008744:	2000201c 	.word	0x2000201c
 8008748:	20002020 	.word	0x20002020
 800874c:	2000207c 	.word	0x2000207c
 8008750:	20002084 	.word	0x20002084
 8008754:	2000206c 	.word	0x2000206c
 8008758:	20001b94 	.word	0x20001b94
 800875c:	20001b90 	.word	0x20001b90
 8008760:	20002078 	.word	0x20002078
 8008764:	20002074 	.word	0x20002074

08008768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800876e:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <vTaskSwitchContext+0xb0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008776:	4b29      	ldr	r3, [pc, #164]	; (800881c <vTaskSwitchContext+0xb4>)
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800877c:	e046      	b.n	800880c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800877e:	4b27      	ldr	r3, [pc, #156]	; (800881c <vTaskSwitchContext+0xb4>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b26      	ldr	r3, [pc, #152]	; (8008820 <vTaskSwitchContext+0xb8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e010      	b.n	80087ae <vTaskSwitchContext+0x46>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	607b      	str	r3, [r7, #4]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vTaskSwitchContext+0x3e>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	491d      	ldr	r1, [pc, #116]	; (8008824 <vTaskSwitchContext+0xbc>)
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0e4      	beq.n	800878c <vTaskSwitchContext+0x24>
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a15      	ldr	r2, [pc, #84]	; (8008824 <vTaskSwitchContext+0xbc>)
 80087ce:	4413      	add	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3308      	adds	r3, #8
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d104      	bne.n	80087f2 <vTaskSwitchContext+0x8a>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4a0b      	ldr	r2, [pc, #44]	; (8008828 <vTaskSwitchContext+0xc0>)
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <vTaskSwitchContext+0xb8>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008802:	4b09      	ldr	r3, [pc, #36]	; (8008828 <vTaskSwitchContext+0xc0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3354      	adds	r3, #84	; 0x54
 8008808:	4a08      	ldr	r2, [pc, #32]	; (800882c <vTaskSwitchContext+0xc4>)
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000208c 	.word	0x2000208c
 800881c:	20002078 	.word	0x20002078
 8008820:	2000206c 	.word	0x2000206c
 8008824:	20001b94 	.word	0x20001b94
 8008828:	20001b90 	.word	0x20001b90
 800882c:	20000068 	.word	0x20000068

08008830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <vTaskPlaceOnEventList+0x44>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3318      	adds	r3, #24
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fe fb3f 	bl	8006ee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008864:	2101      	movs	r1, #1
 8008866:	6838      	ldr	r0, [r7, #0]
 8008868:	f000 fb7e 	bl	8008f68 <prvAddCurrentTaskToDelayedList>
}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20001b90 	.word	0x20001b90

08008878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	617b      	str	r3, [r7, #20]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vTaskPlaceOnEventListRestricted+0x54>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3318      	adds	r3, #24
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7fe faf6 	bl	8006e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80088b4:	f04f 33ff 	mov.w	r3, #4294967295
 80088b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	68b8      	ldr	r0, [r7, #8]
 80088be:	f000 fb53 	bl	8008f68 <prvAddCurrentTaskToDelayedList>
	}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20001b90 	.word	0x20001b90

080088d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60fb      	str	r3, [r7, #12]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3318      	adds	r3, #24
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fb27 	bl	8006f54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <xTaskRemoveFromEventList+0xb0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d11d      	bne.n	800894a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fb1e 	bl	8006f54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <xTaskRemoveFromEventList+0xb4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d903      	bls.n	800892c <xTaskRemoveFromEventList+0x5c>
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4a16      	ldr	r2, [pc, #88]	; (8008984 <xTaskRemoveFromEventList+0xb4>)
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4a13      	ldr	r2, [pc, #76]	; (8008988 <xTaskRemoveFromEventList+0xb8>)
 800893a:	441a      	add	r2, r3
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fe faa9 	bl	8006e9a <vListInsertEnd>
 8008948:	e005      	b.n	8008956 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3318      	adds	r3, #24
 800894e:	4619      	mov	r1, r3
 8008950:	480e      	ldr	r0, [pc, #56]	; (800898c <xTaskRemoveFromEventList+0xbc>)
 8008952:	f7fe faa2 	bl	8006e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <xTaskRemoveFromEventList+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	429a      	cmp	r2, r3
 8008962:	d905      	bls.n	8008970 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008964:	2301      	movs	r3, #1
 8008966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <xTaskRemoveFromEventList+0xc4>)
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e001      	b.n	8008974 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008974:	697b      	ldr	r3, [r7, #20]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000208c 	.word	0x2000208c
 8008984:	2000206c 	.word	0x2000206c
 8008988:	20001b94 	.word	0x20001b94
 800898c:	20002024 	.word	0x20002024
 8008990:	20001b90 	.word	0x20001b90
 8008994:	20002078 	.word	0x20002078

08008998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <vTaskInternalSetTimeOutState+0x24>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <vTaskInternalSetTimeOutState+0x28>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	2000207c 	.word	0x2000207c
 80089c0:	20002068 	.word	0x20002068

080089c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	613b      	str	r3, [r7, #16]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60fb      	str	r3, [r7, #12]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a06:	f000 ff7d 	bl	8009904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a0a:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <xTaskCheckForTimeOut+0xbc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d102      	bne.n	8008a2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e023      	b.n	8008a72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <xTaskCheckForTimeOut+0xc0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d007      	beq.n	8008a46 <xTaskCheckForTimeOut+0x82>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	61fb      	str	r3, [r7, #28]
 8008a44:	e015      	b.n	8008a72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d20b      	bcs.n	8008a68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1ad2      	subs	r2, r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ff9b 	bl	8008998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	e004      	b.n	8008a72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a72:	f000 ff77 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8008a76:	69fb      	ldr	r3, [r7, #28]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3720      	adds	r7, #32
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20002068 	.word	0x20002068
 8008a84:	2000207c 	.word	0x2000207c

08008a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a8c:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <vTaskMissedYield+0x14>)
 8008a8e:	2201      	movs	r2, #1
 8008a90:	601a      	str	r2, [r3, #0]
}
 8008a92:	bf00      	nop
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	20002078 	.word	0x20002078

08008aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008aa8:	f000 f852 	bl	8008b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <prvIdleTask+0x28>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d9f9      	bls.n	8008aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <prvIdleTask+0x2c>)
 8008ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ac4:	e7f0      	b.n	8008aa8 <prvIdleTask+0x8>
 8008ac6:	bf00      	nop
 8008ac8:	20001b94 	.word	0x20001b94
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	e00c      	b.n	8008af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a12      	ldr	r2, [pc, #72]	; (8008b30 <prvInitialiseTaskLists+0x60>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe f9a8 	bl	8006e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3301      	adds	r3, #1
 8008af4:	607b      	str	r3, [r7, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b37      	cmp	r3, #55	; 0x37
 8008afa:	d9ef      	bls.n	8008adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008afc:	480d      	ldr	r0, [pc, #52]	; (8008b34 <prvInitialiseTaskLists+0x64>)
 8008afe:	f7fe f99f 	bl	8006e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b02:	480d      	ldr	r0, [pc, #52]	; (8008b38 <prvInitialiseTaskLists+0x68>)
 8008b04:	f7fe f99c 	bl	8006e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b08:	480c      	ldr	r0, [pc, #48]	; (8008b3c <prvInitialiseTaskLists+0x6c>)
 8008b0a:	f7fe f999 	bl	8006e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b0e:	480c      	ldr	r0, [pc, #48]	; (8008b40 <prvInitialiseTaskLists+0x70>)
 8008b10:	f7fe f996 	bl	8006e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b14:	480b      	ldr	r0, [pc, #44]	; (8008b44 <prvInitialiseTaskLists+0x74>)
 8008b16:	f7fe f993 	bl	8006e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <prvInitialiseTaskLists+0x78>)
 8008b1c:	4a05      	ldr	r2, [pc, #20]	; (8008b34 <prvInitialiseTaskLists+0x64>)
 8008b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <prvInitialiseTaskLists+0x7c>)
 8008b22:	4a05      	ldr	r2, [pc, #20]	; (8008b38 <prvInitialiseTaskLists+0x68>)
 8008b24:	601a      	str	r2, [r3, #0]
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20001b94 	.word	0x20001b94
 8008b34:	20001ff4 	.word	0x20001ff4
 8008b38:	20002008 	.word	0x20002008
 8008b3c:	20002024 	.word	0x20002024
 8008b40:	20002038 	.word	0x20002038
 8008b44:	20002050 	.word	0x20002050
 8008b48:	2000201c 	.word	0x2000201c
 8008b4c:	20002020 	.word	0x20002020

08008b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b56:	e019      	b.n	8008b8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b58:	f000 fed4 	bl	8009904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <prvCheckTasksWaitingTermination+0x50>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe f9f3 	bl	8006f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <prvCheckTasksWaitingTermination+0x54>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <prvCheckTasksWaitingTermination+0x54>)
 8008b76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <prvCheckTasksWaitingTermination+0x58>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4a0a      	ldr	r2, [pc, #40]	; (8008ba8 <prvCheckTasksWaitingTermination+0x58>)
 8008b80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b82:	f000 feef 	bl	8009964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f810 	bl	8008bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <prvCheckTasksWaitingTermination+0x58>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e1      	bne.n	8008b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20002038 	.word	0x20002038
 8008ba4:	20002064 	.word	0x20002064
 8008ba8:	2000204c 	.word	0x2000204c

08008bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3354      	adds	r3, #84	; 0x54
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 ff49 	bl	800aa50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d108      	bne.n	8008bda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f887 	bl	8009ce0 <vPortFree>
				vPortFree( pxTCB );
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f884 	bl	8009ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bd8:	e018      	b.n	8008c0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d103      	bne.n	8008bec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f87b 	bl	8009ce0 <vPortFree>
	}
 8008bea:	e00f      	b.n	8008c0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d00a      	beq.n	8008c0c <prvDeleteTCB+0x60>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <prvDeleteTCB+0x5e>
	}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c1a:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <prvResetNextTaskUnblockTime+0x38>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c24:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <prvResetNextTaskUnblockTime+0x3c>)
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c2c:	e008      	b.n	8008c40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2e:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <prvResetNextTaskUnblockTime+0x38>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	4a04      	ldr	r2, [pc, #16]	; (8008c50 <prvResetNextTaskUnblockTime+0x3c>)
 8008c3e:	6013      	str	r3, [r2, #0]
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	2000201c 	.word	0x2000201c
 8008c50:	20002084 	.word	0x20002084

08008c54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <xTaskGetSchedulerState+0x34>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c62:	2301      	movs	r3, #1
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	e008      	b.n	8008c7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c68:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <xTaskGetSchedulerState+0x38>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c70:	2302      	movs	r3, #2
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	e001      	b.n	8008c7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c76:	2300      	movs	r3, #0
 8008c78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c7a:	687b      	ldr	r3, [r7, #4]
	}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20002070 	.word	0x20002070
 8008c8c:	2000208c 	.word	0x2000208c

08008c90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d051      	beq.n	8008d4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d241      	bcs.n	8008d38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db06      	blt.n	8008cca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6959      	ldr	r1, [r3, #20]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a1f      	ldr	r2, [pc, #124]	; (8008d58 <xTaskPriorityInherit+0xc8>)
 8008cdc:	4413      	add	r3, r2
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	d122      	bne.n	8008d28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe f934 	bl	8006f54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	4b18      	ldr	r3, [pc, #96]	; (8008d5c <xTaskPriorityInherit+0xcc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d903      	bls.n	8008d0a <xTaskPriorityInherit+0x7a>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4a15      	ldr	r2, [pc, #84]	; (8008d5c <xTaskPriorityInherit+0xcc>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <xTaskPriorityInherit+0xc8>)
 8008d18:	441a      	add	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe f8ba 	bl	8006e9a <vListInsertEnd>
 8008d26:	e004      	b.n	8008d32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d32:	2301      	movs	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e008      	b.n	8008d4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d201      	bcs.n	8008d4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20001b90 	.word	0x20001b90
 8008d58:	20001b94 	.word	0x20001b94
 8008d5c:	2000206c 	.word	0x2000206c

08008d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d056      	beq.n	8008e24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d76:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <xTaskPriorityDisinherit+0xd0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d00a      	beq.n	8008d96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	60fb      	str	r3, [r7, #12]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	60bb      	str	r3, [r7, #8]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d02c      	beq.n	8008e24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d128      	bne.n	8008e24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe f8bc 	bl	8006f54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <xTaskPriorityDisinherit+0xd4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d903      	bls.n	8008e04 <xTaskPriorityDisinherit+0xa4>
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	4a0c      	ldr	r2, [pc, #48]	; (8008e34 <xTaskPriorityDisinherit+0xd4>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <xTaskPriorityDisinherit+0xd8>)
 8008e12:	441a      	add	r2, r3
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fe f83d 	bl	8006e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e24:	697b      	ldr	r3, [r7, #20]
	}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001b90 	.word	0x20001b90
 8008e34:	2000206c 	.word	0x2000206c
 8008e38:	20001b94 	.word	0x20001b94

08008e3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d06a      	beq.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d902      	bls.n	8008e82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e002      	b.n	8008e88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d04b      	beq.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d146      	bne.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d10a      	bne.n	8008ebc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60bb      	str	r3, [r7, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	db04      	blt.n	8008eda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	6959      	ldr	r1, [r3, #20]
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a13      	ldr	r2, [pc, #76]	; (8008f38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008eea:	4413      	add	r3, r2
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d11c      	bne.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe f82d 	bl	8006f54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d903      	bls.n	8008f0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	4a0c      	ldr	r2, [pc, #48]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4a07      	ldr	r2, [pc, #28]	; (8008f38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f1c:	441a      	add	r2, r3
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f7fd ffb8 	bl	8006e9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f2a:	bf00      	nop
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20001b90 	.word	0x20001b90
 8008f38:	20001b94 	.word	0x20001b94
 8008f3c:	2000206c 	.word	0x2000206c

08008f40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d004      	beq.n	8008f56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f4c:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f52:	3201      	adds	r2, #1
 8008f54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008f56:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f58:	681b      	ldr	r3, [r3, #0]
	}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20001b90 	.word	0x20001b90

08008f68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f72:	4b21      	ldr	r3, [pc, #132]	; (8008ff8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f78:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fd ffe8 	bl	8006f54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8a:	d10a      	bne.n	8008fa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f92:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4819      	ldr	r0, [pc, #100]	; (8009000 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f9c:	f7fd ff7d 	bl	8006e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fa0:	e026      	b.n	8008ff0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008faa:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d209      	bcs.n	8008fce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f7fd ff8b 	bl	8006ee2 <vListInsert>
}
 8008fcc:	e010      	b.n	8008ff0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fd ff81 	bl	8006ee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d202      	bcs.n	8008ff0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008fea:	4a08      	ldr	r2, [pc, #32]	; (800900c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	6013      	str	r3, [r2, #0]
}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	20002068 	.word	0x20002068
 8008ffc:	20001b90 	.word	0x20001b90
 8009000:	20002050 	.word	0x20002050
 8009004:	20002020 	.word	0x20002020
 8009008:	2000201c 	.word	0x2000201c
 800900c:	20002084 	.word	0x20002084

08009010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800901a:	f000 fb07 	bl	800962c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800901e:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <xTimerCreateTimerTask+0x80>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d021      	beq.n	800906a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800902e:	1d3a      	adds	r2, r7, #4
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	f107 030c 	add.w	r3, r7, #12
 8009038:	4618      	mov	r0, r3
 800903a:	f7fd fee7 	bl	8006e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	9202      	str	r2, [sp, #8]
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2302      	movs	r3, #2
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2300      	movs	r3, #0
 800904e:	460a      	mov	r2, r1
 8009050:	4910      	ldr	r1, [pc, #64]	; (8009094 <xTimerCreateTimerTask+0x84>)
 8009052:	4811      	ldr	r0, [pc, #68]	; (8009098 <xTimerCreateTimerTask+0x88>)
 8009054:	f7fe ffb6 	bl	8007fc4 <xTaskCreateStatic>
 8009058:	4603      	mov	r3, r0
 800905a:	4a10      	ldr	r2, [pc, #64]	; (800909c <xTimerCreateTimerTask+0x8c>)
 800905c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <xTimerCreateTimerTask+0x8c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009066:	2301      	movs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	613b      	str	r3, [r7, #16]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009086:	697b      	ldr	r3, [r7, #20]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200020c0 	.word	0x200020c0
 8009094:	0800ca10 	.word	0x0800ca10
 8009098:	080091d5 	.word	0x080091d5
 800909c:	200020c4 	.word	0x200020c4

080090a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	623b      	str	r3, [r7, #32]
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090ce:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <xTimerGenericCommand+0x98>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d02a      	beq.n	800912c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b05      	cmp	r3, #5
 80090e6:	dc18      	bgt.n	800911a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090e8:	f7ff fdb4 	bl	8008c54 <xTaskGetSchedulerState>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d109      	bne.n	8009106 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <xTimerGenericCommand+0x98>)
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f107 0110 	add.w	r1, r7, #16
 80090fa:	2300      	movs	r3, #0
 80090fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fe:	f7fe f8fb 	bl	80072f8 <xQueueGenericSend>
 8009102:	6278      	str	r0, [r7, #36]	; 0x24
 8009104:	e012      	b.n	800912c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <xTimerGenericCommand+0x98>)
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f107 0110 	add.w	r1, r7, #16
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	f7fe f8f1 	bl	80072f8 <xQueueGenericSend>
 8009116:	6278      	str	r0, [r7, #36]	; 0x24
 8009118:	e008      	b.n	800912c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <xTimerGenericCommand+0x98>)
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f107 0110 	add.w	r1, r7, #16
 8009122:	2300      	movs	r3, #0
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	f7fe f9e5 	bl	80074f4 <xQueueGenericSendFromISR>
 800912a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800912e:	4618      	mov	r0, r3
 8009130:	3728      	adds	r7, #40	; 0x28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	200020c0 	.word	0x200020c0

0800913c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af02      	add	r7, sp, #8
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009146:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <prvProcessExpiredTimer+0x94>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	3304      	adds	r3, #4
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fefd 	bl	8006f54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d022      	beq.n	80091ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	699a      	ldr	r2, [r3, #24]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	18d1      	adds	r1, r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	6978      	ldr	r0, [r7, #20]
 8009176:	f000 f8d1 	bl	800931c <prvInsertTimerInActiveList>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01f      	beq.n	80091c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009180:	2300      	movs	r3, #0
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	2300      	movs	r3, #0
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	2100      	movs	r1, #0
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	f7ff ff88 	bl	80090a0 <xTimerGenericCommand>
 8009190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d113      	bne.n	80091c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	60fb      	str	r3, [r7, #12]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	6978      	ldr	r0, [r7, #20]
 80091c6:	4798      	blx	r3
}
 80091c8:	bf00      	nop
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200020b8 	.word	0x200020b8

080091d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091dc:	f107 0308 	add.w	r3, r7, #8
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 f857 	bl	8009294 <prvGetNextExpireTime>
 80091e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4619      	mov	r1, r3
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f803 	bl	80091f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091f2:	f000 f8d5 	bl	80093a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091f6:	e7f1      	b.n	80091dc <prvTimerTask+0x8>

080091f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009202:	f7ff f93b 	bl	800847c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f866 	bl	80092dc <prvSampleTimeNow>
 8009210:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d130      	bne.n	800927a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <prvProcessTimerOrBlockTask+0x3c>
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	429a      	cmp	r2, r3
 8009224:	d806      	bhi.n	8009234 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009226:	f7ff f937 	bl	8008498 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff85 	bl	800913c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009232:	e024      	b.n	800927e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d008      	beq.n	800924c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <prvProcessTimerOrBlockTask+0x90>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <prvProcessTimerOrBlockTask+0x50>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <prvProcessTimerOrBlockTask+0x52>
 8009248:	2300      	movs	r3, #0
 800924a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800924c:	4b0f      	ldr	r3, [pc, #60]	; (800928c <prvProcessTimerOrBlockTask+0x94>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4619      	mov	r1, r3
 800925a:	f7fe fe7f 	bl	8007f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800925e:	f7ff f91b 	bl	8008498 <xTaskResumeAll>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009268:	4b09      	ldr	r3, [pc, #36]	; (8009290 <prvProcessTimerOrBlockTask+0x98>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
}
 8009278:	e001      	b.n	800927e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800927a:	f7ff f90d 	bl	8008498 <xTaskResumeAll>
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200020bc 	.word	0x200020bc
 800928c:	200020c0 	.word	0x200020c0
 8009290:	e000ed04 	.word	0xe000ed04

08009294 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800929c:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <prvGetNextExpireTime+0x44>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <prvGetNextExpireTime+0x16>
 80092a6:	2201      	movs	r2, #1
 80092a8:	e000      	b.n	80092ac <prvGetNextExpireTime+0x18>
 80092aa:	2200      	movs	r2, #0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d105      	bne.n	80092c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b8:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <prvGetNextExpireTime+0x44>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e001      	b.n	80092c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092c8:	68fb      	ldr	r3, [r7, #12]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	200020b8 	.word	0x200020b8

080092dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092e4:	f7ff f976 	bl	80085d4 <xTaskGetTickCount>
 80092e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <prvSampleTimeNow+0x3c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d205      	bcs.n	8009300 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092f4:	f000 f936 	bl	8009564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e002      	b.n	8009306 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009306:	4a04      	ldr	r2, [pc, #16]	; (8009318 <prvSampleTimeNow+0x3c>)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800930c:	68fb      	ldr	r3, [r7, #12]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200020c8 	.word	0x200020c8

0800931c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d812      	bhi.n	8009368 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	1ad2      	subs	r2, r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	429a      	cmp	r2, r3
 800934e:	d302      	bcc.n	8009356 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009350:	2301      	movs	r3, #1
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	e01b      	b.n	800938e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009356:	4b10      	ldr	r3, [pc, #64]	; (8009398 <prvInsertTimerInActiveList+0x7c>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3304      	adds	r3, #4
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7fd fdbe 	bl	8006ee2 <vListInsert>
 8009366:	e012      	b.n	800938e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d206      	bcs.n	800937e <prvInsertTimerInActiveList+0x62>
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d302      	bcc.n	800937e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009378:	2301      	movs	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	e007      	b.n	800938e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <prvInsertTimerInActiveList+0x80>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3304      	adds	r3, #4
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f7fd fdaa 	bl	8006ee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800938e:	697b      	ldr	r3, [r7, #20]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	200020bc 	.word	0x200020bc
 800939c:	200020b8 	.word	0x200020b8

080093a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08e      	sub	sp, #56	; 0x38
 80093a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093a6:	e0ca      	b.n	800953e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da18      	bge.n	80093e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	3304      	adds	r3, #4
 80093b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	61fb      	str	r3, [r7, #28]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d6:	6850      	ldr	r0, [r2, #4]
 80093d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093da:	6892      	ldr	r2, [r2, #8]
 80093dc:	4611      	mov	r1, r2
 80093de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f2c0 80ab 	blt.w	800953e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fd fdab 	bl	8006f54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093fe:	463b      	mov	r3, r7
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff ff6b 	bl	80092dc <prvSampleTimeNow>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b09      	cmp	r3, #9
 800940c:	f200 8096 	bhi.w	800953c <prvProcessReceivedCommands+0x19c>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <prvProcessReceivedCommands+0x78>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	08009441 	.word	0x08009441
 800941c:	08009441 	.word	0x08009441
 8009420:	08009441 	.word	0x08009441
 8009424:	080094b5 	.word	0x080094b5
 8009428:	080094c9 	.word	0x080094c9
 800942c:	08009513 	.word	0x08009513
 8009430:	08009441 	.word	0x08009441
 8009434:	08009441 	.word	0x08009441
 8009438:	080094b5 	.word	0x080094b5
 800943c:	080094c9 	.word	0x080094c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	18d1      	adds	r1, r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009460:	f7ff ff5c 	bl	800931c <prvInsertTimerInActiveList>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d069      	beq.n	800953e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009470:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d05e      	beq.n	800953e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	441a      	add	r2, r3
 8009488:	2300      	movs	r3, #0
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	2300      	movs	r3, #0
 800948e:	2100      	movs	r1, #0
 8009490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009492:	f7ff fe05 	bl	80090a0 <xTimerGenericCommand>
 8009496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d14f      	bne.n	800953e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	61bb      	str	r3, [r7, #24]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ba:	f023 0301 	bic.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094c6:	e03a      	b.n	800953e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	617b      	str	r3, [r7, #20]
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	18d1      	adds	r1, r2, r3
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950c:	f7ff ff06 	bl	800931c <prvInsertTimerInActiveList>
					break;
 8009510:	e015      	b.n	800953e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009522:	f000 fbdd 	bl	8009ce0 <vPortFree>
 8009526:	e00a      	b.n	800953e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800953a:	e000      	b.n	800953e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800953c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800953e:	4b08      	ldr	r3, [pc, #32]	; (8009560 <prvProcessReceivedCommands+0x1c0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1d39      	adds	r1, r7, #4
 8009544:	2200      	movs	r2, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe f8fc 	bl	8007744 <xQueueReceive>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	f47f af2a 	bne.w	80093a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop
 8009558:	3730      	adds	r7, #48	; 0x30
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200020c0 	.word	0x200020c0

08009564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800956a:	e048      	b.n	80095fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800956c:	4b2d      	ldr	r3, [pc, #180]	; (8009624 <prvSwitchTimerLists+0xc0>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009576:	4b2b      	ldr	r3, [pc, #172]	; (8009624 <prvSwitchTimerLists+0xc0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3304      	adds	r3, #4
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd fce5 	bl	8006f54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d02e      	beq.n	80095fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d90e      	bls.n	80095d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095be:	4b19      	ldr	r3, [pc, #100]	; (8009624 <prvSwitchTimerLists+0xc0>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f7fd fc8a 	bl	8006ee2 <vListInsert>
 80095ce:	e016      	b.n	80095fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	2100      	movs	r1, #0
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff fd60 	bl	80090a0 <xTimerGenericCommand>
 80095e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	603b      	str	r3, [r7, #0]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095fe:	4b09      	ldr	r3, [pc, #36]	; (8009624 <prvSwitchTimerLists+0xc0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1b1      	bne.n	800956c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <prvSwitchTimerLists+0xc0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800960e:	4b06      	ldr	r3, [pc, #24]	; (8009628 <prvSwitchTimerLists+0xc4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a04      	ldr	r2, [pc, #16]	; (8009624 <prvSwitchTimerLists+0xc0>)
 8009614:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009616:	4a04      	ldr	r2, [pc, #16]	; (8009628 <prvSwitchTimerLists+0xc4>)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	6013      	str	r3, [r2, #0]
}
 800961c:	bf00      	nop
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200020b8 	.word	0x200020b8
 8009628:	200020bc 	.word	0x200020bc

0800962c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009632:	f000 f967 	bl	8009904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009636:	4b15      	ldr	r3, [pc, #84]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d120      	bne.n	8009680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800963e:	4814      	ldr	r0, [pc, #80]	; (8009690 <prvCheckForValidListAndQueue+0x64>)
 8009640:	f7fd fbfe 	bl	8006e40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009644:	4813      	ldr	r0, [pc, #76]	; (8009694 <prvCheckForValidListAndQueue+0x68>)
 8009646:	f7fd fbfb 	bl	8006e40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <prvCheckForValidListAndQueue+0x6c>)
 800964c:	4a10      	ldr	r2, [pc, #64]	; (8009690 <prvCheckForValidListAndQueue+0x64>)
 800964e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009650:	4b12      	ldr	r3, [pc, #72]	; (800969c <prvCheckForValidListAndQueue+0x70>)
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <prvCheckForValidListAndQueue+0x68>)
 8009654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009656:	2300      	movs	r3, #0
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <prvCheckForValidListAndQueue+0x74>)
 800965c:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <prvCheckForValidListAndQueue+0x78>)
 800965e:	2110      	movs	r1, #16
 8009660:	200a      	movs	r0, #10
 8009662:	f7fd fd09 	bl	8007078 <xQueueGenericCreateStatic>
 8009666:	4603      	mov	r3, r0
 8009668:	4a08      	ldr	r2, [pc, #32]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 800966a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <prvCheckForValidListAndQueue+0x60>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	490b      	ldr	r1, [pc, #44]	; (80096a8 <prvCheckForValidListAndQueue+0x7c>)
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fc1a 	bl	8007eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009680:	f000 f970 	bl	8009964 <vPortExitCritical>
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	200020c0 	.word	0x200020c0
 8009690:	20002090 	.word	0x20002090
 8009694:	200020a4 	.word	0x200020a4
 8009698:	200020b8 	.word	0x200020b8
 800969c:	200020bc 	.word	0x200020bc
 80096a0:	2000216c 	.word	0x2000216c
 80096a4:	200020cc 	.word	0x200020cc
 80096a8:	0800ca18 	.word	0x0800ca18

080096ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3b04      	subs	r3, #4
 80096bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b04      	subs	r3, #4
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f023 0201 	bic.w	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3b04      	subs	r3, #4
 80096da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096dc:	4a0c      	ldr	r2, [pc, #48]	; (8009710 <pxPortInitialiseStack+0x64>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3b14      	subs	r3, #20
 80096e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3b04      	subs	r3, #4
 80096f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f06f 0202 	mvn.w	r2, #2
 80096fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3b20      	subs	r3, #32
 8009700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009702:	68fb      	ldr	r3, [r7, #12]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	08009715 	.word	0x08009715

08009714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <prvTaskExitError+0x54>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d00a      	beq.n	800973e <prvTaskExitError+0x2a>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60fb      	str	r3, [r7, #12]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <prvTaskExitError+0x28>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	60bb      	str	r3, [r7, #8]
}
 8009750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009752:	bf00      	nop
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0fc      	beq.n	8009754 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800975a:	bf00      	nop
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	2000000c 	.word	0x2000000c
 800976c:	00000000 	.word	0x00000000

08009770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <pxCurrentTCBConst2>)
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	6808      	ldr	r0, [r1, #0]
 8009776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	f380 8809 	msr	PSP, r0
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f380 8811 	msr	BASEPRI, r0
 800978a:	4770      	bx	lr
 800978c:	f3af 8000 	nop.w

08009790 <pxCurrentTCBConst2>:
 8009790:	20001b90 	.word	0x20001b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009798:	4808      	ldr	r0, [pc, #32]	; (80097bc <prvPortStartFirstTask+0x24>)
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f380 8808 	msr	MSP, r0
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8814 	msr	CONTROL, r0
 80097aa:	b662      	cpsie	i
 80097ac:	b661      	cpsie	f
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	df00      	svc	0
 80097b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ba:	bf00      	nop
 80097bc:	e000ed08 	.word	0xe000ed08

080097c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097c6:	4b46      	ldr	r3, [pc, #280]	; (80098e0 <xPortStartScheduler+0x120>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a46      	ldr	r2, [pc, #280]	; (80098e4 <xPortStartScheduler+0x124>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10a      	bne.n	80097e6 <xPortStartScheduler+0x26>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	613b      	str	r3, [r7, #16]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097e6:	4b3e      	ldr	r3, [pc, #248]	; (80098e0 <xPortStartScheduler+0x120>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a3f      	ldr	r2, [pc, #252]	; (80098e8 <xPortStartScheduler+0x128>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d10a      	bne.n	8009806 <xPortStartScheduler+0x46>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009806:	4b39      	ldr	r3, [pc, #228]	; (80098ec <xPortStartScheduler+0x12c>)
 8009808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009828:	b2da      	uxtb	r2, r3
 800982a:	4b31      	ldr	r3, [pc, #196]	; (80098f0 <xPortStartScheduler+0x130>)
 800982c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800982e:	4b31      	ldr	r3, [pc, #196]	; (80098f4 <xPortStartScheduler+0x134>)
 8009830:	2207      	movs	r2, #7
 8009832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009834:	e009      	b.n	800984a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009836:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <xPortStartScheduler+0x134>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	4a2d      	ldr	r2, [pc, #180]	; (80098f4 <xPortStartScheduler+0x134>)
 800983e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009852:	2b80      	cmp	r3, #128	; 0x80
 8009854:	d0ef      	beq.n	8009836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009856:	4b27      	ldr	r3, [pc, #156]	; (80098f4 <xPortStartScheduler+0x134>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f1c3 0307 	rsb	r3, r3, #7
 800985e:	2b04      	cmp	r3, #4
 8009860:	d00a      	beq.n	8009878 <xPortStartScheduler+0xb8>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	60bb      	str	r3, [r7, #8]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009878:	4b1e      	ldr	r3, [pc, #120]	; (80098f4 <xPortStartScheduler+0x134>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <xPortStartScheduler+0x134>)
 8009880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009882:	4b1c      	ldr	r3, [pc, #112]	; (80098f4 <xPortStartScheduler+0x134>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800988a:	4a1a      	ldr	r2, [pc, #104]	; (80098f4 <xPortStartScheduler+0x134>)
 800988c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009896:	4b18      	ldr	r3, [pc, #96]	; (80098f8 <xPortStartScheduler+0x138>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a17      	ldr	r2, [pc, #92]	; (80098f8 <xPortStartScheduler+0x138>)
 800989c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098a2:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <xPortStartScheduler+0x138>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a14      	ldr	r2, [pc, #80]	; (80098f8 <xPortStartScheduler+0x138>)
 80098a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098ae:	f000 f8dd 	bl	8009a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <xPortStartScheduler+0x13c>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098b8:	f000 f8fc 	bl	8009ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098bc:	4b10      	ldr	r3, [pc, #64]	; (8009900 <xPortStartScheduler+0x140>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0f      	ldr	r2, [pc, #60]	; (8009900 <xPortStartScheduler+0x140>)
 80098c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098c8:	f7ff ff66 	bl	8009798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098cc:	f7fe ff4c 	bl	8008768 <vTaskSwitchContext>
	prvTaskExitError();
 80098d0:	f7ff ff20 	bl	8009714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	e000ed00 	.word	0xe000ed00
 80098e4:	410fc271 	.word	0x410fc271
 80098e8:	410fc270 	.word	0x410fc270
 80098ec:	e000e400 	.word	0xe000e400
 80098f0:	200021bc 	.word	0x200021bc
 80098f4:	200021c0 	.word	0x200021c0
 80098f8:	e000ed20 	.word	0xe000ed20
 80098fc:	2000000c 	.word	0x2000000c
 8009900:	e000ef34 	.word	0xe000ef34

08009904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	607b      	str	r3, [r7, #4]
}
 800991c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <vPortEnterCritical+0x58>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <vPortEnterCritical+0x58>)
 8009926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <vPortEnterCritical+0x58>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d10f      	bne.n	8009950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009930:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <vPortEnterCritical+0x5c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <vPortEnterCritical+0x4c>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	603b      	str	r3, [r7, #0]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <vPortEnterCritical+0x4a>
	}
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	2000000c 	.word	0x2000000c
 8009960:	e000ed04 	.word	0xe000ed04

08009964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <vPortExitCritical+0x50>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <vPortExitCritical+0x24>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	607b      	str	r3, [r7, #4]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <vPortExitCritical+0x50>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <vPortExitCritical+0x50>)
 8009990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009992:	4b08      	ldr	r3, [pc, #32]	; (80099b4 <vPortExitCritical+0x50>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d105      	bne.n	80099a6 <vPortExitCritical+0x42>
 800999a:	2300      	movs	r3, #0
 800999c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	f383 8811 	msr	BASEPRI, r3
}
 80099a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	2000000c 	.word	0x2000000c
	...

080099c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099c0:	f3ef 8009 	mrs	r0, PSP
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4b15      	ldr	r3, [pc, #84]	; (8009a20 <pxCurrentTCBConst>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	f01e 0f10 	tst.w	lr, #16
 80099d0:	bf08      	it	eq
 80099d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099e4:	f380 8811 	msr	BASEPRI, r0
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f7fe feba 	bl	8008768 <vTaskSwitchContext>
 80099f4:	f04f 0000 	mov.w	r0, #0
 80099f8:	f380 8811 	msr	BASEPRI, r0
 80099fc:	bc09      	pop	{r0, r3}
 80099fe:	6819      	ldr	r1, [r3, #0]
 8009a00:	6808      	ldr	r0, [r1, #0]
 8009a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a06:	f01e 0f10 	tst.w	lr, #16
 8009a0a:	bf08      	it	eq
 8009a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a10:	f380 8809 	msr	PSP, r0
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w

08009a20 <pxCurrentTCBConst>:
 8009a20:	20001b90 	.word	0x20001b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a42:	f7fe fdd7 	bl	80085f4 <xTaskIncrementTick>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <xPortSysTickHandler+0x40>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	2300      	movs	r3, #0
 8009a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f383 8811 	msr	BASEPRI, r3
}
 8009a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a70:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <vPortSetupTimerInterrupt+0x34>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <vPortSetupTimerInterrupt+0x38>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <vPortSetupTimerInterrupt+0x3c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <vPortSetupTimerInterrupt+0x40>)
 8009a82:	fba2 2303 	umull	r2, r3, r2, r3
 8009a86:	099b      	lsrs	r3, r3, #6
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <vPortSetupTimerInterrupt+0x44>)
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a8e:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <vPortSetupTimerInterrupt+0x34>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	e000e010 	.word	0xe000e010
 8009aa4:	e000e018 	.word	0xe000e018
 8009aa8:	20000000 	.word	0x20000000
 8009aac:	10624dd3 	.word	0x10624dd3
 8009ab0:	e000e014 	.word	0xe000e014

08009ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ac4 <vPortEnableVFP+0x10>
 8009ab8:	6801      	ldr	r1, [r0, #0]
 8009aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009abe:	6001      	str	r1, [r0, #0]
 8009ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ac2:	bf00      	nop
 8009ac4:	e000ed88 	.word	0xe000ed88

08009ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ace:	f3ef 8305 	mrs	r3, IPSR
 8009ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b0f      	cmp	r3, #15
 8009ad8:	d914      	bls.n	8009b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ada:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <vPortValidateInterruptPriority+0x70>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ae4:	4b15      	ldr	r3, [pc, #84]	; (8009b3c <vPortValidateInterruptPriority+0x74>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	7afa      	ldrb	r2, [r7, #11]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d20a      	bcs.n	8009b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	607b      	str	r3, [r7, #4]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b04:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <vPortValidateInterruptPriority+0x78>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b0c:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <vPortValidateInterruptPriority+0x7c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d90a      	bls.n	8009b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	603b      	str	r3, [r7, #0]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <vPortValidateInterruptPriority+0x60>
	}
 8009b2a:	bf00      	nop
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	e000e3f0 	.word	0xe000e3f0
 8009b3c:	200021bc 	.word	0x200021bc
 8009b40:	e000ed0c 	.word	0xe000ed0c
 8009b44:	200021c0 	.word	0x200021c0

08009b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b54:	f7fe fc92 	bl	800847c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b58:	4b5b      	ldr	r3, [pc, #364]	; (8009cc8 <pvPortMalloc+0x180>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b60:	f000 f920 	bl	8009da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b64:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <pvPortMalloc+0x184>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 8093 	bne.w	8009c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01d      	beq.n	8009bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b78:	2208      	movs	r2, #8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d014      	beq.n	8009bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	3308      	adds	r3, #8
 8009b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	617b      	str	r3, [r7, #20]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d06e      	beq.n	8009c98 <pvPortMalloc+0x150>
 8009bba:	4b45      	ldr	r3, [pc, #276]	; (8009cd0 <pvPortMalloc+0x188>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d869      	bhi.n	8009c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bc4:	4b43      	ldr	r3, [pc, #268]	; (8009cd4 <pvPortMalloc+0x18c>)
 8009bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bc8:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <pvPortMalloc+0x18c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bce:	e004      	b.n	8009bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d903      	bls.n	8009bec <pvPortMalloc+0xa4>
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f1      	bne.n	8009bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bec:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <pvPortMalloc+0x180>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d050      	beq.n	8009c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	4413      	add	r3, r2
 8009bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	2308      	movs	r3, #8
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d91f      	bls.n	8009c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <pvPortMalloc+0xf8>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	613b      	str	r3, [r7, #16]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	1ad2      	subs	r2, r2, r3
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c52:	69b8      	ldr	r0, [r7, #24]
 8009c54:	f000 f908 	bl	8009e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	4a1b      	ldr	r2, [pc, #108]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c66:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <pvPortMalloc+0x190>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d203      	bcs.n	8009c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c72:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a18      	ldr	r2, [pc, #96]	; (8009cd8 <pvPortMalloc+0x190>)
 8009c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <pvPortMalloc+0x184>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <pvPortMalloc+0x194>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <pvPortMalloc+0x194>)
 8009c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c98:	f7fe fbfe 	bl	8008498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <pvPortMalloc+0x174>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60fb      	str	r3, [r7, #12]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <pvPortMalloc+0x172>
	return pvReturn;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3728      	adds	r7, #40	; 0x28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20002d84 	.word	0x20002d84
 8009ccc:	20002d98 	.word	0x20002d98
 8009cd0:	20002d88 	.word	0x20002d88
 8009cd4:	20002d7c 	.word	0x20002d7c
 8009cd8:	20002d8c 	.word	0x20002d8c
 8009cdc:	20002d90 	.word	0x20002d90

08009ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04d      	beq.n	8009d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	425b      	negs	r3, r3
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <vPortFree+0xb8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <vPortFree+0x44>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00a      	beq.n	8009d42 <vPortFree+0x62>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60bb      	str	r3, [r7, #8]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <vPortFree+0xb8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01e      	beq.n	8009d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d11a      	bne.n	8009d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <vPortFree+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	401a      	ands	r2, r3
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d68:	f7fe fb88 	bl	800847c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <vPortFree+0xbc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <vPortFree+0xbc>)
 8009d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d7a:	6938      	ldr	r0, [r7, #16]
 8009d7c:	f000 f874 	bl	8009e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <vPortFree+0xc0>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	4a06      	ldr	r2, [pc, #24]	; (8009da0 <vPortFree+0xc0>)
 8009d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d8a:	f7fe fb85 	bl	8008498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d8e:	bf00      	nop
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20002d98 	.word	0x20002d98
 8009d9c:	20002d88 	.word	0x20002d88
 8009da0:	20002d94 	.word	0x20002d94

08009da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009daa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009db0:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <prvHeapInit+0xac>)
 8009db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3307      	adds	r3, #7
 8009dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0307 	bic.w	r3, r3, #7
 8009dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	4a1f      	ldr	r2, [pc, #124]	; (8009e50 <prvHeapInit+0xac>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ddc:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <prvHeapInit+0xb0>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <prvHeapInit+0xb0>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009df0:	2208      	movs	r2, #8
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <prvHeapInit+0xb4>)
 8009e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <prvHeapInit+0xb4>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e0e:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <prvHeapInit+0xb4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <prvHeapInit+0xb4>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <prvHeapInit+0xb8>)
 8009e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <prvHeapInit+0xbc>)
 8009e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <prvHeapInit+0xc0>)
 8009e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	200021c4 	.word	0x200021c4
 8009e54:	20002d7c 	.word	0x20002d7c
 8009e58:	20002d84 	.word	0x20002d84
 8009e5c:	20002d8c 	.word	0x20002d8c
 8009e60:	20002d88 	.word	0x20002d88
 8009e64:	20002d98 	.word	0x20002d98

08009e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e70:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <prvInsertBlockIntoFreeList+0xac>)
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e002      	b.n	8009e7c <prvInsertBlockIntoFreeList+0x14>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d8f7      	bhi.n	8009e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d108      	bne.n	8009eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d118      	bne.n	8009ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d00d      	beq.n	8009ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	e008      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e003      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d002      	beq.n	8009f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20002d7c 	.word	0x20002d7c
 8009f18:	20002d84 	.word	0x20002d84

08009f1c <__cvt>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	ec55 4b10 	vmov	r4, r5, d0
 8009f24:	2d00      	cmp	r5, #0
 8009f26:	460e      	mov	r6, r1
 8009f28:	4619      	mov	r1, r3
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	bfbb      	ittet	lt
 8009f2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f32:	461d      	movlt	r5, r3
 8009f34:	2300      	movge	r3, #0
 8009f36:	232d      	movlt	r3, #45	; 0x2d
 8009f38:	700b      	strb	r3, [r1, #0]
 8009f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f40:	4691      	mov	r9, r2
 8009f42:	f023 0820 	bic.w	r8, r3, #32
 8009f46:	bfbc      	itt	lt
 8009f48:	4622      	movlt	r2, r4
 8009f4a:	4614      	movlt	r4, r2
 8009f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f50:	d005      	beq.n	8009f5e <__cvt+0x42>
 8009f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f56:	d100      	bne.n	8009f5a <__cvt+0x3e>
 8009f58:	3601      	adds	r6, #1
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	e000      	b.n	8009f60 <__cvt+0x44>
 8009f5e:	2103      	movs	r1, #3
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	ab02      	add	r3, sp, #8
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	ec45 4b10 	vmov	d0, r4, r5
 8009f6c:	4653      	mov	r3, sl
 8009f6e:	4632      	mov	r2, r6
 8009f70:	f000 febe 	bl	800acf0 <_dtoa_r>
 8009f74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f78:	4607      	mov	r7, r0
 8009f7a:	d102      	bne.n	8009f82 <__cvt+0x66>
 8009f7c:	f019 0f01 	tst.w	r9, #1
 8009f80:	d022      	beq.n	8009fc8 <__cvt+0xac>
 8009f82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f86:	eb07 0906 	add.w	r9, r7, r6
 8009f8a:	d110      	bne.n	8009fae <__cvt+0x92>
 8009f8c:	783b      	ldrb	r3, [r7, #0]
 8009f8e:	2b30      	cmp	r3, #48	; 0x30
 8009f90:	d10a      	bne.n	8009fa8 <__cvt+0x8c>
 8009f92:	2200      	movs	r2, #0
 8009f94:	2300      	movs	r3, #0
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f9e:	b918      	cbnz	r0, 8009fa8 <__cvt+0x8c>
 8009fa0:	f1c6 0601 	rsb	r6, r6, #1
 8009fa4:	f8ca 6000 	str.w	r6, [sl]
 8009fa8:	f8da 3000 	ldr.w	r3, [sl]
 8009fac:	4499      	add	r9, r3
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fba:	b108      	cbz	r0, 8009fc0 <__cvt+0xa4>
 8009fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fc0:	2230      	movs	r2, #48	; 0x30
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	454b      	cmp	r3, r9
 8009fc6:	d307      	bcc.n	8009fd8 <__cvt+0xbc>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fcc:	1bdb      	subs	r3, r3, r7
 8009fce:	4638      	mov	r0, r7
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	b004      	add	sp, #16
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	1c59      	adds	r1, r3, #1
 8009fda:	9103      	str	r1, [sp, #12]
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e7f0      	b.n	8009fc2 <__cvt+0xa6>

08009fe0 <__exponent>:
 8009fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	bfb8      	it	lt
 8009fe8:	4249      	neglt	r1, r1
 8009fea:	f803 2b02 	strb.w	r2, [r3], #2
 8009fee:	bfb4      	ite	lt
 8009ff0:	222d      	movlt	r2, #45	; 0x2d
 8009ff2:	222b      	movge	r2, #43	; 0x2b
 8009ff4:	2909      	cmp	r1, #9
 8009ff6:	7042      	strb	r2, [r0, #1]
 8009ff8:	dd2a      	ble.n	800a050 <__exponent+0x70>
 8009ffa:	f10d 0207 	add.w	r2, sp, #7
 8009ffe:	4617      	mov	r7, r2
 800a000:	260a      	movs	r6, #10
 800a002:	4694      	mov	ip, r2
 800a004:	fb91 f5f6 	sdiv	r5, r1, r6
 800a008:	fb06 1415 	mls	r4, r6, r5, r1
 800a00c:	3430      	adds	r4, #48	; 0x30
 800a00e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a012:	460c      	mov	r4, r1
 800a014:	2c63      	cmp	r4, #99	; 0x63
 800a016:	f102 32ff 	add.w	r2, r2, #4294967295
 800a01a:	4629      	mov	r1, r5
 800a01c:	dcf1      	bgt.n	800a002 <__exponent+0x22>
 800a01e:	3130      	adds	r1, #48	; 0x30
 800a020:	f1ac 0402 	sub.w	r4, ip, #2
 800a024:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a028:	1c41      	adds	r1, r0, #1
 800a02a:	4622      	mov	r2, r4
 800a02c:	42ba      	cmp	r2, r7
 800a02e:	d30a      	bcc.n	800a046 <__exponent+0x66>
 800a030:	f10d 0209 	add.w	r2, sp, #9
 800a034:	eba2 020c 	sub.w	r2, r2, ip
 800a038:	42bc      	cmp	r4, r7
 800a03a:	bf88      	it	hi
 800a03c:	2200      	movhi	r2, #0
 800a03e:	4413      	add	r3, r2
 800a040:	1a18      	subs	r0, r3, r0
 800a042:	b003      	add	sp, #12
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a046:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a04a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a04e:	e7ed      	b.n	800a02c <__exponent+0x4c>
 800a050:	2330      	movs	r3, #48	; 0x30
 800a052:	3130      	adds	r1, #48	; 0x30
 800a054:	7083      	strb	r3, [r0, #2]
 800a056:	70c1      	strb	r1, [r0, #3]
 800a058:	1d03      	adds	r3, r0, #4
 800a05a:	e7f1      	b.n	800a040 <__exponent+0x60>

0800a05c <_printf_float>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	ed2d 8b02 	vpush	{d8}
 800a064:	b08d      	sub	sp, #52	; 0x34
 800a066:	460c      	mov	r4, r1
 800a068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a06c:	4616      	mov	r6, r2
 800a06e:	461f      	mov	r7, r3
 800a070:	4605      	mov	r5, r0
 800a072:	f000 fcd9 	bl	800aa28 <_localeconv_r>
 800a076:	f8d0 a000 	ldr.w	sl, [r0]
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7f6 f8f8 	bl	8000270 <strlen>
 800a080:	2300      	movs	r3, #0
 800a082:	930a      	str	r3, [sp, #40]	; 0x28
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	f8d8 3000 	ldr.w	r3, [r8]
 800a08c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a090:	3307      	adds	r3, #7
 800a092:	f023 0307 	bic.w	r3, r3, #7
 800a096:	f103 0208 	add.w	r2, r3, #8
 800a09a:	f8c8 2000 	str.w	r2, [r8]
 800a09e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0ac:	ee08 0a10 	vmov	s16, r0
 800a0b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a0b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0b8:	4b9e      	ldr	r3, [pc, #632]	; (800a334 <_printf_float+0x2d8>)
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	f7f6 fd35 	bl	8000b2c <__aeabi_dcmpun>
 800a0c2:	bb88      	cbnz	r0, 800a128 <_printf_float+0xcc>
 800a0c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c8:	4b9a      	ldr	r3, [pc, #616]	; (800a334 <_printf_float+0x2d8>)
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ce:	f7f6 fd0f 	bl	8000af0 <__aeabi_dcmple>
 800a0d2:	bb48      	cbnz	r0, 800a128 <_printf_float+0xcc>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 fcfe 	bl	8000adc <__aeabi_dcmplt>
 800a0e0:	b110      	cbz	r0, 800a0e8 <_printf_float+0x8c>
 800a0e2:	232d      	movs	r3, #45	; 0x2d
 800a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e8:	4a93      	ldr	r2, [pc, #588]	; (800a338 <_printf_float+0x2dc>)
 800a0ea:	4b94      	ldr	r3, [pc, #592]	; (800a33c <_printf_float+0x2e0>)
 800a0ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0f0:	bf94      	ite	ls
 800a0f2:	4690      	movls	r8, r2
 800a0f4:	4698      	movhi	r8, r3
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	9b05      	ldr	r3, [sp, #20]
 800a0fc:	f023 0304 	bic.w	r3, r3, #4
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	9700      	str	r7, [sp, #0]
 800a108:	4633      	mov	r3, r6
 800a10a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a10c:	4621      	mov	r1, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f9da 	bl	800a4c8 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	f040 8090 	bne.w	800a23a <_printf_float+0x1de>
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295
 800a11e:	b00d      	add	sp, #52	; 0x34
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	4642      	mov	r2, r8
 800a12a:	464b      	mov	r3, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 800a134:	b140      	cbz	r0, 800a148 <_printf_float+0xec>
 800a136:	464b      	mov	r3, r9
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfbc      	itt	lt
 800a13c:	232d      	movlt	r3, #45	; 0x2d
 800a13e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a142:	4a7f      	ldr	r2, [pc, #508]	; (800a340 <_printf_float+0x2e4>)
 800a144:	4b7f      	ldr	r3, [pc, #508]	; (800a344 <_printf_float+0x2e8>)
 800a146:	e7d1      	b.n	800a0ec <_printf_float+0x90>
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	d13f      	bne.n	800a1d4 <_printf_float+0x178>
 800a154:	2306      	movs	r3, #6
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	9b05      	ldr	r3, [sp, #20]
 800a15a:	6861      	ldr	r1, [r4, #4]
 800a15c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a160:	2300      	movs	r3, #0
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	ab0a      	add	r3, sp, #40	; 0x28
 800a166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a16a:	ab09      	add	r3, sp, #36	; 0x24
 800a16c:	ec49 8b10 	vmov	d0, r8, r9
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fecf 	bl	8009f1c <__cvt>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a182:	2b47      	cmp	r3, #71	; 0x47
 800a184:	4680      	mov	r8, r0
 800a186:	d108      	bne.n	800a19a <_printf_float+0x13e>
 800a188:	1cc8      	adds	r0, r1, #3
 800a18a:	db02      	blt.n	800a192 <_printf_float+0x136>
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	4299      	cmp	r1, r3
 800a190:	dd41      	ble.n	800a216 <_printf_float+0x1ba>
 800a192:	f1ab 0302 	sub.w	r3, fp, #2
 800a196:	fa5f fb83 	uxtb.w	fp, r3
 800a19a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a19e:	d820      	bhi.n	800a1e2 <_printf_float+0x186>
 800a1a0:	3901      	subs	r1, #1
 800a1a2:	465a      	mov	r2, fp
 800a1a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a1aa:	f7ff ff19 	bl	8009fe0 <__exponent>
 800a1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b0:	1813      	adds	r3, r2, r0
 800a1b2:	2a01      	cmp	r2, #1
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	dc02      	bgt.n	800a1c0 <_printf_float+0x164>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	07d2      	lsls	r2, r2, #31
 800a1be:	d501      	bpl.n	800a1c4 <_printf_float+0x168>
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d09c      	beq.n	800a106 <_printf_float+0xaa>
 800a1cc:	232d      	movs	r3, #45	; 0x2d
 800a1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d2:	e798      	b.n	800a106 <_printf_float+0xaa>
 800a1d4:	9a06      	ldr	r2, [sp, #24]
 800a1d6:	2a47      	cmp	r2, #71	; 0x47
 800a1d8:	d1be      	bne.n	800a158 <_printf_float+0xfc>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1bc      	bne.n	800a158 <_printf_float+0xfc>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7b9      	b.n	800a156 <_printf_float+0xfa>
 800a1e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1e6:	d118      	bne.n	800a21a <_printf_float+0x1be>
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	dd0b      	ble.n	800a206 <_printf_float+0x1aa>
 800a1ee:	6121      	str	r1, [r4, #16]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_printf_float+0x19c>
 800a1f2:	6822      	ldr	r2, [r4, #0]
 800a1f4:	07d0      	lsls	r0, r2, #31
 800a1f6:	d502      	bpl.n	800a1fe <_printf_float+0x1a2>
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	440b      	add	r3, r1
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a200:	f04f 0900 	mov.w	r9, #0
 800a204:	e7de      	b.n	800a1c4 <_printf_float+0x168>
 800a206:	b913      	cbnz	r3, 800a20e <_printf_float+0x1b2>
 800a208:	6822      	ldr	r2, [r4, #0]
 800a20a:	07d2      	lsls	r2, r2, #31
 800a20c:	d501      	bpl.n	800a212 <_printf_float+0x1b6>
 800a20e:	3302      	adds	r3, #2
 800a210:	e7f4      	b.n	800a1fc <_printf_float+0x1a0>
 800a212:	2301      	movs	r3, #1
 800a214:	e7f2      	b.n	800a1fc <_printf_float+0x1a0>
 800a216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21c:	4299      	cmp	r1, r3
 800a21e:	db05      	blt.n	800a22c <_printf_float+0x1d0>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	6121      	str	r1, [r4, #16]
 800a224:	07d8      	lsls	r0, r3, #31
 800a226:	d5ea      	bpl.n	800a1fe <_printf_float+0x1a2>
 800a228:	1c4b      	adds	r3, r1, #1
 800a22a:	e7e7      	b.n	800a1fc <_printf_float+0x1a0>
 800a22c:	2900      	cmp	r1, #0
 800a22e:	bfd4      	ite	le
 800a230:	f1c1 0202 	rsble	r2, r1, #2
 800a234:	2201      	movgt	r2, #1
 800a236:	4413      	add	r3, r2
 800a238:	e7e0      	b.n	800a1fc <_printf_float+0x1a0>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	055a      	lsls	r2, r3, #21
 800a23e:	d407      	bmi.n	800a250 <_printf_float+0x1f4>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	4642      	mov	r2, r8
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	d12c      	bne.n	800a2a8 <_printf_float+0x24c>
 800a24e:	e764      	b.n	800a11a <_printf_float+0xbe>
 800a250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a254:	f240 80e0 	bls.w	800a418 <_printf_float+0x3bc>
 800a258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a25c:	2200      	movs	r2, #0
 800a25e:	2300      	movs	r3, #0
 800a260:	f7f6 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a264:	2800      	cmp	r0, #0
 800a266:	d034      	beq.n	800a2d2 <_printf_float+0x276>
 800a268:	4a37      	ldr	r2, [pc, #220]	; (800a348 <_printf_float+0x2ec>)
 800a26a:	2301      	movs	r3, #1
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af51 	beq.w	800a11a <_printf_float+0xbe>
 800a278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a27c:	429a      	cmp	r2, r3
 800a27e:	db02      	blt.n	800a286 <_printf_float+0x22a>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	07d8      	lsls	r0, r3, #31
 800a284:	d510      	bpl.n	800a2a8 <_printf_float+0x24c>
 800a286:	ee18 3a10 	vmov	r3, s16
 800a28a:	4652      	mov	r2, sl
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f af41 	beq.w	800a11a <_printf_float+0xbe>
 800a298:	f04f 0800 	mov.w	r8, #0
 800a29c:	f104 091a 	add.w	r9, r4, #26
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4543      	cmp	r3, r8
 800a2a6:	dc09      	bgt.n	800a2bc <_printf_float+0x260>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	079b      	lsls	r3, r3, #30
 800a2ac:	f100 8107 	bmi.w	800a4be <_printf_float+0x462>
 800a2b0:	68e0      	ldr	r0, [r4, #12]
 800a2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b4:	4298      	cmp	r0, r3
 800a2b6:	bfb8      	it	lt
 800a2b8:	4618      	movlt	r0, r3
 800a2ba:	e730      	b.n	800a11e <_printf_float+0xc2>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	464a      	mov	r2, r9
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af27 	beq.w	800a11a <_printf_float+0xbe>
 800a2cc:	f108 0801 	add.w	r8, r8, #1
 800a2d0:	e7e6      	b.n	800a2a0 <_printf_float+0x244>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc39      	bgt.n	800a34c <_printf_float+0x2f0>
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <_printf_float+0x2ec>)
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af19 	beq.w	800a11a <_printf_float+0xbe>
 800a2e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	d102      	bne.n	800a2f6 <_printf_float+0x29a>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	07d9      	lsls	r1, r3, #31
 800a2f4:	d5d8      	bpl.n	800a2a8 <_printf_float+0x24c>
 800a2f6:	ee18 3a10 	vmov	r3, s16
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af09 	beq.w	800a11a <_printf_float+0xbe>
 800a308:	f04f 0900 	mov.w	r9, #0
 800a30c:	f104 0a1a 	add.w	sl, r4, #26
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	425b      	negs	r3, r3
 800a314:	454b      	cmp	r3, r9
 800a316:	dc01      	bgt.n	800a31c <_printf_float+0x2c0>
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	e792      	b.n	800a242 <_printf_float+0x1e6>
 800a31c:	2301      	movs	r3, #1
 800a31e:	4652      	mov	r2, sl
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aef7 	beq.w	800a11a <_printf_float+0xbe>
 800a32c:	f109 0901 	add.w	r9, r9, #1
 800a330:	e7ee      	b.n	800a310 <_printf_float+0x2b4>
 800a332:	bf00      	nop
 800a334:	7fefffff 	.word	0x7fefffff
 800a338:	0800cb38 	.word	0x0800cb38
 800a33c:	0800cb3c 	.word	0x0800cb3c
 800a340:	0800cb40 	.word	0x0800cb40
 800a344:	0800cb44 	.word	0x0800cb44
 800a348:	0800cb48 	.word	0x0800cb48
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a350:	429a      	cmp	r2, r3
 800a352:	bfa8      	it	ge
 800a354:	461a      	movge	r2, r3
 800a356:	2a00      	cmp	r2, #0
 800a358:	4691      	mov	r9, r2
 800a35a:	dc37      	bgt.n	800a3cc <_printf_float+0x370>
 800a35c:	f04f 0b00 	mov.w	fp, #0
 800a360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a364:	f104 021a 	add.w	r2, r4, #26
 800a368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	eba3 0309 	sub.w	r3, r3, r9
 800a370:	455b      	cmp	r3, fp
 800a372:	dc33      	bgt.n	800a3dc <_printf_float+0x380>
 800a374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a378:	429a      	cmp	r2, r3
 800a37a:	db3b      	blt.n	800a3f4 <_printf_float+0x398>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07da      	lsls	r2, r3, #31
 800a380:	d438      	bmi.n	800a3f4 <_printf_float+0x398>
 800a382:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a386:	eba2 0903 	sub.w	r9, r2, r3
 800a38a:	9b05      	ldr	r3, [sp, #20]
 800a38c:	1ad2      	subs	r2, r2, r3
 800a38e:	4591      	cmp	r9, r2
 800a390:	bfa8      	it	ge
 800a392:	4691      	movge	r9, r2
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	dc35      	bgt.n	800a406 <_printf_float+0x3aa>
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3a2:	f104 0a1a 	add.w	sl, r4, #26
 800a3a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	eba3 0309 	sub.w	r3, r3, r9
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	f77f af79 	ble.w	800a2a8 <_printf_float+0x24c>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f aeaa 	beq.w	800a11a <_printf_float+0xbe>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	e7ec      	b.n	800a3a6 <_printf_float+0x34a>
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d1c0      	bne.n	800a35c <_printf_float+0x300>
 800a3da:	e69e      	b.n	800a11a <_printf_float+0xbe>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	9205      	str	r2, [sp, #20]
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f ae97 	beq.w	800a11a <_printf_float+0xbe>
 800a3ec:	9a05      	ldr	r2, [sp, #20]
 800a3ee:	f10b 0b01 	add.w	fp, fp, #1
 800a3f2:	e7b9      	b.n	800a368 <_printf_float+0x30c>
 800a3f4:	ee18 3a10 	vmov	r3, s16
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d1be      	bne.n	800a382 <_printf_float+0x326>
 800a404:	e689      	b.n	800a11a <_printf_float+0xbe>
 800a406:	9a05      	ldr	r2, [sp, #20]
 800a408:	464b      	mov	r3, r9
 800a40a:	4442      	add	r2, r8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d1c1      	bne.n	800a39a <_printf_float+0x33e>
 800a416:	e680      	b.n	800a11a <_printf_float+0xbe>
 800a418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a41a:	2a01      	cmp	r2, #1
 800a41c:	dc01      	bgt.n	800a422 <_printf_float+0x3c6>
 800a41e:	07db      	lsls	r3, r3, #31
 800a420:	d53a      	bpl.n	800a498 <_printf_float+0x43c>
 800a422:	2301      	movs	r3, #1
 800a424:	4642      	mov	r2, r8
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae74 	beq.w	800a11a <_printf_float+0xbe>
 800a432:	ee18 3a10 	vmov	r3, s16
 800a436:	4652      	mov	r2, sl
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f ae6b 	beq.w	800a11a <_printf_float+0xbe>
 800a444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a448:	2200      	movs	r2, #0
 800a44a:	2300      	movs	r3, #0
 800a44c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a450:	f7f6 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a454:	b9d8      	cbnz	r0, 800a48e <_printf_float+0x432>
 800a456:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a45a:	f108 0201 	add.w	r2, r8, #1
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	d10e      	bne.n	800a486 <_printf_float+0x42a>
 800a468:	e657      	b.n	800a11a <_printf_float+0xbe>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4652      	mov	r2, sl
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f ae50 	beq.w	800a11a <_printf_float+0xbe>
 800a47a:	f108 0801 	add.w	r8, r8, #1
 800a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a480:	3b01      	subs	r3, #1
 800a482:	4543      	cmp	r3, r8
 800a484:	dcf1      	bgt.n	800a46a <_printf_float+0x40e>
 800a486:	464b      	mov	r3, r9
 800a488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a48c:	e6da      	b.n	800a244 <_printf_float+0x1e8>
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	f104 0a1a 	add.w	sl, r4, #26
 800a496:	e7f2      	b.n	800a47e <_printf_float+0x422>
 800a498:	2301      	movs	r3, #1
 800a49a:	4642      	mov	r2, r8
 800a49c:	e7df      	b.n	800a45e <_printf_float+0x402>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	464a      	mov	r2, r9
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	f43f ae36 	beq.w	800a11a <_printf_float+0xbe>
 800a4ae:	f108 0801 	add.w	r8, r8, #1
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4b6:	1a5b      	subs	r3, r3, r1
 800a4b8:	4543      	cmp	r3, r8
 800a4ba:	dcf0      	bgt.n	800a49e <_printf_float+0x442>
 800a4bc:	e6f8      	b.n	800a2b0 <_printf_float+0x254>
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	f104 0919 	add.w	r9, r4, #25
 800a4c6:	e7f4      	b.n	800a4b2 <_printf_float+0x456>

0800a4c8 <_printf_common>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	688a      	ldr	r2, [r1, #8]
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	bfb8      	it	lt
 800a4dc:	4613      	movlt	r3, r2
 800a4de:	6033      	str	r3, [r6, #0]
 800a4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	b10a      	cbz	r2, 800a4ee <_printf_common+0x26>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6033      	str	r3, [r6, #0]
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	0699      	lsls	r1, r3, #26
 800a4f2:	bf42      	ittt	mi
 800a4f4:	6833      	ldrmi	r3, [r6, #0]
 800a4f6:	3302      	addmi	r3, #2
 800a4f8:	6033      	strmi	r3, [r6, #0]
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	f015 0506 	ands.w	r5, r5, #6
 800a500:	d106      	bne.n	800a510 <_printf_common+0x48>
 800a502:	f104 0a19 	add.w	sl, r4, #25
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	6832      	ldr	r2, [r6, #0]
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dc26      	bgt.n	800a55e <_printf_common+0x96>
 800a510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a514:	1e13      	subs	r3, r2, #0
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	bf18      	it	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	0692      	lsls	r2, r2, #26
 800a51e:	d42b      	bmi.n	800a578 <_printf_common+0xb0>
 800a520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a524:	4649      	mov	r1, r9
 800a526:	4638      	mov	r0, r7
 800a528:	47c0      	blx	r8
 800a52a:	3001      	adds	r0, #1
 800a52c:	d01e      	beq.n	800a56c <_printf_common+0xa4>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	f003 0306 	and.w	r3, r3, #6
 800a536:	2b04      	cmp	r3, #4
 800a538:	bf02      	ittt	eq
 800a53a:	68e5      	ldreq	r5, [r4, #12]
 800a53c:	6833      	ldreq	r3, [r6, #0]
 800a53e:	1aed      	subeq	r5, r5, r3
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	bf0c      	ite	eq
 800a544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a548:	2500      	movne	r5, #0
 800a54a:	4293      	cmp	r3, r2
 800a54c:	bfc4      	itt	gt
 800a54e:	1a9b      	subgt	r3, r3, r2
 800a550:	18ed      	addgt	r5, r5, r3
 800a552:	2600      	movs	r6, #0
 800a554:	341a      	adds	r4, #26
 800a556:	42b5      	cmp	r5, r6
 800a558:	d11a      	bne.n	800a590 <_printf_common+0xc8>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e008      	b.n	800a570 <_printf_common+0xa8>
 800a55e:	2301      	movs	r3, #1
 800a560:	4652      	mov	r2, sl
 800a562:	4649      	mov	r1, r9
 800a564:	4638      	mov	r0, r7
 800a566:	47c0      	blx	r8
 800a568:	3001      	adds	r0, #1
 800a56a:	d103      	bne.n	800a574 <_printf_common+0xac>
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a574:	3501      	adds	r5, #1
 800a576:	e7c6      	b.n	800a506 <_printf_common+0x3e>
 800a578:	18e1      	adds	r1, r4, r3
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	2030      	movs	r0, #48	; 0x30
 800a57e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a582:	4422      	add	r2, r4
 800a584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a58c:	3302      	adds	r3, #2
 800a58e:	e7c7      	b.n	800a520 <_printf_common+0x58>
 800a590:	2301      	movs	r3, #1
 800a592:	4622      	mov	r2, r4
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	3001      	adds	r0, #1
 800a59c:	d0e6      	beq.n	800a56c <_printf_common+0xa4>
 800a59e:	3601      	adds	r6, #1
 800a5a0:	e7d9      	b.n	800a556 <_printf_common+0x8e>
	...

0800a5a4 <_printf_i>:
 800a5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	7e0f      	ldrb	r7, [r1, #24]
 800a5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5ac:	2f78      	cmp	r7, #120	; 0x78
 800a5ae:	4691      	mov	r9, r2
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	469a      	mov	sl, r3
 800a5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5ba:	d807      	bhi.n	800a5cc <_printf_i+0x28>
 800a5bc:	2f62      	cmp	r7, #98	; 0x62
 800a5be:	d80a      	bhi.n	800a5d6 <_printf_i+0x32>
 800a5c0:	2f00      	cmp	r7, #0
 800a5c2:	f000 80d4 	beq.w	800a76e <_printf_i+0x1ca>
 800a5c6:	2f58      	cmp	r7, #88	; 0x58
 800a5c8:	f000 80c0 	beq.w	800a74c <_printf_i+0x1a8>
 800a5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d4:	e03a      	b.n	800a64c <_printf_i+0xa8>
 800a5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5da:	2b15      	cmp	r3, #21
 800a5dc:	d8f6      	bhi.n	800a5cc <_printf_i+0x28>
 800a5de:	a101      	add	r1, pc, #4	; (adr r1, 800a5e4 <_printf_i+0x40>)
 800a5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5e4:	0800a63d 	.word	0x0800a63d
 800a5e8:	0800a651 	.word	0x0800a651
 800a5ec:	0800a5cd 	.word	0x0800a5cd
 800a5f0:	0800a5cd 	.word	0x0800a5cd
 800a5f4:	0800a5cd 	.word	0x0800a5cd
 800a5f8:	0800a5cd 	.word	0x0800a5cd
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a5cd 	.word	0x0800a5cd
 800a604:	0800a5cd 	.word	0x0800a5cd
 800a608:	0800a5cd 	.word	0x0800a5cd
 800a60c:	0800a5cd 	.word	0x0800a5cd
 800a610:	0800a755 	.word	0x0800a755
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a70f 	.word	0x0800a70f
 800a61c:	0800a5cd 	.word	0x0800a5cd
 800a620:	0800a5cd 	.word	0x0800a5cd
 800a624:	0800a777 	.word	0x0800a777
 800a628:	0800a5cd 	.word	0x0800a5cd
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a5cd 	.word	0x0800a5cd
 800a634:	0800a5cd 	.word	0x0800a5cd
 800a638:	0800a717 	.word	0x0800a717
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	1d1a      	adds	r2, r3, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	602a      	str	r2, [r5, #0]
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a64c:	2301      	movs	r3, #1
 800a64e:	e09f      	b.n	800a790 <_printf_i+0x1ec>
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	682b      	ldr	r3, [r5, #0]
 800a654:	0607      	lsls	r7, r0, #24
 800a656:	f103 0104 	add.w	r1, r3, #4
 800a65a:	6029      	str	r1, [r5, #0]
 800a65c:	d501      	bpl.n	800a662 <_printf_i+0xbe>
 800a65e:	681e      	ldr	r6, [r3, #0]
 800a660:	e003      	b.n	800a66a <_printf_i+0xc6>
 800a662:	0646      	lsls	r6, r0, #25
 800a664:	d5fb      	bpl.n	800a65e <_printf_i+0xba>
 800a666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	da03      	bge.n	800a676 <_printf_i+0xd2>
 800a66e:	232d      	movs	r3, #45	; 0x2d
 800a670:	4276      	negs	r6, r6
 800a672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a676:	485a      	ldr	r0, [pc, #360]	; (800a7e0 <_printf_i+0x23c>)
 800a678:	230a      	movs	r3, #10
 800a67a:	e012      	b.n	800a6a2 <_printf_i+0xfe>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6029      	str	r1, [r5, #0]
 800a684:	0605      	lsls	r5, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xe8>
 800a688:	681e      	ldr	r6, [r3, #0]
 800a68a:	e002      	b.n	800a692 <_printf_i+0xee>
 800a68c:	0641      	lsls	r1, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xe4>
 800a690:	881e      	ldrh	r6, [r3, #0]
 800a692:	4853      	ldr	r0, [pc, #332]	; (800a7e0 <_printf_i+0x23c>)
 800a694:	2f6f      	cmp	r7, #111	; 0x6f
 800a696:	bf0c      	ite	eq
 800a698:	2308      	moveq	r3, #8
 800a69a:	230a      	movne	r3, #10
 800a69c:	2100      	movs	r1, #0
 800a69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6a2:	6865      	ldr	r5, [r4, #4]
 800a6a4:	60a5      	str	r5, [r4, #8]
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	bfa2      	ittt	ge
 800a6aa:	6821      	ldrge	r1, [r4, #0]
 800a6ac:	f021 0104 	bicge.w	r1, r1, #4
 800a6b0:	6021      	strge	r1, [r4, #0]
 800a6b2:	b90e      	cbnz	r6, 800a6b8 <_printf_i+0x114>
 800a6b4:	2d00      	cmp	r5, #0
 800a6b6:	d04b      	beq.n	800a750 <_printf_i+0x1ac>
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6be:	fb03 6711 	mls	r7, r3, r1, r6
 800a6c2:	5dc7      	ldrb	r7, [r0, r7]
 800a6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6c8:	4637      	mov	r7, r6
 800a6ca:	42bb      	cmp	r3, r7
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	d9f4      	bls.n	800a6ba <_printf_i+0x116>
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d10b      	bne.n	800a6ec <_printf_i+0x148>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	07de      	lsls	r6, r3, #31
 800a6d8:	d508      	bpl.n	800a6ec <_printf_i+0x148>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	bfde      	ittt	le
 800a6e2:	2330      	movle	r3, #48	; 0x30
 800a6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6ec:	1b52      	subs	r2, r2, r5
 800a6ee:	6122      	str	r2, [r4, #16]
 800a6f0:	f8cd a000 	str.w	sl, [sp]
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	aa03      	add	r2, sp, #12
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7ff fee4 	bl	800a4c8 <_printf_common>
 800a700:	3001      	adds	r0, #1
 800a702:	d14a      	bne.n	800a79a <_printf_i+0x1f6>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	b004      	add	sp, #16
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	4833      	ldr	r0, [pc, #204]	; (800a7e4 <_printf_i+0x240>)
 800a718:	2778      	movs	r7, #120	; 0x78
 800a71a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6829      	ldr	r1, [r5, #0]
 800a722:	061f      	lsls	r7, r3, #24
 800a724:	f851 6b04 	ldr.w	r6, [r1], #4
 800a728:	d402      	bmi.n	800a730 <_printf_i+0x18c>
 800a72a:	065f      	lsls	r7, r3, #25
 800a72c:	bf48      	it	mi
 800a72e:	b2b6      	uxthmi	r6, r6
 800a730:	07df      	lsls	r7, r3, #31
 800a732:	bf48      	it	mi
 800a734:	f043 0320 	orrmi.w	r3, r3, #32
 800a738:	6029      	str	r1, [r5, #0]
 800a73a:	bf48      	it	mi
 800a73c:	6023      	strmi	r3, [r4, #0]
 800a73e:	b91e      	cbnz	r6, 800a748 <_printf_i+0x1a4>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	f023 0320 	bic.w	r3, r3, #32
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	2310      	movs	r3, #16
 800a74a:	e7a7      	b.n	800a69c <_printf_i+0xf8>
 800a74c:	4824      	ldr	r0, [pc, #144]	; (800a7e0 <_printf_i+0x23c>)
 800a74e:	e7e4      	b.n	800a71a <_printf_i+0x176>
 800a750:	4615      	mov	r5, r2
 800a752:	e7bd      	b.n	800a6d0 <_printf_i+0x12c>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	6826      	ldr	r6, [r4, #0]
 800a758:	6961      	ldr	r1, [r4, #20]
 800a75a:	1d18      	adds	r0, r3, #4
 800a75c:	6028      	str	r0, [r5, #0]
 800a75e:	0635      	lsls	r5, r6, #24
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	d501      	bpl.n	800a768 <_printf_i+0x1c4>
 800a764:	6019      	str	r1, [r3, #0]
 800a766:	e002      	b.n	800a76e <_printf_i+0x1ca>
 800a768:	0670      	lsls	r0, r6, #25
 800a76a:	d5fb      	bpl.n	800a764 <_printf_i+0x1c0>
 800a76c:	8019      	strh	r1, [r3, #0]
 800a76e:	2300      	movs	r3, #0
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	4615      	mov	r5, r2
 800a774:	e7bc      	b.n	800a6f0 <_printf_i+0x14c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	602a      	str	r2, [r5, #0]
 800a77c:	681d      	ldr	r5, [r3, #0]
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	2100      	movs	r1, #0
 800a782:	4628      	mov	r0, r5
 800a784:	f7f5 fd24 	bl	80001d0 <memchr>
 800a788:	b108      	cbz	r0, 800a78e <_printf_i+0x1ea>
 800a78a:	1b40      	subs	r0, r0, r5
 800a78c:	6060      	str	r0, [r4, #4]
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	6123      	str	r3, [r4, #16]
 800a792:	2300      	movs	r3, #0
 800a794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a798:	e7aa      	b.n	800a6f0 <_printf_i+0x14c>
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	462a      	mov	r2, r5
 800a79e:	4649      	mov	r1, r9
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	47d0      	blx	sl
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d0ad      	beq.n	800a704 <_printf_i+0x160>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	079b      	lsls	r3, r3, #30
 800a7ac:	d413      	bmi.n	800a7d6 <_printf_i+0x232>
 800a7ae:	68e0      	ldr	r0, [r4, #12]
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	4298      	cmp	r0, r3
 800a7b4:	bfb8      	it	lt
 800a7b6:	4618      	movlt	r0, r3
 800a7b8:	e7a6      	b.n	800a708 <_printf_i+0x164>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4632      	mov	r2, r6
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	47d0      	blx	sl
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d09d      	beq.n	800a704 <_printf_i+0x160>
 800a7c8:	3501      	adds	r5, #1
 800a7ca:	68e3      	ldr	r3, [r4, #12]
 800a7cc:	9903      	ldr	r1, [sp, #12]
 800a7ce:	1a5b      	subs	r3, r3, r1
 800a7d0:	42ab      	cmp	r3, r5
 800a7d2:	dcf2      	bgt.n	800a7ba <_printf_i+0x216>
 800a7d4:	e7eb      	b.n	800a7ae <_printf_i+0x20a>
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	f104 0619 	add.w	r6, r4, #25
 800a7dc:	e7f5      	b.n	800a7ca <_printf_i+0x226>
 800a7de:	bf00      	nop
 800a7e0:	0800cb4a 	.word	0x0800cb4a
 800a7e4:	0800cb5b 	.word	0x0800cb5b

0800a7e8 <std>:
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	b510      	push	{r4, lr}
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7f6:	6083      	str	r3, [r0, #8]
 800a7f8:	8181      	strh	r1, [r0, #12]
 800a7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a7fc:	81c2      	strh	r2, [r0, #14]
 800a7fe:	6183      	str	r3, [r0, #24]
 800a800:	4619      	mov	r1, r3
 800a802:	2208      	movs	r2, #8
 800a804:	305c      	adds	r0, #92	; 0x5c
 800a806:	f000 f906 	bl	800aa16 <memset>
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <std+0x58>)
 800a80c:	6263      	str	r3, [r4, #36]	; 0x24
 800a80e:	4b0d      	ldr	r3, [pc, #52]	; (800a844 <std+0x5c>)
 800a810:	62a3      	str	r3, [r4, #40]	; 0x28
 800a812:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <std+0x60>)
 800a814:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a816:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <std+0x64>)
 800a818:	6323      	str	r3, [r4, #48]	; 0x30
 800a81a:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <std+0x68>)
 800a81c:	6224      	str	r4, [r4, #32]
 800a81e:	429c      	cmp	r4, r3
 800a820:	d006      	beq.n	800a830 <std+0x48>
 800a822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a826:	4294      	cmp	r4, r2
 800a828:	d002      	beq.n	800a830 <std+0x48>
 800a82a:	33d0      	adds	r3, #208	; 0xd0
 800a82c:	429c      	cmp	r4, r3
 800a82e:	d105      	bne.n	800a83c <std+0x54>
 800a830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a838:	f000 b9c0 	b.w	800abbc <__retarget_lock_init_recursive>
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	bf00      	nop
 800a840:	0800a991 	.word	0x0800a991
 800a844:	0800a9b3 	.word	0x0800a9b3
 800a848:	0800a9eb 	.word	0x0800a9eb
 800a84c:	0800aa0f 	.word	0x0800aa0f
 800a850:	20002d9c 	.word	0x20002d9c

0800a854 <stdio_exit_handler>:
 800a854:	4a02      	ldr	r2, [pc, #8]	; (800a860 <stdio_exit_handler+0xc>)
 800a856:	4903      	ldr	r1, [pc, #12]	; (800a864 <stdio_exit_handler+0x10>)
 800a858:	4803      	ldr	r0, [pc, #12]	; (800a868 <stdio_exit_handler+0x14>)
 800a85a:	f000 b869 	b.w	800a930 <_fwalk_sglue>
 800a85e:	bf00      	nop
 800a860:	20000010 	.word	0x20000010
 800a864:	0800c561 	.word	0x0800c561
 800a868:	2000001c 	.word	0x2000001c

0800a86c <cleanup_stdio>:
 800a86c:	6841      	ldr	r1, [r0, #4]
 800a86e:	4b0c      	ldr	r3, [pc, #48]	; (800a8a0 <cleanup_stdio+0x34>)
 800a870:	4299      	cmp	r1, r3
 800a872:	b510      	push	{r4, lr}
 800a874:	4604      	mov	r4, r0
 800a876:	d001      	beq.n	800a87c <cleanup_stdio+0x10>
 800a878:	f001 fe72 	bl	800c560 <_fflush_r>
 800a87c:	68a1      	ldr	r1, [r4, #8]
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <cleanup_stdio+0x38>)
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <cleanup_stdio+0x1e>
 800a884:	4620      	mov	r0, r4
 800a886:	f001 fe6b 	bl	800c560 <_fflush_r>
 800a88a:	68e1      	ldr	r1, [r4, #12]
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <cleanup_stdio+0x3c>)
 800a88e:	4299      	cmp	r1, r3
 800a890:	d004      	beq.n	800a89c <cleanup_stdio+0x30>
 800a892:	4620      	mov	r0, r4
 800a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a898:	f001 be62 	b.w	800c560 <_fflush_r>
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	bf00      	nop
 800a8a0:	20002d9c 	.word	0x20002d9c
 800a8a4:	20002e04 	.word	0x20002e04
 800a8a8:	20002e6c 	.word	0x20002e6c

0800a8ac <global_stdio_init.part.0>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	4b0b      	ldr	r3, [pc, #44]	; (800a8dc <global_stdio_init.part.0+0x30>)
 800a8b0:	4c0b      	ldr	r4, [pc, #44]	; (800a8e0 <global_stdio_init.part.0+0x34>)
 800a8b2:	4a0c      	ldr	r2, [pc, #48]	; (800a8e4 <global_stdio_init.part.0+0x38>)
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	f7ff ff94 	bl	800a7e8 <std>
 800a8c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	2109      	movs	r1, #9
 800a8c8:	f7ff ff8e 	bl	800a7e8 <std>
 800a8cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d6:	2112      	movs	r1, #18
 800a8d8:	f7ff bf86 	b.w	800a7e8 <std>
 800a8dc:	20002ed4 	.word	0x20002ed4
 800a8e0:	20002d9c 	.word	0x20002d9c
 800a8e4:	0800a855 	.word	0x0800a855

0800a8e8 <__sfp_lock_acquire>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	; (800a8f0 <__sfp_lock_acquire+0x8>)
 800a8ea:	f000 b968 	b.w	800abbe <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	20002edd 	.word	0x20002edd

0800a8f4 <__sfp_lock_release>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	; (800a8fc <__sfp_lock_release+0x8>)
 800a8f6:	f000 b963 	b.w	800abc0 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	20002edd 	.word	0x20002edd

0800a900 <__sinit>:
 800a900:	b510      	push	{r4, lr}
 800a902:	4604      	mov	r4, r0
 800a904:	f7ff fff0 	bl	800a8e8 <__sfp_lock_acquire>
 800a908:	6a23      	ldr	r3, [r4, #32]
 800a90a:	b11b      	cbz	r3, 800a914 <__sinit+0x14>
 800a90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a910:	f7ff bff0 	b.w	800a8f4 <__sfp_lock_release>
 800a914:	4b04      	ldr	r3, [pc, #16]	; (800a928 <__sinit+0x28>)
 800a916:	6223      	str	r3, [r4, #32]
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <__sinit+0x2c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1f5      	bne.n	800a90c <__sinit+0xc>
 800a920:	f7ff ffc4 	bl	800a8ac <global_stdio_init.part.0>
 800a924:	e7f2      	b.n	800a90c <__sinit+0xc>
 800a926:	bf00      	nop
 800a928:	0800a86d 	.word	0x0800a86d
 800a92c:	20002ed4 	.word	0x20002ed4

0800a930 <_fwalk_sglue>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4607      	mov	r7, r0
 800a936:	4688      	mov	r8, r1
 800a938:	4614      	mov	r4, r2
 800a93a:	2600      	movs	r6, #0
 800a93c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a940:	f1b9 0901 	subs.w	r9, r9, #1
 800a944:	d505      	bpl.n	800a952 <_fwalk_sglue+0x22>
 800a946:	6824      	ldr	r4, [r4, #0]
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d1f7      	bne.n	800a93c <_fwalk_sglue+0xc>
 800a94c:	4630      	mov	r0, r6
 800a94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a952:	89ab      	ldrh	r3, [r5, #12]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d907      	bls.n	800a968 <_fwalk_sglue+0x38>
 800a958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a95c:	3301      	adds	r3, #1
 800a95e:	d003      	beq.n	800a968 <_fwalk_sglue+0x38>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	4306      	orrs	r6, r0
 800a968:	3568      	adds	r5, #104	; 0x68
 800a96a:	e7e9      	b.n	800a940 <_fwalk_sglue+0x10>

0800a96c <iprintf>:
 800a96c:	b40f      	push	{r0, r1, r2, r3}
 800a96e:	b507      	push	{r0, r1, r2, lr}
 800a970:	4906      	ldr	r1, [pc, #24]	; (800a98c <iprintf+0x20>)
 800a972:	ab04      	add	r3, sp, #16
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	f853 2b04 	ldr.w	r2, [r3], #4
 800a97a:	6881      	ldr	r1, [r0, #8]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f001 fc4f 	bl	800c220 <_vfiprintf_r>
 800a982:	b003      	add	sp, #12
 800a984:	f85d eb04 	ldr.w	lr, [sp], #4
 800a988:	b004      	add	sp, #16
 800a98a:	4770      	bx	lr
 800a98c:	20000068 	.word	0x20000068

0800a990 <__sread>:
 800a990:	b510      	push	{r4, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a998:	f000 f8c2 	bl	800ab20 <_read_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	bfab      	itete	ge
 800a9a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9a4:	181b      	addge	r3, r3, r0
 800a9a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9aa:	bfac      	ite	ge
 800a9ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ae:	81a3      	strhlt	r3, [r4, #12]
 800a9b0:	bd10      	pop	{r4, pc}

0800a9b2 <__swrite>:
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	898b      	ldrh	r3, [r1, #12]
 800a9ba:	05db      	lsls	r3, r3, #23
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	d505      	bpl.n	800a9d0 <__swrite+0x1e>
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f000 f896 	bl	800aafc <_lseek_r>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	4632      	mov	r2, r6
 800a9de:	463b      	mov	r3, r7
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	f000 b8ad 	b.w	800ab44 <_write_r>

0800a9ea <__sseek>:
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 f883 	bl	800aafc <_lseek_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	bf15      	itete	ne
 800a9fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa06:	81a3      	strheq	r3, [r4, #12]
 800aa08:	bf18      	it	ne
 800aa0a:	81a3      	strhne	r3, [r4, #12]
 800aa0c:	bd10      	pop	{r4, pc}

0800aa0e <__sclose>:
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	f000 b80d 	b.w	800aa30 <_close_r>

0800aa16 <memset>:
 800aa16:	4402      	add	r2, r0
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d100      	bne.n	800aa20 <memset+0xa>
 800aa1e:	4770      	bx	lr
 800aa20:	f803 1b01 	strb.w	r1, [r3], #1
 800aa24:	e7f9      	b.n	800aa1a <memset+0x4>
	...

0800aa28 <_localeconv_r>:
 800aa28:	4800      	ldr	r0, [pc, #0]	; (800aa2c <_localeconv_r+0x4>)
 800aa2a:	4770      	bx	lr
 800aa2c:	2000015c 	.word	0x2000015c

0800aa30 <_close_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_close_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f7 fa5f 	bl	8001efe <_close>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_close_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_close_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20002ed8 	.word	0x20002ed8

0800aa50 <_reclaim_reent>:
 800aa50:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <_reclaim_reent+0xa8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4283      	cmp	r3, r0
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	4604      	mov	r4, r0
 800aa5a:	d04b      	beq.n	800aaf4 <_reclaim_reent+0xa4>
 800aa5c:	69c3      	ldr	r3, [r0, #28]
 800aa5e:	b143      	cbz	r3, 800aa72 <_reclaim_reent+0x22>
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d144      	bne.n	800aaf0 <_reclaim_reent+0xa0>
 800aa66:	69e3      	ldr	r3, [r4, #28]
 800aa68:	6819      	ldr	r1, [r3, #0]
 800aa6a:	b111      	cbz	r1, 800aa72 <_reclaim_reent+0x22>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 ff31 	bl	800b8d4 <_free_r>
 800aa72:	6961      	ldr	r1, [r4, #20]
 800aa74:	b111      	cbz	r1, 800aa7c <_reclaim_reent+0x2c>
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 ff2c 	bl	800b8d4 <_free_r>
 800aa7c:	69e1      	ldr	r1, [r4, #28]
 800aa7e:	b111      	cbz	r1, 800aa86 <_reclaim_reent+0x36>
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 ff27 	bl	800b8d4 <_free_r>
 800aa86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa88:	b111      	cbz	r1, 800aa90 <_reclaim_reent+0x40>
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 ff22 	bl	800b8d4 <_free_r>
 800aa90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa92:	b111      	cbz	r1, 800aa9a <_reclaim_reent+0x4a>
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 ff1d 	bl	800b8d4 <_free_r>
 800aa9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa9c:	b111      	cbz	r1, 800aaa4 <_reclaim_reent+0x54>
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 ff18 	bl	800b8d4 <_free_r>
 800aaa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aaa6:	b111      	cbz	r1, 800aaae <_reclaim_reent+0x5e>
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 ff13 	bl	800b8d4 <_free_r>
 800aaae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aab0:	b111      	cbz	r1, 800aab8 <_reclaim_reent+0x68>
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 ff0e 	bl	800b8d4 <_free_r>
 800aab8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aaba:	b111      	cbz	r1, 800aac2 <_reclaim_reent+0x72>
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 ff09 	bl	800b8d4 <_free_r>
 800aac2:	6a23      	ldr	r3, [r4, #32]
 800aac4:	b1b3      	cbz	r3, 800aaf4 <_reclaim_reent+0xa4>
 800aac6:	4620      	mov	r0, r4
 800aac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aacc:	4718      	bx	r3
 800aace:	5949      	ldr	r1, [r1, r5]
 800aad0:	b941      	cbnz	r1, 800aae4 <_reclaim_reent+0x94>
 800aad2:	3504      	adds	r5, #4
 800aad4:	69e3      	ldr	r3, [r4, #28]
 800aad6:	2d80      	cmp	r5, #128	; 0x80
 800aad8:	68d9      	ldr	r1, [r3, #12]
 800aada:	d1f8      	bne.n	800aace <_reclaim_reent+0x7e>
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fef9 	bl	800b8d4 <_free_r>
 800aae2:	e7c0      	b.n	800aa66 <_reclaim_reent+0x16>
 800aae4:	680e      	ldr	r6, [r1, #0]
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fef4 	bl	800b8d4 <_free_r>
 800aaec:	4631      	mov	r1, r6
 800aaee:	e7ef      	b.n	800aad0 <_reclaim_reent+0x80>
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	e7ef      	b.n	800aad4 <_reclaim_reent+0x84>
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000068 	.word	0x20000068

0800aafc <_lseek_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d07      	ldr	r5, [pc, #28]	; (800ab1c <_lseek_r+0x20>)
 800ab00:	4604      	mov	r4, r0
 800ab02:	4608      	mov	r0, r1
 800ab04:	4611      	mov	r1, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	602a      	str	r2, [r5, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f7f7 fa1e 	bl	8001f4c <_lseek>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_lseek_r+0x1e>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_lseek_r+0x1e>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	20002ed8 	.word	0x20002ed8

0800ab20 <_read_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d07      	ldr	r5, [pc, #28]	; (800ab40 <_read_r+0x20>)
 800ab24:	4604      	mov	r4, r0
 800ab26:	4608      	mov	r0, r1
 800ab28:	4611      	mov	r1, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	602a      	str	r2, [r5, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7f7 f9c8 	bl	8001ec4 <_read>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_read_r+0x1e>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_read_r+0x1e>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20002ed8 	.word	0x20002ed8

0800ab44 <_write_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	; (800ab64 <_write_r+0x20>)
 800ab48:	4604      	mov	r4, r0
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	2200      	movs	r2, #0
 800ab50:	602a      	str	r2, [r5, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	f7f6 f9a6 	bl	8000ea4 <_write>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_write_r+0x1e>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_write_r+0x1e>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	20002ed8 	.word	0x20002ed8

0800ab68 <__errno>:
 800ab68:	4b01      	ldr	r3, [pc, #4]	; (800ab70 <__errno+0x8>)
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000068 	.word	0x20000068

0800ab74 <__libc_init_array>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4d0d      	ldr	r5, [pc, #52]	; (800abac <__libc_init_array+0x38>)
 800ab78:	4c0d      	ldr	r4, [pc, #52]	; (800abb0 <__libc_init_array+0x3c>)
 800ab7a:	1b64      	subs	r4, r4, r5
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	2600      	movs	r6, #0
 800ab80:	42a6      	cmp	r6, r4
 800ab82:	d109      	bne.n	800ab98 <__libc_init_array+0x24>
 800ab84:	4d0b      	ldr	r5, [pc, #44]	; (800abb4 <__libc_init_array+0x40>)
 800ab86:	4c0c      	ldr	r4, [pc, #48]	; (800abb8 <__libc_init_array+0x44>)
 800ab88:	f001 feee 	bl	800c968 <_init>
 800ab8c:	1b64      	subs	r4, r4, r5
 800ab8e:	10a4      	asrs	r4, r4, #2
 800ab90:	2600      	movs	r6, #0
 800ab92:	42a6      	cmp	r6, r4
 800ab94:	d105      	bne.n	800aba2 <__libc_init_array+0x2e>
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab9c:	4798      	blx	r3
 800ab9e:	3601      	adds	r6, #1
 800aba0:	e7ee      	b.n	800ab80 <__libc_init_array+0xc>
 800aba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba6:	4798      	blx	r3
 800aba8:	3601      	adds	r6, #1
 800abaa:	e7f2      	b.n	800ab92 <__libc_init_array+0x1e>
 800abac:	0800ceb4 	.word	0x0800ceb4
 800abb0:	0800ceb4 	.word	0x0800ceb4
 800abb4:	0800ceb4 	.word	0x0800ceb4
 800abb8:	0800ceb8 	.word	0x0800ceb8

0800abbc <__retarget_lock_init_recursive>:
 800abbc:	4770      	bx	lr

0800abbe <__retarget_lock_acquire_recursive>:
 800abbe:	4770      	bx	lr

0800abc0 <__retarget_lock_release_recursive>:
 800abc0:	4770      	bx	lr

0800abc2 <memcpy>:
 800abc2:	440a      	add	r2, r1
 800abc4:	4291      	cmp	r1, r2
 800abc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800abca:	d100      	bne.n	800abce <memcpy+0xc>
 800abcc:	4770      	bx	lr
 800abce:	b510      	push	{r4, lr}
 800abd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abd8:	4291      	cmp	r1, r2
 800abda:	d1f9      	bne.n	800abd0 <memcpy+0xe>
 800abdc:	bd10      	pop	{r4, pc}

0800abde <quorem>:
 800abde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe2:	6903      	ldr	r3, [r0, #16]
 800abe4:	690c      	ldr	r4, [r1, #16]
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	4607      	mov	r7, r0
 800abea:	db7e      	blt.n	800acea <quorem+0x10c>
 800abec:	3c01      	subs	r4, #1
 800abee:	f101 0814 	add.w	r8, r1, #20
 800abf2:	f100 0514 	add.w	r5, r0, #20
 800abf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac04:	3301      	adds	r3, #1
 800ac06:	429a      	cmp	r2, r3
 800ac08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac10:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac14:	d331      	bcc.n	800ac7a <quorem+0x9c>
 800ac16:	f04f 0e00 	mov.w	lr, #0
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	46ac      	mov	ip, r5
 800ac1e:	46f2      	mov	sl, lr
 800ac20:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac24:	b293      	uxth	r3, r2
 800ac26:	fb06 e303 	mla	r3, r6, r3, lr
 800ac2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac2e:	0c1a      	lsrs	r2, r3, #16
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	ebaa 0303 	sub.w	r3, sl, r3
 800ac36:	f8dc a000 	ldr.w	sl, [ip]
 800ac3a:	fa13 f38a 	uxtah	r3, r3, sl
 800ac3e:	fb06 220e 	mla	r2, r6, lr, r2
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	9b00      	ldr	r3, [sp, #0]
 800ac46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac54:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac58:	4581      	cmp	r9, r0
 800ac5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac5e:	f84c 3b04 	str.w	r3, [ip], #4
 800ac62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac66:	d2db      	bcs.n	800ac20 <quorem+0x42>
 800ac68:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac6c:	b92b      	cbnz	r3, 800ac7a <quorem+0x9c>
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	429d      	cmp	r5, r3
 800ac74:	461a      	mov	r2, r3
 800ac76:	d32c      	bcc.n	800acd2 <quorem+0xf4>
 800ac78:	613c      	str	r4, [r7, #16]
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f001 f9a6 	bl	800bfcc <__mcmp>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	db22      	blt.n	800acca <quorem+0xec>
 800ac84:	3601      	adds	r6, #1
 800ac86:	4629      	mov	r1, r5
 800ac88:	2000      	movs	r0, #0
 800ac8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac8e:	f8d1 c000 	ldr.w	ip, [r1]
 800ac92:	b293      	uxth	r3, r2
 800ac94:	1ac3      	subs	r3, r0, r3
 800ac96:	0c12      	lsrs	r2, r2, #16
 800ac98:	fa13 f38c 	uxtah	r3, r3, ip
 800ac9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acaa:	45c1      	cmp	r9, r8
 800acac:	f841 3b04 	str.w	r3, [r1], #4
 800acb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acb4:	d2e9      	bcs.n	800ac8a <quorem+0xac>
 800acb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acbe:	b922      	cbnz	r2, 800acca <quorem+0xec>
 800acc0:	3b04      	subs	r3, #4
 800acc2:	429d      	cmp	r5, r3
 800acc4:	461a      	mov	r2, r3
 800acc6:	d30a      	bcc.n	800acde <quorem+0x100>
 800acc8:	613c      	str	r4, [r7, #16]
 800acca:	4630      	mov	r0, r6
 800accc:	b003      	add	sp, #12
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd2:	6812      	ldr	r2, [r2, #0]
 800acd4:	3b04      	subs	r3, #4
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	d1ce      	bne.n	800ac78 <quorem+0x9a>
 800acda:	3c01      	subs	r4, #1
 800acdc:	e7c9      	b.n	800ac72 <quorem+0x94>
 800acde:	6812      	ldr	r2, [r2, #0]
 800ace0:	3b04      	subs	r3, #4
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	d1f0      	bne.n	800acc8 <quorem+0xea>
 800ace6:	3c01      	subs	r4, #1
 800ace8:	e7eb      	b.n	800acc2 <quorem+0xe4>
 800acea:	2000      	movs	r0, #0
 800acec:	e7ee      	b.n	800accc <quorem+0xee>
	...

0800acf0 <_dtoa_r>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	ed2d 8b04 	vpush	{d8-d9}
 800acf8:	69c5      	ldr	r5, [r0, #28]
 800acfa:	b093      	sub	sp, #76	; 0x4c
 800acfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad00:	ec57 6b10 	vmov	r6, r7, d0
 800ad04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad08:	9107      	str	r1, [sp, #28]
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	920a      	str	r2, [sp, #40]	; 0x28
 800ad0e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad10:	b975      	cbnz	r5, 800ad30 <_dtoa_r+0x40>
 800ad12:	2010      	movs	r0, #16
 800ad14:	f000 fe2a 	bl	800b96c <malloc>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	61e0      	str	r0, [r4, #28]
 800ad1c:	b920      	cbnz	r0, 800ad28 <_dtoa_r+0x38>
 800ad1e:	4bae      	ldr	r3, [pc, #696]	; (800afd8 <_dtoa_r+0x2e8>)
 800ad20:	21ef      	movs	r1, #239	; 0xef
 800ad22:	48ae      	ldr	r0, [pc, #696]	; (800afdc <_dtoa_r+0x2ec>)
 800ad24:	f001 fcea 	bl	800c6fc <__assert_func>
 800ad28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad2c:	6005      	str	r5, [r0, #0]
 800ad2e:	60c5      	str	r5, [r0, #12]
 800ad30:	69e3      	ldr	r3, [r4, #28]
 800ad32:	6819      	ldr	r1, [r3, #0]
 800ad34:	b151      	cbz	r1, 800ad4c <_dtoa_r+0x5c>
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	604a      	str	r2, [r1, #4]
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4093      	lsls	r3, r2
 800ad3e:	608b      	str	r3, [r1, #8]
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 ff07 	bl	800bb54 <_Bfree>
 800ad46:	69e3      	ldr	r3, [r4, #28]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	1e3b      	subs	r3, r7, #0
 800ad4e:	bfbb      	ittet	lt
 800ad50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad54:	9303      	strlt	r3, [sp, #12]
 800ad56:	2300      	movge	r3, #0
 800ad58:	2201      	movlt	r2, #1
 800ad5a:	bfac      	ite	ge
 800ad5c:	f8c8 3000 	strge.w	r3, [r8]
 800ad60:	f8c8 2000 	strlt.w	r2, [r8]
 800ad64:	4b9e      	ldr	r3, [pc, #632]	; (800afe0 <_dtoa_r+0x2f0>)
 800ad66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad6a:	ea33 0308 	bics.w	r3, r3, r8
 800ad6e:	d11b      	bne.n	800ada8 <_dtoa_r+0xb8>
 800ad70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad72:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ad7c:	4333      	orrs	r3, r6
 800ad7e:	f000 8593 	beq.w	800b8a8 <_dtoa_r+0xbb8>
 800ad82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad84:	b963      	cbnz	r3, 800ada0 <_dtoa_r+0xb0>
 800ad86:	4b97      	ldr	r3, [pc, #604]	; (800afe4 <_dtoa_r+0x2f4>)
 800ad88:	e027      	b.n	800adda <_dtoa_r+0xea>
 800ad8a:	4b97      	ldr	r3, [pc, #604]	; (800afe8 <_dtoa_r+0x2f8>)
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	9800      	ldr	r0, [sp, #0]
 800ad96:	b013      	add	sp, #76	; 0x4c
 800ad98:	ecbd 8b04 	vpop	{d8-d9}
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	4b90      	ldr	r3, [pc, #576]	; (800afe4 <_dtoa_r+0x2f4>)
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	3303      	adds	r3, #3
 800ada6:	e7f3      	b.n	800ad90 <_dtoa_r+0xa0>
 800ada8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adac:	2200      	movs	r2, #0
 800adae:	ec51 0b17 	vmov	r0, r1, d7
 800adb2:	eeb0 8a47 	vmov.f32	s16, s14
 800adb6:	eef0 8a67 	vmov.f32	s17, s15
 800adba:	2300      	movs	r3, #0
 800adbc:	f7f5 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800adc0:	4681      	mov	r9, r0
 800adc2:	b160      	cbz	r0, 800adde <_dtoa_r+0xee>
 800adc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adc6:	2301      	movs	r3, #1
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 8568 	beq.w	800b8a2 <_dtoa_r+0xbb2>
 800add2:	4b86      	ldr	r3, [pc, #536]	; (800afec <_dtoa_r+0x2fc>)
 800add4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	3b01      	subs	r3, #1
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	e7da      	b.n	800ad94 <_dtoa_r+0xa4>
 800adde:	aa10      	add	r2, sp, #64	; 0x40
 800ade0:	a911      	add	r1, sp, #68	; 0x44
 800ade2:	4620      	mov	r0, r4
 800ade4:	eeb0 0a48 	vmov.f32	s0, s16
 800ade8:	eef0 0a68 	vmov.f32	s1, s17
 800adec:	f001 f994 	bl	800c118 <__d2b>
 800adf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800adf4:	4682      	mov	sl, r0
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	d07f      	beq.n	800aefa <_dtoa_r+0x20a>
 800adfa:	ee18 3a90 	vmov	r3, s17
 800adfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae06:	ec51 0b18 	vmov	r0, r1, d8
 800ae0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae16:	4619      	mov	r1, r3
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4b75      	ldr	r3, [pc, #468]	; (800aff0 <_dtoa_r+0x300>)
 800ae1c:	f7f5 fa34 	bl	8000288 <__aeabi_dsub>
 800ae20:	a367      	add	r3, pc, #412	; (adr r3, 800afc0 <_dtoa_r+0x2d0>)
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	f7f5 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ae2a:	a367      	add	r3, pc, #412	; (adr r3, 800afc8 <_dtoa_r+0x2d8>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 fa2c 	bl	800028c <__adddf3>
 800ae34:	4606      	mov	r6, r0
 800ae36:	4628      	mov	r0, r5
 800ae38:	460f      	mov	r7, r1
 800ae3a:	f7f5 fb73 	bl	8000524 <__aeabi_i2d>
 800ae3e:	a364      	add	r3, pc, #400	; (adr r3, 800afd0 <_dtoa_r+0x2e0>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	f7f5 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	4639      	mov	r1, r7
 800ae50:	f7f5 fa1c 	bl	800028c <__adddf3>
 800ae54:	4606      	mov	r6, r0
 800ae56:	460f      	mov	r7, r1
 800ae58:	f7f5 fe7e 	bl	8000b58 <__aeabi_d2iz>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4683      	mov	fp, r0
 800ae60:	2300      	movs	r3, #0
 800ae62:	4630      	mov	r0, r6
 800ae64:	4639      	mov	r1, r7
 800ae66:	f7f5 fe39 	bl	8000adc <__aeabi_dcmplt>
 800ae6a:	b148      	cbz	r0, 800ae80 <_dtoa_r+0x190>
 800ae6c:	4658      	mov	r0, fp
 800ae6e:	f7f5 fb59 	bl	8000524 <__aeabi_i2d>
 800ae72:	4632      	mov	r2, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	f7f5 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae7a:	b908      	cbnz	r0, 800ae80 <_dtoa_r+0x190>
 800ae7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae80:	f1bb 0f16 	cmp.w	fp, #22
 800ae84:	d857      	bhi.n	800af36 <_dtoa_r+0x246>
 800ae86:	4b5b      	ldr	r3, [pc, #364]	; (800aff4 <_dtoa_r+0x304>)
 800ae88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	ec51 0b18 	vmov	r0, r1, d8
 800ae94:	f7f5 fe22 	bl	8000adc <__aeabi_dcmplt>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d04e      	beq.n	800af3a <_dtoa_r+0x24a>
 800ae9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aea0:	2300      	movs	r3, #0
 800aea2:	930c      	str	r3, [sp, #48]	; 0x30
 800aea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aea6:	1b5b      	subs	r3, r3, r5
 800aea8:	1e5a      	subs	r2, r3, #1
 800aeaa:	bf45      	ittet	mi
 800aeac:	f1c3 0301 	rsbmi	r3, r3, #1
 800aeb0:	9305      	strmi	r3, [sp, #20]
 800aeb2:	2300      	movpl	r3, #0
 800aeb4:	2300      	movmi	r3, #0
 800aeb6:	9206      	str	r2, [sp, #24]
 800aeb8:	bf54      	ite	pl
 800aeba:	9305      	strpl	r3, [sp, #20]
 800aebc:	9306      	strmi	r3, [sp, #24]
 800aebe:	f1bb 0f00 	cmp.w	fp, #0
 800aec2:	db3c      	blt.n	800af3e <_dtoa_r+0x24e>
 800aec4:	9b06      	ldr	r3, [sp, #24]
 800aec6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aeca:	445b      	add	r3, fp
 800aecc:	9306      	str	r3, [sp, #24]
 800aece:	2300      	movs	r3, #0
 800aed0:	9308      	str	r3, [sp, #32]
 800aed2:	9b07      	ldr	r3, [sp, #28]
 800aed4:	2b09      	cmp	r3, #9
 800aed6:	d868      	bhi.n	800afaa <_dtoa_r+0x2ba>
 800aed8:	2b05      	cmp	r3, #5
 800aeda:	bfc4      	itt	gt
 800aedc:	3b04      	subgt	r3, #4
 800aede:	9307      	strgt	r3, [sp, #28]
 800aee0:	9b07      	ldr	r3, [sp, #28]
 800aee2:	f1a3 0302 	sub.w	r3, r3, #2
 800aee6:	bfcc      	ite	gt
 800aee8:	2500      	movgt	r5, #0
 800aeea:	2501      	movle	r5, #1
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	f200 8085 	bhi.w	800affc <_dtoa_r+0x30c>
 800aef2:	e8df f003 	tbb	[pc, r3]
 800aef6:	3b2e      	.short	0x3b2e
 800aef8:	5839      	.short	0x5839
 800aefa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aefe:	441d      	add	r5, r3
 800af00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af04:	2b20      	cmp	r3, #32
 800af06:	bfc1      	itttt	gt
 800af08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800af10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af18:	bfd6      	itet	le
 800af1a:	f1c3 0320 	rsble	r3, r3, #32
 800af1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800af22:	fa06 f003 	lslle.w	r0, r6, r3
 800af26:	f7f5 faed 	bl	8000504 <__aeabi_ui2d>
 800af2a:	2201      	movs	r2, #1
 800af2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af30:	3d01      	subs	r5, #1
 800af32:	920e      	str	r2, [sp, #56]	; 0x38
 800af34:	e76f      	b.n	800ae16 <_dtoa_r+0x126>
 800af36:	2301      	movs	r3, #1
 800af38:	e7b3      	b.n	800aea2 <_dtoa_r+0x1b2>
 800af3a:	900c      	str	r0, [sp, #48]	; 0x30
 800af3c:	e7b2      	b.n	800aea4 <_dtoa_r+0x1b4>
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	eba3 030b 	sub.w	r3, r3, fp
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	f1cb 0300 	rsb	r3, fp, #0
 800af4a:	9308      	str	r3, [sp, #32]
 800af4c:	2300      	movs	r3, #0
 800af4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af50:	e7bf      	b.n	800aed2 <_dtoa_r+0x1e2>
 800af52:	2300      	movs	r3, #0
 800af54:	9309      	str	r3, [sp, #36]	; 0x24
 800af56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc52      	bgt.n	800b002 <_dtoa_r+0x312>
 800af5c:	2301      	movs	r3, #1
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	461a      	mov	r2, r3
 800af64:	920a      	str	r2, [sp, #40]	; 0x28
 800af66:	e00b      	b.n	800af80 <_dtoa_r+0x290>
 800af68:	2301      	movs	r3, #1
 800af6a:	e7f3      	b.n	800af54 <_dtoa_r+0x264>
 800af6c:	2300      	movs	r3, #0
 800af6e:	9309      	str	r3, [sp, #36]	; 0x24
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	445b      	add	r3, fp
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	3301      	adds	r3, #1
 800af78:	2b01      	cmp	r3, #1
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	bfb8      	it	lt
 800af7e:	2301      	movlt	r3, #1
 800af80:	69e0      	ldr	r0, [r4, #28]
 800af82:	2100      	movs	r1, #0
 800af84:	2204      	movs	r2, #4
 800af86:	f102 0614 	add.w	r6, r2, #20
 800af8a:	429e      	cmp	r6, r3
 800af8c:	d93d      	bls.n	800b00a <_dtoa_r+0x31a>
 800af8e:	6041      	str	r1, [r0, #4]
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fd9f 	bl	800bad4 <_Balloc>
 800af96:	9000      	str	r0, [sp, #0]
 800af98:	2800      	cmp	r0, #0
 800af9a:	d139      	bne.n	800b010 <_dtoa_r+0x320>
 800af9c:	4b16      	ldr	r3, [pc, #88]	; (800aff8 <_dtoa_r+0x308>)
 800af9e:	4602      	mov	r2, r0
 800afa0:	f240 11af 	movw	r1, #431	; 0x1af
 800afa4:	e6bd      	b.n	800ad22 <_dtoa_r+0x32>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e7e1      	b.n	800af6e <_dtoa_r+0x27e>
 800afaa:	2501      	movs	r5, #1
 800afac:	2300      	movs	r3, #0
 800afae:	9307      	str	r3, [sp, #28]
 800afb0:	9509      	str	r5, [sp, #36]	; 0x24
 800afb2:	f04f 33ff 	mov.w	r3, #4294967295
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	2200      	movs	r2, #0
 800afbc:	2312      	movs	r3, #18
 800afbe:	e7d1      	b.n	800af64 <_dtoa_r+0x274>
 800afc0:	636f4361 	.word	0x636f4361
 800afc4:	3fd287a7 	.word	0x3fd287a7
 800afc8:	8b60c8b3 	.word	0x8b60c8b3
 800afcc:	3fc68a28 	.word	0x3fc68a28
 800afd0:	509f79fb 	.word	0x509f79fb
 800afd4:	3fd34413 	.word	0x3fd34413
 800afd8:	0800cb79 	.word	0x0800cb79
 800afdc:	0800cb90 	.word	0x0800cb90
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	0800cb75 	.word	0x0800cb75
 800afe8:	0800cb6c 	.word	0x0800cb6c
 800afec:	0800cb49 	.word	0x0800cb49
 800aff0:	3ff80000 	.word	0x3ff80000
 800aff4:	0800cc80 	.word	0x0800cc80
 800aff8:	0800cbe8 	.word	0x0800cbe8
 800affc:	2301      	movs	r3, #1
 800affe:	9309      	str	r3, [sp, #36]	; 0x24
 800b000:	e7d7      	b.n	800afb2 <_dtoa_r+0x2c2>
 800b002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	e7ba      	b.n	800af80 <_dtoa_r+0x290>
 800b00a:	3101      	adds	r1, #1
 800b00c:	0052      	lsls	r2, r2, #1
 800b00e:	e7ba      	b.n	800af86 <_dtoa_r+0x296>
 800b010:	69e3      	ldr	r3, [r4, #28]
 800b012:	9a00      	ldr	r2, [sp, #0]
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	2b0e      	cmp	r3, #14
 800b01a:	f200 80a8 	bhi.w	800b16e <_dtoa_r+0x47e>
 800b01e:	2d00      	cmp	r5, #0
 800b020:	f000 80a5 	beq.w	800b16e <_dtoa_r+0x47e>
 800b024:	f1bb 0f00 	cmp.w	fp, #0
 800b028:	dd38      	ble.n	800b09c <_dtoa_r+0x3ac>
 800b02a:	4bc0      	ldr	r3, [pc, #768]	; (800b32c <_dtoa_r+0x63c>)
 800b02c:	f00b 020f 	and.w	r2, fp, #15
 800b030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b034:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b038:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b03c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b040:	d019      	beq.n	800b076 <_dtoa_r+0x386>
 800b042:	4bbb      	ldr	r3, [pc, #748]	; (800b330 <_dtoa_r+0x640>)
 800b044:	ec51 0b18 	vmov	r0, r1, d8
 800b048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b04c:	f7f5 fbfe 	bl	800084c <__aeabi_ddiv>
 800b050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b054:	f008 080f 	and.w	r8, r8, #15
 800b058:	2503      	movs	r5, #3
 800b05a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b330 <_dtoa_r+0x640>
 800b05e:	f1b8 0f00 	cmp.w	r8, #0
 800b062:	d10a      	bne.n	800b07a <_dtoa_r+0x38a>
 800b064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b068:	4632      	mov	r2, r6
 800b06a:	463b      	mov	r3, r7
 800b06c:	f7f5 fbee 	bl	800084c <__aeabi_ddiv>
 800b070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b074:	e02b      	b.n	800b0ce <_dtoa_r+0x3de>
 800b076:	2502      	movs	r5, #2
 800b078:	e7ef      	b.n	800b05a <_dtoa_r+0x36a>
 800b07a:	f018 0f01 	tst.w	r8, #1
 800b07e:	d008      	beq.n	800b092 <_dtoa_r+0x3a2>
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	3501      	adds	r5, #1
 800b08e:	4606      	mov	r6, r0
 800b090:	460f      	mov	r7, r1
 800b092:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b096:	f109 0908 	add.w	r9, r9, #8
 800b09a:	e7e0      	b.n	800b05e <_dtoa_r+0x36e>
 800b09c:	f000 809f 	beq.w	800b1de <_dtoa_r+0x4ee>
 800b0a0:	f1cb 0600 	rsb	r6, fp, #0
 800b0a4:	4ba1      	ldr	r3, [pc, #644]	; (800b32c <_dtoa_r+0x63c>)
 800b0a6:	4fa2      	ldr	r7, [pc, #648]	; (800b330 <_dtoa_r+0x640>)
 800b0a8:	f006 020f 	and.w	r2, r6, #15
 800b0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	ec51 0b18 	vmov	r0, r1, d8
 800b0b8:	f7f5 fa9e 	bl	80005f8 <__aeabi_dmul>
 800b0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0c0:	1136      	asrs	r6, r6, #4
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	2502      	movs	r5, #2
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	d17e      	bne.n	800b1c8 <_dtoa_r+0x4d8>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1d0      	bne.n	800b070 <_dtoa_r+0x380>
 800b0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8084 	beq.w	800b1e2 <_dtoa_r+0x4f2>
 800b0da:	4b96      	ldr	r3, [pc, #600]	; (800b334 <_dtoa_r+0x644>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	f7f5 fcfb 	bl	8000adc <__aeabi_dcmplt>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d07b      	beq.n	800b1e2 <_dtoa_r+0x4f2>
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d078      	beq.n	800b1e2 <_dtoa_r+0x4f2>
 800b0f0:	9b01      	ldr	r3, [sp, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd39      	ble.n	800b16a <_dtoa_r+0x47a>
 800b0f6:	4b90      	ldr	r3, [pc, #576]	; (800b338 <_dtoa_r+0x648>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	f7f5 fa7b 	bl	80005f8 <__aeabi_dmul>
 800b102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b106:	9e01      	ldr	r6, [sp, #4]
 800b108:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b10c:	3501      	adds	r5, #1
 800b10e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b112:	4628      	mov	r0, r5
 800b114:	f7f5 fa06 	bl	8000524 <__aeabi_i2d>
 800b118:	4642      	mov	r2, r8
 800b11a:	464b      	mov	r3, r9
 800b11c:	f7f5 fa6c 	bl	80005f8 <__aeabi_dmul>
 800b120:	4b86      	ldr	r3, [pc, #536]	; (800b33c <_dtoa_r+0x64c>)
 800b122:	2200      	movs	r2, #0
 800b124:	f7f5 f8b2 	bl	800028c <__adddf3>
 800b128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b130:	9303      	str	r3, [sp, #12]
 800b132:	2e00      	cmp	r6, #0
 800b134:	d158      	bne.n	800b1e8 <_dtoa_r+0x4f8>
 800b136:	4b82      	ldr	r3, [pc, #520]	; (800b340 <_dtoa_r+0x650>)
 800b138:	2200      	movs	r2, #0
 800b13a:	4640      	mov	r0, r8
 800b13c:	4649      	mov	r1, r9
 800b13e:	f7f5 f8a3 	bl	8000288 <__aeabi_dsub>
 800b142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b146:	4680      	mov	r8, r0
 800b148:	4689      	mov	r9, r1
 800b14a:	f7f5 fce5 	bl	8000b18 <__aeabi_dcmpgt>
 800b14e:	2800      	cmp	r0, #0
 800b150:	f040 8296 	bne.w	800b680 <_dtoa_r+0x990>
 800b154:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b158:	4640      	mov	r0, r8
 800b15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800b164:	2800      	cmp	r0, #0
 800b166:	f040 8289 	bne.w	800b67c <_dtoa_r+0x98c>
 800b16a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b170:	2b00      	cmp	r3, #0
 800b172:	f2c0 814e 	blt.w	800b412 <_dtoa_r+0x722>
 800b176:	f1bb 0f0e 	cmp.w	fp, #14
 800b17a:	f300 814a 	bgt.w	800b412 <_dtoa_r+0x722>
 800b17e:	4b6b      	ldr	r3, [pc, #428]	; (800b32c <_dtoa_r+0x63c>)
 800b180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b184:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f280 80dc 	bge.w	800b348 <_dtoa_r+0x658>
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f300 80d8 	bgt.w	800b348 <_dtoa_r+0x658>
 800b198:	f040 826f 	bne.w	800b67a <_dtoa_r+0x98a>
 800b19c:	4b68      	ldr	r3, [pc, #416]	; (800b340 <_dtoa_r+0x650>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	f7f5 fa28 	bl	80005f8 <__aeabi_dmul>
 800b1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ac:	f7f5 fcaa 	bl	8000b04 <__aeabi_dcmpge>
 800b1b0:	9e04      	ldr	r6, [sp, #16]
 800b1b2:	4637      	mov	r7, r6
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	f040 8245 	bne.w	800b644 <_dtoa_r+0x954>
 800b1ba:	9d00      	ldr	r5, [sp, #0]
 800b1bc:	2331      	movs	r3, #49	; 0x31
 800b1be:	f805 3b01 	strb.w	r3, [r5], #1
 800b1c2:	f10b 0b01 	add.w	fp, fp, #1
 800b1c6:	e241      	b.n	800b64c <_dtoa_r+0x95c>
 800b1c8:	07f2      	lsls	r2, r6, #31
 800b1ca:	d505      	bpl.n	800b1d8 <_dtoa_r+0x4e8>
 800b1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d0:	f7f5 fa12 	bl	80005f8 <__aeabi_dmul>
 800b1d4:	3501      	adds	r5, #1
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	1076      	asrs	r6, r6, #1
 800b1da:	3708      	adds	r7, #8
 800b1dc:	e773      	b.n	800b0c6 <_dtoa_r+0x3d6>
 800b1de:	2502      	movs	r5, #2
 800b1e0:	e775      	b.n	800b0ce <_dtoa_r+0x3de>
 800b1e2:	9e04      	ldr	r6, [sp, #16]
 800b1e4:	465f      	mov	r7, fp
 800b1e6:	e792      	b.n	800b10e <_dtoa_r+0x41e>
 800b1e8:	9900      	ldr	r1, [sp, #0]
 800b1ea:	4b50      	ldr	r3, [pc, #320]	; (800b32c <_dtoa_r+0x63c>)
 800b1ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1f0:	4431      	add	r1, r6
 800b1f2:	9102      	str	r1, [sp, #8]
 800b1f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1f6:	eeb0 9a47 	vmov.f32	s18, s14
 800b1fa:	eef0 9a67 	vmov.f32	s19, s15
 800b1fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b202:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b206:	2900      	cmp	r1, #0
 800b208:	d044      	beq.n	800b294 <_dtoa_r+0x5a4>
 800b20a:	494e      	ldr	r1, [pc, #312]	; (800b344 <_dtoa_r+0x654>)
 800b20c:	2000      	movs	r0, #0
 800b20e:	f7f5 fb1d 	bl	800084c <__aeabi_ddiv>
 800b212:	ec53 2b19 	vmov	r2, r3, d9
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	9d00      	ldr	r5, [sp, #0]
 800b21c:	ec41 0b19 	vmov	d9, r0, r1
 800b220:	4649      	mov	r1, r9
 800b222:	4640      	mov	r0, r8
 800b224:	f7f5 fc98 	bl	8000b58 <__aeabi_d2iz>
 800b228:	4606      	mov	r6, r0
 800b22a:	f7f5 f97b 	bl	8000524 <__aeabi_i2d>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4640      	mov	r0, r8
 800b234:	4649      	mov	r1, r9
 800b236:	f7f5 f827 	bl	8000288 <__aeabi_dsub>
 800b23a:	3630      	adds	r6, #48	; 0x30
 800b23c:	f805 6b01 	strb.w	r6, [r5], #1
 800b240:	ec53 2b19 	vmov	r2, r3, d9
 800b244:	4680      	mov	r8, r0
 800b246:	4689      	mov	r9, r1
 800b248:	f7f5 fc48 	bl	8000adc <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d164      	bne.n	800b31a <_dtoa_r+0x62a>
 800b250:	4642      	mov	r2, r8
 800b252:	464b      	mov	r3, r9
 800b254:	4937      	ldr	r1, [pc, #220]	; (800b334 <_dtoa_r+0x644>)
 800b256:	2000      	movs	r0, #0
 800b258:	f7f5 f816 	bl	8000288 <__aeabi_dsub>
 800b25c:	ec53 2b19 	vmov	r2, r3, d9
 800b260:	f7f5 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800b264:	2800      	cmp	r0, #0
 800b266:	f040 80b6 	bne.w	800b3d6 <_dtoa_r+0x6e6>
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	429d      	cmp	r5, r3
 800b26e:	f43f af7c 	beq.w	800b16a <_dtoa_r+0x47a>
 800b272:	4b31      	ldr	r3, [pc, #196]	; (800b338 <_dtoa_r+0x648>)
 800b274:	ec51 0b19 	vmov	r0, r1, d9
 800b278:	2200      	movs	r2, #0
 800b27a:	f7f5 f9bd 	bl	80005f8 <__aeabi_dmul>
 800b27e:	4b2e      	ldr	r3, [pc, #184]	; (800b338 <_dtoa_r+0x648>)
 800b280:	ec41 0b19 	vmov	d9, r0, r1
 800b284:	2200      	movs	r2, #0
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f9b5 	bl	80005f8 <__aeabi_dmul>
 800b28e:	4680      	mov	r8, r0
 800b290:	4689      	mov	r9, r1
 800b292:	e7c5      	b.n	800b220 <_dtoa_r+0x530>
 800b294:	ec51 0b17 	vmov	r0, r1, d7
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	9d00      	ldr	r5, [sp, #0]
 800b2a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2a2:	ec41 0b19 	vmov	d9, r0, r1
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	f7f5 fc55 	bl	8000b58 <__aeabi_d2iz>
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	f7f5 f938 	bl	8000524 <__aeabi_i2d>
 800b2b4:	3630      	adds	r6, #48	; 0x30
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f4 ffe3 	bl	8000288 <__aeabi_dsub>
 800b2c2:	f805 6b01 	strb.w	r6, [r5], #1
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	429d      	cmp	r5, r3
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	f04f 0200 	mov.w	r2, #0
 800b2d2:	d124      	bne.n	800b31e <_dtoa_r+0x62e>
 800b2d4:	4b1b      	ldr	r3, [pc, #108]	; (800b344 <_dtoa_r+0x654>)
 800b2d6:	ec51 0b19 	vmov	r0, r1, d9
 800b2da:	f7f4 ffd7 	bl	800028c <__adddf3>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	f7f5 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d173      	bne.n	800b3d6 <_dtoa_r+0x6e6>
 800b2ee:	ec53 2b19 	vmov	r2, r3, d9
 800b2f2:	4914      	ldr	r1, [pc, #80]	; (800b344 <_dtoa_r+0x654>)
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f7f4 ffc7 	bl	8000288 <__aeabi_dsub>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800b306:	2800      	cmp	r0, #0
 800b308:	f43f af2f 	beq.w	800b16a <_dtoa_r+0x47a>
 800b30c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b30e:	1e6b      	subs	r3, r5, #1
 800b310:	930f      	str	r3, [sp, #60]	; 0x3c
 800b312:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b316:	2b30      	cmp	r3, #48	; 0x30
 800b318:	d0f8      	beq.n	800b30c <_dtoa_r+0x61c>
 800b31a:	46bb      	mov	fp, r7
 800b31c:	e04a      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b31e:	4b06      	ldr	r3, [pc, #24]	; (800b338 <_dtoa_r+0x648>)
 800b320:	f7f5 f96a 	bl	80005f8 <__aeabi_dmul>
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	e7bd      	b.n	800b2a6 <_dtoa_r+0x5b6>
 800b32a:	bf00      	nop
 800b32c:	0800cc80 	.word	0x0800cc80
 800b330:	0800cc58 	.word	0x0800cc58
 800b334:	3ff00000 	.word	0x3ff00000
 800b338:	40240000 	.word	0x40240000
 800b33c:	401c0000 	.word	0x401c0000
 800b340:	40140000 	.word	0x40140000
 800b344:	3fe00000 	.word	0x3fe00000
 800b348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b34c:	9d00      	ldr	r5, [sp, #0]
 800b34e:	4642      	mov	r2, r8
 800b350:	464b      	mov	r3, r9
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 fa79 	bl	800084c <__aeabi_ddiv>
 800b35a:	f7f5 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800b35e:	9001      	str	r0, [sp, #4]
 800b360:	f7f5 f8e0 	bl	8000524 <__aeabi_i2d>
 800b364:	4642      	mov	r2, r8
 800b366:	464b      	mov	r3, r9
 800b368:	f7f5 f946 	bl	80005f8 <__aeabi_dmul>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4630      	mov	r0, r6
 800b372:	4639      	mov	r1, r7
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	9e01      	ldr	r6, [sp, #4]
 800b37a:	9f04      	ldr	r7, [sp, #16]
 800b37c:	3630      	adds	r6, #48	; 0x30
 800b37e:	f805 6b01 	strb.w	r6, [r5], #1
 800b382:	9e00      	ldr	r6, [sp, #0]
 800b384:	1bae      	subs	r6, r5, r6
 800b386:	42b7      	cmp	r7, r6
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	d134      	bne.n	800b3f8 <_dtoa_r+0x708>
 800b38e:	f7f4 ff7d 	bl	800028c <__adddf3>
 800b392:	4642      	mov	r2, r8
 800b394:	464b      	mov	r3, r9
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	f7f5 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800b39e:	b9c8      	cbnz	r0, 800b3d4 <_dtoa_r+0x6e4>
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	f7f5 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ac:	b110      	cbz	r0, 800b3b4 <_dtoa_r+0x6c4>
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	07db      	lsls	r3, r3, #31
 800b3b2:	d40f      	bmi.n	800b3d4 <_dtoa_r+0x6e4>
 800b3b4:	4651      	mov	r1, sl
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 fbcc 	bl	800bb54 <_Bfree>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3c0:	702b      	strb	r3, [r5, #0]
 800b3c2:	f10b 0301 	add.w	r3, fp, #1
 800b3c6:	6013      	str	r3, [r2, #0]
 800b3c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f43f ace2 	beq.w	800ad94 <_dtoa_r+0xa4>
 800b3d0:	601d      	str	r5, [r3, #0]
 800b3d2:	e4df      	b.n	800ad94 <_dtoa_r+0xa4>
 800b3d4:	465f      	mov	r7, fp
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	461d      	mov	r5, r3
 800b3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3de:	2a39      	cmp	r2, #57	; 0x39
 800b3e0:	d106      	bne.n	800b3f0 <_dtoa_r+0x700>
 800b3e2:	9a00      	ldr	r2, [sp, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d1f7      	bne.n	800b3d8 <_dtoa_r+0x6e8>
 800b3e8:	9900      	ldr	r1, [sp, #0]
 800b3ea:	2230      	movs	r2, #48	; 0x30
 800b3ec:	3701      	adds	r7, #1
 800b3ee:	700a      	strb	r2, [r1, #0]
 800b3f0:	781a      	ldrb	r2, [r3, #0]
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	e790      	b.n	800b31a <_dtoa_r+0x62a>
 800b3f8:	4ba3      	ldr	r3, [pc, #652]	; (800b688 <_dtoa_r+0x998>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f7f5 f8fc 	bl	80005f8 <__aeabi_dmul>
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	4606      	mov	r6, r0
 800b406:	460f      	mov	r7, r1
 800b408:	f7f5 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d09e      	beq.n	800b34e <_dtoa_r+0x65e>
 800b410:	e7d0      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b414:	2a00      	cmp	r2, #0
 800b416:	f000 80ca 	beq.w	800b5ae <_dtoa_r+0x8be>
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	2a01      	cmp	r2, #1
 800b41e:	f300 80ad 	bgt.w	800b57c <_dtoa_r+0x88c>
 800b422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b424:	2a00      	cmp	r2, #0
 800b426:	f000 80a5 	beq.w	800b574 <_dtoa_r+0x884>
 800b42a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b42e:	9e08      	ldr	r6, [sp, #32]
 800b430:	9d05      	ldr	r5, [sp, #20]
 800b432:	9a05      	ldr	r2, [sp, #20]
 800b434:	441a      	add	r2, r3
 800b436:	9205      	str	r2, [sp, #20]
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	2101      	movs	r1, #1
 800b43c:	441a      	add	r2, r3
 800b43e:	4620      	mov	r0, r4
 800b440:	9206      	str	r2, [sp, #24]
 800b442:	f000 fc3d 	bl	800bcc0 <__i2b>
 800b446:	4607      	mov	r7, r0
 800b448:	b165      	cbz	r5, 800b464 <_dtoa_r+0x774>
 800b44a:	9b06      	ldr	r3, [sp, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd09      	ble.n	800b464 <_dtoa_r+0x774>
 800b450:	42ab      	cmp	r3, r5
 800b452:	9a05      	ldr	r2, [sp, #20]
 800b454:	bfa8      	it	ge
 800b456:	462b      	movge	r3, r5
 800b458:	1ad2      	subs	r2, r2, r3
 800b45a:	9205      	str	r2, [sp, #20]
 800b45c:	9a06      	ldr	r2, [sp, #24]
 800b45e:	1aed      	subs	r5, r5, r3
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	9306      	str	r3, [sp, #24]
 800b464:	9b08      	ldr	r3, [sp, #32]
 800b466:	b1f3      	cbz	r3, 800b4a6 <_dtoa_r+0x7b6>
 800b468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 80a3 	beq.w	800b5b6 <_dtoa_r+0x8c6>
 800b470:	2e00      	cmp	r6, #0
 800b472:	dd10      	ble.n	800b496 <_dtoa_r+0x7a6>
 800b474:	4639      	mov	r1, r7
 800b476:	4632      	mov	r2, r6
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 fce1 	bl	800be40 <__pow5mult>
 800b47e:	4652      	mov	r2, sl
 800b480:	4601      	mov	r1, r0
 800b482:	4607      	mov	r7, r0
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fc31 	bl	800bcec <__multiply>
 800b48a:	4651      	mov	r1, sl
 800b48c:	4680      	mov	r8, r0
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fb60 	bl	800bb54 <_Bfree>
 800b494:	46c2      	mov	sl, r8
 800b496:	9b08      	ldr	r3, [sp, #32]
 800b498:	1b9a      	subs	r2, r3, r6
 800b49a:	d004      	beq.n	800b4a6 <_dtoa_r+0x7b6>
 800b49c:	4651      	mov	r1, sl
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fcce 	bl	800be40 <__pow5mult>
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 fc09 	bl	800bcc0 <__i2b>
 800b4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	f340 8081 	ble.w	800b5ba <_dtoa_r+0x8ca>
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fcbf 	bl	800be40 <__pow5mult>
 800b4c2:	9b07      	ldr	r3, [sp, #28]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	dd7a      	ble.n	800b5c0 <_dtoa_r+0x8d0>
 800b4ca:	f04f 0800 	mov.w	r8, #0
 800b4ce:	6933      	ldr	r3, [r6, #16]
 800b4d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4d4:	6918      	ldr	r0, [r3, #16]
 800b4d6:	f000 fba5 	bl	800bc24 <__hi0bits>
 800b4da:	f1c0 0020 	rsb	r0, r0, #32
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	4418      	add	r0, r3
 800b4e2:	f010 001f 	ands.w	r0, r0, #31
 800b4e6:	f000 8094 	beq.w	800b612 <_dtoa_r+0x922>
 800b4ea:	f1c0 0320 	rsb	r3, r0, #32
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	f340 8085 	ble.w	800b5fe <_dtoa_r+0x90e>
 800b4f4:	9b05      	ldr	r3, [sp, #20]
 800b4f6:	f1c0 001c 	rsb	r0, r0, #28
 800b4fa:	4403      	add	r3, r0
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	9b06      	ldr	r3, [sp, #24]
 800b500:	4403      	add	r3, r0
 800b502:	4405      	add	r5, r0
 800b504:	9306      	str	r3, [sp, #24]
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dd05      	ble.n	800b518 <_dtoa_r+0x828>
 800b50c:	4651      	mov	r1, sl
 800b50e:	461a      	mov	r2, r3
 800b510:	4620      	mov	r0, r4
 800b512:	f000 fcef 	bl	800bef4 <__lshift>
 800b516:	4682      	mov	sl, r0
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	dd05      	ble.n	800b52a <_dtoa_r+0x83a>
 800b51e:	4631      	mov	r1, r6
 800b520:	461a      	mov	r2, r3
 800b522:	4620      	mov	r0, r4
 800b524:	f000 fce6 	bl	800bef4 <__lshift>
 800b528:	4606      	mov	r6, r0
 800b52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d072      	beq.n	800b616 <_dtoa_r+0x926>
 800b530:	4631      	mov	r1, r6
 800b532:	4650      	mov	r0, sl
 800b534:	f000 fd4a 	bl	800bfcc <__mcmp>
 800b538:	2800      	cmp	r0, #0
 800b53a:	da6c      	bge.n	800b616 <_dtoa_r+0x926>
 800b53c:	2300      	movs	r3, #0
 800b53e:	4651      	mov	r1, sl
 800b540:	220a      	movs	r2, #10
 800b542:	4620      	mov	r0, r4
 800b544:	f000 fb28 	bl	800bb98 <__multadd>
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b54e:	4682      	mov	sl, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 81b0 	beq.w	800b8b6 <_dtoa_r+0xbc6>
 800b556:	2300      	movs	r3, #0
 800b558:	4639      	mov	r1, r7
 800b55a:	220a      	movs	r2, #10
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 fb1b 	bl	800bb98 <__multadd>
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	4607      	mov	r7, r0
 800b568:	f300 8096 	bgt.w	800b698 <_dtoa_r+0x9a8>
 800b56c:	9b07      	ldr	r3, [sp, #28]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	dc59      	bgt.n	800b626 <_dtoa_r+0x936>
 800b572:	e091      	b.n	800b698 <_dtoa_r+0x9a8>
 800b574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b57a:	e758      	b.n	800b42e <_dtoa_r+0x73e>
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	1e5e      	subs	r6, r3, #1
 800b580:	9b08      	ldr	r3, [sp, #32]
 800b582:	42b3      	cmp	r3, r6
 800b584:	bfbf      	itttt	lt
 800b586:	9b08      	ldrlt	r3, [sp, #32]
 800b588:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b58a:	9608      	strlt	r6, [sp, #32]
 800b58c:	1af3      	sublt	r3, r6, r3
 800b58e:	bfb4      	ite	lt
 800b590:	18d2      	addlt	r2, r2, r3
 800b592:	1b9e      	subge	r6, r3, r6
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	bfbc      	itt	lt
 800b598:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b59a:	2600      	movlt	r6, #0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bfb7      	itett	lt
 800b5a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b5a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b5a8:	1a9d      	sublt	r5, r3, r2
 800b5aa:	2300      	movlt	r3, #0
 800b5ac:	e741      	b.n	800b432 <_dtoa_r+0x742>
 800b5ae:	9e08      	ldr	r6, [sp, #32]
 800b5b0:	9d05      	ldr	r5, [sp, #20]
 800b5b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b5b4:	e748      	b.n	800b448 <_dtoa_r+0x758>
 800b5b6:	9a08      	ldr	r2, [sp, #32]
 800b5b8:	e770      	b.n	800b49c <_dtoa_r+0x7ac>
 800b5ba:	9b07      	ldr	r3, [sp, #28]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	dc19      	bgt.n	800b5f4 <_dtoa_r+0x904>
 800b5c0:	9b02      	ldr	r3, [sp, #8]
 800b5c2:	b9bb      	cbnz	r3, 800b5f4 <_dtoa_r+0x904>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ca:	b99b      	cbnz	r3, 800b5f4 <_dtoa_r+0x904>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5d2:	0d1b      	lsrs	r3, r3, #20
 800b5d4:	051b      	lsls	r3, r3, #20
 800b5d6:	b183      	cbz	r3, 800b5fa <_dtoa_r+0x90a>
 800b5d8:	9b05      	ldr	r3, [sp, #20]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	9b06      	ldr	r3, [sp, #24]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	9306      	str	r3, [sp, #24]
 800b5e4:	f04f 0801 	mov.w	r8, #1
 800b5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f47f af6f 	bne.w	800b4ce <_dtoa_r+0x7de>
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	e774      	b.n	800b4de <_dtoa_r+0x7ee>
 800b5f4:	f04f 0800 	mov.w	r8, #0
 800b5f8:	e7f6      	b.n	800b5e8 <_dtoa_r+0x8f8>
 800b5fa:	4698      	mov	r8, r3
 800b5fc:	e7f4      	b.n	800b5e8 <_dtoa_r+0x8f8>
 800b5fe:	d082      	beq.n	800b506 <_dtoa_r+0x816>
 800b600:	9a05      	ldr	r2, [sp, #20]
 800b602:	331c      	adds	r3, #28
 800b604:	441a      	add	r2, r3
 800b606:	9205      	str	r2, [sp, #20]
 800b608:	9a06      	ldr	r2, [sp, #24]
 800b60a:	441a      	add	r2, r3
 800b60c:	441d      	add	r5, r3
 800b60e:	9206      	str	r2, [sp, #24]
 800b610:	e779      	b.n	800b506 <_dtoa_r+0x816>
 800b612:	4603      	mov	r3, r0
 800b614:	e7f4      	b.n	800b600 <_dtoa_r+0x910>
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dc37      	bgt.n	800b68c <_dtoa_r+0x99c>
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	dd34      	ble.n	800b68c <_dtoa_r+0x99c>
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	b963      	cbnz	r3, 800b644 <_dtoa_r+0x954>
 800b62a:	4631      	mov	r1, r6
 800b62c:	2205      	movs	r2, #5
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 fab2 	bl	800bb98 <__multadd>
 800b634:	4601      	mov	r1, r0
 800b636:	4606      	mov	r6, r0
 800b638:	4650      	mov	r0, sl
 800b63a:	f000 fcc7 	bl	800bfcc <__mcmp>
 800b63e:	2800      	cmp	r0, #0
 800b640:	f73f adbb 	bgt.w	800b1ba <_dtoa_r+0x4ca>
 800b644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b646:	9d00      	ldr	r5, [sp, #0]
 800b648:	ea6f 0b03 	mvn.w	fp, r3
 800b64c:	f04f 0800 	mov.w	r8, #0
 800b650:	4631      	mov	r1, r6
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fa7e 	bl	800bb54 <_Bfree>
 800b658:	2f00      	cmp	r7, #0
 800b65a:	f43f aeab 	beq.w	800b3b4 <_dtoa_r+0x6c4>
 800b65e:	f1b8 0f00 	cmp.w	r8, #0
 800b662:	d005      	beq.n	800b670 <_dtoa_r+0x980>
 800b664:	45b8      	cmp	r8, r7
 800b666:	d003      	beq.n	800b670 <_dtoa_r+0x980>
 800b668:	4641      	mov	r1, r8
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 fa72 	bl	800bb54 <_Bfree>
 800b670:	4639      	mov	r1, r7
 800b672:	4620      	mov	r0, r4
 800b674:	f000 fa6e 	bl	800bb54 <_Bfree>
 800b678:	e69c      	b.n	800b3b4 <_dtoa_r+0x6c4>
 800b67a:	2600      	movs	r6, #0
 800b67c:	4637      	mov	r7, r6
 800b67e:	e7e1      	b.n	800b644 <_dtoa_r+0x954>
 800b680:	46bb      	mov	fp, r7
 800b682:	4637      	mov	r7, r6
 800b684:	e599      	b.n	800b1ba <_dtoa_r+0x4ca>
 800b686:	bf00      	nop
 800b688:	40240000 	.word	0x40240000
 800b68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 80c8 	beq.w	800b824 <_dtoa_r+0xb34>
 800b694:	9b04      	ldr	r3, [sp, #16]
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	2d00      	cmp	r5, #0
 800b69a:	dd05      	ble.n	800b6a8 <_dtoa_r+0x9b8>
 800b69c:	4639      	mov	r1, r7
 800b69e:	462a      	mov	r2, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fc27 	bl	800bef4 <__lshift>
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ac:	d05b      	beq.n	800b766 <_dtoa_r+0xa76>
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fa0f 	bl	800bad4 <_Balloc>
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b928      	cbnz	r0, 800b6c6 <_dtoa_r+0x9d6>
 800b6ba:	4b83      	ldr	r3, [pc, #524]	; (800b8c8 <_dtoa_r+0xbd8>)
 800b6bc:	4602      	mov	r2, r0
 800b6be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b6c2:	f7ff bb2e 	b.w	800ad22 <_dtoa_r+0x32>
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	3202      	adds	r2, #2
 800b6ca:	0092      	lsls	r2, r2, #2
 800b6cc:	f107 010c 	add.w	r1, r7, #12
 800b6d0:	300c      	adds	r0, #12
 800b6d2:	f7ff fa76 	bl	800abc2 <memcpy>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 fc0a 	bl	800bef4 <__lshift>
 800b6e0:	9b00      	ldr	r3, [sp, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	9308      	str	r3, [sp, #32]
 800b6ee:	9b02      	ldr	r3, [sp, #8]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	46b8      	mov	r8, r7
 800b6f6:	9306      	str	r3, [sp, #24]
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	3b01      	subs	r3, #1
 800b700:	4650      	mov	r0, sl
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	f7ff fa6b 	bl	800abde <quorem>
 800b708:	4641      	mov	r1, r8
 800b70a:	9002      	str	r0, [sp, #8]
 800b70c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b710:	4650      	mov	r0, sl
 800b712:	f000 fc5b 	bl	800bfcc <__mcmp>
 800b716:	463a      	mov	r2, r7
 800b718:	9005      	str	r0, [sp, #20]
 800b71a:	4631      	mov	r1, r6
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fc71 	bl	800c004 <__mdiff>
 800b722:	68c2      	ldr	r2, [r0, #12]
 800b724:	4605      	mov	r5, r0
 800b726:	bb02      	cbnz	r2, 800b76a <_dtoa_r+0xa7a>
 800b728:	4601      	mov	r1, r0
 800b72a:	4650      	mov	r0, sl
 800b72c:	f000 fc4e 	bl	800bfcc <__mcmp>
 800b730:	4602      	mov	r2, r0
 800b732:	4629      	mov	r1, r5
 800b734:	4620      	mov	r0, r4
 800b736:	9209      	str	r2, [sp, #36]	; 0x24
 800b738:	f000 fa0c 	bl	800bb54 <_Bfree>
 800b73c:	9b07      	ldr	r3, [sp, #28]
 800b73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b740:	9d04      	ldr	r5, [sp, #16]
 800b742:	ea43 0102 	orr.w	r1, r3, r2
 800b746:	9b06      	ldr	r3, [sp, #24]
 800b748:	4319      	orrs	r1, r3
 800b74a:	d110      	bne.n	800b76e <_dtoa_r+0xa7e>
 800b74c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b750:	d029      	beq.n	800b7a6 <_dtoa_r+0xab6>
 800b752:	9b05      	ldr	r3, [sp, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd02      	ble.n	800b75e <_dtoa_r+0xa6e>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	f883 9000 	strb.w	r9, [r3]
 800b764:	e774      	b.n	800b650 <_dtoa_r+0x960>
 800b766:	4638      	mov	r0, r7
 800b768:	e7ba      	b.n	800b6e0 <_dtoa_r+0x9f0>
 800b76a:	2201      	movs	r2, #1
 800b76c:	e7e1      	b.n	800b732 <_dtoa_r+0xa42>
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	db04      	blt.n	800b77e <_dtoa_r+0xa8e>
 800b774:	9907      	ldr	r1, [sp, #28]
 800b776:	430b      	orrs	r3, r1
 800b778:	9906      	ldr	r1, [sp, #24]
 800b77a:	430b      	orrs	r3, r1
 800b77c:	d120      	bne.n	800b7c0 <_dtoa_r+0xad0>
 800b77e:	2a00      	cmp	r2, #0
 800b780:	dded      	ble.n	800b75e <_dtoa_r+0xa6e>
 800b782:	4651      	mov	r1, sl
 800b784:	2201      	movs	r2, #1
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fbb4 	bl	800bef4 <__lshift>
 800b78c:	4631      	mov	r1, r6
 800b78e:	4682      	mov	sl, r0
 800b790:	f000 fc1c 	bl	800bfcc <__mcmp>
 800b794:	2800      	cmp	r0, #0
 800b796:	dc03      	bgt.n	800b7a0 <_dtoa_r+0xab0>
 800b798:	d1e1      	bne.n	800b75e <_dtoa_r+0xa6e>
 800b79a:	f019 0f01 	tst.w	r9, #1
 800b79e:	d0de      	beq.n	800b75e <_dtoa_r+0xa6e>
 800b7a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7a4:	d1d8      	bne.n	800b758 <_dtoa_r+0xa68>
 800b7a6:	9a01      	ldr	r2, [sp, #4]
 800b7a8:	2339      	movs	r3, #57	; 0x39
 800b7aa:	7013      	strb	r3, [r2, #0]
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	461d      	mov	r5, r3
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7b6:	2a39      	cmp	r2, #57	; 0x39
 800b7b8:	d06c      	beq.n	800b894 <_dtoa_r+0xba4>
 800b7ba:	3201      	adds	r2, #1
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e747      	b.n	800b650 <_dtoa_r+0x960>
 800b7c0:	2a00      	cmp	r2, #0
 800b7c2:	dd07      	ble.n	800b7d4 <_dtoa_r+0xae4>
 800b7c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7c8:	d0ed      	beq.n	800b7a6 <_dtoa_r+0xab6>
 800b7ca:	9a01      	ldr	r2, [sp, #4]
 800b7cc:	f109 0301 	add.w	r3, r9, #1
 800b7d0:	7013      	strb	r3, [r2, #0]
 800b7d2:	e73d      	b.n	800b650 <_dtoa_r+0x960>
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	9a08      	ldr	r2, [sp, #32]
 800b7d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d043      	beq.n	800b868 <_dtoa_r+0xb78>
 800b7e0:	4651      	mov	r1, sl
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	220a      	movs	r2, #10
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 f9d6 	bl	800bb98 <__multadd>
 800b7ec:	45b8      	cmp	r8, r7
 800b7ee:	4682      	mov	sl, r0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	f04f 020a 	mov.w	r2, #10
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	d107      	bne.n	800b80e <_dtoa_r+0xb1e>
 800b7fe:	f000 f9cb 	bl	800bb98 <__multadd>
 800b802:	4680      	mov	r8, r0
 800b804:	4607      	mov	r7, r0
 800b806:	9b04      	ldr	r3, [sp, #16]
 800b808:	3301      	adds	r3, #1
 800b80a:	9304      	str	r3, [sp, #16]
 800b80c:	e775      	b.n	800b6fa <_dtoa_r+0xa0a>
 800b80e:	f000 f9c3 	bl	800bb98 <__multadd>
 800b812:	4639      	mov	r1, r7
 800b814:	4680      	mov	r8, r0
 800b816:	2300      	movs	r3, #0
 800b818:	220a      	movs	r2, #10
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f9bc 	bl	800bb98 <__multadd>
 800b820:	4607      	mov	r7, r0
 800b822:	e7f0      	b.n	800b806 <_dtoa_r+0xb16>
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	9d00      	ldr	r5, [sp, #0]
 800b82a:	4631      	mov	r1, r6
 800b82c:	4650      	mov	r0, sl
 800b82e:	f7ff f9d6 	bl	800abde <quorem>
 800b832:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	f805 9b01 	strb.w	r9, [r5], #1
 800b83c:	1aea      	subs	r2, r5, r3
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	4293      	cmp	r3, r2
 800b842:	dd07      	ble.n	800b854 <_dtoa_r+0xb64>
 800b844:	4651      	mov	r1, sl
 800b846:	2300      	movs	r3, #0
 800b848:	220a      	movs	r2, #10
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f9a4 	bl	800bb98 <__multadd>
 800b850:	4682      	mov	sl, r0
 800b852:	e7ea      	b.n	800b82a <_dtoa_r+0xb3a>
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	bfc8      	it	gt
 800b85a:	461d      	movgt	r5, r3
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	bfd8      	it	le
 800b860:	2501      	movle	r5, #1
 800b862:	441d      	add	r5, r3
 800b864:	f04f 0800 	mov.w	r8, #0
 800b868:	4651      	mov	r1, sl
 800b86a:	2201      	movs	r2, #1
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fb41 	bl	800bef4 <__lshift>
 800b872:	4631      	mov	r1, r6
 800b874:	4682      	mov	sl, r0
 800b876:	f000 fba9 	bl	800bfcc <__mcmp>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	dc96      	bgt.n	800b7ac <_dtoa_r+0xabc>
 800b87e:	d102      	bne.n	800b886 <_dtoa_r+0xb96>
 800b880:	f019 0f01 	tst.w	r9, #1
 800b884:	d192      	bne.n	800b7ac <_dtoa_r+0xabc>
 800b886:	462b      	mov	r3, r5
 800b888:	461d      	mov	r5, r3
 800b88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b88e:	2a30      	cmp	r2, #48	; 0x30
 800b890:	d0fa      	beq.n	800b888 <_dtoa_r+0xb98>
 800b892:	e6dd      	b.n	800b650 <_dtoa_r+0x960>
 800b894:	9a00      	ldr	r2, [sp, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d189      	bne.n	800b7ae <_dtoa_r+0xabe>
 800b89a:	f10b 0b01 	add.w	fp, fp, #1
 800b89e:	2331      	movs	r3, #49	; 0x31
 800b8a0:	e796      	b.n	800b7d0 <_dtoa_r+0xae0>
 800b8a2:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <_dtoa_r+0xbdc>)
 800b8a4:	f7ff ba99 	b.w	800adda <_dtoa_r+0xea>
 800b8a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f47f aa6d 	bne.w	800ad8a <_dtoa_r+0x9a>
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <_dtoa_r+0xbe0>)
 800b8b2:	f7ff ba92 	b.w	800adda <_dtoa_r+0xea>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dcb5      	bgt.n	800b828 <_dtoa_r+0xb38>
 800b8bc:	9b07      	ldr	r3, [sp, #28]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	f73f aeb1 	bgt.w	800b626 <_dtoa_r+0x936>
 800b8c4:	e7b0      	b.n	800b828 <_dtoa_r+0xb38>
 800b8c6:	bf00      	nop
 800b8c8:	0800cbe8 	.word	0x0800cbe8
 800b8cc:	0800cb48 	.word	0x0800cb48
 800b8d0:	0800cb6c 	.word	0x0800cb6c

0800b8d4 <_free_r>:
 800b8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d6:	2900      	cmp	r1, #0
 800b8d8:	d044      	beq.n	800b964 <_free_r+0x90>
 800b8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8de:	9001      	str	r0, [sp, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8e6:	bfb8      	it	lt
 800b8e8:	18e4      	addlt	r4, r4, r3
 800b8ea:	f000 f8e7 	bl	800babc <__malloc_lock>
 800b8ee:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <_free_r+0x94>)
 800b8f0:	9801      	ldr	r0, [sp, #4]
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	b933      	cbnz	r3, 800b904 <_free_r+0x30>
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6014      	str	r4, [r2, #0]
 800b8fa:	b003      	add	sp, #12
 800b8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b900:	f000 b8e2 	b.w	800bac8 <__malloc_unlock>
 800b904:	42a3      	cmp	r3, r4
 800b906:	d908      	bls.n	800b91a <_free_r+0x46>
 800b908:	6825      	ldr	r5, [r4, #0]
 800b90a:	1961      	adds	r1, r4, r5
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf01      	itttt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	1949      	addeq	r1, r1, r5
 800b916:	6021      	streq	r1, [r4, #0]
 800b918:	e7ed      	b.n	800b8f6 <_free_r+0x22>
 800b91a:	461a      	mov	r2, r3
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b10b      	cbz	r3, 800b924 <_free_r+0x50>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d9fa      	bls.n	800b91a <_free_r+0x46>
 800b924:	6811      	ldr	r1, [r2, #0]
 800b926:	1855      	adds	r5, r2, r1
 800b928:	42a5      	cmp	r5, r4
 800b92a:	d10b      	bne.n	800b944 <_free_r+0x70>
 800b92c:	6824      	ldr	r4, [r4, #0]
 800b92e:	4421      	add	r1, r4
 800b930:	1854      	adds	r4, r2, r1
 800b932:	42a3      	cmp	r3, r4
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	d1e0      	bne.n	800b8fa <_free_r+0x26>
 800b938:	681c      	ldr	r4, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	6053      	str	r3, [r2, #4]
 800b93e:	440c      	add	r4, r1
 800b940:	6014      	str	r4, [r2, #0]
 800b942:	e7da      	b.n	800b8fa <_free_r+0x26>
 800b944:	d902      	bls.n	800b94c <_free_r+0x78>
 800b946:	230c      	movs	r3, #12
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	e7d6      	b.n	800b8fa <_free_r+0x26>
 800b94c:	6825      	ldr	r5, [r4, #0]
 800b94e:	1961      	adds	r1, r4, r5
 800b950:	428b      	cmp	r3, r1
 800b952:	bf04      	itt	eq
 800b954:	6819      	ldreq	r1, [r3, #0]
 800b956:	685b      	ldreq	r3, [r3, #4]
 800b958:	6063      	str	r3, [r4, #4]
 800b95a:	bf04      	itt	eq
 800b95c:	1949      	addeq	r1, r1, r5
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	6054      	str	r4, [r2, #4]
 800b962:	e7ca      	b.n	800b8fa <_free_r+0x26>
 800b964:	b003      	add	sp, #12
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	20002ee0 	.word	0x20002ee0

0800b96c <malloc>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	; (800b978 <malloc+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f000 b823 	b.w	800b9bc <_malloc_r>
 800b976:	bf00      	nop
 800b978:	20000068 	.word	0x20000068

0800b97c <sbrk_aligned>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4e0e      	ldr	r6, [pc, #56]	; (800b9b8 <sbrk_aligned+0x3c>)
 800b980:	460c      	mov	r4, r1
 800b982:	6831      	ldr	r1, [r6, #0]
 800b984:	4605      	mov	r5, r0
 800b986:	b911      	cbnz	r1, 800b98e <sbrk_aligned+0x12>
 800b988:	f000 fea8 	bl	800c6dc <_sbrk_r>
 800b98c:	6030      	str	r0, [r6, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	4628      	mov	r0, r5
 800b992:	f000 fea3 	bl	800c6dc <_sbrk_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	d00a      	beq.n	800b9b0 <sbrk_aligned+0x34>
 800b99a:	1cc4      	adds	r4, r0, #3
 800b99c:	f024 0403 	bic.w	r4, r4, #3
 800b9a0:	42a0      	cmp	r0, r4
 800b9a2:	d007      	beq.n	800b9b4 <sbrk_aligned+0x38>
 800b9a4:	1a21      	subs	r1, r4, r0
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f000 fe98 	bl	800c6dc <_sbrk_r>
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d101      	bne.n	800b9b4 <sbrk_aligned+0x38>
 800b9b0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	20002ee4 	.word	0x20002ee4

0800b9bc <_malloc_r>:
 800b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c0:	1ccd      	adds	r5, r1, #3
 800b9c2:	f025 0503 	bic.w	r5, r5, #3
 800b9c6:	3508      	adds	r5, #8
 800b9c8:	2d0c      	cmp	r5, #12
 800b9ca:	bf38      	it	cc
 800b9cc:	250c      	movcc	r5, #12
 800b9ce:	2d00      	cmp	r5, #0
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	db01      	blt.n	800b9d8 <_malloc_r+0x1c>
 800b9d4:	42a9      	cmp	r1, r5
 800b9d6:	d905      	bls.n	800b9e4 <_malloc_r+0x28>
 800b9d8:	230c      	movs	r3, #12
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	2600      	movs	r6, #0
 800b9de:	4630      	mov	r0, r6
 800b9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bab8 <_malloc_r+0xfc>
 800b9e8:	f000 f868 	bl	800babc <__malloc_lock>
 800b9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f0:	461c      	mov	r4, r3
 800b9f2:	bb5c      	cbnz	r4, 800ba4c <_malloc_r+0x90>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f7ff ffc0 	bl	800b97c <sbrk_aligned>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	4604      	mov	r4, r0
 800ba00:	d155      	bne.n	800baae <_malloc_r+0xf2>
 800ba02:	f8d8 4000 	ldr.w	r4, [r8]
 800ba06:	4626      	mov	r6, r4
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	d145      	bne.n	800ba98 <_malloc_r+0xdc>
 800ba0c:	2c00      	cmp	r4, #0
 800ba0e:	d048      	beq.n	800baa2 <_malloc_r+0xe6>
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	4631      	mov	r1, r6
 800ba14:	4638      	mov	r0, r7
 800ba16:	eb04 0903 	add.w	r9, r4, r3
 800ba1a:	f000 fe5f 	bl	800c6dc <_sbrk_r>
 800ba1e:	4581      	cmp	r9, r0
 800ba20:	d13f      	bne.n	800baa2 <_malloc_r+0xe6>
 800ba22:	6821      	ldr	r1, [r4, #0]
 800ba24:	1a6d      	subs	r5, r5, r1
 800ba26:	4629      	mov	r1, r5
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ffa7 	bl	800b97c <sbrk_aligned>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d037      	beq.n	800baa2 <_malloc_r+0xe6>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	442b      	add	r3, r5
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d038      	beq.n	800bab2 <_malloc_r+0xf6>
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	42a2      	cmp	r2, r4
 800ba44:	d12b      	bne.n	800ba9e <_malloc_r+0xe2>
 800ba46:	2200      	movs	r2, #0
 800ba48:	605a      	str	r2, [r3, #4]
 800ba4a:	e00f      	b.n	800ba6c <_malloc_r+0xb0>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	1b52      	subs	r2, r2, r5
 800ba50:	d41f      	bmi.n	800ba92 <_malloc_r+0xd6>
 800ba52:	2a0b      	cmp	r2, #11
 800ba54:	d917      	bls.n	800ba86 <_malloc_r+0xca>
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	bf18      	it	ne
 800ba5e:	6059      	strne	r1, [r3, #4]
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	bf08      	it	eq
 800ba64:	f8c8 1000 	streq.w	r1, [r8]
 800ba68:	5162      	str	r2, [r4, r5]
 800ba6a:	604b      	str	r3, [r1, #4]
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f104 060b 	add.w	r6, r4, #11
 800ba72:	f000 f829 	bl	800bac8 <__malloc_unlock>
 800ba76:	f026 0607 	bic.w	r6, r6, #7
 800ba7a:	1d23      	adds	r3, r4, #4
 800ba7c:	1af2      	subs	r2, r6, r3
 800ba7e:	d0ae      	beq.n	800b9de <_malloc_r+0x22>
 800ba80:	1b9b      	subs	r3, r3, r6
 800ba82:	50a3      	str	r3, [r4, r2]
 800ba84:	e7ab      	b.n	800b9de <_malloc_r+0x22>
 800ba86:	42a3      	cmp	r3, r4
 800ba88:	6862      	ldr	r2, [r4, #4]
 800ba8a:	d1dd      	bne.n	800ba48 <_malloc_r+0x8c>
 800ba8c:	f8c8 2000 	str.w	r2, [r8]
 800ba90:	e7ec      	b.n	800ba6c <_malloc_r+0xb0>
 800ba92:	4623      	mov	r3, r4
 800ba94:	6864      	ldr	r4, [r4, #4]
 800ba96:	e7ac      	b.n	800b9f2 <_malloc_r+0x36>
 800ba98:	4634      	mov	r4, r6
 800ba9a:	6876      	ldr	r6, [r6, #4]
 800ba9c:	e7b4      	b.n	800ba08 <_malloc_r+0x4c>
 800ba9e:	4613      	mov	r3, r2
 800baa0:	e7cc      	b.n	800ba3c <_malloc_r+0x80>
 800baa2:	230c      	movs	r3, #12
 800baa4:	603b      	str	r3, [r7, #0]
 800baa6:	4638      	mov	r0, r7
 800baa8:	f000 f80e 	bl	800bac8 <__malloc_unlock>
 800baac:	e797      	b.n	800b9de <_malloc_r+0x22>
 800baae:	6025      	str	r5, [r4, #0]
 800bab0:	e7dc      	b.n	800ba6c <_malloc_r+0xb0>
 800bab2:	605b      	str	r3, [r3, #4]
 800bab4:	deff      	udf	#255	; 0xff
 800bab6:	bf00      	nop
 800bab8:	20002ee0 	.word	0x20002ee0

0800babc <__malloc_lock>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__malloc_lock+0x8>)
 800babe:	f7ff b87e 	b.w	800abbe <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20002edc 	.word	0x20002edc

0800bac8 <__malloc_unlock>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__malloc_unlock+0x8>)
 800baca:	f7ff b879 	b.w	800abc0 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20002edc 	.word	0x20002edc

0800bad4 <_Balloc>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	69c6      	ldr	r6, [r0, #28]
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	b976      	cbnz	r6, 800bafc <_Balloc+0x28>
 800bade:	2010      	movs	r0, #16
 800bae0:	f7ff ff44 	bl	800b96c <malloc>
 800bae4:	4602      	mov	r2, r0
 800bae6:	61e0      	str	r0, [r4, #28]
 800bae8:	b920      	cbnz	r0, 800baf4 <_Balloc+0x20>
 800baea:	4b18      	ldr	r3, [pc, #96]	; (800bb4c <_Balloc+0x78>)
 800baec:	4818      	ldr	r0, [pc, #96]	; (800bb50 <_Balloc+0x7c>)
 800baee:	216b      	movs	r1, #107	; 0x6b
 800baf0:	f000 fe04 	bl	800c6fc <__assert_func>
 800baf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baf8:	6006      	str	r6, [r0, #0]
 800bafa:	60c6      	str	r6, [r0, #12]
 800bafc:	69e6      	ldr	r6, [r4, #28]
 800bafe:	68f3      	ldr	r3, [r6, #12]
 800bb00:	b183      	cbz	r3, 800bb24 <_Balloc+0x50>
 800bb02:	69e3      	ldr	r3, [r4, #28]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb0a:	b9b8      	cbnz	r0, 800bb3c <_Balloc+0x68>
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb12:	1d72      	adds	r2, r6, #5
 800bb14:	0092      	lsls	r2, r2, #2
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 fe0e 	bl	800c738 <_calloc_r>
 800bb1c:	b160      	cbz	r0, 800bb38 <_Balloc+0x64>
 800bb1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb22:	e00e      	b.n	800bb42 <_Balloc+0x6e>
 800bb24:	2221      	movs	r2, #33	; 0x21
 800bb26:	2104      	movs	r1, #4
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 fe05 	bl	800c738 <_calloc_r>
 800bb2e:	69e3      	ldr	r3, [r4, #28]
 800bb30:	60f0      	str	r0, [r6, #12]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e4      	bne.n	800bb02 <_Balloc+0x2e>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	6802      	ldr	r2, [r0, #0]
 800bb3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb42:	2300      	movs	r3, #0
 800bb44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb48:	e7f7      	b.n	800bb3a <_Balloc+0x66>
 800bb4a:	bf00      	nop
 800bb4c:	0800cb79 	.word	0x0800cb79
 800bb50:	0800cbf9 	.word	0x0800cbf9

0800bb54 <_Bfree>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	69c6      	ldr	r6, [r0, #28]
 800bb58:	4605      	mov	r5, r0
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	b976      	cbnz	r6, 800bb7c <_Bfree+0x28>
 800bb5e:	2010      	movs	r0, #16
 800bb60:	f7ff ff04 	bl	800b96c <malloc>
 800bb64:	4602      	mov	r2, r0
 800bb66:	61e8      	str	r0, [r5, #28]
 800bb68:	b920      	cbnz	r0, 800bb74 <_Bfree+0x20>
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <_Bfree+0x3c>)
 800bb6c:	4809      	ldr	r0, [pc, #36]	; (800bb94 <_Bfree+0x40>)
 800bb6e:	218f      	movs	r1, #143	; 0x8f
 800bb70:	f000 fdc4 	bl	800c6fc <__assert_func>
 800bb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb78:	6006      	str	r6, [r0, #0]
 800bb7a:	60c6      	str	r6, [r0, #12]
 800bb7c:	b13c      	cbz	r4, 800bb8e <_Bfree+0x3a>
 800bb7e:	69eb      	ldr	r3, [r5, #28]
 800bb80:	6862      	ldr	r2, [r4, #4]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb88:	6021      	str	r1, [r4, #0]
 800bb8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	0800cb79 	.word	0x0800cb79
 800bb94:	0800cbf9 	.word	0x0800cbf9

0800bb98 <__multadd>:
 800bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9c:	690d      	ldr	r5, [r1, #16]
 800bb9e:	4607      	mov	r7, r0
 800bba0:	460c      	mov	r4, r1
 800bba2:	461e      	mov	r6, r3
 800bba4:	f101 0c14 	add.w	ip, r1, #20
 800bba8:	2000      	movs	r0, #0
 800bbaa:	f8dc 3000 	ldr.w	r3, [ip]
 800bbae:	b299      	uxth	r1, r3
 800bbb0:	fb02 6101 	mla	r1, r2, r1, r6
 800bbb4:	0c1e      	lsrs	r6, r3, #16
 800bbb6:	0c0b      	lsrs	r3, r1, #16
 800bbb8:	fb02 3306 	mla	r3, r2, r6, r3
 800bbbc:	b289      	uxth	r1, r1
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbc4:	4285      	cmp	r5, r0
 800bbc6:	f84c 1b04 	str.w	r1, [ip], #4
 800bbca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbce:	dcec      	bgt.n	800bbaa <__multadd+0x12>
 800bbd0:	b30e      	cbz	r6, 800bc16 <__multadd+0x7e>
 800bbd2:	68a3      	ldr	r3, [r4, #8]
 800bbd4:	42ab      	cmp	r3, r5
 800bbd6:	dc19      	bgt.n	800bc0c <__multadd+0x74>
 800bbd8:	6861      	ldr	r1, [r4, #4]
 800bbda:	4638      	mov	r0, r7
 800bbdc:	3101      	adds	r1, #1
 800bbde:	f7ff ff79 	bl	800bad4 <_Balloc>
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	b928      	cbnz	r0, 800bbf2 <__multadd+0x5a>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <__multadd+0x84>)
 800bbea:	480d      	ldr	r0, [pc, #52]	; (800bc20 <__multadd+0x88>)
 800bbec:	21ba      	movs	r1, #186	; 0xba
 800bbee:	f000 fd85 	bl	800c6fc <__assert_func>
 800bbf2:	6922      	ldr	r2, [r4, #16]
 800bbf4:	3202      	adds	r2, #2
 800bbf6:	f104 010c 	add.w	r1, r4, #12
 800bbfa:	0092      	lsls	r2, r2, #2
 800bbfc:	300c      	adds	r0, #12
 800bbfe:	f7fe ffe0 	bl	800abc2 <memcpy>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4638      	mov	r0, r7
 800bc06:	f7ff ffa5 	bl	800bb54 <_Bfree>
 800bc0a:	4644      	mov	r4, r8
 800bc0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc10:	3501      	adds	r5, #1
 800bc12:	615e      	str	r6, [r3, #20]
 800bc14:	6125      	str	r5, [r4, #16]
 800bc16:	4620      	mov	r0, r4
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	0800cbe8 	.word	0x0800cbe8
 800bc20:	0800cbf9 	.word	0x0800cbf9

0800bc24 <__hi0bits>:
 800bc24:	0c03      	lsrs	r3, r0, #16
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	b9d3      	cbnz	r3, 800bc60 <__hi0bits+0x3c>
 800bc2a:	0400      	lsls	r0, r0, #16
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc32:	bf04      	itt	eq
 800bc34:	0200      	lsleq	r0, r0, #8
 800bc36:	3308      	addeq	r3, #8
 800bc38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc3c:	bf04      	itt	eq
 800bc3e:	0100      	lsleq	r0, r0, #4
 800bc40:	3304      	addeq	r3, #4
 800bc42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc46:	bf04      	itt	eq
 800bc48:	0080      	lsleq	r0, r0, #2
 800bc4a:	3302      	addeq	r3, #2
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	db05      	blt.n	800bc5c <__hi0bits+0x38>
 800bc50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc54:	f103 0301 	add.w	r3, r3, #1
 800bc58:	bf08      	it	eq
 800bc5a:	2320      	moveq	r3, #32
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	4770      	bx	lr
 800bc60:	2300      	movs	r3, #0
 800bc62:	e7e4      	b.n	800bc2e <__hi0bits+0xa>

0800bc64 <__lo0bits>:
 800bc64:	6803      	ldr	r3, [r0, #0]
 800bc66:	f013 0207 	ands.w	r2, r3, #7
 800bc6a:	d00c      	beq.n	800bc86 <__lo0bits+0x22>
 800bc6c:	07d9      	lsls	r1, r3, #31
 800bc6e:	d422      	bmi.n	800bcb6 <__lo0bits+0x52>
 800bc70:	079a      	lsls	r2, r3, #30
 800bc72:	bf49      	itett	mi
 800bc74:	085b      	lsrmi	r3, r3, #1
 800bc76:	089b      	lsrpl	r3, r3, #2
 800bc78:	6003      	strmi	r3, [r0, #0]
 800bc7a:	2201      	movmi	r2, #1
 800bc7c:	bf5c      	itt	pl
 800bc7e:	6003      	strpl	r3, [r0, #0]
 800bc80:	2202      	movpl	r2, #2
 800bc82:	4610      	mov	r0, r2
 800bc84:	4770      	bx	lr
 800bc86:	b299      	uxth	r1, r3
 800bc88:	b909      	cbnz	r1, 800bc8e <__lo0bits+0x2a>
 800bc8a:	0c1b      	lsrs	r3, r3, #16
 800bc8c:	2210      	movs	r2, #16
 800bc8e:	b2d9      	uxtb	r1, r3
 800bc90:	b909      	cbnz	r1, 800bc96 <__lo0bits+0x32>
 800bc92:	3208      	adds	r2, #8
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	0719      	lsls	r1, r3, #28
 800bc98:	bf04      	itt	eq
 800bc9a:	091b      	lsreq	r3, r3, #4
 800bc9c:	3204      	addeq	r2, #4
 800bc9e:	0799      	lsls	r1, r3, #30
 800bca0:	bf04      	itt	eq
 800bca2:	089b      	lsreq	r3, r3, #2
 800bca4:	3202      	addeq	r2, #2
 800bca6:	07d9      	lsls	r1, r3, #31
 800bca8:	d403      	bmi.n	800bcb2 <__lo0bits+0x4e>
 800bcaa:	085b      	lsrs	r3, r3, #1
 800bcac:	f102 0201 	add.w	r2, r2, #1
 800bcb0:	d003      	beq.n	800bcba <__lo0bits+0x56>
 800bcb2:	6003      	str	r3, [r0, #0]
 800bcb4:	e7e5      	b.n	800bc82 <__lo0bits+0x1e>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	e7e3      	b.n	800bc82 <__lo0bits+0x1e>
 800bcba:	2220      	movs	r2, #32
 800bcbc:	e7e1      	b.n	800bc82 <__lo0bits+0x1e>
	...

0800bcc0 <__i2b>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7ff ff05 	bl	800bad4 <_Balloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	b928      	cbnz	r0, 800bcda <__i2b+0x1a>
 800bcce:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <__i2b+0x24>)
 800bcd0:	4805      	ldr	r0, [pc, #20]	; (800bce8 <__i2b+0x28>)
 800bcd2:	f240 1145 	movw	r1, #325	; 0x145
 800bcd6:	f000 fd11 	bl	800c6fc <__assert_func>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6144      	str	r4, [r0, #20]
 800bcde:	6103      	str	r3, [r0, #16]
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	bf00      	nop
 800bce4:	0800cbe8 	.word	0x0800cbe8
 800bce8:	0800cbf9 	.word	0x0800cbf9

0800bcec <__multiply>:
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4691      	mov	r9, r2
 800bcf2:	690a      	ldr	r2, [r1, #16]
 800bcf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	bfb8      	it	lt
 800bcfc:	460b      	movlt	r3, r1
 800bcfe:	460c      	mov	r4, r1
 800bd00:	bfbc      	itt	lt
 800bd02:	464c      	movlt	r4, r9
 800bd04:	4699      	movlt	r9, r3
 800bd06:	6927      	ldr	r7, [r4, #16]
 800bd08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd0c:	68a3      	ldr	r3, [r4, #8]
 800bd0e:	6861      	ldr	r1, [r4, #4]
 800bd10:	eb07 060a 	add.w	r6, r7, sl
 800bd14:	42b3      	cmp	r3, r6
 800bd16:	b085      	sub	sp, #20
 800bd18:	bfb8      	it	lt
 800bd1a:	3101      	addlt	r1, #1
 800bd1c:	f7ff feda 	bl	800bad4 <_Balloc>
 800bd20:	b930      	cbnz	r0, 800bd30 <__multiply+0x44>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4b44      	ldr	r3, [pc, #272]	; (800be38 <__multiply+0x14c>)
 800bd26:	4845      	ldr	r0, [pc, #276]	; (800be3c <__multiply+0x150>)
 800bd28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd2c:	f000 fce6 	bl	800c6fc <__assert_func>
 800bd30:	f100 0514 	add.w	r5, r0, #20
 800bd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd38:	462b      	mov	r3, r5
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	d321      	bcc.n	800bd84 <__multiply+0x98>
 800bd40:	f104 0314 	add.w	r3, r4, #20
 800bd44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd48:	f109 0314 	add.w	r3, r9, #20
 800bd4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd50:	9202      	str	r2, [sp, #8]
 800bd52:	1b3a      	subs	r2, r7, r4
 800bd54:	3a15      	subs	r2, #21
 800bd56:	f022 0203 	bic.w	r2, r2, #3
 800bd5a:	3204      	adds	r2, #4
 800bd5c:	f104 0115 	add.w	r1, r4, #21
 800bd60:	428f      	cmp	r7, r1
 800bd62:	bf38      	it	cc
 800bd64:	2204      	movcc	r2, #4
 800bd66:	9201      	str	r2, [sp, #4]
 800bd68:	9a02      	ldr	r2, [sp, #8]
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d80c      	bhi.n	800bd8a <__multiply+0x9e>
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	dd03      	ble.n	800bd7c <__multiply+0x90>
 800bd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05b      	beq.n	800be34 <__multiply+0x148>
 800bd7c:	6106      	str	r6, [r0, #16]
 800bd7e:	b005      	add	sp, #20
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	f843 2b04 	str.w	r2, [r3], #4
 800bd88:	e7d8      	b.n	800bd3c <__multiply+0x50>
 800bd8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd8e:	f1ba 0f00 	cmp.w	sl, #0
 800bd92:	d024      	beq.n	800bdde <__multiply+0xf2>
 800bd94:	f104 0e14 	add.w	lr, r4, #20
 800bd98:	46a9      	mov	r9, r5
 800bd9a:	f04f 0c00 	mov.w	ip, #0
 800bd9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bda2:	f8d9 1000 	ldr.w	r1, [r9]
 800bda6:	fa1f fb82 	uxth.w	fp, r2
 800bdaa:	b289      	uxth	r1, r1
 800bdac:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdb4:	f8d9 2000 	ldr.w	r2, [r9]
 800bdb8:	4461      	add	r1, ip
 800bdba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdc6:	b289      	uxth	r1, r1
 800bdc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdcc:	4577      	cmp	r7, lr
 800bdce:	f849 1b04 	str.w	r1, [r9], #4
 800bdd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdd6:	d8e2      	bhi.n	800bd9e <__multiply+0xb2>
 800bdd8:	9a01      	ldr	r2, [sp, #4]
 800bdda:	f845 c002 	str.w	ip, [r5, r2]
 800bdde:	9a03      	ldr	r2, [sp, #12]
 800bde0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bde4:	3304      	adds	r3, #4
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	d021      	beq.n	800be30 <__multiply+0x144>
 800bdec:	6829      	ldr	r1, [r5, #0]
 800bdee:	f104 0c14 	add.w	ip, r4, #20
 800bdf2:	46ae      	mov	lr, r5
 800bdf4:	f04f 0a00 	mov.w	sl, #0
 800bdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be00:	fb09 220b 	mla	r2, r9, fp, r2
 800be04:	4452      	add	r2, sl
 800be06:	b289      	uxth	r1, r1
 800be08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be0c:	f84e 1b04 	str.w	r1, [lr], #4
 800be10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be18:	f8be 1000 	ldrh.w	r1, [lr]
 800be1c:	fb09 110a 	mla	r1, r9, sl, r1
 800be20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be24:	4567      	cmp	r7, ip
 800be26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be2a:	d8e5      	bhi.n	800bdf8 <__multiply+0x10c>
 800be2c:	9a01      	ldr	r2, [sp, #4]
 800be2e:	50a9      	str	r1, [r5, r2]
 800be30:	3504      	adds	r5, #4
 800be32:	e799      	b.n	800bd68 <__multiply+0x7c>
 800be34:	3e01      	subs	r6, #1
 800be36:	e79b      	b.n	800bd70 <__multiply+0x84>
 800be38:	0800cbe8 	.word	0x0800cbe8
 800be3c:	0800cbf9 	.word	0x0800cbf9

0800be40 <__pow5mult>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	4615      	mov	r5, r2
 800be46:	f012 0203 	ands.w	r2, r2, #3
 800be4a:	4606      	mov	r6, r0
 800be4c:	460f      	mov	r7, r1
 800be4e:	d007      	beq.n	800be60 <__pow5mult+0x20>
 800be50:	4c25      	ldr	r4, [pc, #148]	; (800bee8 <__pow5mult+0xa8>)
 800be52:	3a01      	subs	r2, #1
 800be54:	2300      	movs	r3, #0
 800be56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5a:	f7ff fe9d 	bl	800bb98 <__multadd>
 800be5e:	4607      	mov	r7, r0
 800be60:	10ad      	asrs	r5, r5, #2
 800be62:	d03d      	beq.n	800bee0 <__pow5mult+0xa0>
 800be64:	69f4      	ldr	r4, [r6, #28]
 800be66:	b97c      	cbnz	r4, 800be88 <__pow5mult+0x48>
 800be68:	2010      	movs	r0, #16
 800be6a:	f7ff fd7f 	bl	800b96c <malloc>
 800be6e:	4602      	mov	r2, r0
 800be70:	61f0      	str	r0, [r6, #28]
 800be72:	b928      	cbnz	r0, 800be80 <__pow5mult+0x40>
 800be74:	4b1d      	ldr	r3, [pc, #116]	; (800beec <__pow5mult+0xac>)
 800be76:	481e      	ldr	r0, [pc, #120]	; (800bef0 <__pow5mult+0xb0>)
 800be78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be7c:	f000 fc3e 	bl	800c6fc <__assert_func>
 800be80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be84:	6004      	str	r4, [r0, #0]
 800be86:	60c4      	str	r4, [r0, #12]
 800be88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be90:	b94c      	cbnz	r4, 800bea6 <__pow5mult+0x66>
 800be92:	f240 2171 	movw	r1, #625	; 0x271
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ff12 	bl	800bcc0 <__i2b>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bea2:	4604      	mov	r4, r0
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	07eb      	lsls	r3, r5, #31
 800beac:	d50a      	bpl.n	800bec4 <__pow5mult+0x84>
 800beae:	4639      	mov	r1, r7
 800beb0:	4622      	mov	r2, r4
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ff1a 	bl	800bcec <__multiply>
 800beb8:	4639      	mov	r1, r7
 800beba:	4680      	mov	r8, r0
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7ff fe49 	bl	800bb54 <_Bfree>
 800bec2:	4647      	mov	r7, r8
 800bec4:	106d      	asrs	r5, r5, #1
 800bec6:	d00b      	beq.n	800bee0 <__pow5mult+0xa0>
 800bec8:	6820      	ldr	r0, [r4, #0]
 800beca:	b938      	cbnz	r0, 800bedc <__pow5mult+0x9c>
 800becc:	4622      	mov	r2, r4
 800bece:	4621      	mov	r1, r4
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7ff ff0b 	bl	800bcec <__multiply>
 800bed6:	6020      	str	r0, [r4, #0]
 800bed8:	f8c0 9000 	str.w	r9, [r0]
 800bedc:	4604      	mov	r4, r0
 800bede:	e7e4      	b.n	800beaa <__pow5mult+0x6a>
 800bee0:	4638      	mov	r0, r7
 800bee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee6:	bf00      	nop
 800bee8:	0800cd48 	.word	0x0800cd48
 800beec:	0800cb79 	.word	0x0800cb79
 800bef0:	0800cbf9 	.word	0x0800cbf9

0800bef4 <__lshift>:
 800bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	460c      	mov	r4, r1
 800befa:	6849      	ldr	r1, [r1, #4]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	4607      	mov	r7, r0
 800bf06:	4691      	mov	r9, r2
 800bf08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf0c:	f108 0601 	add.w	r6, r8, #1
 800bf10:	42b3      	cmp	r3, r6
 800bf12:	db0b      	blt.n	800bf2c <__lshift+0x38>
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff fddd 	bl	800bad4 <_Balloc>
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	b948      	cbnz	r0, 800bf32 <__lshift+0x3e>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	4b28      	ldr	r3, [pc, #160]	; (800bfc4 <__lshift+0xd0>)
 800bf22:	4829      	ldr	r0, [pc, #164]	; (800bfc8 <__lshift+0xd4>)
 800bf24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf28:	f000 fbe8 	bl	800c6fc <__assert_func>
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	e7ee      	b.n	800bf10 <__lshift+0x1c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f100 0114 	add.w	r1, r0, #20
 800bf38:	f100 0210 	add.w	r2, r0, #16
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	4553      	cmp	r3, sl
 800bf40:	db33      	blt.n	800bfaa <__lshift+0xb6>
 800bf42:	6920      	ldr	r0, [r4, #16]
 800bf44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf48:	f104 0314 	add.w	r3, r4, #20
 800bf4c:	f019 091f 	ands.w	r9, r9, #31
 800bf50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf58:	d02b      	beq.n	800bfb2 <__lshift+0xbe>
 800bf5a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf5e:	468a      	mov	sl, r1
 800bf60:	2200      	movs	r2, #0
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	fa00 f009 	lsl.w	r0, r0, r9
 800bf68:	4310      	orrs	r0, r2
 800bf6a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf72:	459c      	cmp	ip, r3
 800bf74:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf78:	d8f3      	bhi.n	800bf62 <__lshift+0x6e>
 800bf7a:	ebac 0304 	sub.w	r3, ip, r4
 800bf7e:	3b15      	subs	r3, #21
 800bf80:	f023 0303 	bic.w	r3, r3, #3
 800bf84:	3304      	adds	r3, #4
 800bf86:	f104 0015 	add.w	r0, r4, #21
 800bf8a:	4584      	cmp	ip, r0
 800bf8c:	bf38      	it	cc
 800bf8e:	2304      	movcc	r3, #4
 800bf90:	50ca      	str	r2, [r1, r3]
 800bf92:	b10a      	cbz	r2, 800bf98 <__lshift+0xa4>
 800bf94:	f108 0602 	add.w	r6, r8, #2
 800bf98:	3e01      	subs	r6, #1
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	612e      	str	r6, [r5, #16]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	f7ff fdd8 	bl	800bb54 <_Bfree>
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfae:	3301      	adds	r3, #1
 800bfb0:	e7c5      	b.n	800bf3e <__lshift+0x4a>
 800bfb2:	3904      	subs	r1, #4
 800bfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfbc:	459c      	cmp	ip, r3
 800bfbe:	d8f9      	bhi.n	800bfb4 <__lshift+0xc0>
 800bfc0:	e7ea      	b.n	800bf98 <__lshift+0xa4>
 800bfc2:	bf00      	nop
 800bfc4:	0800cbe8 	.word	0x0800cbe8
 800bfc8:	0800cbf9 	.word	0x0800cbf9

0800bfcc <__mcmp>:
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	6902      	ldr	r2, [r0, #16]
 800bfd0:	690c      	ldr	r4, [r1, #16]
 800bfd2:	1b12      	subs	r2, r2, r4
 800bfd4:	d10e      	bne.n	800bff4 <__mcmp+0x28>
 800bfd6:	f100 0314 	add.w	r3, r0, #20
 800bfda:	3114      	adds	r1, #20
 800bfdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfec:	42a5      	cmp	r5, r4
 800bfee:	d003      	beq.n	800bff8 <__mcmp+0x2c>
 800bff0:	d305      	bcc.n	800bffe <__mcmp+0x32>
 800bff2:	2201      	movs	r2, #1
 800bff4:	4610      	mov	r0, r2
 800bff6:	bd30      	pop	{r4, r5, pc}
 800bff8:	4283      	cmp	r3, r0
 800bffa:	d3f3      	bcc.n	800bfe4 <__mcmp+0x18>
 800bffc:	e7fa      	b.n	800bff4 <__mcmp+0x28>
 800bffe:	f04f 32ff 	mov.w	r2, #4294967295
 800c002:	e7f7      	b.n	800bff4 <__mcmp+0x28>

0800c004 <__mdiff>:
 800c004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	460c      	mov	r4, r1
 800c00a:	4606      	mov	r6, r0
 800c00c:	4611      	mov	r1, r2
 800c00e:	4620      	mov	r0, r4
 800c010:	4690      	mov	r8, r2
 800c012:	f7ff ffdb 	bl	800bfcc <__mcmp>
 800c016:	1e05      	subs	r5, r0, #0
 800c018:	d110      	bne.n	800c03c <__mdiff+0x38>
 800c01a:	4629      	mov	r1, r5
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff fd59 	bl	800bad4 <_Balloc>
 800c022:	b930      	cbnz	r0, 800c032 <__mdiff+0x2e>
 800c024:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <__mdiff+0x10c>)
 800c026:	4602      	mov	r2, r0
 800c028:	f240 2137 	movw	r1, #567	; 0x237
 800c02c:	4839      	ldr	r0, [pc, #228]	; (800c114 <__mdiff+0x110>)
 800c02e:	f000 fb65 	bl	800c6fc <__assert_func>
 800c032:	2301      	movs	r3, #1
 800c034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	bfa4      	itt	ge
 800c03e:	4643      	movge	r3, r8
 800c040:	46a0      	movge	r8, r4
 800c042:	4630      	mov	r0, r6
 800c044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c048:	bfa6      	itte	ge
 800c04a:	461c      	movge	r4, r3
 800c04c:	2500      	movge	r5, #0
 800c04e:	2501      	movlt	r5, #1
 800c050:	f7ff fd40 	bl	800bad4 <_Balloc>
 800c054:	b920      	cbnz	r0, 800c060 <__mdiff+0x5c>
 800c056:	4b2e      	ldr	r3, [pc, #184]	; (800c110 <__mdiff+0x10c>)
 800c058:	4602      	mov	r2, r0
 800c05a:	f240 2145 	movw	r1, #581	; 0x245
 800c05e:	e7e5      	b.n	800c02c <__mdiff+0x28>
 800c060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c064:	6926      	ldr	r6, [r4, #16]
 800c066:	60c5      	str	r5, [r0, #12]
 800c068:	f104 0914 	add.w	r9, r4, #20
 800c06c:	f108 0514 	add.w	r5, r8, #20
 800c070:	f100 0e14 	add.w	lr, r0, #20
 800c074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c07c:	f108 0210 	add.w	r2, r8, #16
 800c080:	46f2      	mov	sl, lr
 800c082:	2100      	movs	r1, #0
 800c084:	f859 3b04 	ldr.w	r3, [r9], #4
 800c088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c08c:	fa11 f88b 	uxtah	r8, r1, fp
 800c090:	b299      	uxth	r1, r3
 800c092:	0c1b      	lsrs	r3, r3, #16
 800c094:	eba8 0801 	sub.w	r8, r8, r1
 800c098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c09c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0a0:	fa1f f888 	uxth.w	r8, r8
 800c0a4:	1419      	asrs	r1, r3, #16
 800c0a6:	454e      	cmp	r6, r9
 800c0a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0ac:	f84a 3b04 	str.w	r3, [sl], #4
 800c0b0:	d8e8      	bhi.n	800c084 <__mdiff+0x80>
 800c0b2:	1b33      	subs	r3, r6, r4
 800c0b4:	3b15      	subs	r3, #21
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	3415      	adds	r4, #21
 800c0be:	42a6      	cmp	r6, r4
 800c0c0:	bf38      	it	cc
 800c0c2:	2304      	movcc	r3, #4
 800c0c4:	441d      	add	r5, r3
 800c0c6:	4473      	add	r3, lr
 800c0c8:	469e      	mov	lr, r3
 800c0ca:	462e      	mov	r6, r5
 800c0cc:	4566      	cmp	r6, ip
 800c0ce:	d30e      	bcc.n	800c0ee <__mdiff+0xea>
 800c0d0:	f10c 0203 	add.w	r2, ip, #3
 800c0d4:	1b52      	subs	r2, r2, r5
 800c0d6:	f022 0203 	bic.w	r2, r2, #3
 800c0da:	3d03      	subs	r5, #3
 800c0dc:	45ac      	cmp	ip, r5
 800c0de:	bf38      	it	cc
 800c0e0:	2200      	movcc	r2, #0
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0e8:	b17a      	cbz	r2, 800c10a <__mdiff+0x106>
 800c0ea:	6107      	str	r7, [r0, #16]
 800c0ec:	e7a4      	b.n	800c038 <__mdiff+0x34>
 800c0ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0f2:	fa11 f288 	uxtah	r2, r1, r8
 800c0f6:	1414      	asrs	r4, r2, #16
 800c0f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0fc:	b292      	uxth	r2, r2
 800c0fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c102:	f84e 2b04 	str.w	r2, [lr], #4
 800c106:	1421      	asrs	r1, r4, #16
 800c108:	e7e0      	b.n	800c0cc <__mdiff+0xc8>
 800c10a:	3f01      	subs	r7, #1
 800c10c:	e7ea      	b.n	800c0e4 <__mdiff+0xe0>
 800c10e:	bf00      	nop
 800c110:	0800cbe8 	.word	0x0800cbe8
 800c114:	0800cbf9 	.word	0x0800cbf9

0800c118 <__d2b>:
 800c118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	460f      	mov	r7, r1
 800c11e:	2101      	movs	r1, #1
 800c120:	ec59 8b10 	vmov	r8, r9, d0
 800c124:	4616      	mov	r6, r2
 800c126:	f7ff fcd5 	bl	800bad4 <_Balloc>
 800c12a:	4604      	mov	r4, r0
 800c12c:	b930      	cbnz	r0, 800c13c <__d2b+0x24>
 800c12e:	4602      	mov	r2, r0
 800c130:	4b24      	ldr	r3, [pc, #144]	; (800c1c4 <__d2b+0xac>)
 800c132:	4825      	ldr	r0, [pc, #148]	; (800c1c8 <__d2b+0xb0>)
 800c134:	f240 310f 	movw	r1, #783	; 0x30f
 800c138:	f000 fae0 	bl	800c6fc <__assert_func>
 800c13c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c144:	bb2d      	cbnz	r5, 800c192 <__d2b+0x7a>
 800c146:	9301      	str	r3, [sp, #4]
 800c148:	f1b8 0300 	subs.w	r3, r8, #0
 800c14c:	d026      	beq.n	800c19c <__d2b+0x84>
 800c14e:	4668      	mov	r0, sp
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	f7ff fd87 	bl	800bc64 <__lo0bits>
 800c156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c15a:	b1e8      	cbz	r0, 800c198 <__d2b+0x80>
 800c15c:	f1c0 0320 	rsb	r3, r0, #32
 800c160:	fa02 f303 	lsl.w	r3, r2, r3
 800c164:	430b      	orrs	r3, r1
 800c166:	40c2      	lsrs	r2, r0
 800c168:	6163      	str	r3, [r4, #20]
 800c16a:	9201      	str	r2, [sp, #4]
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	61a3      	str	r3, [r4, #24]
 800c170:	2b00      	cmp	r3, #0
 800c172:	bf14      	ite	ne
 800c174:	2202      	movne	r2, #2
 800c176:	2201      	moveq	r2, #1
 800c178:	6122      	str	r2, [r4, #16]
 800c17a:	b1bd      	cbz	r5, 800c1ac <__d2b+0x94>
 800c17c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c180:	4405      	add	r5, r0
 800c182:	603d      	str	r5, [r7, #0]
 800c184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c188:	6030      	str	r0, [r6, #0]
 800c18a:	4620      	mov	r0, r4
 800c18c:	b003      	add	sp, #12
 800c18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c196:	e7d6      	b.n	800c146 <__d2b+0x2e>
 800c198:	6161      	str	r1, [r4, #20]
 800c19a:	e7e7      	b.n	800c16c <__d2b+0x54>
 800c19c:	a801      	add	r0, sp, #4
 800c19e:	f7ff fd61 	bl	800bc64 <__lo0bits>
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	6163      	str	r3, [r4, #20]
 800c1a6:	3020      	adds	r0, #32
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	e7e5      	b.n	800c178 <__d2b+0x60>
 800c1ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1b4:	6038      	str	r0, [r7, #0]
 800c1b6:	6918      	ldr	r0, [r3, #16]
 800c1b8:	f7ff fd34 	bl	800bc24 <__hi0bits>
 800c1bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1c0:	e7e2      	b.n	800c188 <__d2b+0x70>
 800c1c2:	bf00      	nop
 800c1c4:	0800cbe8 	.word	0x0800cbe8
 800c1c8:	0800cbf9 	.word	0x0800cbf9

0800c1cc <__sfputc_r>:
 800c1cc:	6893      	ldr	r3, [r2, #8]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	b410      	push	{r4}
 800c1d4:	6093      	str	r3, [r2, #8]
 800c1d6:	da08      	bge.n	800c1ea <__sfputc_r+0x1e>
 800c1d8:	6994      	ldr	r4, [r2, #24]
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	db01      	blt.n	800c1e2 <__sfputc_r+0x16>
 800c1de:	290a      	cmp	r1, #10
 800c1e0:	d103      	bne.n	800c1ea <__sfputc_r+0x1e>
 800c1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e6:	f000 b9e3 	b.w	800c5b0 <__swbuf_r>
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	1c58      	adds	r0, r3, #1
 800c1ee:	6010      	str	r0, [r2, #0]
 800c1f0:	7019      	strb	r1, [r3, #0]
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <__sfputs_r>:
 800c1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	460f      	mov	r7, r1
 800c200:	4614      	mov	r4, r2
 800c202:	18d5      	adds	r5, r2, r3
 800c204:	42ac      	cmp	r4, r5
 800c206:	d101      	bne.n	800c20c <__sfputs_r+0x12>
 800c208:	2000      	movs	r0, #0
 800c20a:	e007      	b.n	800c21c <__sfputs_r+0x22>
 800c20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c210:	463a      	mov	r2, r7
 800c212:	4630      	mov	r0, r6
 800c214:	f7ff ffda 	bl	800c1cc <__sfputc_r>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d1f3      	bne.n	800c204 <__sfputs_r+0xa>
 800c21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c220 <_vfiprintf_r>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	460d      	mov	r5, r1
 800c226:	b09d      	sub	sp, #116	; 0x74
 800c228:	4614      	mov	r4, r2
 800c22a:	4698      	mov	r8, r3
 800c22c:	4606      	mov	r6, r0
 800c22e:	b118      	cbz	r0, 800c238 <_vfiprintf_r+0x18>
 800c230:	6a03      	ldr	r3, [r0, #32]
 800c232:	b90b      	cbnz	r3, 800c238 <_vfiprintf_r+0x18>
 800c234:	f7fe fb64 	bl	800a900 <__sinit>
 800c238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c23a:	07d9      	lsls	r1, r3, #31
 800c23c:	d405      	bmi.n	800c24a <_vfiprintf_r+0x2a>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	059a      	lsls	r2, r3, #22
 800c242:	d402      	bmi.n	800c24a <_vfiprintf_r+0x2a>
 800c244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c246:	f7fe fcba 	bl	800abbe <__retarget_lock_acquire_recursive>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	071b      	lsls	r3, r3, #28
 800c24e:	d501      	bpl.n	800c254 <_vfiprintf_r+0x34>
 800c250:	692b      	ldr	r3, [r5, #16]
 800c252:	b99b      	cbnz	r3, 800c27c <_vfiprintf_r+0x5c>
 800c254:	4629      	mov	r1, r5
 800c256:	4630      	mov	r0, r6
 800c258:	f000 f9e8 	bl	800c62c <__swsetup_r>
 800c25c:	b170      	cbz	r0, 800c27c <_vfiprintf_r+0x5c>
 800c25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c260:	07dc      	lsls	r4, r3, #31
 800c262:	d504      	bpl.n	800c26e <_vfiprintf_r+0x4e>
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	b01d      	add	sp, #116	; 0x74
 800c26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	0598      	lsls	r0, r3, #22
 800c272:	d4f7      	bmi.n	800c264 <_vfiprintf_r+0x44>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f7fe fca3 	bl	800abc0 <__retarget_lock_release_recursive>
 800c27a:	e7f3      	b.n	800c264 <_vfiprintf_r+0x44>
 800c27c:	2300      	movs	r3, #0
 800c27e:	9309      	str	r3, [sp, #36]	; 0x24
 800c280:	2320      	movs	r3, #32
 800c282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c286:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28a:	2330      	movs	r3, #48	; 0x30
 800c28c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c440 <_vfiprintf_r+0x220>
 800c290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c294:	f04f 0901 	mov.w	r9, #1
 800c298:	4623      	mov	r3, r4
 800c29a:	469a      	mov	sl, r3
 800c29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a0:	b10a      	cbz	r2, 800c2a6 <_vfiprintf_r+0x86>
 800c2a2:	2a25      	cmp	r2, #37	; 0x25
 800c2a4:	d1f9      	bne.n	800c29a <_vfiprintf_r+0x7a>
 800c2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2aa:	d00b      	beq.n	800c2c4 <_vfiprintf_r+0xa4>
 800c2ac:	465b      	mov	r3, fp
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff ffa1 	bl	800c1fa <__sfputs_r>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f000 80a9 	beq.w	800c410 <_vfiprintf_r+0x1f0>
 800c2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c0:	445a      	add	r2, fp
 800c2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 80a1 	beq.w	800c410 <_vfiprintf_r+0x1f0>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2d8:	f10a 0a01 	add.w	sl, sl, #1
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2e6:	4654      	mov	r4, sl
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ee:	4854      	ldr	r0, [pc, #336]	; (800c440 <_vfiprintf_r+0x220>)
 800c2f0:	f7f3 ff6e 	bl	80001d0 <memchr>
 800c2f4:	9a04      	ldr	r2, [sp, #16]
 800c2f6:	b9d8      	cbnz	r0, 800c330 <_vfiprintf_r+0x110>
 800c2f8:	06d1      	lsls	r1, r2, #27
 800c2fa:	bf44      	itt	mi
 800c2fc:	2320      	movmi	r3, #32
 800c2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c302:	0713      	lsls	r3, r2, #28
 800c304:	bf44      	itt	mi
 800c306:	232b      	movmi	r3, #43	; 0x2b
 800c308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b2a      	cmp	r3, #42	; 0x2a
 800c312:	d015      	beq.n	800c340 <_vfiprintf_r+0x120>
 800c314:	9a07      	ldr	r2, [sp, #28]
 800c316:	4654      	mov	r4, sl
 800c318:	2000      	movs	r0, #0
 800c31a:	f04f 0c0a 	mov.w	ip, #10
 800c31e:	4621      	mov	r1, r4
 800c320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c324:	3b30      	subs	r3, #48	; 0x30
 800c326:	2b09      	cmp	r3, #9
 800c328:	d94d      	bls.n	800c3c6 <_vfiprintf_r+0x1a6>
 800c32a:	b1b0      	cbz	r0, 800c35a <_vfiprintf_r+0x13a>
 800c32c:	9207      	str	r2, [sp, #28]
 800c32e:	e014      	b.n	800c35a <_vfiprintf_r+0x13a>
 800c330:	eba0 0308 	sub.w	r3, r0, r8
 800c334:	fa09 f303 	lsl.w	r3, r9, r3
 800c338:	4313      	orrs	r3, r2
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	46a2      	mov	sl, r4
 800c33e:	e7d2      	b.n	800c2e6 <_vfiprintf_r+0xc6>
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	1d19      	adds	r1, r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	9103      	str	r1, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfbb      	ittet	lt
 800c34c:	425b      	neglt	r3, r3
 800c34e:	f042 0202 	orrlt.w	r2, r2, #2
 800c352:	9307      	strge	r3, [sp, #28]
 800c354:	9307      	strlt	r3, [sp, #28]
 800c356:	bfb8      	it	lt
 800c358:	9204      	strlt	r2, [sp, #16]
 800c35a:	7823      	ldrb	r3, [r4, #0]
 800c35c:	2b2e      	cmp	r3, #46	; 0x2e
 800c35e:	d10c      	bne.n	800c37a <_vfiprintf_r+0x15a>
 800c360:	7863      	ldrb	r3, [r4, #1]
 800c362:	2b2a      	cmp	r3, #42	; 0x2a
 800c364:	d134      	bne.n	800c3d0 <_vfiprintf_r+0x1b0>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9203      	str	r2, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfb8      	it	lt
 800c372:	f04f 33ff 	movlt.w	r3, #4294967295
 800c376:	3402      	adds	r4, #2
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c450 <_vfiprintf_r+0x230>
 800c37e:	7821      	ldrb	r1, [r4, #0]
 800c380:	2203      	movs	r2, #3
 800c382:	4650      	mov	r0, sl
 800c384:	f7f3 ff24 	bl	80001d0 <memchr>
 800c388:	b138      	cbz	r0, 800c39a <_vfiprintf_r+0x17a>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	eba0 000a 	sub.w	r0, r0, sl
 800c390:	2240      	movs	r2, #64	; 0x40
 800c392:	4082      	lsls	r2, r0
 800c394:	4313      	orrs	r3, r2
 800c396:	3401      	adds	r4, #1
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39e:	4829      	ldr	r0, [pc, #164]	; (800c444 <_vfiprintf_r+0x224>)
 800c3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	f7f3 ff13 	bl	80001d0 <memchr>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d03f      	beq.n	800c42e <_vfiprintf_r+0x20e>
 800c3ae:	4b26      	ldr	r3, [pc, #152]	; (800c448 <_vfiprintf_r+0x228>)
 800c3b0:	bb1b      	cbnz	r3, 800c3fa <_vfiprintf_r+0x1da>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	3307      	adds	r3, #7
 800c3b6:	f023 0307 	bic.w	r3, r3, #7
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	9303      	str	r3, [sp, #12]
 800c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c0:	443b      	add	r3, r7
 800c3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c4:	e768      	b.n	800c298 <_vfiprintf_r+0x78>
 800c3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	e7a6      	b.n	800c31e <_vfiprintf_r+0xfe>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	f04f 0c0a 	mov.w	ip, #10
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e2:	3a30      	subs	r2, #48	; 0x30
 800c3e4:	2a09      	cmp	r2, #9
 800c3e6:	d903      	bls.n	800c3f0 <_vfiprintf_r+0x1d0>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0c6      	beq.n	800c37a <_vfiprintf_r+0x15a>
 800c3ec:	9105      	str	r1, [sp, #20]
 800c3ee:	e7c4      	b.n	800c37a <_vfiprintf_r+0x15a>
 800c3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7f0      	b.n	800c3dc <_vfiprintf_r+0x1bc>
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	462a      	mov	r2, r5
 800c400:	4b12      	ldr	r3, [pc, #72]	; (800c44c <_vfiprintf_r+0x22c>)
 800c402:	a904      	add	r1, sp, #16
 800c404:	4630      	mov	r0, r6
 800c406:	f7fd fe29 	bl	800a05c <_printf_float>
 800c40a:	4607      	mov	r7, r0
 800c40c:	1c78      	adds	r0, r7, #1
 800c40e:	d1d6      	bne.n	800c3be <_vfiprintf_r+0x19e>
 800c410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	d405      	bmi.n	800c422 <_vfiprintf_r+0x202>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	059a      	lsls	r2, r3, #22
 800c41a:	d402      	bmi.n	800c422 <_vfiprintf_r+0x202>
 800c41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41e:	f7fe fbcf 	bl	800abc0 <__retarget_lock_release_recursive>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	065b      	lsls	r3, r3, #25
 800c426:	f53f af1d 	bmi.w	800c264 <_vfiprintf_r+0x44>
 800c42a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c42c:	e71c      	b.n	800c268 <_vfiprintf_r+0x48>
 800c42e:	ab03      	add	r3, sp, #12
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	462a      	mov	r2, r5
 800c434:	4b05      	ldr	r3, [pc, #20]	; (800c44c <_vfiprintf_r+0x22c>)
 800c436:	a904      	add	r1, sp, #16
 800c438:	4630      	mov	r0, r6
 800c43a:	f7fe f8b3 	bl	800a5a4 <_printf_i>
 800c43e:	e7e4      	b.n	800c40a <_vfiprintf_r+0x1ea>
 800c440:	0800cd54 	.word	0x0800cd54
 800c444:	0800cd5e 	.word	0x0800cd5e
 800c448:	0800a05d 	.word	0x0800a05d
 800c44c:	0800c1fb 	.word	0x0800c1fb
 800c450:	0800cd5a 	.word	0x0800cd5a

0800c454 <__sflush_r>:
 800c454:	898a      	ldrh	r2, [r1, #12]
 800c456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45a:	4605      	mov	r5, r0
 800c45c:	0710      	lsls	r0, r2, #28
 800c45e:	460c      	mov	r4, r1
 800c460:	d458      	bmi.n	800c514 <__sflush_r+0xc0>
 800c462:	684b      	ldr	r3, [r1, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dc05      	bgt.n	800c474 <__sflush_r+0x20>
 800c468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc02      	bgt.n	800c474 <__sflush_r+0x20>
 800c46e:	2000      	movs	r0, #0
 800c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c476:	2e00      	cmp	r6, #0
 800c478:	d0f9      	beq.n	800c46e <__sflush_r+0x1a>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c480:	682f      	ldr	r7, [r5, #0]
 800c482:	6a21      	ldr	r1, [r4, #32]
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	d032      	beq.n	800c4ee <__sflush_r+0x9a>
 800c488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	075a      	lsls	r2, r3, #29
 800c48e:	d505      	bpl.n	800c49c <__sflush_r+0x48>
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	1ac0      	subs	r0, r0, r3
 800c494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c496:	b10b      	cbz	r3, 800c49c <__sflush_r+0x48>
 800c498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c49a:	1ac0      	subs	r0, r0, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	4602      	mov	r2, r0
 800c4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a2:	6a21      	ldr	r1, [r4, #32]
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b0      	blx	r6
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	d106      	bne.n	800c4bc <__sflush_r+0x68>
 800c4ae:	6829      	ldr	r1, [r5, #0]
 800c4b0:	291d      	cmp	r1, #29
 800c4b2:	d82b      	bhi.n	800c50c <__sflush_r+0xb8>
 800c4b4:	4a29      	ldr	r2, [pc, #164]	; (800c55c <__sflush_r+0x108>)
 800c4b6:	410a      	asrs	r2, r1
 800c4b8:	07d6      	lsls	r6, r2, #31
 800c4ba:	d427      	bmi.n	800c50c <__sflush_r+0xb8>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	6062      	str	r2, [r4, #4]
 800c4c0:	04d9      	lsls	r1, r3, #19
 800c4c2:	6922      	ldr	r2, [r4, #16]
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	d504      	bpl.n	800c4d2 <__sflush_r+0x7e>
 800c4c8:	1c42      	adds	r2, r0, #1
 800c4ca:	d101      	bne.n	800c4d0 <__sflush_r+0x7c>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b903      	cbnz	r3, 800c4d2 <__sflush_r+0x7e>
 800c4d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4d4:	602f      	str	r7, [r5, #0]
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d0c9      	beq.n	800c46e <__sflush_r+0x1a>
 800c4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d002      	beq.n	800c4e8 <__sflush_r+0x94>
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7ff f9f6 	bl	800b8d4 <_free_r>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ec:	e7c0      	b.n	800c470 <__sflush_r+0x1c>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
 800c4f4:	1c41      	adds	r1, r0, #1
 800c4f6:	d1c8      	bne.n	800c48a <__sflush_r+0x36>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0c5      	beq.n	800c48a <__sflush_r+0x36>
 800c4fe:	2b1d      	cmp	r3, #29
 800c500:	d001      	beq.n	800c506 <__sflush_r+0xb2>
 800c502:	2b16      	cmp	r3, #22
 800c504:	d101      	bne.n	800c50a <__sflush_r+0xb6>
 800c506:	602f      	str	r7, [r5, #0]
 800c508:	e7b1      	b.n	800c46e <__sflush_r+0x1a>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	e7ad      	b.n	800c470 <__sflush_r+0x1c>
 800c514:	690f      	ldr	r7, [r1, #16]
 800c516:	2f00      	cmp	r7, #0
 800c518:	d0a9      	beq.n	800c46e <__sflush_r+0x1a>
 800c51a:	0793      	lsls	r3, r2, #30
 800c51c:	680e      	ldr	r6, [r1, #0]
 800c51e:	bf08      	it	eq
 800c520:	694b      	ldreq	r3, [r1, #20]
 800c522:	600f      	str	r7, [r1, #0]
 800c524:	bf18      	it	ne
 800c526:	2300      	movne	r3, #0
 800c528:	eba6 0807 	sub.w	r8, r6, r7
 800c52c:	608b      	str	r3, [r1, #8]
 800c52e:	f1b8 0f00 	cmp.w	r8, #0
 800c532:	dd9c      	ble.n	800c46e <__sflush_r+0x1a>
 800c534:	6a21      	ldr	r1, [r4, #32]
 800c536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c538:	4643      	mov	r3, r8
 800c53a:	463a      	mov	r2, r7
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b0      	blx	r6
 800c540:	2800      	cmp	r0, #0
 800c542:	dc06      	bgt.n	800c552 <__sflush_r+0xfe>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	e78e      	b.n	800c470 <__sflush_r+0x1c>
 800c552:	4407      	add	r7, r0
 800c554:	eba8 0800 	sub.w	r8, r8, r0
 800c558:	e7e9      	b.n	800c52e <__sflush_r+0xda>
 800c55a:	bf00      	nop
 800c55c:	dfbffffe 	.word	0xdfbffffe

0800c560 <_fflush_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	690b      	ldr	r3, [r1, #16]
 800c564:	4605      	mov	r5, r0
 800c566:	460c      	mov	r4, r1
 800c568:	b913      	cbnz	r3, 800c570 <_fflush_r+0x10>
 800c56a:	2500      	movs	r5, #0
 800c56c:	4628      	mov	r0, r5
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	b118      	cbz	r0, 800c57a <_fflush_r+0x1a>
 800c572:	6a03      	ldr	r3, [r0, #32]
 800c574:	b90b      	cbnz	r3, 800c57a <_fflush_r+0x1a>
 800c576:	f7fe f9c3 	bl	800a900 <__sinit>
 800c57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0f3      	beq.n	800c56a <_fflush_r+0xa>
 800c582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c584:	07d0      	lsls	r0, r2, #31
 800c586:	d404      	bmi.n	800c592 <_fflush_r+0x32>
 800c588:	0599      	lsls	r1, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_fflush_r+0x32>
 800c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58e:	f7fe fb16 	bl	800abbe <__retarget_lock_acquire_recursive>
 800c592:	4628      	mov	r0, r5
 800c594:	4621      	mov	r1, r4
 800c596:	f7ff ff5d 	bl	800c454 <__sflush_r>
 800c59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c59c:	07da      	lsls	r2, r3, #31
 800c59e:	4605      	mov	r5, r0
 800c5a0:	d4e4      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	059b      	lsls	r3, r3, #22
 800c5a6:	d4e1      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5aa:	f7fe fb09 	bl	800abc0 <__retarget_lock_release_recursive>
 800c5ae:	e7dd      	b.n	800c56c <_fflush_r+0xc>

0800c5b0 <__swbuf_r>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	460e      	mov	r6, r1
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	b118      	cbz	r0, 800c5c2 <__swbuf_r+0x12>
 800c5ba:	6a03      	ldr	r3, [r0, #32]
 800c5bc:	b90b      	cbnz	r3, 800c5c2 <__swbuf_r+0x12>
 800c5be:	f7fe f99f 	bl	800a900 <__sinit>
 800c5c2:	69a3      	ldr	r3, [r4, #24]
 800c5c4:	60a3      	str	r3, [r4, #8]
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	071a      	lsls	r2, r3, #28
 800c5ca:	d525      	bpl.n	800c618 <__swbuf_r+0x68>
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	b31b      	cbz	r3, 800c618 <__swbuf_r+0x68>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	1a98      	subs	r0, r3, r2
 800c5d6:	6963      	ldr	r3, [r4, #20]
 800c5d8:	b2f6      	uxtb	r6, r6
 800c5da:	4283      	cmp	r3, r0
 800c5dc:	4637      	mov	r7, r6
 800c5de:	dc04      	bgt.n	800c5ea <__swbuf_r+0x3a>
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f7ff ffbc 	bl	800c560 <_fflush_r>
 800c5e8:	b9e0      	cbnz	r0, 800c624 <__swbuf_r+0x74>
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	60a3      	str	r3, [r4, #8]
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	6022      	str	r2, [r4, #0]
 800c5f6:	701e      	strb	r6, [r3, #0]
 800c5f8:	6962      	ldr	r2, [r4, #20]
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d004      	beq.n	800c60a <__swbuf_r+0x5a>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	07db      	lsls	r3, r3, #31
 800c604:	d506      	bpl.n	800c614 <__swbuf_r+0x64>
 800c606:	2e0a      	cmp	r6, #10
 800c608:	d104      	bne.n	800c614 <__swbuf_r+0x64>
 800c60a:	4621      	mov	r1, r4
 800c60c:	4628      	mov	r0, r5
 800c60e:	f7ff ffa7 	bl	800c560 <_fflush_r>
 800c612:	b938      	cbnz	r0, 800c624 <__swbuf_r+0x74>
 800c614:	4638      	mov	r0, r7
 800c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c618:	4621      	mov	r1, r4
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 f806 	bl	800c62c <__swsetup_r>
 800c620:	2800      	cmp	r0, #0
 800c622:	d0d5      	beq.n	800c5d0 <__swbuf_r+0x20>
 800c624:	f04f 37ff 	mov.w	r7, #4294967295
 800c628:	e7f4      	b.n	800c614 <__swbuf_r+0x64>
	...

0800c62c <__swsetup_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4b2a      	ldr	r3, [pc, #168]	; (800c6d8 <__swsetup_r+0xac>)
 800c630:	4605      	mov	r5, r0
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	460c      	mov	r4, r1
 800c636:	b118      	cbz	r0, 800c640 <__swsetup_r+0x14>
 800c638:	6a03      	ldr	r3, [r0, #32]
 800c63a:	b90b      	cbnz	r3, 800c640 <__swsetup_r+0x14>
 800c63c:	f7fe f960 	bl	800a900 <__sinit>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c646:	0718      	lsls	r0, r3, #28
 800c648:	d422      	bmi.n	800c690 <__swsetup_r+0x64>
 800c64a:	06d9      	lsls	r1, r3, #27
 800c64c:	d407      	bmi.n	800c65e <__swsetup_r+0x32>
 800c64e:	2309      	movs	r3, #9
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	f04f 30ff 	mov.w	r0, #4294967295
 800c65c:	e034      	b.n	800c6c8 <__swsetup_r+0x9c>
 800c65e:	0758      	lsls	r0, r3, #29
 800c660:	d512      	bpl.n	800c688 <__swsetup_r+0x5c>
 800c662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c664:	b141      	cbz	r1, 800c678 <__swsetup_r+0x4c>
 800c666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c66a:	4299      	cmp	r1, r3
 800c66c:	d002      	beq.n	800c674 <__swsetup_r+0x48>
 800c66e:	4628      	mov	r0, r5
 800c670:	f7ff f930 	bl	800b8d4 <_free_r>
 800c674:	2300      	movs	r3, #0
 800c676:	6363      	str	r3, [r4, #52]	; 0x34
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	2300      	movs	r3, #0
 800c682:	6063      	str	r3, [r4, #4]
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	f043 0308 	orr.w	r3, r3, #8
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	b94b      	cbnz	r3, 800c6a8 <__swsetup_r+0x7c>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c69e:	d003      	beq.n	800c6a8 <__swsetup_r+0x7c>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f000 f8b6 	bl	800c814 <__smakebuf_r>
 800c6a8:	89a0      	ldrh	r0, [r4, #12]
 800c6aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6ae:	f010 0301 	ands.w	r3, r0, #1
 800c6b2:	d00a      	beq.n	800c6ca <__swsetup_r+0x9e>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6963      	ldr	r3, [r4, #20]
 800c6ba:	425b      	negs	r3, r3
 800c6bc:	61a3      	str	r3, [r4, #24]
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	b943      	cbnz	r3, 800c6d4 <__swsetup_r+0xa8>
 800c6c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6c6:	d1c4      	bne.n	800c652 <__swsetup_r+0x26>
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	0781      	lsls	r1, r0, #30
 800c6cc:	bf58      	it	pl
 800c6ce:	6963      	ldrpl	r3, [r4, #20]
 800c6d0:	60a3      	str	r3, [r4, #8]
 800c6d2:	e7f4      	b.n	800c6be <__swsetup_r+0x92>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e7f7      	b.n	800c6c8 <__swsetup_r+0x9c>
 800c6d8:	20000068 	.word	0x20000068

0800c6dc <_sbrk_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d06      	ldr	r5, [pc, #24]	; (800c6f8 <_sbrk_r+0x1c>)
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	4608      	mov	r0, r1
 800c6e6:	602b      	str	r3, [r5, #0]
 800c6e8:	f7f5 fc3e 	bl	8001f68 <_sbrk>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d102      	bne.n	800c6f6 <_sbrk_r+0x1a>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	b103      	cbz	r3, 800c6f6 <_sbrk_r+0x1a>
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	20002ed8 	.word	0x20002ed8

0800c6fc <__assert_func>:
 800c6fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6fe:	4614      	mov	r4, r2
 800c700:	461a      	mov	r2, r3
 800c702:	4b09      	ldr	r3, [pc, #36]	; (800c728 <__assert_func+0x2c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4605      	mov	r5, r0
 800c708:	68d8      	ldr	r0, [r3, #12]
 800c70a:	b14c      	cbz	r4, 800c720 <__assert_func+0x24>
 800c70c:	4b07      	ldr	r3, [pc, #28]	; (800c72c <__assert_func+0x30>)
 800c70e:	9100      	str	r1, [sp, #0]
 800c710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c714:	4906      	ldr	r1, [pc, #24]	; (800c730 <__assert_func+0x34>)
 800c716:	462b      	mov	r3, r5
 800c718:	f000 f844 	bl	800c7a4 <fiprintf>
 800c71c:	f000 f8d8 	bl	800c8d0 <abort>
 800c720:	4b04      	ldr	r3, [pc, #16]	; (800c734 <__assert_func+0x38>)
 800c722:	461c      	mov	r4, r3
 800c724:	e7f3      	b.n	800c70e <__assert_func+0x12>
 800c726:	bf00      	nop
 800c728:	20000068 	.word	0x20000068
 800c72c:	0800cd6f 	.word	0x0800cd6f
 800c730:	0800cd7c 	.word	0x0800cd7c
 800c734:	0800cdaa 	.word	0x0800cdaa

0800c738 <_calloc_r>:
 800c738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c73a:	fba1 2402 	umull	r2, r4, r1, r2
 800c73e:	b94c      	cbnz	r4, 800c754 <_calloc_r+0x1c>
 800c740:	4611      	mov	r1, r2
 800c742:	9201      	str	r2, [sp, #4]
 800c744:	f7ff f93a 	bl	800b9bc <_malloc_r>
 800c748:	9a01      	ldr	r2, [sp, #4]
 800c74a:	4605      	mov	r5, r0
 800c74c:	b930      	cbnz	r0, 800c75c <_calloc_r+0x24>
 800c74e:	4628      	mov	r0, r5
 800c750:	b003      	add	sp, #12
 800c752:	bd30      	pop	{r4, r5, pc}
 800c754:	220c      	movs	r2, #12
 800c756:	6002      	str	r2, [r0, #0]
 800c758:	2500      	movs	r5, #0
 800c75a:	e7f8      	b.n	800c74e <_calloc_r+0x16>
 800c75c:	4621      	mov	r1, r4
 800c75e:	f7fe f95a 	bl	800aa16 <memset>
 800c762:	e7f4      	b.n	800c74e <_calloc_r+0x16>

0800c764 <__ascii_mbtowc>:
 800c764:	b082      	sub	sp, #8
 800c766:	b901      	cbnz	r1, 800c76a <__ascii_mbtowc+0x6>
 800c768:	a901      	add	r1, sp, #4
 800c76a:	b142      	cbz	r2, 800c77e <__ascii_mbtowc+0x1a>
 800c76c:	b14b      	cbz	r3, 800c782 <__ascii_mbtowc+0x1e>
 800c76e:	7813      	ldrb	r3, [r2, #0]
 800c770:	600b      	str	r3, [r1, #0]
 800c772:	7812      	ldrb	r2, [r2, #0]
 800c774:	1e10      	subs	r0, r2, #0
 800c776:	bf18      	it	ne
 800c778:	2001      	movne	r0, #1
 800c77a:	b002      	add	sp, #8
 800c77c:	4770      	bx	lr
 800c77e:	4610      	mov	r0, r2
 800c780:	e7fb      	b.n	800c77a <__ascii_mbtowc+0x16>
 800c782:	f06f 0001 	mvn.w	r0, #1
 800c786:	e7f8      	b.n	800c77a <__ascii_mbtowc+0x16>

0800c788 <__ascii_wctomb>:
 800c788:	b149      	cbz	r1, 800c79e <__ascii_wctomb+0x16>
 800c78a:	2aff      	cmp	r2, #255	; 0xff
 800c78c:	bf85      	ittet	hi
 800c78e:	238a      	movhi	r3, #138	; 0x8a
 800c790:	6003      	strhi	r3, [r0, #0]
 800c792:	700a      	strbls	r2, [r1, #0]
 800c794:	f04f 30ff 	movhi.w	r0, #4294967295
 800c798:	bf98      	it	ls
 800c79a:	2001      	movls	r0, #1
 800c79c:	4770      	bx	lr
 800c79e:	4608      	mov	r0, r1
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <fiprintf>:
 800c7a4:	b40e      	push	{r1, r2, r3}
 800c7a6:	b503      	push	{r0, r1, lr}
 800c7a8:	4601      	mov	r1, r0
 800c7aa:	ab03      	add	r3, sp, #12
 800c7ac:	4805      	ldr	r0, [pc, #20]	; (800c7c4 <fiprintf+0x20>)
 800c7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b2:	6800      	ldr	r0, [r0, #0]
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	f7ff fd33 	bl	800c220 <_vfiprintf_r>
 800c7ba:	b002      	add	sp, #8
 800c7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7c0:	b003      	add	sp, #12
 800c7c2:	4770      	bx	lr
 800c7c4:	20000068 	.word	0x20000068

0800c7c8 <__swhatbuf_r>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	b096      	sub	sp, #88	; 0x58
 800c7d4:	4615      	mov	r5, r2
 800c7d6:	461e      	mov	r6, r3
 800c7d8:	da0d      	bge.n	800c7f6 <__swhatbuf_r+0x2e>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7e0:	f04f 0100 	mov.w	r1, #0
 800c7e4:	bf0c      	ite	eq
 800c7e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7ea:	2340      	movne	r3, #64	; 0x40
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	6031      	str	r1, [r6, #0]
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	b016      	add	sp, #88	; 0x58
 800c7f4:	bd70      	pop	{r4, r5, r6, pc}
 800c7f6:	466a      	mov	r2, sp
 800c7f8:	f000 f848 	bl	800c88c <_fstat_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	dbec      	blt.n	800c7da <__swhatbuf_r+0x12>
 800c800:	9901      	ldr	r1, [sp, #4]
 800c802:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c806:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c80a:	4259      	negs	r1, r3
 800c80c:	4159      	adcs	r1, r3
 800c80e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c812:	e7eb      	b.n	800c7ec <__swhatbuf_r+0x24>

0800c814 <__smakebuf_r>:
 800c814:	898b      	ldrh	r3, [r1, #12]
 800c816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c818:	079d      	lsls	r5, r3, #30
 800c81a:	4606      	mov	r6, r0
 800c81c:	460c      	mov	r4, r1
 800c81e:	d507      	bpl.n	800c830 <__smakebuf_r+0x1c>
 800c820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	2301      	movs	r3, #1
 800c82a:	6163      	str	r3, [r4, #20]
 800c82c:	b002      	add	sp, #8
 800c82e:	bd70      	pop	{r4, r5, r6, pc}
 800c830:	ab01      	add	r3, sp, #4
 800c832:	466a      	mov	r2, sp
 800c834:	f7ff ffc8 	bl	800c7c8 <__swhatbuf_r>
 800c838:	9900      	ldr	r1, [sp, #0]
 800c83a:	4605      	mov	r5, r0
 800c83c:	4630      	mov	r0, r6
 800c83e:	f7ff f8bd 	bl	800b9bc <_malloc_r>
 800c842:	b948      	cbnz	r0, 800c858 <__smakebuf_r+0x44>
 800c844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c848:	059a      	lsls	r2, r3, #22
 800c84a:	d4ef      	bmi.n	800c82c <__smakebuf_r+0x18>
 800c84c:	f023 0303 	bic.w	r3, r3, #3
 800c850:	f043 0302 	orr.w	r3, r3, #2
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	e7e3      	b.n	800c820 <__smakebuf_r+0xc>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	6020      	str	r0, [r4, #0]
 800c85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c860:	81a3      	strh	r3, [r4, #12]
 800c862:	9b00      	ldr	r3, [sp, #0]
 800c864:	6163      	str	r3, [r4, #20]
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	6120      	str	r0, [r4, #16]
 800c86a:	b15b      	cbz	r3, 800c884 <__smakebuf_r+0x70>
 800c86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c870:	4630      	mov	r0, r6
 800c872:	f000 f81d 	bl	800c8b0 <_isatty_r>
 800c876:	b128      	cbz	r0, 800c884 <__smakebuf_r+0x70>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f023 0303 	bic.w	r3, r3, #3
 800c87e:	f043 0301 	orr.w	r3, r3, #1
 800c882:	81a3      	strh	r3, [r4, #12]
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	431d      	orrs	r5, r3
 800c888:	81a5      	strh	r5, [r4, #12]
 800c88a:	e7cf      	b.n	800c82c <__smakebuf_r+0x18>

0800c88c <_fstat_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_fstat_r+0x20>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	4611      	mov	r1, r2
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f7f5 fb3c 	bl	8001f16 <_fstat>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d102      	bne.n	800c8a8 <_fstat_r+0x1c>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b103      	cbz	r3, 800c8a8 <_fstat_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20002ed8 	.word	0x20002ed8

0800c8b0 <_isatty_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d06      	ldr	r5, [pc, #24]	; (800c8cc <_isatty_r+0x1c>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	602b      	str	r3, [r5, #0]
 800c8bc:	f7f5 fb3b 	bl	8001f36 <_isatty>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_isatty_r+0x1a>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_isatty_r+0x1a>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	20002ed8 	.word	0x20002ed8

0800c8d0 <abort>:
 800c8d0:	b508      	push	{r3, lr}
 800c8d2:	2006      	movs	r0, #6
 800c8d4:	f000 f82c 	bl	800c930 <raise>
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f7f5 fae9 	bl	8001eb0 <_exit>

0800c8de <_raise_r>:
 800c8de:	291f      	cmp	r1, #31
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	d904      	bls.n	800c8f2 <_raise_r+0x14>
 800c8e8:	2316      	movs	r3, #22
 800c8ea:	6003      	str	r3, [r0, #0]
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c8f4:	b112      	cbz	r2, 800c8fc <_raise_r+0x1e>
 800c8f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8fa:	b94b      	cbnz	r3, 800c910 <_raise_r+0x32>
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f000 f831 	bl	800c964 <_getpid_r>
 800c902:	462a      	mov	r2, r5
 800c904:	4601      	mov	r1, r0
 800c906:	4620      	mov	r0, r4
 800c908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c90c:	f000 b818 	b.w	800c940 <_kill_r>
 800c910:	2b01      	cmp	r3, #1
 800c912:	d00a      	beq.n	800c92a <_raise_r+0x4c>
 800c914:	1c59      	adds	r1, r3, #1
 800c916:	d103      	bne.n	800c920 <_raise_r+0x42>
 800c918:	2316      	movs	r3, #22
 800c91a:	6003      	str	r3, [r0, #0]
 800c91c:	2001      	movs	r0, #1
 800c91e:	e7e7      	b.n	800c8f0 <_raise_r+0x12>
 800c920:	2400      	movs	r4, #0
 800c922:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c926:	4628      	mov	r0, r5
 800c928:	4798      	blx	r3
 800c92a:	2000      	movs	r0, #0
 800c92c:	e7e0      	b.n	800c8f0 <_raise_r+0x12>
	...

0800c930 <raise>:
 800c930:	4b02      	ldr	r3, [pc, #8]	; (800c93c <raise+0xc>)
 800c932:	4601      	mov	r1, r0
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f7ff bfd2 	b.w	800c8de <_raise_r>
 800c93a:	bf00      	nop
 800c93c:	20000068 	.word	0x20000068

0800c940 <_kill_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_kill_r+0x20>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	f7f5 fa9f 	bl	8001e90 <_kill>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d102      	bne.n	800c95c <_kill_r+0x1c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	b103      	cbz	r3, 800c95c <_kill_r+0x1c>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
 800c95e:	bf00      	nop
 800c960:	20002ed8 	.word	0x20002ed8

0800c964 <_getpid_r>:
 800c964:	f7f5 ba8c 	b.w	8001e80 <_getpid>

0800c968 <_init>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	bf00      	nop
 800c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96e:	bc08      	pop	{r3}
 800c970:	469e      	mov	lr, r3
 800c972:	4770      	bx	lr

0800c974 <_fini>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	bf00      	nop
 800c978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97a:	bc08      	pop	{r3}
 800c97c:	469e      	mov	lr, r3
 800c97e:	4770      	bx	lr
