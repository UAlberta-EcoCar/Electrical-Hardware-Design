
BatteryPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a34  08008a34  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a3c  08008a3c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d08  20000060  08008aa4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d68  08008aa4  00022d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020231  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e2f  00000000  00000000  00040304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a80  00000000  00000000  00044138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149b  00000000  00000000  00045bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004003  00000000  00000000  00047053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be1a  00000000  00000000  0004b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6da8  00000000  00000000  00066e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000744c  00000000  00000000  0014dc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00155064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088b0 	.word	0x080088b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080088b0 	.word	0x080088b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN PFP */

uint32_t conversion_completed = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d104      	bne.n	80004ea <HAL_ADC_ConvCpltCallback+0x1e>
    conversion_completed++;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e8:	6013      	str	r3, [r2, #0]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000007c 	.word	0x2000007c
 80004fc:	20001234 	.word	0x20001234

08000500 <HAL_CAN_RxFifo0MsgPendingCallback>:

// NICK: I edited how my Callbacks work to be a little safer, check it out
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800050c:	2100      	movs	r1, #0
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f002 f8b9 	bl	8002686 <HAL_CAN_GetRxMessage>
  if (RxHeader.RTR == CAN_RTR_REMOTE) {
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d107      	bne.n	800052c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
    osMessageQueuePut(canRxRtrQueueHandle, &RxHeader.StdId, 0U, 0UL);
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2200      	movs	r2, #0
 8000524:	4915      	ldr	r1, [pc, #84]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000526:	f005 fadd 	bl	8005ae4 <osMessageQueuePut>
    } else {
      osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
      osMessageQueuePut(canRxDataQueueHandle, &RxData[4], 0U, 0UL);
    }
  }
}
 800052a:	e020      	b.n	800056e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    osMessageQueuePut(canRxDataQueueHandle, &RxHeader.StdId, 0U, 0UL);
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	4911      	ldr	r1, [pc, #68]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000536:	f005 fad5 	bl	8005ae4 <osMessageQueuePut>
    if (RxHeader.DLC <= 4UL) {
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	2b04      	cmp	r3, #4
 8000540:	d807      	bhi.n	8000552 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
      osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2200      	movs	r2, #0
 800054a:	490b      	ldr	r1, [pc, #44]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800054c:	f005 faca 	bl	8005ae4 <osMessageQueuePut>
}
 8000550:	e00d      	b.n	800056e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
      osMessageQueuePut(canRxDataQueueHandle, RxData, 0U, 0UL);
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	4907      	ldr	r1, [pc, #28]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800055c:	f005 fac2 	bl	8005ae4 <osMessageQueuePut>
      osMessageQueuePut(canRxDataQueueHandle, &RxData[4], 0U, 0UL);
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2200      	movs	r2, #0
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800056a:	f005 fabb 	bl	8005ae4 <osMessageQueuePut>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20001228 	.word	0x20001228
 800057c:	2000120c 	.word	0x2000120c
 8000580:	20000c88 	.word	0x20000c88
 8000584:	20000edc 	.word	0x20000edc
 8000588:	2000122c 	.word	0x2000122c

0800058c <HAL_CAN_TxMailbox0CompleteCallback>:


/* Transmit Completed Callbacks for Message Sent Confirmations */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (TxMailboxCanTask == CAN_TX_MAILBOX0) {
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d102      	bne.n	80005a2 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
    //osSemaphoreRelease(canMsgReceivedSemHandle);
    TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  }
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20001230 	.word	0x20001230

080005b4 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (TxMailboxCanTask == CAN_TX_MAILBOX1) {
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d102      	bne.n	80005ca <HAL_CAN_TxMailbox1CompleteCallback+0x16>
    //osSemaphoreRelease(canMsgReceivedSemHandle);
    TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20001230 	.word	0x20001230

080005dc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (TxMailboxCanTask == CAN_TX_MAILBOX2) {
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d102      	bne.n	80005f2 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
    //osSemaphoreRelease(canMsgReceivedSemHandle);
    TxMailboxCanTask = CAN_TX_MAILBOX_NONE;
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20001230 	.word	0x20001230

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fe27 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f860 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9d6 	bl	80009c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f9b6 	bl	8000984 <MX_DMA_Init>
  MX_CAN1_Init();
 8000618:	f000 f94e 	bl	80008b8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f982 	bl	8000924 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000620:	f000 f8a6 	bl	8000770 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f005 f8f4 	bl	8005810 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canRxRtrQueue */
  canRxRtrQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &canRxRtrQueue_attributes);
 8000628:	4a19      	ldr	r2, [pc, #100]	; (8000690 <main+0x8c>)
 800062a:	2104      	movs	r1, #4
 800062c:	2080      	movs	r0, #128	; 0x80
 800062e:	f005 f9e6 	bl	80059fe <osMessageQueueNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0x90>)
 8000636:	6013      	str	r3, [r2, #0]

  /* creation of canRxDataQueue */
  canRxDataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &canRxDataQueue_attributes);
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <main+0x94>)
 800063a:	2104      	movs	r1, #4
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	f005 f9de 	bl	80059fe <osMessageQueueNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <main+0x98>)
 8000646:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AdcTask */
  AdcTaskHandle = osThreadNew(StartAdcTask, NULL, &AdcTask_attributes);
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <main+0x9c>)
 800064a:	2100      	movs	r1, #0
 800064c:	4815      	ldr	r0, [pc, #84]	; (80006a4 <main+0xa0>)
 800064e:	f005 f929 	bl	80058a4 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <main+0xa4>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of CanRtrTask */
  CanRtrTaskHandle = osThreadNew(StartCanRtrTask, NULL, &CanRtrTask_attributes);
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <main+0xa8>)
 800065a:	2100      	movs	r1, #0
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <main+0xac>)
 800065e:	f005 f921 	bl	80058a4 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <main+0xb0>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of CanDataTask */
  CanDataTaskHandle = osThreadNew(StartCanDataTask, NULL, &CanDataTask_attributes);
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <main+0xb4>)
 800066a:	2100      	movs	r1, #0
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0xb8>)
 800066e:	f005 f919 	bl	80058a4 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <main+0xbc>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of BattMonTask */
  BattMonTaskHandle = osThreadNew(StartBattMonTask, NULL, &BattMonTask_attributes);
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <main+0xc0>)
 800067a:	2100      	movs	r1, #0
 800067c:	4812      	ldr	r0, [pc, #72]	; (80006c8 <main+0xc4>)
 800067e:	f005 f911 	bl	80058a4 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a11      	ldr	r2, [pc, #68]	; (80006cc <main+0xc8>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f005 f8e6 	bl	8005858 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800068c:	e7fe      	b.n	800068c <main+0x88>
 800068e:	bf00      	nop
 8000690:	080089bc 	.word	0x080089bc
 8000694:	20000c88 	.word	0x20000c88
 8000698:	080089d4 	.word	0x080089d4
 800069c:	20000edc 	.word	0x20000edc
 80006a0:	0800892c 	.word	0x0800892c
 80006a4:	08000b25 	.word	0x08000b25
 80006a8:	200001d8 	.word	0x200001d8
 80006ac:	08008950 	.word	0x08008950
 80006b0:	08000c99 	.word	0x08000c99
 80006b4:	20000484 	.word	0x20000484
 80006b8:	08008974 	.word	0x08008974
 80006bc:	08000cd1 	.word	0x08000cd1
 80006c0:	20000730 	.word	0x20000730
 80006c4:	08008998 	.word	0x08008998
 80006c8:	08000d25 	.word	0x08000d25
 80006cc:	200009dc 	.word	0x200009dc

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	; 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 fffc 	bl	80086dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f002 ffad 	bl	8003654 <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 fb2a 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	2303      	movs	r3, #3
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800071a:	2314      	movs	r3, #20
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800071e:	2307      	movs	r3, #7
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f002 ffe6 	bl	8003700 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb0d 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2303      	movs	r3, #3
 8000744:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	2104      	movs	r1, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fbe6 	bl	8003f28 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000762:	f000 faf9 	bl	8000d58 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	; 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000786:	4b45      	ldr	r3, [pc, #276]	; (800089c <MX_ADC1_Init+0x12c>)
 8000788:	4a45      	ldr	r2, [pc, #276]	; (80008a0 <MX_ADC1_Init+0x130>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800078c:	4b43      	ldr	r3, [pc, #268]	; (800089c <MX_ADC1_Init+0x12c>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <MX_ADC1_Init+0x12c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000798:	4b40      	ldr	r3, [pc, #256]	; (800089c <MX_ADC1_Init+0x12c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_ADC1_Init+0x12c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <MX_ADC1_Init+0x12c>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_ADC1_Init+0x12c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b0:	4b3a      	ldr	r3, [pc, #232]	; (800089c <MX_ADC1_Init+0x12c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_ADC1_Init+0x12c>)
 80007b8:	2205      	movs	r2, #5
 80007ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <MX_ADC1_Init+0x12c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <MX_ADC1_Init+0x12c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_ADC1_Init+0x12c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_ADC1_Init+0x12c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_ADC1_Init+0x12c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_ADC1_Init+0x12c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <MX_ADC1_Init+0x12c>)
 80007e8:	f000 ff38 	bl	800165c <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007f2:	f000 fab1 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_ADC1_Init+0x134>)
 80007f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fa:	2306      	movs	r3, #6
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000802:	237f      	movs	r3, #127	; 0x7f
 8000804:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000806:	2304      	movs	r3, #4
 8000808:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4822      	ldr	r0, [pc, #136]	; (800089c <MX_ADC1_Init+0x12c>)
 8000814:	f001 f8fc 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800081e:	f000 fa9b 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC1_Init+0x138>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000826:	230c      	movs	r3, #12
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_ADC1_Init+0x12c>)
 8000830:	f001 f8ee 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800083a:	f000 fa8d 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000842:	2312      	movs	r3, #18
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_ADC1_Init+0x12c>)
 800084c:	f001 f8e0 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000856:	f000 fa7f 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_ADC1_Init+0x140>)
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800085e:	2318      	movs	r3, #24
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_ADC1_Init+0x12c>)
 8000868:	f001 f8d2 	bl	8001a10 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000872:	f000 fa71 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x144>)
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800087a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_ADC1_Init+0x12c>)
 8000886:	f001 f8c3 	bl	8001a10 <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000890:	f000 fa62 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	50040000 	.word	0x50040000
 80008a4:	19200040 	.word	0x19200040
 80008a8:	1d500080 	.word	0x1d500080
 80008ac:	21800100 	.word	0x21800100
 80008b0:	25b00200 	.word	0x25b00200
 80008b4:	2a000400 	.word	0x2a000400

080008b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_CAN1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_CAN1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_CAN1_Init+0x64>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_CAN1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_CAN1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_CAN1_Init+0x64>)
 80008d6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_CAN1_Init+0x64>)
 80008de:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_CAN1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_CAN1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_CAN1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_CAN1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_CAN1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_CAN1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_CAN1_Init+0x64>)
 800090a:	f001 fd7d 	bl	8002408 <HAL_CAN_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 fa20 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000128 	.word	0x20000128
 8000920:	40006400 	.word	0x40006400

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART1_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_USART1_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART1_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART1_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000968:	f004 fa7e 	bl	8004e68 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f9f1 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000150 	.word	0x20000150
 8000980:	40013800 	.word	0x40013800

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_DMA_Init+0x38>)
 800098c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <MX_DMA_Init+0x38>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6493      	str	r3, [r2, #72]	; 0x48
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DMA_Init+0x38>)
 8000998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2105      	movs	r1, #5
 80009a6:	200b      	movs	r0, #11
 80009a8:	f002 fa7e 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ac:	200b      	movs	r0, #11
 80009ae:	f002 fa97 	bl	8002ee0 <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <MX_GPIO_Init+0x154>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <MX_GPIO_Init+0x154>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPLED1_Pin|GPLED2_Pin|GPLED3_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2138      	movs	r1, #56	; 0x38
 8000a3a:	4837      	ldr	r0, [pc, #220]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a3c:	f002 fdc0 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4831      	ldr	r0, [pc, #196]	; (8000b1c <MX_GPIO_Init+0x15c>)
 8000a58:	f002 fc48 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	482a      	ldr	r0, [pc, #168]	; (8000b1c <MX_GPIO_Init+0x15c>)
 8000a72:	f002 fc3b 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a76:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000a7a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f002 fc2d 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a92:	2303      	movs	r3, #3
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000aa6:	f002 fc21 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f002 fc13 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLED1_Pin GPLED2_Pin GPLED3_Pin */
  GPIO_InitStruct.Pin = GPLED1_Pin|GPLED2_Pin|GPLED3_Pin;
 8000ac6:	2338      	movs	r3, #56	; 0x38
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000ade:	f002 fc05 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <MX_GPIO_Init+0x160>)
 8000af6:	f002 fbf9 	bl	80032ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2105      	movs	r1, #5
 8000afe:	2028      	movs	r0, #40	; 0x28
 8000b00:	f002 f9d2 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f002 f9eb 	bl	8002ee0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48001c00 	.word	0x48001c00

08000b24 <StartAdcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  const float ADC_VOLT_REF = 3.3f / 4096.0f;
 8000b2c:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <StartAdcTask+0x154>)
 8000b2e:	61fb      	str	r3, [r7, #28]
  const float VOLT_TO_CURR = 2.5f; // A/V
 8000b30:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <StartAdcTask+0x158>)
 8000b32:	61bb      	str	r3, [r7, #24]
  const float BATTERY_VOLT_DIVIDER =
 8000b34:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <StartAdcTask+0x15c>)
 8000b36:	617b      	str	r3, [r7, #20]
      10.8f; // voltage divider input 18.5v/ output 1.7123412v
  const float OUTPUT_VOLT_DIVIDER =
 8000b38:	4b52      	ldr	r3, [pc, #328]	; (8000c84 <StartAdcTask+0x160>)
 8000b3a:	613b      	str	r3, [r7, #16]
      7.1f; // voltage divider input 12v/ output 1.68862275v
  // memset(adcResults, 0, 5);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	4952      	ldr	r1, [pc, #328]	; (8000c88 <StartAdcTask+0x164>)
 8000b40:	4852      	ldr	r0, [pc, #328]	; (8000c8c <StartAdcTask+0x168>)
 8000b42:	f000 fecd 	bl	80018e0 <HAL_ADC_Start_DMA>
  int i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
    if (conversion_completed) {
 8000b4a:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <StartAdcTask+0x16c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 808e 	beq.w	8000c70 <StartAdcTask+0x14c>
      battery_board_data[i].batt_volt =
          adcResults[0] * ADC_VOLT_REF * BATTERY_VOLT_DIVIDER;
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <StartAdcTask+0x164>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b60:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
      battery_board_data[i].batt_volt =
 8000b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b74:	ee17 0a90 	vmov	r0, s15
 8000b78:	4946      	ldr	r1, [pc, #280]	; (8000c94 <StartAdcTask+0x170>)
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	6018      	str	r0, [r3, #0]
      battery_board_data[i].batt_cur =
          adcResults[1] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <StartAdcTask+0x164>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b94:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
      battery_board_data[i].batt_cur =
 8000ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba8:	ee17 0a90 	vmov	r0, s15
 8000bac:	4939      	ldr	r1, [pc, #228]	; (8000c94 <StartAdcTask+0x170>)
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	3304      	adds	r3, #4
 8000bbc:	6018      	str	r0, [r3, #0]
      battery_board_data[i].output_cur =
          adcResults[2] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <StartAdcTask+0x164>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
      battery_board_data[i].output_cur =
 8000bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bde:	ee17 0a90 	vmov	r0, s15
 8000be2:	492c      	ldr	r1, [pc, #176]	; (8000c94 <StartAdcTask+0x170>)
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	330c      	adds	r3, #12
 8000bf2:	6018      	str	r0, [r3, #0]
      battery_board_data[i].output_volt =
          adcResults[3] * ADC_VOLT_REF * OUTPUT_VOLT_DIVIDER;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <StartAdcTask+0x164>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
      battery_board_data[i].output_volt =
 8000c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c14:	ee17 0a90 	vmov	r0, s15
 8000c18:	491e      	ldr	r1, [pc, #120]	; (8000c94 <StartAdcTask+0x170>)
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	3308      	adds	r3, #8
 8000c28:	6018      	str	r0, [r3, #0]
      battery_board_data[i].output_cur =
          adcResults[4] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <StartAdcTask+0x164>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c36:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c42:	ee67 7a27 	vmul.f32	s15, s14, s15
      battery_board_data[i].output_cur =
 8000c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	4911      	ldr	r1, [pc, #68]	; (8000c94 <StartAdcTask+0x170>)
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	6018      	str	r0, [r3, #0]
      HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 8000c60:	2205      	movs	r2, #5
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <StartAdcTask+0x164>)
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <StartAdcTask+0x168>)
 8000c66:	f000 fe3b 	bl	80018e0 <HAL_ADC_Start_DMA>
      conversion_completed = 0;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <StartAdcTask+0x16c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
    }
    osDelay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f004 fea9 	bl	80059c8 <osDelay>
    if (conversion_completed) {
 8000c76:	e768      	b.n	8000b4a <StartAdcTask+0x26>
 8000c78:	3a533333 	.word	0x3a533333
 8000c7c:	40200000 	.word	0x40200000
 8000c80:	412ccccd 	.word	0x412ccccd
 8000c84:	40e33333 	.word	0x40e33333
 8000c88:	200011f8 	.word	0x200011f8
 8000c8c:	2000007c 	.word	0x2000007c
 8000c90:	20001234 	.word	0x20001234
 8000c94:	20001130 	.word	0x20001130

08000c98 <StartCanRtrTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanRtrTask */
void StartCanRtrTask(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef hal_stat;
	  uint32_t queueData;
	  float floatPackage[2];
	  /* Infinite loop */
	  for (;;) {
	    if (osMessageQueueGet(canRxRtrQueueHandle, &queueData, 0U, osWaitForever) ==
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <StartCanRtrTask+0x34>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f107 0114 	add.w	r1, r7, #20
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cac:	2200      	movs	r2, #0
 8000cae:	f004 ff79 	bl	8005ba4 <osMessageQueueGet>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <StartCanRtrTask+0x2a>
	        osOK) {
	      switch (queueData) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f240 2201 	movw	r2, #513	; 0x201
 8000cbe:	4293      	cmp	r3, r2
	      case INTERNAL_FUEL_CELL_PACKET:
	        break;
	      default:
	        // this shouldn't happen
	        break;
 8000cc0:	bf00      	nop
	      }
	    }
	    osDelay(10);
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f004 fe80 	bl	80059c8 <osDelay>
	    if (osMessageQueueGet(canRxRtrQueueHandle, &queueData, 0U, osWaitForever) ==
 8000cc8:	e7ea      	b.n	8000ca0 <StartCanRtrTask+0x8>
 8000cca:	bf00      	nop
 8000ccc:	20000c88 	.word	0x20000c88

08000cd0 <StartCanDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanDataTask */
void StartCanDataTask(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanDataTask */
	HAL_CAN_Start(&hcan1);
 8000cd8:	4810      	ldr	r0, [pc, #64]	; (8000d1c <StartCanDataTask+0x4c>)
 8000cda:	f001 fc90 	bl	80025fe <HAL_CAN_Start>
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cde:	2102      	movs	r1, #2
 8000ce0:	480e      	ldr	r0, [pc, #56]	; (8000d1c <StartCanDataTask+0x4c>)
 8000ce2:	f001 fdf2 	bl	80028ca <HAL_CAN_ActivateNotification>
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <StartCanDataTask+0x4c>)
 8000cea:	f001 fdee 	bl	80028ca <HAL_CAN_ActivateNotification>
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <StartCanDataTask+0x4c>)
 8000cf2:	f001 fdea 	bl	80028ca <HAL_CAN_ActivateNotification>
	#define H2_ALARM_HIGH 1

	  /* Infinite loop */
	  uint32_t queueData;
	  for (;;) {
	    if (osMessageQueueGet(canRxDataQueueHandle, &queueData, 0U,
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <StartCanDataTask+0x50>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	f107 010c 	add.w	r1, r7, #12
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d02:	2200      	movs	r2, #0
 8000d04:	f004 ff4e 	bl	8005ba4 <osMessageQueueGet>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <StartCanDataTask+0x44>
	                          osWaitForever) == osOK) {
	      switch (queueData) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b01      	cmp	r3, #1
	        //if (canData.H2_OK == H2_ALARM_HIGH) {
	          // Potentially do something here
	        //}
	        break;
	      default:
	        break;
 8000d12:	bf00      	nop
	      }
	    }
	    osDelay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f004 fe57 	bl	80059c8 <osDelay>
	    if (osMessageQueueGet(canRxDataQueueHandle, &queueData, 0U,
 8000d1a:	e7ec      	b.n	8000cf6 <StartCanDataTask+0x26>
 8000d1c:	20000128 	.word	0x20000128
 8000d20:	20000edc 	.word	0x20000edc

08000d24 <StartBattMonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBattMonTask */
void StartBattMonTask(void *argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBattMonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f004 fe4b 	bl	80059c8 <osDelay>
 8000d32:	e7fb      	b.n	8000d2c <StartBattMonTask+0x8>

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 faa1 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6613      	str	r3, [r2, #96]	; 0x60
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	f06f 0001 	mvn.w	r0, #1
 8000da2:	f002 f881 	bl	8002ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09e      	sub	sp, #120	; 0x78
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2254      	movs	r2, #84	; 0x54
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f007 fc81 	bl	80086dc <memset>
  if(hadc->Instance==ADC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <HAL_ADC_MspInit+0x118>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d16e      	bne.n	8000ec2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000de8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dee:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000df0:	2303      	movs	r3, #3
 8000df2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fade 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e1e:	f7ff ff9b 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_ADC_MspInit+0x11c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ACD_Battery_Voltage_Pin|Battery_Curr_Pin|Current_Out_12V_Pin|ADC_12V_Voltage_Out_Pin
 8000e52:	233e      	movs	r3, #62	; 0x3e
 8000e54:	667b      	str	r3, [r7, #100]	; 0x64
                          |Current_Buck_12V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e56:	230b      	movs	r3, #11
 8000e58:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 fa40 	bl	80032ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_ADC_MspInit+0x124>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000ea8:	f002 f828 	bl	8002efc <HAL_DMA_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000eb2:	f7ff ff51 	bl	8000d58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000eba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ebc:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_ADC_MspInit+0x120>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3778      	adds	r7, #120	; 0x78
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	50040000 	.word	0x50040000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	200000e0 	.word	0x200000e0
 8000ed8:	40020008 	.word	0x40020008

08000edc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <HAL_CAN_MspInit+0xd4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d153      	bne.n	8000fa6 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_CAN_MspInit+0xd8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f40:	2309      	movs	r3, #9
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f002 f9cd 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f64:	2309      	movs	r3, #9
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f002 f9bb 	bl	80032ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2013      	movs	r0, #19
 8000f7c:	f001 ff94 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f80:	2013      	movs	r0, #19
 8000f82:	f001 ffad 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2105      	movs	r1, #5
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f001 ff8c 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f90:	2014      	movs	r0, #20
 8000f92:	f001 ffa5 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2105      	movs	r1, #5
 8000f9a:	2015      	movs	r0, #21
 8000f9c:	f001 ff84 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fa0:	2015      	movs	r0, #21
 8000fa2:	f001 ff9d 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40006400 	.word	0x40006400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09e      	sub	sp, #120	; 0x78
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2254      	movs	r2, #84	; 0x54
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 fb7f 	bl	80086dc <memset>
  if(huart->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <HAL_UART_MspInit+0xa4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d135      	bne.n	8001054 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f9ed 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001000:	f7ff feaa 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_UART_MspInit+0xa8>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_UART_MspInit+0xa8>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_UART_MspInit+0xa8>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_UART_MspInit+0xa8>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_UART_MspInit+0xa8>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_UART_MspInit+0xa8>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001034:	23c0      	movs	r3, #192	; 0xc0
 8001036:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001044:	2307      	movs	r3, #7
 8001046:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_UART_MspInit+0xac>)
 8001050:	f002 f94c 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3778      	adds	r7, #120	; 0x78
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40013800 	.word	0x40013800
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400

08001068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_InitTick+0xc8>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <HAL_InitTick+0xc8>)
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_InitTick+0xc8>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f003 f909 	bl	80042b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800109e:	f003 f8f1 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 80010a2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <HAL_InitTick+0xcc>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	3b01      	subs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_InitTick+0xd0>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <HAL_InitTick+0xd4>)
 80010b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_InitTick+0xd0>)
 80010ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_InitTick+0xd0>)
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_InitTick+0xd0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_InitTick+0xd0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_InitTick+0xd0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <HAL_InitTick+0xd0>)
 80010da:	f003 fc63 	bl	80049a4 <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11b      	bne.n	8001124 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <HAL_InitTick+0xd0>)
 80010ee:	f003 fcbb 	bl	8004a68 <HAL_TIM_Base_Start_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d111      	bne.n	8001124 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001100:	2019      	movs	r0, #25
 8001102:	f001 feed 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d808      	bhi.n	800111e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2019      	movs	r0, #25
 8001112:	f001 fec9 	bl	8002ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_InitTick+0xd8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e002      	b.n	8001124 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001128:	4618      	mov	r0, r3
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	431bde83 	.word	0x431bde83
 8001138:	20001238 	.word	0x20001238
 800113c:	40012c00 	.word	0x40012c00
 8001140:	20000004 	.word	0x20000004

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA1_Channel1_IRQHandler+0x10>)
 8001176:	f001 ffd9 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000e0 	.word	0x200000e0

08001184 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <CAN1_TX_IRQHandler+0x10>)
 800118a:	f001 fbc4 	bl	8002916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000128 	.word	0x20000128

08001198 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <CAN1_RX0_IRQHandler+0x10>)
 800119e:	f001 fbba 	bl	8002916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000128 	.word	0x20000128

080011ac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <CAN1_RX1_IRQHandler+0x10>)
 80011b2:	f001 fbb0 	bl	8002916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000128 	.word	0x20000128

080011c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011c6:	f003 fca3 	bl	8004b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20001238 	.word	0x20001238

080011d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80011d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011dc:	f002 fa08 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f007 faaf 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff f9e3 	bl	8000604 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800124c:	08008a44 	.word	0x08008a44
  ldr r2, =_sbss
 8001250:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001254:	20002d68 	.word	0x20002d68

08001258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_IRQHandler>

0800125a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f001 fe14 	bl	8002e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	200f      	movs	r0, #15
 800126c:	f7ff fefc 	bl	8001068 <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff fd72 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20001284 	.word	0x20001284

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20001284 	.word	0x20001284

080012cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3360      	adds	r3, #96	; 0x60
 8001346:	461a      	mov	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LL_ADC_SetOffset+0x44>)
 8001356:	4013      	ands	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	4313      	orrs	r3, r2
 8001364:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	03fff000 	.word	0x03fff000

0800137c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3360      	adds	r3, #96	; 0x60
 800138a:	461a      	mov	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3360      	adds	r3, #96	; 0x60
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3330      	adds	r3, #48	; 0x30
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	211f      	movs	r1, #31
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0e9b      	lsrs	r3, r3, #26
 800143c:	f003 011f 	and.w	r1, r3, #31
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	431a      	orrs	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3314      	adds	r3, #20
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0e5b      	lsrs	r3, r3, #25
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	0d1b      	lsrs	r3, r3, #20
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2107      	movs	r1, #7
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	0d1b      	lsrs	r3, r3, #20
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0318 	and.w	r3, r3, #24
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014d8:	40d9      	lsrs	r1, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	400b      	ands	r3, r1
 80014de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	0007ffff 	.word	0x0007ffff

080014fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800150c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6093      	str	r3, [r2, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001534:	d101      	bne.n	800153a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800155c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001584:	d101      	bne.n	800158a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_IsEnabled+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_IsEnabled+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fa:	f043 0204 	orr.w	r2, r3, #4
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b04      	cmp	r3, #4
 8001620:	d101      	bne.n	8001626 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b08      	cmp	r3, #8
 8001646:	d101      	bne.n	800164c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e126      	b.n	80018c4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fb95 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff3f 	bl	8001520 <LL_ADC_IsDeepPowerDownEnabled>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff25 	bl	80014fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff5a 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff3e 	bl	8001548 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016cc:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_ADC_Init+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_ADC_Init+0x274>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e0:	e002      	b.n	80016e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff3c 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff75 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001724:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80bf 	bne.w	80018b2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80bb 	bne.w	80018b2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001744:	f043 0202 	orr.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff35 	bl	80015c0 <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10b      	bne.n	8001774 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800175c:	485d      	ldr	r0, [pc, #372]	; (80018d4 <HAL_ADC_Init+0x278>)
 800175e:	f7ff ff2f 	bl	80015c0 <LL_ADC_IsEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4619      	mov	r1, r3
 800176e:	485a      	ldr	r0, [pc, #360]	; (80018d8 <HAL_ADC_Init+0x27c>)
 8001770:	f7ff fdac 	bl	80012cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e5b      	ldrb	r3, [r3, #25]
 8001778:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800177e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001784:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800178a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	045b      	lsls	r3, r3, #17
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_ADC_Init+0x280>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	430b      	orrs	r3, r1
 80017de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff25 	bl	8001634 <LL_ADC_INJ_IsConversionOngoing>
 80017ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d13d      	bne.n	800186e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d13a      	bne.n	800186e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001804:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001814:	f023 0302 	bic.w	r3, r3, #2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	430b      	orrs	r3, r1
 8001820:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001828:	2b01      	cmp	r3, #1
 800182a:	d118      	bne.n	800185e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800184e:	430a      	orrs	r2, r1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	e007      	b.n	800186e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10c      	bne.n	8001890 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f023 010f 	bic.w	r1, r3, #15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
 800188e:	e007      	b.n	80018a0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020f 	bic.w	r2, r2, #15
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
 80018b0:	e007      	b.n	80018c2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	053e2d63 	.word	0x053e2d63
 80018d4:	50040000 	.word	0x50040000
 80018d8:	50040300 	.word	0x50040300
 80018dc:	fff0c007 	.word	0xfff0c007

080018e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe8c 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d167      	bne.n	80019cc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_Start_DMA+0x2a>
 8001906:	2302      	movs	r3, #2
 8001908:	e063      	b.n	80019d2 <HAL_ADC_Start_DMA+0xf2>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fc5e 	bl	80021d4 <ADC_Enable>
 8001918:	4603      	mov	r3, r0
 800191a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d14f      	bne.n	80019c2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f023 0206 	bic.w	r2, r3, #6
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
 800194e:	e002      	b.n	8001956 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_ADC_Start_DMA+0xfc>)
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_ADC_Start_DMA+0x100>)
 8001964:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_ADC_Start_DMA+0x104>)
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	221c      	movs	r2, #28
 8001974:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0210 	orr.w	r2, r2, #16
 800198c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3340      	adds	r3, #64	; 0x40
 80019a8:	4619      	mov	r1, r3
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f001 fb5d 	bl	800306c <HAL_DMA_Start_IT>
 80019b2:	4603      	mov	r3, r0
 80019b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe13 	bl	80015e6 <LL_ADC_REG_StartConversion>
 80019c0:	e006      	b.n	80019d0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
 80019ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	080022e1 	.word	0x080022e1
 80019e0:	080023b9 	.word	0x080023b9
 80019e4:	080023d5 	.word	0x080023d5

080019e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0b6      	sub	sp, #216	; 0xd8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x22>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e3bb      	b.n	80021aa <HAL_ADC_ConfigChannel+0x79a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fde5 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 83a0 	bne.w	800218c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d824      	bhi.n	8001aa6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	3b02      	subs	r3, #2
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d81b      	bhi.n	8001a9e <HAL_ADC_ConfigChannel+0x8e>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <HAL_ADC_ConfigChannel+0x5c>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001a85 	.word	0x08001a85
 8001a74:	08001a8d 	.word	0x08001a8d
 8001a78:	08001a95 	.word	0x08001a95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a82:	e010      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a84:	2312      	movs	r3, #18
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a8a:	e00c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a8c:	2318      	movs	r3, #24
 8001a8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a92:	e008      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a9c:	e003      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001aa4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ab4:	f7ff fca6 	bl	8001404 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fda6 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001ac2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fdb2 	bl	8001634 <LL_ADC_INJ_IsConversionOngoing>
 8001ad0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 81a4 	bne.w	8001e26 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 819f 	bne.w	8001e26 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f7ff fcb1 	bl	800145c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00a      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6919      	ldr	r1, [r3, #16]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b2c:	f7ff fc02 	bl	8001334 <LL_ADC_SetOffset>
 8001b30:	e179      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc1f 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x14e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fc14 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	e01e      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x18c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc09 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e004      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1a4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	e018      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x1d6>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e004      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d106      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbd8 	bl	80013a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fbbc 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x214>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fbb1 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 021f 	and.w	r2, r3, #31
 8001c22:	e01e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x252>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fba6 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e004      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x26a>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	e018      	b.n	8001cac <HAL_ADC_ConfigChannel+0x29c>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb75 	bl	80013a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fb59 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x2da>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb4e 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	e01e      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x318>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fb43 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x330>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	e014      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x35a>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e004      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fb16 	bl	80013a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2103      	movs	r1, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fafa 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x398>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2103      	movs	r1, #3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff faef 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 021f 	and.w	r2, r3, #31
 8001da6:	e017      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x3c8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2103      	movs	r1, #3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fae4 	bl	800137c <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e003      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x3e0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	e011      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x404>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d106      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2103      	movs	r1, #3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fac1 	bl	80013a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fbc8 	bl	80015c0 <LL_ADC_IsEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 8140 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	461a      	mov	r2, r3
 8001e46:	f7ff fb35 	bl	80014b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a8f      	ldr	r2, [pc, #572]	; (800208c <HAL_ADC_ConfigChannel+0x67c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 8131 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x46e>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	bf94      	ite	ls
 8001e76:	2301      	movls	r3, #1
 8001e78:	2300      	movhi	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e019      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x4a2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b09      	cmp	r3, #9
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d079      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x4c2>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	3301      	adds	r3, #1
 8001eca:	069b      	lsls	r3, r3, #26
 8001ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	e015      	b.n	8001efe <HAL_ADC_ConfigChannel+0x4ee>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	e003      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x50e>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	e017      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x53e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	ea42 0103 	orr.w	r1, r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x564>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0e9b      	lsrs	r3, r3, #26
 8001f64:	3301      	adds	r3, #1
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	051b      	lsls	r3, r3, #20
 8001f72:	e018      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x596>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f003 021f 	and.w	r2, r3, #31
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	e081      	b.n	80020ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x5b6>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc4:	e015      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x5e2>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e003      	b.n	8001fea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	069b      	lsls	r3, r3, #26
 8001fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x602>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	e017      	b.n	8002042 <HAL_ADC_ConfigChannel+0x632>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	61bb      	str	r3, [r7, #24]
  return result;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	ea42 0103 	orr.w	r1, r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_ADC_ConfigChannel+0x65e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0e9b      	lsrs	r3, r3, #26
 8002058:	3301      	adds	r3, #1
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	3b1e      	subs	r3, #30
 8002066:	051b      	lsls	r3, r3, #20
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800206c:	e01e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x69c>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	60fb      	str	r3, [r7, #12]
  return result;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d104      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e006      	b.n	8002098 <HAL_ADC_ConfigChannel+0x688>
 800208a:	bf00      	nop
 800208c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f003 021f 	and.w	r2, r3, #31
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	3b1e      	subs	r3, #30
 80020a6:	051b      	lsls	r3, r3, #20
 80020a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7ff f9d2 	bl	800145c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_ADC_ConfigChannel+0x7a4>)
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d06c      	beq.n	800219e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c4:	483c      	ldr	r0, [pc, #240]	; (80021b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80020c6:	f7ff f927 	bl	8001318 <LL_ADC_GetCommonPathInternalCh>
 80020ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <HAL_ADC_ConfigChannel+0x7ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d127      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d121      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <HAL_ADC_ConfigChannel+0x7b0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d157      	bne.n	800219e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f6:	4619      	mov	r1, r3
 80020f8:	482f      	ldr	r0, [pc, #188]	; (80021b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80020fa:	f7ff f8fa 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <HAL_ADC_ConfigChannel+0x7b8>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002118:	e002      	b.n	8002120 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002126:	e03a      	b.n	800219e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_ADC_ConfigChannel+0x7bc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d113      	bne.n	800215a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d12a      	bne.n	800219e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002150:	4619      	mov	r1, r3
 8002152:	4819      	ldr	r0, [pc, #100]	; (80021b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002154:	f7ff f8cd 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002158:	e021      	b.n	800219e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d11c      	bne.n	800219e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800217a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800217e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002182:	4619      	mov	r1, r3
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002186:	f7ff f8b4 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
 800218a:	e008      	b.n	800219e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	37d8      	adds	r7, #216	; 0xd8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	80080000 	.word	0x80080000
 80021b8:	50040300 	.word	0x50040300
 80021bc:	c7520000 	.word	0xc7520000
 80021c0:	50040000 	.word	0x50040000
 80021c4:	20000000 	.word	0x20000000
 80021c8:	053e2d63 	.word	0x053e2d63
 80021cc:	cb840000 	.word	0xcb840000
 80021d0:	80000001 	.word	0x80000001

080021d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f9eb 	bl	80015c0 <LL_ADC_IsEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d169      	bne.n	80022c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <ADC_Enable+0xfc>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e055      	b.n	80022c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f9ba 	bl	8001598 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002224:	482b      	ldr	r0, [pc, #172]	; (80022d4 <ADC_Enable+0x100>)
 8002226:	f7ff f877 	bl	8001318 <LL_ADC_GetCommonPathInternalCh>
 800222a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800222c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <ADC_Enable+0x104>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	4a28      	ldr	r2, [pc, #160]	; (80022dc <ADC_Enable+0x108>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800224e:	e002      	b.n	8002256 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3b01      	subs	r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800225c:	f7ff f82a 	bl	80012b4 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002262:	e028      	b.n	80022b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff f9a9 	bl	80015c0 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f98d 	bl	8001598 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227e:	f7ff f819 	bl	80012b4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d914      	bls.n	80022b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00d      	beq.n	80022b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e007      	b.n	80022c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d1cf      	bne.n	8002264 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	8000003f 	.word	0x8000003f
 80022d4:	50040300 	.word	0x50040300
 80022d8:	20000000 	.word	0x20000000
 80022dc:	053e2d63 	.word	0x053e2d63

080022e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d14b      	bne.n	8002392 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d021      	beq.n	8002358 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f860 	bl	80013de <LL_ADC_REG_IsTriggerSourceSWStart>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d032      	beq.n	800238a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12b      	bne.n	800238a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11f      	bne.n	800238a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
 8002356:	e018      	b.n	800238a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d111      	bne.n	800238a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7fe f89e 	bl	80004cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002390:	e00e      	b.n	80023b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff fb2c 	bl	80019fc <HAL_ADC_ErrorCallback>
}
 80023a4:	e004      	b.n	80023b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fb0e 	bl	80019e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f043 0204 	orr.w	r2, r3, #4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fafe 	bl	80019fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0ed      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fd58 	bl	8000edc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243c:	f7fe ff3a 	bl	80012b4 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002442:	e012      	b.n	800246a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002444:	f7fe ff36 	bl	80012b4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b0a      	cmp	r3, #10
 8002450:	d90b      	bls.n	800246a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0c5      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0e5      	beq.n	8002444 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0202 	bic.w	r2, r2, #2
 8002486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002488:	f7fe ff14 	bl	80012b4 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248e:	e012      	b.n	80024b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002490:	f7fe ff10 	bl	80012b4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d90b      	bls.n	80024b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e09f      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e5      	bne.n	8002490 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e1b      	ldrb	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e5b      	ldrb	r3, [r3, #25]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e007      	b.n	8002518 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e9b      	ldrb	r3, [r3, #26]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e007      	b.n	8002542 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0220 	bic.w	r2, r2, #32
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7edb      	ldrb	r3, [r3, #27]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0210 	bic.w	r2, r2, #16
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0210 	orr.w	r2, r2, #16
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7f1b      	ldrb	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d108      	bne.n	8002586 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e007      	b.n	8002596 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7f5b      	ldrb	r3, [r3, #29]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0204 	orr.w	r2, r2, #4
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	ea42 0103 	orr.w	r1, r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12e      	bne.n	8002670 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800262a:	f7fe fe43 	bl	80012b4 <HAL_GetTick>
 800262e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002630:	e012      	b.n	8002658 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002632:	f7fe fe3f 	bl	80012b4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b0a      	cmp	r3, #10
 800263e:	d90b      	bls.n	8002658 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2205      	movs	r2, #5
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e012      	b.n	800267e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e5      	bne.n	8002632 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e006      	b.n	800267e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
  }
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d003      	beq.n	80026aa <HAL_CAN_GetRxMessage+0x24>
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 8103 	bne.w	80028b0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10e      	bne.n	80026ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0f7      	b.n	80028be <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0e8      	b.n	80028be <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	331b      	adds	r3, #27
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0204 	and.w	r2, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	331b      	adds	r3, #27
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4413      	add	r3, r2
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0d5b      	lsrs	r3, r3, #21
 800271a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	331b      	adds	r3, #27
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	331b      	adds	r3, #27
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0202 	and.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	331b      	adds	r3, #27
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	e00b      	b.n	800278a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	331b      	adds	r3, #27
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	331b      	adds	r3, #27
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	4413      	add	r3, r2
 8002796:	3304      	adds	r3, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	331b      	adds	r3, #27
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4413      	add	r3, r2
 80027da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0a1a      	lsrs	r2, r3, #8
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0c1a      	lsrs	r2, r3, #16
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3302      	adds	r3, #2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e1a      	lsrs	r2, r3, #24
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3303      	adds	r3, #3
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4413      	add	r3, r2
 8002828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	3304      	adds	r3, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4413      	add	r3, r2
 8002840:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0a1a      	lsrs	r2, r3, #8
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	3305      	adds	r3, #5
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0c1a      	lsrs	r2, r3, #16
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3306      	adds	r3, #6
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4413      	add	r3, r2
 8002874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e1a      	lsrs	r2, r3, #24
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3307      	adds	r3, #7
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0220 	orr.w	r2, r2, #32
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e007      	b.n	80028ac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e006      	b.n	80028be <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d002      	beq.n	80028e8 <HAL_CAN_ActivateNotification+0x1e>
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d109      	bne.n	80028fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e006      	b.n	800290a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b08a      	sub	sp, #40	; 0x28
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d07c      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d023      	beq.n	80029ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fd fe07 	bl	800058c <HAL_CAN_TxMailbox0CompleteCallback>
 800297e:	e016      	b.n	80029ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e00c      	b.n	80029ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e002      	b.n	80029ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f96b 	bl	8002c84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d024      	beq.n	8002a02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fd fdf1 	bl	80005b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80029d2:	e016      	b.n	8002a02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e00c      	b.n	8002a02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	e002      	b.n	8002a02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f94b 	bl	8002c98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d024      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd fddb 	bl	80005dc <HAL_CAN_TxMailbox2CompleteCallback>
 8002a26:	e016      	b.n	8002a56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e00c      	b.n	8002a56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	e002      	b.n	8002a56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f92b 	bl	8002cac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2210      	movs	r2, #16
 8002a78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2208      	movs	r2, #8
 8002a94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f912 	bl	8002cc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fd fd23 	bl	8000500 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2210      	movs	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2208      	movs	r2, #8
 8002af8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8f4 	bl	8002ce8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f8db 	bl	8002cd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2210      	movs	r2, #16
 8002b38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8de 	bl	8002cfc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8d7 	bl	8002d10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d07b      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d072      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d043      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03e      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be4:	2b60      	cmp	r3, #96	; 0x60
 8002be6:	d02b      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x32a>
 8002be8:	2b60      	cmp	r3, #96	; 0x60
 8002bea:	d82e      	bhi.n	8002c4a <HAL_CAN_IRQHandler+0x334>
 8002bec:	2b50      	cmp	r3, #80	; 0x50
 8002bee:	d022      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x320>
 8002bf0:	2b50      	cmp	r3, #80	; 0x50
 8002bf2:	d82a      	bhi.n	8002c4a <HAL_CAN_IRQHandler+0x334>
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	d019      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x316>
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d826      	bhi.n	8002c4a <HAL_CAN_IRQHandler+0x334>
 8002bfc:	2b30      	cmp	r3, #48	; 0x30
 8002bfe:	d010      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x30c>
 8002c00:	2b30      	cmp	r3, #48	; 0x30
 8002c02:	d822      	bhi.n	8002c4a <HAL_CAN_IRQHandler+0x334>
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d002      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x2f8>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d005      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c0c:	e01d      	b.n	8002c4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c16:	e019      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f043 0310 	orr.w	r3, r3, #16
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c20:	e014      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c2a:	e00f      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c34:	e00a      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c3e:	e005      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c48:	e000      	b.n	8002c4c <HAL_CAN_IRQHandler+0x336>
            break;
 8002c4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2204      	movs	r2, #4
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f854 	bl	8002d24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff4c 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eba:	f7ff ff61 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6978      	ldr	r0, [r7, #20]
 8002ec6:	f7ff ffb1 	bl	8002e2c <NVIC_EncodePriority>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff80 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff54 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e098      	b.n	8003040 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_DMA_Init+0x150>)
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d80f      	bhi.n	8002f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_DMA_Init+0x154>)
 8002f22:	4413      	add	r3, r2
 8002f24:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_DMA_Init+0x158>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	009a      	lsls	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a48      	ldr	r2, [pc, #288]	; (8003058 <HAL_DMA_Init+0x15c>)
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
 8002f38:	e00e      	b.n	8002f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_DMA_Init+0x160>)
 8002f42:	4413      	add	r3, r2
 8002f44:	4a43      	ldr	r2, [pc, #268]	; (8003054 <HAL_DMA_Init+0x158>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a42      	ldr	r2, [pc, #264]	; (8003060 <HAL_DMA_Init+0x164>)
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb2:	d039      	beq.n	8003028 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_DMA_Init+0x15c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_DMA_Init+0x168>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f003 031c 	and.w	r3, r3, #28
 8002fca:	210f      	movs	r1, #15
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	4924      	ldr	r1, [pc, #144]	; (8003064 <HAL_DMA_Init+0x168>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_DMA_Init+0x168>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 031c 	and.w	r3, r3, #28
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	491d      	ldr	r1, [pc, #116]	; (8003064 <HAL_DMA_Init+0x168>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
 8002ff2:	e019      	b.n	8003028 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_DMA_Init+0x16c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f003 031c 	and.w	r3, r3, #28
 8003000:	210f      	movs	r1, #15
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	4917      	ldr	r1, [pc, #92]	; (8003068 <HAL_DMA_Init+0x16c>)
 800300a:	4013      	ands	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_DMA_Init+0x16c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 031c 	and.w	r3, r3, #28
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	4911      	ldr	r1, [pc, #68]	; (8003068 <HAL_DMA_Init+0x16c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40020407 	.word	0x40020407
 8003050:	bffdfff8 	.word	0xbffdfff8
 8003054:	cccccccd 	.word	0xcccccccd
 8003058:	40020000 	.word	0x40020000
 800305c:	bffdfbf8 	.word	0xbffdfbf8
 8003060:	40020400 	.word	0x40020400
 8003064:	400200a8 	.word	0x400200a8
 8003068:	400204a8 	.word	0x400204a8

0800306c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DMA_Start_IT+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e04b      	b.n	8003124 <HAL_DMA_Start_IT+0xb8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d13a      	bne.n	8003116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f8e0 	bl	800328a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 020e 	orr.w	r2, r2, #14
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e00f      	b.n	8003104 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 020a 	orr.w	r2, r2, #10
 8003102:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e005      	b.n	8003122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 031c 	and.w	r3, r3, #28
 800314c:	2204      	movs	r2, #4
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f003 021c 	and.w	r2, r3, #28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2104      	movs	r1, #4
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031a4:	e06c      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f003 031c 	and.w	r3, r3, #28
 80031ae:	2202      	movs	r2, #2
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d029      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 020a 	bic.w	r2, r2, #10
 80031e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 021c 	and.w	r2, r3, #28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2102      	movs	r1, #2
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d038      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003216:	e033      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f003 031c 	and.w	r3, r3, #28
 8003220:	2208      	movs	r2, #8
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d025      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020e 	bic.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021c 	and.w	r2, r3, #28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003280:	bf00      	nop
 8003282:	bf00      	nop
}
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f003 021c 	and.w	r2, r3, #28
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d108      	bne.n	80032ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032cc:	e007      	b.n	80032de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	60da      	str	r2, [r3, #12]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fa:	e148      	b.n	800358e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 813a 	beq.w	8003588 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d005      	beq.n	800332c <HAL_GPIO_Init+0x40>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d130      	bne.n	800338e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003362:	2201      	movs	r2, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0201 	and.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d017      	beq.n	80033ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d123      	bne.n	800341e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8094 	beq.w	8003588 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003460:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_GPIO_Init+0x2c0>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	4a51      	ldr	r2, [pc, #324]	; (80035ac <HAL_GPIO_Init+0x2c0>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6613      	str	r3, [r2, #96]	; 0x60
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_GPIO_Init+0x2c0>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003478:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <HAL_GPIO_Init+0x2c4>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a2:	d00d      	beq.n	80034c0 <HAL_GPIO_Init+0x1d4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <HAL_GPIO_Init+0x2c8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <HAL_GPIO_Init+0x1d0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a42      	ldr	r2, [pc, #264]	; (80035b8 <HAL_GPIO_Init+0x2cc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_GPIO_Init+0x1cc>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e004      	b.n	80034c2 <HAL_GPIO_Init+0x1d6>
 80034b8:	2307      	movs	r3, #7
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_Init+0x1d6>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_GPIO_Init+0x1d6>
 80034c0:	2300      	movs	r3, #0
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	f002 0203 	and.w	r2, r2, #3
 80034c8:	0092      	lsls	r2, r2, #2
 80034ca:	4093      	lsls	r3, r2
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034d2:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_GPIO_Init+0x2c4>)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_GPIO_Init+0x2d0>)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f aeaf 	bne.w	80032fc <HAL_GPIO_Init+0x10>
  }
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010000 	.word	0x40010000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	48000800 	.word	0x48000800
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f806 	bl	8003620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HAL_PWREx_GetVoltageRange+0x18>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40007000 	.word	0x40007000

08003654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003662:	d130      	bne.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800366c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003670:	d038      	beq.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2232      	movs	r2, #50	; 0x32
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	3301      	adds	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003698:	e002      	b.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d102      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f2      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d110      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e00f      	b.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d007      	beq.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40007000 	.word	0x40007000
 80036f8:	20000000 	.word	0x20000000
 80036fc:	431bde83 	.word	0x431bde83

08003700 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f000 bc02 	b.w	8003f18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003714:	4b96      	ldr	r3, [pc, #600]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800371e:	4b94      	ldr	r3, [pc, #592]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80e4 	beq.w	80038fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_RCC_OscConfig+0x4c>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	f040 808b 	bne.w	800385a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 8087 	bne.w	800385a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x64>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e3d9      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_RCC_OscConfig+0x7e>
 8003774:	4b7e      	ldr	r3, [pc, #504]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	e005      	b.n	800378a <HAL_RCC_OscConfig+0x8a>
 800377e:	4b7c      	ldr	r3, [pc, #496]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378a:	4293      	cmp	r3, r2
 800378c:	d223      	bcs.n	80037d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fdbe 	bl	8004314 <RCC_SetFlashLatencyFromMSIRange>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e3ba      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a2:	4b73      	ldr	r3, [pc, #460]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a72      	ldr	r2, [pc, #456]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f043 0308 	orr.w	r3, r3, #8
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	496d      	ldr	r1, [pc, #436]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c0:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	4968      	ldr	r1, [pc, #416]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
 80037d4:	e025      	b.n	8003822 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d6:	4b66      	ldr	r3, [pc, #408]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037dc:	f043 0308 	orr.w	r3, r3, #8
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b63      	ldr	r3, [pc, #396]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4960      	ldr	r1, [pc, #384]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f4:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	495b      	ldr	r1, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fd7e 	bl	8004314 <RCC_SetFlashLatencyFromMSIRange>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e37a      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003822:	f000 fc81 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b51      	ldr	r3, [pc, #324]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4950      	ldr	r1, [pc, #320]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	4a4e      	ldr	r2, [pc, #312]	; (8003978 <HAL_RCC_OscConfig+0x278>)
 8003840:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <HAL_RCC_OscConfig+0x27c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fc0e 	bl	8001068 <HAL_InitTick>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d052      	beq.n	80038fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	e35e      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d032      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a42      	ldr	r2, [pc, #264]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800386e:	f7fd fd21 	bl	80012b4 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003876:	f7fd fd1d 	bl	80012b4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e347      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a35      	ldr	r2, [pc, #212]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800389a:	f043 0308 	orr.w	r3, r3, #8
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4930      	ldr	r1, [pc, #192]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	492b      	ldr	r1, [pc, #172]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
 80038c6:	e01a      	b.n	80038fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fcee 	bl	80012b4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038dc:	f7fd fcea 	bl	80012b4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e314      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1dc>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d073      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d005      	beq.n	800391c <HAL_RCC_OscConfig+0x21c>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d10e      	bne.n	8003934 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d10b      	bne.n	8003934 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d063      	beq.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d15f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e2f1      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d106      	bne.n	800394c <HAL_RCC_OscConfig+0x24c>
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e025      	b.n	8003998 <HAL_RCC_OscConfig+0x298>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	d114      	bne.n	8003980 <HAL_RCC_OscConfig+0x280>
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 800395c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a02      	ldr	r2, [pc, #8]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e013      	b.n	8003998 <HAL_RCC_OscConfig+0x298>
 8003970:	40021000 	.word	0x40021000
 8003974:	080089ec 	.word	0x080089ec
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004
 8003980:	4ba0      	ldr	r3, [pc, #640]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a9f      	ldr	r2, [pc, #636]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b9d      	ldr	r3, [pc, #628]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a9c      	ldr	r2, [pc, #624]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fc88 	bl	80012b4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd fc84 	bl	80012b4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e2ae      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ba:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x2a8>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd fc74 	bl	80012b4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fd fc70 	bl	80012b4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e29a      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e2:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2d0>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d060      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x310>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d119      	bne.n	8003a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d116      	bne.n	8003a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a10:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x328>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e277      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	4973      	ldr	r1, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3c:	e040      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d023      	beq.n	8003a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fd fc2f 	bl	80012b4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fd fc2b 	bl	80012b4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e255      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	495f      	ldr	r1, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b5d      	ldr	r3, [pc, #372]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5c      	ldr	r2, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fc0b 	bl	80012b4 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fc07 	bl	80012b4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e231      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d03c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01c      	beq.n	8003b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ada:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fbe6 	bl	80012b4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd fbe2 	bl	80012b4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e20c      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afe:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ef      	beq.n	8003aec <HAL_RCC_OscConfig+0x3ec>
 8003b0c:	e01b      	b.n	8003b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b14:	4a3b      	ldr	r2, [pc, #236]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fbc9 	bl	80012b4 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fd fbc5 	bl	80012b4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e1ef      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ef      	bne.n	8003b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80a6 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10d      	bne.n	8003b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b80:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <HAL_RCC_OscConfig+0x508>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d118      	bne.n	8003bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_RCC_OscConfig+0x508>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x508>)
 8003b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fb8c 	bl	80012b4 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba0:	f7fd fb88 	bl	80012b4 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1b2      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCC_OscConfig+0x508>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d108      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4d8>
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd6:	e029      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d115      	bne.n	8003c0c <HAL_RCC_OscConfig+0x50c>
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a03      	ldr	r2, [pc, #12]	; (8003c04 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	4b9a      	ldr	r3, [pc, #616]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	4a99      	ldr	r2, [pc, #612]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c1c:	4b96      	ldr	r3, [pc, #600]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a95      	ldr	r2, [pc, #596]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d016      	beq.n	8003c62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fb3e 	bl	80012b4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fb3a 	bl	80012b4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e162      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ed      	beq.n	8003c3c <HAL_RCC_OscConfig+0x53c>
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd fb27 	bl	80012b4 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fd fb23 	bl	80012b4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e14b      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c80:	4b7d      	ldr	r3, [pc, #500]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ed      	bne.n	8003c6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b78      	ldr	r3, [pc, #480]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4a77      	ldr	r2, [pc, #476]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d03c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cb4:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cba:	4a6f      	ldr	r2, [pc, #444]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd faf6 	bl	80012b4 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ccc:	f7fd faf2 	bl	80012b4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e11c      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cde:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <HAL_RCC_OscConfig+0x5cc>
 8003cec:	e01b      	b.n	8003d26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cee:	4b62      	ldr	r3, [pc, #392]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf4:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fd fad9 	bl	80012b4 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d06:	f7fd fad5 	bl	80012b4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0ff      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d18:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ef      	bne.n	8003d06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80f3 	beq.w	8003f16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f040 80c9 	bne.w	8003ecc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d3a:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d12c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d123      	bne.n	8003da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d11b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d113      	bne.n	8003da8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d109      	bne.n	8003da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d06b      	beq.n	8003e80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d062      	beq.n	8003e74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dae:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0ac      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dca:	f7fd fa73 	bl	80012b4 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd fa6f 	bl	80012b4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e099      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCC_OscConfig+0x77c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e0a:	0212      	lsls	r2, r2, #8
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e12:	0852      	lsrs	r2, r2, #1
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0552      	lsls	r2, r2, #21
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e2a:	06d2      	lsls	r2, r2, #27
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	4912      	ldr	r1, [pc, #72]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0f      	ldr	r2, [pc, #60]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e4c:	f7fd fa32 	bl	80012b4 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd fa2e 	bl	80012b4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e058      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_OscConfig+0x778>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e72:	e050      	b.n	8003f16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e04f      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d144      	bne.n	8003f16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ea4:	f7fd fa06 	bl	80012b4 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd fa02 	bl	80012b4 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e02c      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x7ac>
 8003eca:	e024      	b.n	8003f16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d01f      	beq.n	8003f12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd f9e9 	bl	80012b4 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd f9e5 	bl	80012b4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e00f      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4905      	ldr	r1, [pc, #20]	; (8003f20 <HAL_RCC_OscConfig+0x820>)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_OscConfig+0x824>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60cb      	str	r3, [r1, #12]
 8003f10:	e001      	b.n	8003f16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	feeefffc 	.word	0xfeeefffc

08003f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0e7      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b75      	ldr	r3, [pc, #468]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d910      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b72      	ldr	r3, [pc, #456]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0207 	bic.w	r2, r3, #7
 8003f52:	4970      	ldr	r1, [pc, #448]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b6e      	ldr	r3, [pc, #440]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cf      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d908      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4960      	ldr	r1, [pc, #384]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04c      	beq.n	8004040 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	4b5a      	ldr	r3, [pc, #360]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d121      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0a6      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d115      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e09a      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fde:	4b4e      	ldr	r3, [pc, #312]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e08e      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e086      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4943      	ldr	r1, [pc, #268]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd f950 	bl	80012b4 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	e00a      	b.n	800402e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7fd f94c 	bl	80012b4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e06e      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 020c 	and.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	429a      	cmp	r2, r3
 800403e:	d1eb      	bne.n	8004018 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	429a      	cmp	r2, r3
 800405a:	d208      	bcs.n	800406e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	492b      	ldr	r1, [pc, #172]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800406e:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d210      	bcs.n	800409e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 0207 	bic.w	r2, r3, #7
 8004084:	4923      	ldr	r1, [pc, #140]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCC_ClockConfig+0x1ec>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e036      	b.n	800410c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4918      	ldr	r1, [pc, #96]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4910      	ldr	r1, [pc, #64]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040dc:	f000 f824 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	490b      	ldr	r1, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1f4>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1f8>)
 80040fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1fc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc ffb1 	bl	8001068 <HAL_InitTick>
 8004106:	4603      	mov	r3, r0
 8004108:	72fb      	strb	r3, [r7, #11]

  return status;
 800410a:	7afb      	ldrb	r3, [r7, #11]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	080089ec 	.word	0x080089ec
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x34>
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d121      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d11e      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004168:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e005      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004184:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_GetSysClockFreq+0x110>)
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e004      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCC_GetSysClockFreq+0x114>)
 80041ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d134      	bne.n	8004220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0xa6>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d003      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0xac>
 80041cc:	e005      	b.n	80041da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_RCC_GetSysClockFreq+0x110>)
 80041d0:	617b      	str	r3, [r7, #20]
      break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_GetSysClockFreq+0x114>)
 80041d6:	617b      	str	r3, [r7, #20]
      break;
 80041d8:	e002      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	617b      	str	r3, [r7, #20]
      break;
 80041de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	fb03 f202 	mul.w	r2, r3, r2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_GetSysClockFreq+0x108>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	0e5b      	lsrs	r3, r3, #25
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	3301      	adds	r3, #1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004220:	69bb      	ldr	r3, [r7, #24]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3724      	adds	r7, #36	; 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	08008a04 	.word	0x08008a04
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000000 	.word	0x20000000

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4904      	ldr	r1, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	080089fc 	.word	0x080089fc

08004284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004288:	f7ff ffda 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0adb      	lsrs	r3, r3, #11
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	080089fc 	.word	0x080089fc

080042b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	220f      	movs	r2, #15
 80042be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_GetClockConfig+0x5c>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <HAL_RCC_GetClockConfig+0x60>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0207 	and.w	r2, r3, #7
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	40022000 	.word	0x40022000

08004314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800432c:	f7ff f984 	bl	8003638 <HAL_PWREx_GetVoltageRange>
 8004330:	6178      	str	r0, [r7, #20]
 8004332:	e014      	b.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800434c:	f7ff f974 	bl	8003638 <HAL_PWREx_GetVoltageRange>
 8004350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d10b      	bne.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d919      	bls.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2ba0      	cmp	r3, #160	; 0xa0
 8004370:	d902      	bls.n	8004378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004372:	2302      	movs	r3, #2
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e013      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004378:	2301      	movs	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e010      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d902      	bls.n	800438a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004384:	2303      	movs	r3, #3
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e00a      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d102      	bne.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004390:	2302      	movs	r3, #2
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e004      	b.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b70      	cmp	r3, #112	; 0x70
 800439a:	d101      	bne.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800439c:	2301      	movs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 0207 	bic.w	r2, r3, #7
 80043a8:	4909      	ldr	r1, [pc, #36]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40022000 	.word	0x40022000

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d031      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f8:	d01a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043fe:	d814      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004408:	d10f      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800440a:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a5c      	ldr	r2, [pc, #368]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004416:	e00c      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f9ce 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004428:	e003      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	74fb      	strb	r3, [r7, #19]
      break;
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004438:	4b51      	ldr	r3, [pc, #324]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	494e      	ldr	r1, [pc, #312]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800444e:	e001      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 809e 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004466:	4b46      	ldr	r3, [pc, #280]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b40      	ldr	r3, [pc, #256]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	; 0x58
 8004488:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004494:	2301      	movs	r3, #1
 8004496:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800449e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a4:	f7fc ff06 	bl	80012b4 <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044aa:	e009      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fc ff02 	bl	80012b4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d902      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	74fb      	strb	r3, [r7, #19]
        break;
 80044be:	e005      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c0:	4b30      	ldr	r3, [pc, #192]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ef      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d15a      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01e      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d019      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800451a:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fec2 	bl	80012b4 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	e00b      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fc febe 	bl	80012b4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d902      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	74fb      	strb	r3, [r7, #19]
            break;
 800454a:	e006      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ec      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	4904      	ldr	r1, [pc, #16]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458c:	7c7b      	ldrb	r3, [r7, #17]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004592:	4b8a      	ldr	r3, [pc, #552]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	4a89      	ldr	r2, [pc, #548]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045aa:	4b84      	ldr	r3, [pc, #528]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f023 0203 	bic.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4980      	ldr	r1, [pc, #512]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045cc:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f023 020c 	bic.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	4978      	ldr	r1, [pc, #480]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ee:	4b73      	ldr	r3, [pc, #460]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	496f      	ldr	r1, [pc, #444]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004610:	4b6a      	ldr	r3, [pc, #424]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	4967      	ldr	r1, [pc, #412]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004632:	4b62      	ldr	r3, [pc, #392]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	495e      	ldr	r1, [pc, #376]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	4956      	ldr	r1, [pc, #344]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004676:	4b51      	ldr	r3, [pc, #324]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	494d      	ldr	r1, [pc, #308]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d028      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004698:	4b48      	ldr	r3, [pc, #288]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4945      	ldr	r1, [pc, #276]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b6:	d106      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b8:	4b40      	ldr	r3, [pc, #256]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c2:	60d3      	str	r3, [r2, #12]
 80046c4:	e011      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ce:	d10c      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f872 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d028      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	492d      	ldr	r1, [pc, #180]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004714:	d106      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004720:	60d3      	str	r3, [r2, #12]
 8004722:	e011      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f843 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01c      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	4916      	ldr	r1, [pc, #88]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d10c      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f820 	bl	80047c0 <RCCEx_PLLSAI1_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a8:	4904      	ldr	r1, [pc, #16]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ce:	4b74      	ldr	r3, [pc, #464]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047da:	4b71      	ldr	r3, [pc, #452]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d10d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
       ||
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047f2:	4b6b      	ldr	r3, [pc, #428]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
       ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d047      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e044      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d018      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0x86>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d825      	bhi.n	8004864 <RCCEx_PLLSAI1_Config+0xa4>
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <RCCEx_PLLSAI1_Config+0x62>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d009      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x74>
 8004820:	e020      	b.n	8004864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004822:	4b5f      	ldr	r3, [pc, #380]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11d      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004832:	e01a      	b.n	800486a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004834:	4b5a      	ldr	r3, [pc, #360]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004844:	e013      	b.n	800486e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004846:	4b56      	ldr	r3, [pc, #344]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004852:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004862:	e006      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e004      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004872:	bf00      	nop
    }

    if(status == HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800487a:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	430b      	orrs	r3, r1
 8004890:	4943      	ldr	r1, [pc, #268]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d17c      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800489c:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fc fd04 	bl	80012b4 <HAL_GetTick>
 80048ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ae:	e009      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b0:	f7fc fd00 	bl	80012b4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d902      	bls.n	80048c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	73fb      	strb	r3, [r7, #15]
        break;
 80048c2:	e005      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ef      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d15f      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d110      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048dc:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	0211      	lsls	r1, r2, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	06d2      	lsls	r2, r2, #27
 80048f4:	430a      	orrs	r2, r1
 80048f6:	492a      	ldr	r1, [pc, #168]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
 80048fc:	e027      	b.n	800494e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d112      	bne.n	800492a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800490c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	0211      	lsls	r1, r2, #8
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6912      	ldr	r2, [r2, #16]
 800491a:	0852      	lsrs	r2, r2, #1
 800491c:	3a01      	subs	r2, #1
 800491e:	0552      	lsls	r2, r2, #21
 8004920:	430a      	orrs	r2, r1
 8004922:	491f      	ldr	r1, [pc, #124]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
 8004928:	e011      	b.n	800494e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	0211      	lsls	r1, r2, #8
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6952      	ldr	r2, [r2, #20]
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	3a01      	subs	r2, #1
 8004944:	0652      	lsls	r2, r2, #25
 8004946:	430a      	orrs	r2, r1
 8004948:	4915      	ldr	r1, [pc, #84]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004958:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fc fcab 	bl	80012b4 <HAL_GetTick>
 800495e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004960:	e009      	b.n	8004976 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004962:	f7fc fca7 	bl	80012b4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d902      	bls.n	8004976 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	73fb      	strb	r3, [r7, #15]
          break;
 8004974:	e005      	b.n	8004982 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e049      	b.n	8004a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f841 	bl	8004a52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f000 f9be 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e03b      	b.n	8004af8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_TIM_Base_Start_IT+0xa4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d015      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x8c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d011      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e008      	b.n	8004af4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d020      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0202 	mvn.w	r2, #2
 8004b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8e4 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8d6 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8e7 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0204 	mvn.w	r2, #4
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8be 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8b0 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8c1 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0208 	mvn.w	r2, #8
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2204      	movs	r2, #4
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f898 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f88a 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f89b 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d020      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01b      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f872 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f864 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f875 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0201 	mvn.w	r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc f85c 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8d0 	bl	8004e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8c8 	bl	8004e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f834 	bl	8004d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0220 	mvn.w	r2, #32
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f890 	bl	8004e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_Base_SetConfig+0x20>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d108      	bne.n	8004d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_Base_SetConfig+0x52>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d007      	beq.n	8004db6 <TIM_Base_SetConfig+0x52>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_Base_SetConfig+0x52>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_Base_SetConfig+0xc4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0xa0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xa0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <TIM_Base_SetConfig+0xc4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400

08004e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e040      	b.n	8004efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc f894 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa54 	bl	800535c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f825 	bl	8004f04 <UART_SetConfig>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01b      	b.n	8004efc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fad3 	bl	80054a0 <UART_CheckIdleState>
 8004efa:	4603      	mov	r3, r0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f08:	b08a      	sub	sp, #40	; 0x28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4bb4      	ldr	r3, [pc, #720]	; (8005204 <UART_SetConfig+0x300>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4aa9      	ldr	r2, [pc, #676]	; (8005208 <UART_SetConfig+0x304>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4aa0      	ldr	r2, [pc, #640]	; (800520c <UART_SetConfig+0x308>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d126      	bne.n	8004fdc <UART_SetConfig+0xd8>
 8004f8e:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <UART_SetConfig+0x30c>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d81b      	bhi.n	8004fd4 <UART_SetConfig+0xd0>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xa0>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e080      	b.n	80050be <UART_SetConfig+0x1ba>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e07c      	b.n	80050be <UART_SetConfig+0x1ba>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e078      	b.n	80050be <UART_SetConfig+0x1ba>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e074      	b.n	80050be <UART_SetConfig+0x1ba>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e070      	b.n	80050be <UART_SetConfig+0x1ba>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a8c      	ldr	r2, [pc, #560]	; (8005214 <UART_SetConfig+0x310>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d138      	bne.n	8005058 <UART_SetConfig+0x154>
 8004fe6:	4b8a      	ldr	r3, [pc, #552]	; (8005210 <UART_SetConfig+0x30c>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d82d      	bhi.n	8005050 <UART_SetConfig+0x14c>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0xf8>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005051 	.word	0x08005051
 8005004:	08005051 	.word	0x08005051
 8005008:	08005051 	.word	0x08005051
 800500c:	08005041 	.word	0x08005041
 8005010:	08005051 	.word	0x08005051
 8005014:	08005051 	.word	0x08005051
 8005018:	08005051 	.word	0x08005051
 800501c:	08005039 	.word	0x08005039
 8005020:	08005051 	.word	0x08005051
 8005024:	08005051 	.word	0x08005051
 8005028:	08005051 	.word	0x08005051
 800502c:	08005049 	.word	0x08005049
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e042      	b.n	80050be <UART_SetConfig+0x1ba>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e03e      	b.n	80050be <UART_SetConfig+0x1ba>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e03a      	b.n	80050be <UART_SetConfig+0x1ba>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e036      	b.n	80050be <UART_SetConfig+0x1ba>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e032      	b.n	80050be <UART_SetConfig+0x1ba>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a6a      	ldr	r2, [pc, #424]	; (8005208 <UART_SetConfig+0x304>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d12a      	bne.n	80050b8 <UART_SetConfig+0x1b4>
 8005062:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <UART_SetConfig+0x30c>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800506c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005070:	d01a      	beq.n	80050a8 <UART_SetConfig+0x1a4>
 8005072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005076:	d81b      	bhi.n	80050b0 <UART_SetConfig+0x1ac>
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507c:	d00c      	beq.n	8005098 <UART_SetConfig+0x194>
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005082:	d815      	bhi.n	80050b0 <UART_SetConfig+0x1ac>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <UART_SetConfig+0x18c>
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508c:	d008      	beq.n	80050a0 <UART_SetConfig+0x19c>
 800508e:	e00f      	b.n	80050b0 <UART_SetConfig+0x1ac>
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e012      	b.n	80050be <UART_SetConfig+0x1ba>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e00e      	b.n	80050be <UART_SetConfig+0x1ba>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e00a      	b.n	80050be <UART_SetConfig+0x1ba>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e006      	b.n	80050be <UART_SetConfig+0x1ba>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e002      	b.n	80050be <UART_SetConfig+0x1ba>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a51      	ldr	r2, [pc, #324]	; (8005208 <UART_SetConfig+0x304>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d17a      	bne.n	80051be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d824      	bhi.n	800511a <UART_SetConfig+0x216>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x1d4>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	08005105 	.word	0x08005105
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	0800510b 	.word	0x0800510b
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	0800511b 	.word	0x0800511b
 80050f8:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7ff f8ac 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005100:	61f8      	str	r0, [r7, #28]
        break;
 8005102:	e010      	b.n	8005126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005104:	4b44      	ldr	r3, [pc, #272]	; (8005218 <UART_SetConfig+0x314>)
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e00d      	b.n	8005126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510a:	f7ff f80d 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 800510e:	61f8      	str	r0, [r7, #28]
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	61fb      	str	r3, [r7, #28]
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8107 	beq.w	800533c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d305      	bcc.n	800514a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d903      	bls.n	8005152 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005150:	e0f4      	b.n	800533c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2200      	movs	r2, #0
 8005156:	461c      	mov	r4, r3
 8005158:	4615      	mov	r5, r2
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	022b      	lsls	r3, r5, #8
 8005164:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005168:	0222      	lsls	r2, r4, #8
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6849      	ldr	r1, [r1, #4]
 800516e:	0849      	lsrs	r1, r1, #1
 8005170:	2000      	movs	r0, #0
 8005172:	4688      	mov	r8, r1
 8005174:	4681      	mov	r9, r0
 8005176:	eb12 0a08 	adds.w	sl, r2, r8
 800517a:	eb43 0b09 	adc.w	fp, r3, r9
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518c:	4650      	mov	r0, sl
 800518e:	4659      	mov	r1, fp
 8005190:	f7fb f81e 	bl	80001d0 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a2:	d308      	bcc.n	80051b6 <UART_SetConfig+0x2b2>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d204      	bcs.n	80051b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e0c2      	b.n	800533c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051bc:	e0be      	b.n	800533c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c6:	d16a      	bne.n	800529e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80051c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d834      	bhi.n	800523a <UART_SetConfig+0x336>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x2d4>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	08005225 	.word	0x08005225
 80051e4:	0800523b 	.word	0x0800523b
 80051e8:	0800522b 	.word	0x0800522b
 80051ec:	0800523b 	.word	0x0800523b
 80051f0:	0800523b 	.word	0x0800523b
 80051f4:	0800523b 	.word	0x0800523b
 80051f8:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7ff f82c 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005200:	61f8      	str	r0, [r7, #28]
        break;
 8005202:	e020      	b.n	8005246 <UART_SetConfig+0x342>
 8005204:	efff69f3 	.word	0xefff69f3
 8005208:	40008000 	.word	0x40008000
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	40004400 	.word	0x40004400
 8005218:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7ff f832 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 8005220:	61f8      	str	r0, [r7, #28]
        break;
 8005222:	e010      	b.n	8005246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b4c      	ldr	r3, [pc, #304]	; (8005358 <UART_SetConfig+0x454>)
 8005226:	61fb      	str	r3, [r7, #28]
        break;
 8005228:	e00d      	b.n	8005246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fe ff7d 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 800522e:	61f8      	str	r0, [r7, #28]
        break;
 8005230:	e009      	b.n	8005246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	61fb      	str	r3, [r7, #28]
        break;
 8005238:	e005      	b.n	8005246 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d077      	beq.n	800533c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	005a      	lsls	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	441a      	add	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d916      	bls.n	8005296 <UART_SetConfig+0x392>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d212      	bcs.n	8005296 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f023 030f 	bic.w	r3, r3, #15
 8005278:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	b29a      	uxth	r2, r3
 8005286:	8afb      	ldrh	r3, [r7, #22]
 8005288:	4313      	orrs	r3, r2
 800528a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	8afa      	ldrh	r2, [r7, #22]
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	e052      	b.n	800533c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800529c:	e04e      	b.n	800533c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d827      	bhi.n	80052f6 <UART_SetConfig+0x3f2>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x3a8>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe ffc2 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 80052d4:	61f8      	str	r0, [r7, #28]
        break;
 80052d6:	e014      	b.n	8005302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fe ffd4 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 80052dc:	61f8      	str	r0, [r7, #28]
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <UART_SetConfig+0x454>)
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fe ff1f 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80052ea:	61f8      	str	r0, [r7, #28]
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	61fb      	str	r3, [r7, #28]
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005300:	bf00      	nop
    }

    if (pclk != 0U)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	085a      	lsrs	r2, r3, #1
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b0f      	cmp	r3, #15
 8005320:	d909      	bls.n	8005336 <UART_SetConfig+0x432>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d205      	bcs.n	8005336 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	e002      	b.n	800533c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800534c:	4618      	mov	r0, r3
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	00f42400 	.word	0x00f42400

0800535c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d10a      	bne.n	8005472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b098      	sub	sp, #96	; 0x60
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b0:	f7fb ff00 	bl	80012b4 <HAL_GetTick>
 80054b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d12e      	bne.n	8005522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f88c 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d021      	beq.n	8005522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
 80054fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e062      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b04      	cmp	r3, #4
 800552e:	d149      	bne.n	80055c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f856 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03c      	beq.n	80055c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	623b      	str	r3, [r7, #32]
   return(result);
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800555e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
 800556a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60fb      	str	r3, [r7, #12]
   return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	; 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e011      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3758      	adds	r7, #88	; 0x58
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	e049      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005608:	d045      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fb fe53 	bl	80012b4 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <UART_WaitOnFlagUntilTimeout+0x30>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e048      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d031      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d110      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2208      	movs	r2, #8
 8005646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f838 	bl	80056be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2208      	movs	r2, #8
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e029      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d111      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f81e 	bl	80056be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00f      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0a6      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b095      	sub	sp, #84	; 0x54
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
 80056e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e6      	bne.n	80056c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	61fb      	str	r3, [r7, #28]
   return(result);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e5      	bne.n	80056f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005730:	2b01      	cmp	r3, #1
 8005732:	d118      	bne.n	8005766 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	60bb      	str	r3, [r7, #8]
   return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0310 	bic.w	r3, r3, #16
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	669a      	str	r2, [r3, #104]	; 0x68
}
 800577a:	bf00      	nop
 800577c:	3754      	adds	r7, #84	; 0x54
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <__NVIC_SetPriority>:
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005798:	2b00      	cmp	r3, #0
 800579a:	db0a      	blt.n	80057b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	490c      	ldr	r1, [pc, #48]	; (80057d4 <__NVIC_SetPriority+0x4c>)
 80057a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	440b      	add	r3, r1
 80057ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057b0:	e00a      	b.n	80057c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	4908      	ldr	r1, [pc, #32]	; (80057d8 <__NVIC_SetPriority+0x50>)
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	3b04      	subs	r3, #4
 80057c0:	0112      	lsls	r2, r2, #4
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	440b      	add	r3, r1
 80057c6:	761a      	strb	r2, [r3, #24]
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	e000e100 	.word	0xe000e100
 80057d8:	e000ed00 	.word	0xe000ed00

080057dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <SysTick_Handler+0x1c>)
 80057e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057e4:	f001 ff12 	bl	800760c <xTaskGetSchedulerState>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d001      	beq.n	80057f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ee:	f002 fcfb 	bl	80081e8 <xPortSysTickHandler>
  }
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010

080057fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005800:	2100      	movs	r1, #0
 8005802:	f06f 0004 	mvn.w	r0, #4
 8005806:	f7ff ffbf 	bl	8005788 <__NVIC_SetPriority>
#endif
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005816:	f3ef 8305 	mrs	r3, IPSR
 800581a:	603b      	str	r3, [r7, #0]
  return(result);
 800581c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005822:	f06f 0305 	mvn.w	r3, #5
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	e00c      	b.n	8005844 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <osKernelInitialize+0x44>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <osKernelInitialize+0x44>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005838:	2300      	movs	r3, #0
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	e002      	b.n	8005844 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005842:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005844:	687b      	ldr	r3, [r7, #4]
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20001288 	.word	0x20001288

08005858 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585e:	f3ef 8305 	mrs	r3, IPSR
 8005862:	603b      	str	r3, [r7, #0]
  return(result);
 8005864:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <osKernelStart+0x1a>
    stat = osErrorISR;
 800586a:	f06f 0305 	mvn.w	r3, #5
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	e010      	b.n	8005894 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <osKernelStart+0x48>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d109      	bne.n	800588e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800587a:	f7ff ffbf 	bl	80057fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <osKernelStart+0x48>)
 8005880:	2202      	movs	r2, #2
 8005882:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005884:	f001 fa66 	bl	8006d54 <vTaskStartScheduler>
      stat = osOK;
 8005888:	2300      	movs	r3, #0
 800588a:	607b      	str	r3, [r7, #4]
 800588c:	e002      	b.n	8005894 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800588e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005892:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005894:	687b      	ldr	r3, [r7, #4]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001288 	.word	0x20001288

080058a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08e      	sub	sp, #56	; 0x38
 80058a8:	af04      	add	r7, sp, #16
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b4:	f3ef 8305 	mrs	r3, IPSR
 80058b8:	617b      	str	r3, [r7, #20]
  return(result);
 80058ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d17e      	bne.n	80059be <osThreadNew+0x11a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d07b      	beq.n	80059be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058ca:	2318      	movs	r3, #24
 80058cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d045      	beq.n	800596a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <osThreadNew+0x48>
        name = attr->name;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <osThreadNew+0x6e>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b38      	cmp	r3, #56	; 0x38
 8005904:	d805      	bhi.n	8005912 <osThreadNew+0x6e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <osThreadNew+0x72>
        return (NULL);
 8005912:	2300      	movs	r3, #0
 8005914:	e054      	b.n	80059c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <osThreadNew+0xa8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2ba7      	cmp	r3, #167	; 0xa7
 8005934:	d90a      	bls.n	800594c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800593a:	2b00      	cmp	r3, #0
 800593c:	d006      	beq.n	800594c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <osThreadNew+0xa8>
        mem = 1;
 8005946:	2301      	movs	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	e010      	b.n	800596e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10c      	bne.n	800596e <osThreadNew+0xca>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <osThreadNew+0xca>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <osThreadNew+0xca>
          mem = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e001      	b.n	800596e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d110      	bne.n	8005996 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800597c:	9202      	str	r2, [sp, #8]
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fff6 	bl	800697c <xTaskCreateStatic>
 8005990:	4603      	mov	r3, r0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e013      	b.n	80059be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 f841 	bl	8006a36 <xTaskCreate>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <osThreadNew+0x11a>
            hTask = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059be:	693b      	ldr	r3, [r7, #16]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	; 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d0:	f3ef 8305 	mrs	r3, IPSR
 80059d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <osDelay+0x1c>
    stat = osErrorISR;
 80059dc:	f06f 0305 	mvn.w	r3, #5
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e007      	b.n	80059f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 f97c 	bl	8006cec <vTaskDelay>
    }
  }

  return (stat);
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b08a      	sub	sp, #40	; 0x28
 8005a02:	af02      	add	r7, sp, #8
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0e:	f3ef 8305 	mrs	r3, IPSR
 8005a12:	613b      	str	r3, [r7, #16]
  return(result);
 8005a14:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d15f      	bne.n	8005ada <osMessageQueueNew+0xdc>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d05c      	beq.n	8005ada <osMessageQueueNew+0xdc>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d059      	beq.n	8005ada <osMessageQueueNew+0xdc>
    mem = -1;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d029      	beq.n	8005a86 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d012      	beq.n	8005a60 <osMessageQueueNew+0x62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b4f      	cmp	r3, #79	; 0x4f
 8005a40:	d90e      	bls.n	8005a60 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <osMessageQueueNew+0x62>
        mem = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e014      	b.n	8005a8a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d110      	bne.n	8005a8a <osMessageQueueNew+0x8c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d108      	bne.n	8005a8a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <osMessageQueueNew+0x8c>
          mem = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e001      	b.n	8005a8a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10b      	bne.n	8005aa8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	9100      	str	r1, [sp, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa2e 	bl	8005f00 <xQueueGenericCreateStatic>
 8005aa4:	61f8      	str	r0, [r7, #28]
 8005aa6:	e008      	b.n	8005aba <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d105      	bne.n	8005aba <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fa9c 	bl	8005ff0 <xQueueGenericCreate>
 8005ab8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e001      	b.n	8005ad2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	69f8      	ldr	r0, [r7, #28]
 8005ad6:	f000 fef3 	bl	80068c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ada:	69fb      	ldr	r3, [r7, #28]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afc:	f3ef 8305 	mrs	r3, IPSR
 8005b00:	617b      	str	r3, [r7, #20]
  return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <osMessageQueuePut+0x36>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <osMessageQueuePut+0x36>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b1a:	f06f 0303 	mvn.w	r3, #3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e038      	b.n	8005b94 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b26:	f107 0210 	add.w	r2, r7, #16
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	69b8      	ldr	r0, [r7, #24]
 8005b30:	f000 fbba 	bl	80062a8 <xQueueGenericSendFromISR>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d003      	beq.n	8005b42 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b3a:	f06f 0302 	mvn.w	r3, #2
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e028      	b.n	8005b94 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d025      	beq.n	8005b94 <osMessageQueuePut+0xb0>
 8005b48:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <osMessageQueuePut+0xbc>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	e01c      	b.n	8005b94 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <osMessageQueuePut+0x82>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b66:	f06f 0303 	mvn.w	r3, #3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e012      	b.n	8005b94 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	69b8      	ldr	r0, [r7, #24]
 8005b76:	f000 fa99 	bl	80060ac <xQueueGenericSend>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d009      	beq.n	8005b94 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b86:	f06f 0301 	mvn.w	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e002      	b.n	8005b94 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b8e:	f06f 0302 	mvn.w	r3, #2
 8005b92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b94:	69fb      	ldr	r3, [r7, #28]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bba:	f3ef 8305 	mrs	r3, IPSR
 8005bbe:	617b      	str	r3, [r7, #20]
  return(result);
 8005bc0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d028      	beq.n	8005c18 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <osMessageQueueGet+0x34>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <osMessageQueueGet+0x34>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bd8:	f06f 0303 	mvn.w	r3, #3
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e037      	b.n	8005c50 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005be4:	f107 0310 	add.w	r3, r7, #16
 8005be8:	461a      	mov	r2, r3
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	69b8      	ldr	r0, [r7, #24]
 8005bee:	f000 fcd7 	bl	80065a0 <xQueueReceiveFromISR>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d003      	beq.n	8005c00 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005bf8:	f06f 0302 	mvn.w	r3, #2
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e027      	b.n	8005c50 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d024      	beq.n	8005c50 <osMessageQueueGet+0xac>
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <osMessageQueueGet+0xb8>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	e01b      	b.n	8005c50 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <osMessageQueueGet+0x80>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c24:	f06f 0303 	mvn.w	r3, #3
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e011      	b.n	8005c50 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	69b8      	ldr	r0, [r7, #24]
 8005c32:	f000 fbd5 	bl	80063e0 <xQueueReceive>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d009      	beq.n	8005c50 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c42:	f06f 0301 	mvn.w	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e002      	b.n	8005c50 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c4a:	f06f 0302 	mvn.w	r3, #2
 8005c4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c50:	69fb      	ldr	r3, [r7, #28]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a07      	ldr	r2, [pc, #28]	; (8005c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <vApplicationGetIdleTaskMemory+0x30>)
 8005c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000128c 	.word	0x2000128c
 8005c90:	20001334 	.word	0x20001334

08005c94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ca4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <vApplicationGetTimerTaskMemory+0x30>)
 8005caa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20001534 	.word	0x20001534
 8005cc4:	200015dc 	.word	0x200015dc

08005cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 0208 	add.w	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f103 0208 	add.w	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d103      	bne.n	8005d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e00c      	b.n	8005da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e002      	b.n	8005d98 <vListInsert+0x2e>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d2f6      	bcs.n	8005d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6892      	ldr	r2, [r2, #8]
 8005df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d103      	bne.n	8005e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1e5a      	subs	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e5a:	f002 f933 	bl	80080c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	441a      	add	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	; 0xff
 8005e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d114      	bne.n	8005eda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01a      	beq.n	8005eee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3310      	adds	r3, #16
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f9e3 	bl	8007288 <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <xQueueGenericReset+0xcc>)
 8005eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	e009      	b.n	8005eee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fef2 	bl	8005cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff feed 	bl	8005cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005eee:	f002 f919 	bl	8008124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ef2:	2301      	movs	r3, #1
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08e      	sub	sp, #56	; 0x38
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <xQueueGenericCreateStatic+0x52>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <xQueueGenericCreateStatic+0x56>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueGenericCreateStatic+0x58>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	623b      	str	r3, [r7, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <xQueueGenericCreateStatic+0x7e>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericCreateStatic+0x82>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericCreateStatic+0x84>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	61fb      	str	r3, [r7, #28]
}
 8005f9a:	bf00      	nop
 8005f9c:	e7fe      	b.n	8005f9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f9e:	2350      	movs	r3, #80	; 0x50
 8005fa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b50      	cmp	r3, #80	; 0x50
 8005fa6:	d00a      	beq.n	8005fbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61bb      	str	r3, [r7, #24]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f83f 	bl	8006064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3730      	adds	r7, #48	; 0x30
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	613b      	str	r3, [r7, #16]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3350      	adds	r3, #80	; 0x50
 8006028:	4618      	mov	r0, r3
 800602a:	f002 f96d 	bl	8008308 <pvPortMalloc>
 800602e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d011      	beq.n	800605a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	3350      	adds	r3, #80	; 0x50
 800603e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006048:	79fa      	ldrb	r2, [r7, #7]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	4613      	mov	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f805 	bl	8006064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800605a:	69bb      	ldr	r3, [r7, #24]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e002      	b.n	8006086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006092:	2101      	movs	r1, #1
 8006094:	69b8      	ldr	r0, [r7, #24]
 8006096:	f7ff fecb 	bl	8005e30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060ba:	2300      	movs	r3, #0
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueGenericSend+0x32>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <xQueueGenericSend+0x40>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <xQueueGenericSend+0x44>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <xQueueGenericSend+0x46>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <xQueueGenericSend+0x60>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d103      	bne.n	800611a <xQueueGenericSend+0x6e>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <xQueueGenericSend+0x72>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericSend+0x74>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericSend+0x8e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800613a:	f001 fa67 	bl	800760c <xTaskGetSchedulerState>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <xQueueGenericSend+0x9e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <xQueueGenericSend+0xa2>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <xQueueGenericSend+0xa4>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xQueueGenericSend+0xbe>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61fb      	str	r3, [r7, #28]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800616a:	f001 ffab 	bl	80080c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <xQueueGenericSend+0xd4>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d129      	bne.n	80061d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006186:	f000 fa8b 	bl	80066a0 <prvCopyDataToQueue>
 800618a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d010      	beq.n	80061b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f875 	bl	8007288 <xTaskRemoveFromEventList>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d013      	beq.n	80061cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061a4:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <xQueueGenericSend+0x1f8>)
 80061a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	e00a      	b.n	80061cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061bc:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <xQueueGenericSend+0x1f8>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061cc:	f001 ffaa 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e063      	b.n	800629c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061da:	f001 ffa3 	bl	8008124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	e05c      	b.n	800629c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061e8:	f107 0314 	add.w	r3, r7, #20
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f8af 	bl	8007350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061f6:	f001 ff95 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061fa:	f000 fe1b 	bl	8006e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061fe:	f001 ff61 	bl	80080c4 <vPortEnterCritical>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006208:	b25b      	sxtb	r3, r3
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620e:	d103      	bne.n	8006218 <xQueueGenericSend+0x16c>
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800621e:	b25b      	sxtb	r3, r3
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006224:	d103      	bne.n	800622e <xQueueGenericSend+0x182>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800622e:	f001 ff79 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006232:	1d3a      	adds	r2, r7, #4
 8006234:	f107 0314 	add.w	r3, r7, #20
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f001 f89e 	bl	800737c <xTaskCheckForTimeOut>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d124      	bne.n	8006290 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006248:	f000 fb22 	bl	8006890 <prvIsQueueFull>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d018      	beq.n	8006284 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	3310      	adds	r3, #16
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f000 ffc4 	bl	80071e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006262:	f000 faad 	bl	80067c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006266:	f000 fdf3 	bl	8006e50 <xTaskResumeAll>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	f47f af7c 	bne.w	800616a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <xQueueGenericSend+0x1f8>)
 8006274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	e772      	b.n	800616a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006286:	f000 fa9b 	bl	80067c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800628a:	f000 fde1 	bl	8006e50 <xTaskResumeAll>
 800628e:	e76c      	b.n	800616a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006292:	f000 fa95 	bl	80067c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006296:	f000 fddb 	bl	8006e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800629a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800629c:	4618      	mov	r0, r3
 800629e:	3738      	adds	r7, #56	; 0x38
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b090      	sub	sp, #64	; 0x40
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d103      	bne.n	80062e4 <xQueueGenericSendFromISR+0x3c>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <xQueueGenericSendFromISR+0x40>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <xQueueGenericSendFromISR+0x42>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d103      	bne.n	8006312 <xQueueGenericSendFromISR+0x6a>
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <xQueueGenericSendFromISR+0x6e>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <xQueueGenericSendFromISR+0x70>
 8006316:	2300      	movs	r3, #0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	623b      	str	r3, [r7, #32]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006332:	f001 ffa9 	bl	8008288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006336:	f3ef 8211 	mrs	r2, BASEPRI
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	61fa      	str	r2, [r7, #28]
 800634c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800634e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <xQueueGenericSendFromISR+0xbc>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d12f      	bne.n	80063c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800637a:	f000 f991 	bl	80066a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800637e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006386:	d112      	bne.n	80063ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d016      	beq.n	80063be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	3324      	adds	r3, #36	; 0x24
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff77 	bl	8007288 <xTaskRemoveFromEventList>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e007      	b.n	80063be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063b2:	3301      	adds	r3, #1
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	b25a      	sxtb	r2, r3
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063be:	2301      	movs	r3, #1
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063c2:	e001      	b.n	80063c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3740      	adds	r7, #64	; 0x40
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xQueueReceive+0x30>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	623b      	str	r3, [r7, #32]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <xQueueReceive+0x3e>
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueReceive+0x42>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueReceive+0x44>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueReceive+0x5e>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fb      	str	r3, [r7, #28]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643e:	f001 f8e5 	bl	800760c <xTaskGetSchedulerState>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <xQueueReceive+0x6e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <xQueueReceive+0x72>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <xQueueReceive+0x74>
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xQueueReceive+0x8e>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800646e:	f001 fe29 	bl	80080c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01f      	beq.n	80064be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006482:	f000 f977 	bl	8006774 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1e5a      	subs	r2, r3, #1
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00f      	beq.n	80064b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	3310      	adds	r3, #16
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fef4 	bl	8007288 <xTaskRemoveFromEventList>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064a6:	4b3d      	ldr	r3, [pc, #244]	; (800659c <xQueueReceive+0x1bc>)
 80064a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064b6:	f001 fe35 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e069      	b.n	8006592 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064c4:	f001 fe2e 	bl	8008124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e062      	b.n	8006592 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064d2:	f107 0310 	add.w	r3, r7, #16
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ff3a 	bl	8007350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064e0:	f001 fe20 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064e4:	f000 fca6 	bl	8006e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e8:	f001 fdec 	bl	80080c4 <vPortEnterCritical>
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f8:	d103      	bne.n	8006502 <xQueueReceive+0x122>
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006508:	b25b      	sxtb	r3, r3
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800650e:	d103      	bne.n	8006518 <xQueueReceive+0x138>
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	f001 fe04 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800651c:	1d3a      	adds	r2, r7, #4
 800651e:	f107 0310 	add.w	r3, r7, #16
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f000 ff29 	bl	800737c <xTaskCheckForTimeOut>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d123      	bne.n	8006578 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006532:	f000 f997 	bl	8006864 <prvIsQueueEmpty>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fe4f 	bl	80071e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800654a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654c:	f000 f938 	bl	80067c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006550:	f000 fc7e 	bl	8006e50 <xTaskResumeAll>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d189      	bne.n	800646e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <xQueueReceive+0x1bc>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	e780      	b.n	800646e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656e:	f000 f927 	bl	80067c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006572:	f000 fc6d 	bl	8006e50 <xTaskResumeAll>
 8006576:	e77a      	b.n	800646e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657a:	f000 f921 	bl	80067c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800657e:	f000 fc67 	bl	8006e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006584:	f000 f96e 	bl	8006864 <prvIsQueueEmpty>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f43f af6f 	beq.w	800646e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006590:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	623b      	str	r3, [r7, #32]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <xQueueReceiveFromISR+0x3a>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <xQueueReceiveFromISR+0x3e>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueReceiveFromISR+0x40>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	61fb      	str	r3, [r7, #28]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065fa:	f001 fe45 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 80065fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	61ba      	str	r2, [r7, #24]
 8006614:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006616:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d02f      	beq.n	8006686 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006634:	f000 f89e 	bl	8006774 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006648:	d112      	bne.n	8006670 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	3310      	adds	r3, #16
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fe16 	bl	8007288 <xTaskRemoveFromEventList>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e007      	b.n	8006680 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006674:	3301      	adds	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	b25a      	sxtb	r2, r3
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
 8006684:	e001      	b.n	800668a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006686:	2300      	movs	r3, #0
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006698:	4618      	mov	r0, r3
 800669a:	3738      	adds	r7, #56	; 0x38
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10d      	bne.n	80066da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d14d      	bne.n	8006762 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 ffbc 	bl	8007648 <xTaskPriorityDisinherit>
 80066d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	e043      	b.n	8006762 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d119      	bne.n	8006714 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6858      	ldr	r0, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	461a      	mov	r2, r3
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	f002 f87a 	bl	80087e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	441a      	add	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	d32b      	bcc.n	8006762 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	e026      	b.n	8006762 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68d8      	ldr	r0, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	461a      	mov	r2, r3
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	f002 f860 	bl	80087e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	425b      	negs	r3, r3
 800672e:	441a      	add	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d207      	bcs.n	8006750 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	425b      	negs	r3, r3
 800674a:	441a      	add	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d105      	bne.n	8006762 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3b01      	subs	r3, #1
 8006760:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800676a:	697b      	ldr	r3, [r7, #20]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d018      	beq.n	80067b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	441a      	add	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	d303      	bcc.n	80067a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68d9      	ldr	r1, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	461a      	mov	r2, r3
 80067b2:	6838      	ldr	r0, [r7, #0]
 80067b4:	f002 f816 	bl	80087e4 <memcpy>
	}
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067c8:	f001 fc7c 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d4:	e011      	b.n	80067fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d012      	beq.n	8006804 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3324      	adds	r3, #36	; 0x24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fd50 	bl	8007288 <xTaskRemoveFromEventList>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ee:	f000 fe27 	bl	8007440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dce9      	bgt.n	80067d6 <prvUnlockQueue+0x16>
 8006802:	e000      	b.n	8006806 <prvUnlockQueue+0x46>
					break;
 8006804:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800680e:	f001 fc89 	bl	8008124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006812:	f001 fc57 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800681c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681e:	e011      	b.n	8006844 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d012      	beq.n	800684e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3310      	adds	r3, #16
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fd2b 	bl	8007288 <xTaskRemoveFromEventList>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006838:	f000 fe02 	bl	8007440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	3b01      	subs	r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	dce9      	bgt.n	8006820 <prvUnlockQueue+0x60>
 800684c:	e000      	b.n	8006850 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800684e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006858:	f001 fc64 	bl	8008124 <vPortExitCritical>
}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800686c:	f001 fc2a 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e001      	b.n	8006882 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006882:	f001 fc4f 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006898:	f001 fc14 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d102      	bne.n	80068ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e001      	b.n	80068b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068b2:	f001 fc37 	bl	8008124 <vPortExitCritical>

	return xReturn;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e014      	b.n	80068fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068d0:	4a0f      	ldr	r2, [pc, #60]	; (8006910 <vQueueAddToRegistry+0x50>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068dc:	490c      	ldr	r1, [pc, #48]	; (8006910 <vQueueAddToRegistry+0x50>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <vQueueAddToRegistry+0x50>)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4413      	add	r3, r2
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068f2:	e006      	b.n	8006902 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b07      	cmp	r3, #7
 80068fe:	d9e7      	bls.n	80068d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	200019dc 	.word	0x200019dc

08006914 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006924:	f001 fbce 	bl	80080c4 <vPortEnterCritical>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800692e:	b25b      	sxtb	r3, r3
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006934:	d103      	bne.n	800693e <vQueueWaitForMessageRestricted+0x2a>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006944:	b25b      	sxtb	r3, r3
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694a:	d103      	bne.n	8006954 <vQueueWaitForMessageRestricted+0x40>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006954:	f001 fbe6 	bl	8008124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d106      	bne.n	800696e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fc61 	bl	8007230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800696e:	6978      	ldr	r0, [r7, #20]
 8006970:	f7ff ff26 	bl	80067c0 <prvUnlockQueue>
	}
 8006974:	bf00      	nop
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	; 0x38
 8006980:	af04      	add	r7, sp, #16
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	623b      	str	r3, [r7, #32]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61fb      	str	r3, [r7, #28]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069c2:	23a8      	movs	r3, #168	; 0xa8
 80069c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2ba8      	cmp	r3, #168	; 0xa8
 80069ca:	d00a      	beq.n	80069e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61bb      	str	r3, [r7, #24]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01e      	beq.n	8006a28 <xTaskCreateStatic+0xac>
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01b      	beq.n	8006a28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	2202      	movs	r2, #2
 80069fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a02:	2300      	movs	r3, #0
 8006a04:	9303      	str	r3, [sp, #12]
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f850 	bl	8006ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a22:	f000 f8f3 	bl	8006c0c <prvAddNewTaskToReadyList>
 8006a26:	e001      	b.n	8006a2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a2c:	697b      	ldr	r3, [r7, #20]
	}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b08c      	sub	sp, #48	; 0x30
 8006a3a:	af04      	add	r7, sp, #16
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 fc5c 	bl	8008308 <pvPortMalloc>
 8006a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a58:	20a8      	movs	r0, #168	; 0xa8
 8006a5a:	f001 fc55 	bl	8008308 <pvPortMalloc>
 8006a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a6c:	e005      	b.n	8006a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f001 fd16 	bl	80084a0 <vPortFree>
 8006a74:	e001      	b.n	8006a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d017      	beq.n	8006ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	9302      	str	r3, [sp, #8]
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f80e 	bl	8006ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa4:	69f8      	ldr	r0, [r7, #28]
 8006aa6:	f000 f8b1 	bl	8006c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	e002      	b.n	8006ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	21a5      	movs	r1, #165	; 0xa5
 8006ada:	f001 fdff 	bl	80086dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f023 0307 	bic.w	r3, r3, #7
 8006af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	617b      	str	r3, [r7, #20]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01f      	beq.n	8006b5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e012      	b.n	8006b4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	7819      	ldrb	r1, [r3, #0]
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	3334      	adds	r3, #52	; 0x34
 8006b34:	460a      	mov	r2, r1
 8006b36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b0f      	cmp	r3, #15
 8006b4e:	d9e9      	bls.n	8006b24 <prvInitialiseNewTask+0x64>
 8006b50:	e000      	b.n	8006b54 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b5c:	e003      	b.n	8006b66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	2b37      	cmp	r3, #55	; 0x37
 8006b6a:	d901      	bls.n	8006b70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b6c:	2337      	movs	r3, #55	; 0x37
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	3304      	adds	r3, #4
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff f8be 	bl	8005d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff f8b9 	bl	8005d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	3354      	adds	r3, #84	; 0x54
 8006bc0:	224c      	movs	r2, #76	; 0x4c
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fd89 	bl	80086dc <memset>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <prvInitialiseNewTask+0x140>)
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <prvInitialiseNewTask+0x144>)
 8006bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	; (8006c08 <prvInitialiseNewTask+0x148>)
 8006bda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	69b8      	ldr	r0, [r7, #24]
 8006be2:	f001 f941 	bl	8007e68 <pxPortInitialiseStack>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20002c28 	.word	0x20002c28
 8006c04:	20002c90 	.word	0x20002c90
 8006c08:	20002cf8 	.word	0x20002cf8

08006c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c14:	f001 fa56 	bl	80080c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c22:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d110      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c38:	f000 fc26 	bl	8007488 <prvInitialiseTaskLists>
 8006c3c:	e00d      	b.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d802      	bhi.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c54:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c5a:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c64:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <prvAddNewTaskToReadyList+0x74>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <prvAddNewTaskToReadyList+0xd8>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7ff f843 	bl	8005d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9c:	f001 fa42 	bl	8008124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d207      	bcs.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvAddNewTaskToReadyList+0xdc>)
 8006cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20001ef0 	.word	0x20001ef0
 8006cd4:	20001a1c 	.word	0x20001a1c
 8006cd8:	20001efc 	.word	0x20001efc
 8006cdc:	20001f0c 	.word	0x20001f0c
 8006ce0:	20001ef8 	.word	0x20001ef8
 8006ce4:	20001a20 	.word	0x20001a20
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d017      	beq.n	8006d2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <vTaskDelay+0x60>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <vTaskDelay+0x30>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60bb      	str	r3, [r7, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d1c:	f000 f88a 	bl	8006e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d20:	2100      	movs	r1, #0
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fcfe 	bl	8007724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d28:	f000 f892 	bl	8006e50 <xTaskResumeAll>
 8006d2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d107      	bne.n	8006d44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <vTaskDelay+0x64>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20001f18 	.word	0x20001f18
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d62:	463a      	mov	r2, r7
 8006d64:	1d39      	adds	r1, r7, #4
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe ff78 	bl	8005c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	9202      	str	r2, [sp, #8]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	460a      	mov	r2, r1
 8006d82:	4924      	ldr	r1, [pc, #144]	; (8006e14 <vTaskStartScheduler+0xc0>)
 8006d84:	4824      	ldr	r0, [pc, #144]	; (8006e18 <vTaskStartScheduler+0xc4>)
 8006d86:	f7ff fdf9 	bl	800697c <xTaskCreateStatic>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4a23      	ldr	r2, [pc, #140]	; (8006e1c <vTaskStartScheduler+0xc8>)
 8006d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <vTaskStartScheduler+0xc8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e001      	b.n	8006da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d102      	bne.n	8006dae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006da8:	f000 fd10 	bl	80077cc <xTimerCreateTimerTask>
 8006dac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d11b      	bne.n	8006dec <vTaskStartScheduler+0x98>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	613b      	str	r3, [r7, #16]
}
 8006dc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <vTaskStartScheduler+0xcc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3354      	adds	r3, #84	; 0x54
 8006dce:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <vTaskStartScheduler+0xd0>)
 8006dd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <vTaskStartScheduler+0xd4>)
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <vTaskStartScheduler+0xd8>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006de0:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <vTaskStartScheduler+0xdc>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006de6:	f001 f8cb 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dea:	e00e      	b.n	8006e0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df2:	d10a      	bne.n	8006e0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60fb      	str	r3, [r7, #12]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <vTaskStartScheduler+0xb4>
}
 8006e0a:	bf00      	nop
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	08008914 	.word	0x08008914
 8006e18:	08007459 	.word	0x08007459
 8006e1c:	20001f14 	.word	0x20001f14
 8006e20:	20001a1c 	.word	0x20001a1c
 8006e24:	2000005c 	.word	0x2000005c
 8006e28:	20001f10 	.word	0x20001f10
 8006e2c:	20001efc 	.word	0x20001efc
 8006e30:	20001ef4 	.word	0x20001ef4

08006e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <vTaskSuspendAll+0x18>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	4a03      	ldr	r2, [pc, #12]	; (8006e4c <vTaskSuspendAll+0x18>)
 8006e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e42:	bf00      	nop
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20001f18 	.word	0x20001f18

08006e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e5e:	4b42      	ldr	r3, [pc, #264]	; (8006f68 <xTaskResumeAll+0x118>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	603b      	str	r3, [r7, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e7c:	f001 f922 	bl	80080c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e80:	4b39      	ldr	r3, [pc, #228]	; (8006f68 <xTaskResumeAll+0x118>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	4a38      	ldr	r2, [pc, #224]	; (8006f68 <xTaskResumeAll+0x118>)
 8006e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8a:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <xTaskResumeAll+0x118>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d162      	bne.n	8006f58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e92:	4b36      	ldr	r3, [pc, #216]	; (8006f6c <xTaskResumeAll+0x11c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05e      	beq.n	8006f58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e9a:	e02f      	b.n	8006efc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9c:	4b34      	ldr	r3, [pc, #208]	; (8006f70 <xTaskResumeAll+0x120>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe ff97 	bl	8005ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe ff92 	bl	8005ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4b2d      	ldr	r3, [pc, #180]	; (8006f74 <xTaskResumeAll+0x124>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d903      	bls.n	8006ecc <xTaskResumeAll+0x7c>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <xTaskResumeAll+0x124>)
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <xTaskResumeAll+0x128>)
 8006eda:	441a      	add	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7fe ff1d 	bl	8005d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	4b23      	ldr	r3, [pc, #140]	; (8006f7c <xTaskResumeAll+0x12c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ef6:	4b22      	ldr	r3, [pc, #136]	; (8006f80 <xTaskResumeAll+0x130>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <xTaskResumeAll+0x120>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1cb      	bne.n	8006e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f0a:	f000 fb5f 	bl	80075cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f0e:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <xTaskResumeAll+0x134>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d010      	beq.n	8006f3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f1a:	f000 f847 	bl	8006fac <xTaskIncrementTick>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f24:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <xTaskResumeAll+0x130>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f1      	bne.n	8006f1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <xTaskResumeAll+0x134>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <xTaskResumeAll+0x130>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <xTaskResumeAll+0x138>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f58:	f001 f8e4 	bl	8008124 <vPortExitCritical>

	return xAlreadyYielded;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20001f18 	.word	0x20001f18
 8006f6c:	20001ef0 	.word	0x20001ef0
 8006f70:	20001eb0 	.word	0x20001eb0
 8006f74:	20001ef8 	.word	0x20001ef8
 8006f78:	20001a20 	.word	0x20001a20
 8006f7c:	20001a1c 	.word	0x20001a1c
 8006f80:	20001f04 	.word	0x20001f04
 8006f84:	20001f00 	.word	0x20001f00
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <xTaskGetTickCount+0x1c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f98:	687b      	ldr	r3, [r7, #4]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20001ef4 	.word	0x20001ef4

08006fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb6:	4b4f      	ldr	r3, [pc, #316]	; (80070f4 <xTaskIncrementTick+0x148>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 808f 	bne.w	80070de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fc0:	4b4d      	ldr	r3, [pc, #308]	; (80070f8 <xTaskIncrementTick+0x14c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fc8:	4a4b      	ldr	r2, [pc, #300]	; (80070f8 <xTaskIncrementTick+0x14c>)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d120      	bne.n	8007016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fd4:	4b49      	ldr	r3, [pc, #292]	; (80070fc <xTaskIncrementTick+0x150>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	603b      	str	r3, [r7, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <xTaskIncrementTick+0x46>
 8006ff4:	4b41      	ldr	r3, [pc, #260]	; (80070fc <xTaskIncrementTick+0x150>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b41      	ldr	r3, [pc, #260]	; (8007100 <xTaskIncrementTick+0x154>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3f      	ldr	r2, [pc, #252]	; (80070fc <xTaskIncrementTick+0x150>)
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <xTaskIncrementTick+0x154>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b3e      	ldr	r3, [pc, #248]	; (8007104 <xTaskIncrementTick+0x158>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	4a3d      	ldr	r2, [pc, #244]	; (8007104 <xTaskIncrementTick+0x158>)
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	f000 fadb 	bl	80075cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007016:	4b3c      	ldr	r3, [pc, #240]	; (8007108 <xTaskIncrementTick+0x15c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d349      	bcc.n	80070b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007020:	4b36      	ldr	r3, [pc, #216]	; (80070fc <xTaskIncrementTick+0x150>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	4b37      	ldr	r3, [pc, #220]	; (8007108 <xTaskIncrementTick+0x15c>)
 800702c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007030:	601a      	str	r2, [r3, #0]
					break;
 8007032:	e03f      	b.n	80070b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007034:	4b31      	ldr	r3, [pc, #196]	; (80070fc <xTaskIncrementTick+0x150>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d203      	bcs.n	8007054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800704c:	4a2e      	ldr	r2, [pc, #184]	; (8007108 <xTaskIncrementTick+0x15c>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007052:	e02f      	b.n	80070b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe febf 	bl	8005ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3318      	adds	r3, #24
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe feb6 	bl	8005ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4b25      	ldr	r3, [pc, #148]	; (800710c <xTaskIncrementTick+0x160>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d903      	bls.n	8007084 <xTaskIncrementTick+0xd8>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a22      	ldr	r2, [pc, #136]	; (800710c <xTaskIncrementTick+0x160>)
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <xTaskIncrementTick+0x164>)
 8007092:	441a      	add	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7fe fe41 	bl	8005d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <xTaskIncrementTick+0x168>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d3b8      	bcc.n	8007020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b2:	e7b5      	b.n	8007020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070b4:	4b17      	ldr	r3, [pc, #92]	; (8007114 <xTaskIncrementTick+0x168>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	4915      	ldr	r1, [pc, #84]	; (8007110 <xTaskIncrementTick+0x164>)
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d901      	bls.n	80070d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070d0:	4b11      	ldr	r3, [pc, #68]	; (8007118 <xTaskIncrementTick+0x16c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	e004      	b.n	80070e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070de:	4b0f      	ldr	r3, [pc, #60]	; (800711c <xTaskIncrementTick+0x170>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	4a0d      	ldr	r2, [pc, #52]	; (800711c <xTaskIncrementTick+0x170>)
 80070e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20001f18 	.word	0x20001f18
 80070f8:	20001ef4 	.word	0x20001ef4
 80070fc:	20001ea8 	.word	0x20001ea8
 8007100:	20001eac 	.word	0x20001eac
 8007104:	20001f08 	.word	0x20001f08
 8007108:	20001f10 	.word	0x20001f10
 800710c:	20001ef8 	.word	0x20001ef8
 8007110:	20001a20 	.word	0x20001a20
 8007114:	20001a1c 	.word	0x20001a1c
 8007118:	20001f04 	.word	0x20001f04
 800711c:	20001f00 	.word	0x20001f00

08007120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007126:	4b2a      	ldr	r3, [pc, #168]	; (80071d0 <vTaskSwitchContext+0xb0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800712e:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <vTaskSwitchContext+0xb4>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007134:	e046      	b.n	80071c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <vTaskSwitchContext+0xb4>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713c:	4b26      	ldr	r3, [pc, #152]	; (80071d8 <vTaskSwitchContext+0xb8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e010      	b.n	8007166 <vTaskSwitchContext+0x46>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <vTaskSwitchContext+0x40>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vTaskSwitchContext+0x3e>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3b01      	subs	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	491d      	ldr	r1, [pc, #116]	; (80071dc <vTaskSwitchContext+0xbc>)
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0e4      	beq.n	8007144 <vTaskSwitchContext+0x24>
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4a15      	ldr	r2, [pc, #84]	; (80071dc <vTaskSwitchContext+0xbc>)
 8007186:	4413      	add	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3308      	adds	r3, #8
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <vTaskSwitchContext+0x8a>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	4a0b      	ldr	r2, [pc, #44]	; (80071e0 <vTaskSwitchContext+0xc0>)
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <vTaskSwitchContext+0xb8>)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <vTaskSwitchContext+0xc0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3354      	adds	r3, #84	; 0x54
 80071c0:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <vTaskSwitchContext+0xc4>)
 80071c2:	6013      	str	r3, [r2, #0]
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20001f18 	.word	0x20001f18
 80071d4:	20001f04 	.word	0x20001f04
 80071d8:	20001ef8 	.word	0x20001ef8
 80071dc:	20001a20 	.word	0x20001a20
 80071e0:	20001a1c 	.word	0x20001a1c
 80071e4:	2000005c 	.word	0x2000005c

080071e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <vTaskPlaceOnEventList+0x44>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3318      	adds	r3, #24
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fe fda7 	bl	8005d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800721c:	2101      	movs	r1, #1
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f000 fa80 	bl	8007724 <prvAddCurrentTaskToDelayedList>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20001a1c 	.word	0x20001a1c

08007230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	617b      	str	r3, [r7, #20]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <vTaskPlaceOnEventListRestricted+0x54>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3318      	adds	r3, #24
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7fe fd5e 	bl	8005d22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800726c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007270:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68b8      	ldr	r0, [r7, #8]
 8007276:	f000 fa55 	bl	8007724 <prvAddCurrentTaskToDelayedList>
	}
 800727a:	bf00      	nop
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20001a1c 	.word	0x20001a1c

08007288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	60fb      	str	r3, [r7, #12]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3318      	adds	r3, #24
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe fd8f 	bl	8005ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072be:	4b1e      	ldr	r3, [pc, #120]	; (8007338 <xTaskRemoveFromEventList+0xb0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11d      	bne.n	8007302 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fd86 	bl	8005ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4b19      	ldr	r3, [pc, #100]	; (800733c <xTaskRemoveFromEventList+0xb4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d903      	bls.n	80072e4 <xTaskRemoveFromEventList+0x5c>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	4a16      	ldr	r2, [pc, #88]	; (800733c <xTaskRemoveFromEventList+0xb4>)
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4a13      	ldr	r2, [pc, #76]	; (8007340 <xTaskRemoveFromEventList+0xb8>)
 80072f2:	441a      	add	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f7fe fd11 	bl	8005d22 <vListInsertEnd>
 8007300:	e005      	b.n	800730e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3318      	adds	r3, #24
 8007306:	4619      	mov	r1, r3
 8007308:	480e      	ldr	r0, [pc, #56]	; (8007344 <xTaskRemoveFromEventList+0xbc>)
 800730a:	f7fe fd0a 	bl	8005d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <xTaskRemoveFromEventList+0xc0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	429a      	cmp	r2, r3
 800731a:	d905      	bls.n	8007328 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <xTaskRemoveFromEventList+0xc4>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e001      	b.n	800732c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800732c:	697b      	ldr	r3, [r7, #20]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20001f18 	.word	0x20001f18
 800733c:	20001ef8 	.word	0x20001ef8
 8007340:	20001a20 	.word	0x20001a20
 8007344:	20001eb0 	.word	0x20001eb0
 8007348:	20001a1c 	.word	0x20001a1c
 800734c:	20001f04 	.word	0x20001f04

08007350 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <vTaskInternalSetTimeOutState+0x24>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <vTaskInternalSetTimeOutState+0x28>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20001f08 	.word	0x20001f08
 8007378:	20001ef4 	.word	0x20001ef4

0800737c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	613b      	str	r3, [r7, #16]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	60fb      	str	r3, [r7, #12]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073be:	f000 fe81 	bl	80080c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073c2:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <xTaskCheckForTimeOut+0xbc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073da:	d102      	bne.n	80073e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073dc:	2300      	movs	r3, #0
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	e023      	b.n	800742a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4b15      	ldr	r3, [pc, #84]	; (800743c <xTaskCheckForTimeOut+0xc0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d007      	beq.n	80073fe <xTaskCheckForTimeOut+0x82>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	e015      	b.n	800742a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	429a      	cmp	r2, r3
 8007406:	d20b      	bcs.n	8007420 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff ff9b 	bl	8007350 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	e004      	b.n	800742a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007426:	2301      	movs	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800742a:	f000 fe7b 	bl	8008124 <vPortExitCritical>

	return xReturn;
 800742e:	69fb      	ldr	r3, [r7, #28]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20001ef4 	.word	0x20001ef4
 800743c:	20001f08 	.word	0x20001f08

08007440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007444:	4b03      	ldr	r3, [pc, #12]	; (8007454 <vTaskMissedYield+0x14>)
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]
}
 800744a:	bf00      	nop
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20001f04 	.word	0x20001f04

08007458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007460:	f000 f852 	bl	8007508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <prvIdleTask+0x28>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d9f9      	bls.n	8007460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800746c:	4b05      	ldr	r3, [pc, #20]	; (8007484 <prvIdleTask+0x2c>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800747c:	e7f0      	b.n	8007460 <prvIdleTask+0x8>
 800747e:	bf00      	nop
 8007480:	20001a20 	.word	0x20001a20
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	e00c      	b.n	80074ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <prvInitialiseTaskLists+0x60>)
 80074a0:	4413      	add	r3, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fc10 	bl	8005cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3301      	adds	r3, #1
 80074ac:	607b      	str	r3, [r7, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b37      	cmp	r3, #55	; 0x37
 80074b2:	d9ef      	bls.n	8007494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074b4:	480d      	ldr	r0, [pc, #52]	; (80074ec <prvInitialiseTaskLists+0x64>)
 80074b6:	f7fe fc07 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074ba:	480d      	ldr	r0, [pc, #52]	; (80074f0 <prvInitialiseTaskLists+0x68>)
 80074bc:	f7fe fc04 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074c0:	480c      	ldr	r0, [pc, #48]	; (80074f4 <prvInitialiseTaskLists+0x6c>)
 80074c2:	f7fe fc01 	bl	8005cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074c6:	480c      	ldr	r0, [pc, #48]	; (80074f8 <prvInitialiseTaskLists+0x70>)
 80074c8:	f7fe fbfe 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074cc:	480b      	ldr	r0, [pc, #44]	; (80074fc <prvInitialiseTaskLists+0x74>)
 80074ce:	f7fe fbfb 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <prvInitialiseTaskLists+0x78>)
 80074d4:	4a05      	ldr	r2, [pc, #20]	; (80074ec <prvInitialiseTaskLists+0x64>)
 80074d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <prvInitialiseTaskLists+0x7c>)
 80074da:	4a05      	ldr	r2, [pc, #20]	; (80074f0 <prvInitialiseTaskLists+0x68>)
 80074dc:	601a      	str	r2, [r3, #0]
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20001a20 	.word	0x20001a20
 80074ec:	20001e80 	.word	0x20001e80
 80074f0:	20001e94 	.word	0x20001e94
 80074f4:	20001eb0 	.word	0x20001eb0
 80074f8:	20001ec4 	.word	0x20001ec4
 80074fc:	20001edc 	.word	0x20001edc
 8007500:	20001ea8 	.word	0x20001ea8
 8007504:	20001eac 	.word	0x20001eac

08007508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800750e:	e019      	b.n	8007544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007510:	f000 fdd8 	bl	80080c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007514:	4b10      	ldr	r3, [pc, #64]	; (8007558 <prvCheckTasksWaitingTermination+0x50>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fc5b 	bl	8005ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007526:	4b0d      	ldr	r3, [pc, #52]	; (800755c <prvCheckTasksWaitingTermination+0x54>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3b01      	subs	r3, #1
 800752c:	4a0b      	ldr	r2, [pc, #44]	; (800755c <prvCheckTasksWaitingTermination+0x54>)
 800752e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <prvCheckTasksWaitingTermination+0x58>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3b01      	subs	r3, #1
 8007536:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <prvCheckTasksWaitingTermination+0x58>)
 8007538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800753a:	f000 fdf3 	bl	8008124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f810 	bl	8007564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvCheckTasksWaitingTermination+0x58>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e1      	bne.n	8007510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20001ec4 	.word	0x20001ec4
 800755c:	20001ef0 	.word	0x20001ef0
 8007560:	20001ed8 	.word	0x20001ed8

08007564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3354      	adds	r3, #84	; 0x54
 8007570:	4618      	mov	r0, r3
 8007572:	f001 f8bb 	bl	80086ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ff8b 	bl	80084a0 <vPortFree>
				vPortFree( pxTCB );
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 ff88 	bl	80084a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007590:	e018      	b.n	80075c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007598:	2b01      	cmp	r3, #1
 800759a:	d103      	bne.n	80075a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 ff7f 	bl	80084a0 <vPortFree>
	}
 80075a2:	e00f      	b.n	80075c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d00a      	beq.n	80075c4 <prvDeleteTCB+0x60>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60fb      	str	r3, [r7, #12]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <prvDeleteTCB+0x5e>
	}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <prvResetNextTaskUnblockTime+0x38>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <prvResetNextTaskUnblockTime+0x3c>)
 80075de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075e4:	e008      	b.n	80075f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <prvResetNextTaskUnblockTime+0x38>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4a04      	ldr	r2, [pc, #16]	; (8007608 <prvResetNextTaskUnblockTime+0x3c>)
 80075f6:	6013      	str	r3, [r2, #0]
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	20001ea8 	.word	0x20001ea8
 8007608:	20001f10 	.word	0x20001f10

0800760c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <xTaskGetSchedulerState+0x34>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800761a:	2301      	movs	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	e008      	b.n	8007632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <xTaskGetSchedulerState+0x38>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007628:	2302      	movs	r3, #2
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	e001      	b.n	8007632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007632:	687b      	ldr	r3, [r7, #4]
	}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20001efc 	.word	0x20001efc
 8007644:	20001f18 	.word	0x20001f18

08007648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d056      	beq.n	800770c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800765e:	4b2e      	ldr	r3, [pc, #184]	; (8007718 <xTaskPriorityDisinherit+0xd0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d00a      	beq.n	800767e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60fb      	str	r3, [r7, #12]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a0:	1e5a      	subs	r2, r3, #1
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d02c      	beq.n	800770c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d128      	bne.n	800770c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3304      	adds	r3, #4
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fb8c 	bl	8005ddc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <xTaskPriorityDisinherit+0xd4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d903      	bls.n	80076ec <xTaskPriorityDisinherit+0xa4>
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a0c      	ldr	r2, [pc, #48]	; (800771c <xTaskPriorityDisinherit+0xd4>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <xTaskPriorityDisinherit+0xd8>)
 80076fa:	441a      	add	r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fe fb0d 	bl	8005d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800770c:	697b      	ldr	r3, [r7, #20]
	}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20001a1c 	.word	0x20001a1c
 800771c:	20001ef8 	.word	0x20001ef8
 8007720:	20001a20 	.word	0x20001a20

08007724 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800772e:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007734:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3304      	adds	r3, #4
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fb4e 	bl	8005ddc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007746:	d10a      	bne.n	800775e <prvAddCurrentTaskToDelayedList+0x3a>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774e:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4819      	ldr	r0, [pc, #100]	; (80077bc <prvAddCurrentTaskToDelayedList+0x98>)
 8007758:	f7fe fae3 	bl	8005d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800775c:	e026      	b.n	80077ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	429a      	cmp	r2, r3
 8007774:	d209      	bcs.n	800778a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007776:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7fe faf1 	bl	8005d6a <vListInsert>
}
 8007788:	e010      	b.n	80077ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3304      	adds	r3, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7fe fae7 	bl	8005d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d202      	bcs.n	80077ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6013      	str	r3, [r2, #0]
}
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20001ef4 	.word	0x20001ef4
 80077b8:	20001a1c 	.word	0x20001a1c
 80077bc:	20001edc 	.word	0x20001edc
 80077c0:	20001eac 	.word	0x20001eac
 80077c4:	20001ea8 	.word	0x20001ea8
 80077c8:	20001f10 	.word	0x20001f10

080077cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077d6:	f000 fb07 	bl	8007de8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077da:	4b1c      	ldr	r3, [pc, #112]	; (800784c <xTimerCreateTimerTask+0x80>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d021      	beq.n	8007826 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077ea:	1d3a      	adds	r2, r7, #4
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	f107 030c 	add.w	r3, r7, #12
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe fa4d 	bl	8005c94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	9202      	str	r2, [sp, #8]
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	2302      	movs	r3, #2
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	2300      	movs	r3, #0
 800780a:	460a      	mov	r2, r1
 800780c:	4910      	ldr	r1, [pc, #64]	; (8007850 <xTimerCreateTimerTask+0x84>)
 800780e:	4811      	ldr	r0, [pc, #68]	; (8007854 <xTimerCreateTimerTask+0x88>)
 8007810:	f7ff f8b4 	bl	800697c <xTaskCreateStatic>
 8007814:	4603      	mov	r3, r0
 8007816:	4a10      	ldr	r2, [pc, #64]	; (8007858 <xTimerCreateTimerTask+0x8c>)
 8007818:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xTimerCreateTimerTask+0x8c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007822:	2301      	movs	r3, #1
 8007824:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	613b      	str	r3, [r7, #16]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20001f4c 	.word	0x20001f4c
 8007850:	0800891c 	.word	0x0800891c
 8007854:	08007991 	.word	0x08007991
 8007858:	20001f50 	.word	0x20001f50

0800785c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	623b      	str	r3, [r7, #32]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <xTimerGenericCommand+0x98>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d02a      	beq.n	80078e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b05      	cmp	r3, #5
 80078a2:	dc18      	bgt.n	80078d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078a4:	f7ff feb2 	bl	800760c <xTaskGetSchedulerState>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d109      	bne.n	80078c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f107 0110 	add.w	r1, r7, #16
 80078b6:	2300      	movs	r3, #0
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	f7fe fbf7 	bl	80060ac <xQueueGenericSend>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24
 80078c0:	e012      	b.n	80078e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	f107 0110 	add.w	r1, r7, #16
 80078ca:	2300      	movs	r3, #0
 80078cc:	2200      	movs	r2, #0
 80078ce:	f7fe fbed 	bl	80060ac <xQueueGenericSend>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24
 80078d4:	e008      	b.n	80078e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f107 0110 	add.w	r1, r7, #16
 80078de:	2300      	movs	r3, #0
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	f7fe fce1 	bl	80062a8 <xQueueGenericSendFromISR>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3728      	adds	r7, #40	; 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20001f4c 	.word	0x20001f4c

080078f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007902:	4b22      	ldr	r3, [pc, #136]	; (800798c <prvProcessExpiredTimer+0x94>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fa63 	bl	8005ddc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d022      	beq.n	800796a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	18d1      	adds	r1, r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	6978      	ldr	r0, [r7, #20]
 8007932:	f000 f8d1 	bl	8007ad8 <prvInsertTimerInActiveList>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01f      	beq.n	800797c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800793c:	2300      	movs	r3, #0
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2300      	movs	r3, #0
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	2100      	movs	r1, #0
 8007946:	6978      	ldr	r0, [r7, #20]
 8007948:	f7ff ff88 	bl	800785c <xTimerGenericCommand>
 800794c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d113      	bne.n	800797c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60fb      	str	r3, [r7, #12]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	6978      	ldr	r0, [r7, #20]
 8007982:	4798      	blx	r3
}
 8007984:	bf00      	nop
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20001f44 	.word	0x20001f44

08007990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007998:	f107 0308 	add.w	r3, r7, #8
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f857 	bl	8007a50 <prvGetNextExpireTime>
 80079a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4619      	mov	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f803 	bl	80079b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ae:	f000 f8d5 	bl	8007b5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079b2:	e7f1      	b.n	8007998 <prvTimerTask+0x8>

080079b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079be:	f7ff fa39 	bl	8006e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079c2:	f107 0308 	add.w	r3, r7, #8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f866 	bl	8007a98 <prvSampleTimeNow>
 80079cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d130      	bne.n	8007a36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <prvProcessTimerOrBlockTask+0x3c>
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d806      	bhi.n	80079f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079e2:	f7ff fa35 	bl	8006e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff85 	bl	80078f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079ee:	e024      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvProcessTimerOrBlockTask+0x90>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <prvProcessTimerOrBlockTask+0x50>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <prvProcessTimerOrBlockTask+0x52>
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <prvProcessTimerOrBlockTask+0x94>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	f7fe ff7d 	bl	8006914 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a1a:	f7ff fa19 	bl	8006e50 <xTaskResumeAll>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <prvProcessTimerOrBlockTask+0x98>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
}
 8007a34:	e001      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a36:	f7ff fa0b 	bl	8006e50 <xTaskResumeAll>
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20001f48 	.word	0x20001f48
 8007a48:	20001f4c 	.word	0x20001f4c
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <prvGetNextExpireTime+0x44>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <prvGetNextExpireTime+0x16>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e000      	b.n	8007a68 <prvGetNextExpireTime+0x18>
 8007a66:	2200      	movs	r2, #0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a74:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <prvGetNextExpireTime+0x44>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e001      	b.n	8007a84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a84:	68fb      	ldr	r3, [r7, #12]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20001f44 	.word	0x20001f44

08007a98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007aa0:	f7ff fa74 	bl	8006f8c <xTaskGetTickCount>
 8007aa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <prvSampleTimeNow+0x3c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d205      	bcs.n	8007abc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ab0:	f000 f936 	bl	8007d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <prvSampleTimeNow+0x3c>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001f54 	.word	0x20001f54

08007ad8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d812      	bhi.n	8007b24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d302      	bcc.n	8007b12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e01b      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <prvInsertTimerInActiveList+0x7c>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7fe f924 	bl	8005d6a <vListInsert>
 8007b22:	e012      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d206      	bcs.n	8007b3a <prvInsertTimerInActiveList+0x62>
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e007      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <prvInsertTimerInActiveList+0x80>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7fe f910 	bl	8005d6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b4a:	697b      	ldr	r3, [r7, #20]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20001f48 	.word	0x20001f48
 8007b58:	20001f44 	.word	0x20001f44

08007b5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b62:	e0ca      	b.n	8007cfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da18      	bge.n	8007b9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	61fb      	str	r3, [r7, #28]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b92:	6850      	ldr	r0, [r2, #4]
 8007b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b96:	6892      	ldr	r2, [r2, #8]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f2c0 80ab 	blt.w	8007cfa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fe f911 	bl	8005ddc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bba:	463b      	mov	r3, r7
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff ff6b 	bl	8007a98 <prvSampleTimeNow>
 8007bc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	f200 8096 	bhi.w	8007cf8 <prvProcessReceivedCommands+0x19c>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <prvProcessReceivedCommands+0x78>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007bfd 	.word	0x08007bfd
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c85 	.word	0x08007c85
 8007be8:	08007ccf 	.word	0x08007ccf
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007bfd 	.word	0x08007bfd
 8007bf4:	08007c71 	.word	0x08007c71
 8007bf8:	08007c85 	.word	0x08007c85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	18d1      	adds	r1, r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c1c:	f7ff ff5c 	bl	8007ad8 <prvInsertTimerInActiveList>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d069      	beq.n	8007cfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d05e      	beq.n	8007cfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	441a      	add	r2, r3
 8007c44:	2300      	movs	r3, #0
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c4e:	f7ff fe05 	bl	800785c <xTimerGenericCommand>
 8007c52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d14f      	bne.n	8007cfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61bb      	str	r3, [r7, #24]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c82:	e03a      	b.n	8007cfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	617b      	str	r3, [r7, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	18d1      	adds	r1, r2, r3
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc8:	f7ff ff06 	bl	8007ad8 <prvInsertTimerInActiveList>
					break;
 8007ccc:	e015      	b.n	8007cfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cde:	f000 fbdf 	bl	80084a0 <vPortFree>
 8007ce2:	e00a      	b.n	8007cfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cea:	f023 0301 	bic.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cf6:	e000      	b.n	8007cfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cfa:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <prvProcessReceivedCommands+0x1c0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	1d39      	adds	r1, r7, #4
 8007d00:	2200      	movs	r2, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fb6c 	bl	80063e0 <xQueueReceive>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f47f af2a 	bne.w	8007b64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3730      	adds	r7, #48	; 0x30
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20001f4c 	.word	0x20001f4c

08007d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d26:	e048      	b.n	8007dba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d28:	4b2d      	ldr	r3, [pc, #180]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d32:	4b2b      	ldr	r3, [pc, #172]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f84b 	bl	8005ddc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d02e      	beq.n	8007dba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4413      	add	r3, r2
 8007d64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d90e      	bls.n	8007d8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d7a:	4b19      	ldr	r3, [pc, #100]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f7fd fff0 	bl	8005d6a <vListInsert>
 8007d8a:	e016      	b.n	8007dba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	2300      	movs	r3, #0
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	2100      	movs	r1, #0
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fd60 	bl	800785c <xTimerGenericCommand>
 8007d9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	603b      	str	r3, [r7, #0]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1b1      	bne.n	8007d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <prvSwitchTimerLists+0xc4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a04      	ldr	r2, [pc, #16]	; (8007de0 <prvSwitchTimerLists+0xc0>)
 8007dd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dd2:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <prvSwitchTimerLists+0xc4>)
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	6013      	str	r3, [r2, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20001f44 	.word	0x20001f44
 8007de4:	20001f48 	.word	0x20001f48

08007de8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dee:	f000 f969 	bl	80080c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d120      	bne.n	8007e3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dfa:	4814      	ldr	r0, [pc, #80]	; (8007e4c <prvCheckForValidListAndQueue+0x64>)
 8007dfc:	f7fd ff64 	bl	8005cc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e00:	4813      	ldr	r0, [pc, #76]	; (8007e50 <prvCheckForValidListAndQueue+0x68>)
 8007e02:	f7fd ff61 	bl	8005cc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e06:	4b13      	ldr	r3, [pc, #76]	; (8007e54 <prvCheckForValidListAndQueue+0x6c>)
 8007e08:	4a10      	ldr	r2, [pc, #64]	; (8007e4c <prvCheckForValidListAndQueue+0x64>)
 8007e0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e0c:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <prvCheckForValidListAndQueue+0x70>)
 8007e0e:	4a10      	ldr	r2, [pc, #64]	; (8007e50 <prvCheckForValidListAndQueue+0x68>)
 8007e10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e12:	2300      	movs	r3, #0
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <prvCheckForValidListAndQueue+0x74>)
 8007e18:	4a11      	ldr	r2, [pc, #68]	; (8007e60 <prvCheckForValidListAndQueue+0x78>)
 8007e1a:	2110      	movs	r1, #16
 8007e1c:	200a      	movs	r0, #10
 8007e1e:	f7fe f86f 	bl	8005f00 <xQueueGenericCreateStatic>
 8007e22:	4603      	mov	r3, r0
 8007e24:	4a08      	ldr	r2, [pc, #32]	; (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e28:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	490b      	ldr	r1, [pc, #44]	; (8007e64 <prvCheckForValidListAndQueue+0x7c>)
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fd42 	bl	80068c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e3c:	f000 f972 	bl	8008124 <vPortExitCritical>
}
 8007e40:	bf00      	nop
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001f4c 	.word	0x20001f4c
 8007e4c:	20001f1c 	.word	0x20001f1c
 8007e50:	20001f30 	.word	0x20001f30
 8007e54:	20001f44 	.word	0x20001f44
 8007e58:	20001f48 	.word	0x20001f48
 8007e5c:	20001ff8 	.word	0x20001ff8
 8007e60:	20001f58 	.word	0x20001f58
 8007e64:	08008924 	.word	0x08008924

08007e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f023 0201 	bic.w	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e98:	4a0c      	ldr	r2, [pc, #48]	; (8007ecc <pxPortInitialiseStack+0x64>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b14      	subs	r3, #20
 8007ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f06f 0202 	mvn.w	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b20      	subs	r3, #32
 8007ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	08007ed1 	.word	0x08007ed1

08007ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <prvTaskExitError+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee2:	d00a      	beq.n	8007efa <prvTaskExitError+0x2a>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <prvTaskExitError+0x28>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60bb      	str	r3, [r7, #8]
}
 8007f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f0e:	bf00      	nop
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0fc      	beq.n	8007f10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	2000000c 	.word	0x2000000c
	...

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	20001a1c 	.word	0x20001a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	; (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f86:	4b46      	ldr	r3, [pc, #280]	; (80080a0 <xPortStartScheduler+0x120>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <xPortStartScheduler+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10a      	bne.n	8007fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fa6:	4b3e      	ldr	r3, [pc, #248]	; (80080a0 <xPortStartScheduler+0x120>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a3f      	ldr	r2, [pc, #252]	; (80080a8 <xPortStartScheduler+0x128>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10a      	bne.n	8007fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fc6:	4b39      	ldr	r3, [pc, #228]	; (80080ac <xPortStartScheduler+0x12c>)
 8007fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	4b31      	ldr	r3, [pc, #196]	; (80080b0 <xPortStartScheduler+0x130>)
 8007fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff4:	e009      	b.n	800800a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ff6:	4b2f      	ldr	r3, [pc, #188]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d0ef      	beq.n	8007ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008016:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <xPortStartScheduler+0x134>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1c3 0307 	rsb	r3, r3, #7
 800801e:	2b04      	cmp	r3, #4
 8008020:	d00a      	beq.n	8008038 <xPortStartScheduler+0xb8>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60bb      	str	r3, [r7, #8]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008038:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <xPortStartScheduler+0x134>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <xPortStartScheduler+0x134>)
 8008040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <xPortStartScheduler+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800804a:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <xPortStartScheduler+0x134>)
 800804c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008056:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <xPortStartScheduler+0x138>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <xPortStartScheduler+0x138>)
 800805c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <xPortStartScheduler+0x138>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <xPortStartScheduler+0x138>)
 8008068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800806e:	f000 f8dd 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <xPortStartScheduler+0x13c>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008078:	f000 f8fc 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <xPortStartScheduler+0x140>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <xPortStartScheduler+0x140>)
 8008082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008088:	f7ff ff66 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800808c:	f7ff f848 	bl	8007120 <vTaskSwitchContext>
	prvTaskExitError();
 8008090:	f7ff ff1e 	bl	8007ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	e000ed00 	.word	0xe000ed00
 80080a4:	410fc271 	.word	0x410fc271
 80080a8:	410fc270 	.word	0x410fc270
 80080ac:	e000e400 	.word	0xe000e400
 80080b0:	20002048 	.word	0x20002048
 80080b4:	2000204c 	.word	0x2000204c
 80080b8:	e000ed20 	.word	0xe000ed20
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	e000ef34 	.word	0xe000ef34

080080c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	607b      	str	r3, [r7, #4]
}
 80080dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <vPortEnterCritical+0x58>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a0d      	ldr	r2, [pc, #52]	; (800811c <vPortEnterCritical+0x58>)
 80080e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <vPortEnterCritical+0x58>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10f      	bne.n	8008110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <vPortEnterCritical+0x5c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <vPortEnterCritical+0x4c>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vPortEnterCritical+0x4a>
	}
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	2000000c 	.word	0x2000000c
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <vPortExitCritical+0x50>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vPortExitCritical+0x24>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	607b      	str	r3, [r7, #4]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <vPortExitCritical+0x50>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	4a09      	ldr	r2, [pc, #36]	; (8008174 <vPortExitCritical+0x50>)
 8008150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <vPortExitCritical+0x42>
 800815a:	2300      	movs	r3, #0
 800815c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	f383 8811 	msr	BASEPRI, r3
}
 8008164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000000c 	.word	0x2000000c
	...

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f7fe ffb6 	bl	8007120 <vTaskSwitchContext>
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f380 8811 	msr	BASEPRI, r0
 80081bc:	bc09      	pop	{r0, r3}
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	f01e 0f10 	tst.w	lr, #16
 80081ca:	bf08      	it	eq
 80081cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d0:	f380 8809 	msr	PSP, r0
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst>:
 80081e0:	20001a1c 	.word	0x20001a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008202:	f7fe fed3 	bl	8006fac <xTaskIncrementTick>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <xPortSysTickHandler+0x40>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	; (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	20000000 	.word	0x20000000
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d914      	bls.n	80082c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <vPortValidateInterruptPriority+0x70>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <vPortValidateInterruptPriority+0x74>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20a      	bcs.n	80082c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <vPortValidateInterruptPriority+0x78>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <vPortValidateInterruptPriority+0x7c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d90a      	bls.n	80082ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	603b      	str	r3, [r7, #0]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <vPortValidateInterruptPriority+0x60>
	}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e3f0 	.word	0xe000e3f0
 80082fc:	20002048 	.word	0x20002048
 8008300:	e000ed0c 	.word	0xe000ed0c
 8008304:	2000204c 	.word	0x2000204c

08008308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008314:	f7fe fd8e 	bl	8006e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008318:	4b5b      	ldr	r3, [pc, #364]	; (8008488 <pvPortMalloc+0x180>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008320:	f000 f920 	bl	8008564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008324:	4b59      	ldr	r3, [pc, #356]	; (800848c <pvPortMalloc+0x184>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8093 	bne.w	8008458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01d      	beq.n	8008374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008338:	2208      	movs	r2, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d014      	beq.n	8008374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f023 0307 	bic.w	r3, r3, #7
 8008350:	3308      	adds	r3, #8
 8008352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <pvPortMalloc+0x6c>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	617b      	str	r3, [r7, #20]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d06e      	beq.n	8008458 <pvPortMalloc+0x150>
 800837a:	4b45      	ldr	r3, [pc, #276]	; (8008490 <pvPortMalloc+0x188>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d869      	bhi.n	8008458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008384:	4b43      	ldr	r3, [pc, #268]	; (8008494 <pvPortMalloc+0x18c>)
 8008386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008388:	4b42      	ldr	r3, [pc, #264]	; (8008494 <pvPortMalloc+0x18c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800838e:	e004      	b.n	800839a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <pvPortMalloc+0xa4>
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f1      	bne.n	8008390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083ac:	4b36      	ldr	r3, [pc, #216]	; (8008488 <pvPortMalloc+0x180>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d050      	beq.n	8008458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2208      	movs	r2, #8
 80083bc:	4413      	add	r3, r2
 80083be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	2308      	movs	r3, #8
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d91f      	bls.n	8008418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <pvPortMalloc+0xf8>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	613b      	str	r3, [r7, #16]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008412:	69b8      	ldr	r0, [r7, #24]
 8008414:	f000 f908 	bl	8008628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <pvPortMalloc+0x188>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <pvPortMalloc+0x188>)
 8008424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008426:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <pvPortMalloc+0x188>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <pvPortMalloc+0x190>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d203      	bcs.n	800843a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008432:	4b17      	ldr	r3, [pc, #92]	; (8008490 <pvPortMalloc+0x188>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <pvPortMalloc+0x190>)
 8008438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <pvPortMalloc+0x184>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	431a      	orrs	r2, r3
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <pvPortMalloc+0x194>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a11      	ldr	r2, [pc, #68]	; (800849c <pvPortMalloc+0x194>)
 8008456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008458:	f7fe fcfa 	bl	8006e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <pvPortMalloc+0x174>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <pvPortMalloc+0x172>
	return pvReturn;
 800847c:	69fb      	ldr	r3, [r7, #28]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20002c10 	.word	0x20002c10
 800848c:	20002c24 	.word	0x20002c24
 8008490:	20002c14 	.word	0x20002c14
 8008494:	20002c08 	.word	0x20002c08
 8008498:	20002c18 	.word	0x20002c18
 800849c:	20002c1c 	.word	0x20002c1c

080084a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04d      	beq.n	800854e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084b2:	2308      	movs	r3, #8
 80084b4:	425b      	negs	r3, r3
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4413      	add	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	4b24      	ldr	r3, [pc, #144]	; (8008558 <vPortFree+0xb8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <vPortFree+0x44>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60fb      	str	r3, [r7, #12]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <vPortFree+0x62>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60bb      	str	r3, [r7, #8]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <vPortFree+0xb8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01e      	beq.n	800854e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11a      	bne.n	800854e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0e      	ldr	r3, [pc, #56]	; (8008558 <vPortFree+0xb8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008528:	f7fe fc84 	bl	8006e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <vPortFree+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4413      	add	r3, r2
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <vPortFree+0xbc>)
 8008538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f000 f874 	bl	8008628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <vPortFree+0xc0>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	4a06      	ldr	r2, [pc, #24]	; (8008560 <vPortFree+0xc0>)
 8008548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800854a:	f7fe fc81 	bl	8006e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20002c24 	.word	0x20002c24
 800855c:	20002c14 	.word	0x20002c14
 8008560:	20002c20 	.word	0x20002c20

08008564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800856a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800856e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008570:	4b27      	ldr	r3, [pc, #156]	; (8008610 <prvHeapInit+0xac>)
 8008572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3307      	adds	r3, #7
 8008582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <prvHeapInit+0xac>)
 8008594:	4413      	add	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <prvHeapInit+0xb0>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <prvHeapInit+0xb0>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085b0:	2208      	movs	r2, #8
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4a15      	ldr	r2, [pc, #84]	; (8008618 <prvHeapInit+0xb4>)
 80085c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <prvHeapInit+0xb4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ce:	4b12      	ldr	r3, [pc, #72]	; (8008618 <prvHeapInit+0xb4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085e4:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <prvHeapInit+0xb4>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <prvHeapInit+0xb8>)
 80085f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4a09      	ldr	r2, [pc, #36]	; (8008620 <prvHeapInit+0xbc>)
 80085fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085fc:	4b09      	ldr	r3, [pc, #36]	; (8008624 <prvHeapInit+0xc0>)
 80085fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20002050 	.word	0x20002050
 8008614:	20002c08 	.word	0x20002c08
 8008618:	20002c10 	.word	0x20002c10
 800861c:	20002c18 	.word	0x20002c18
 8008620:	20002c14 	.word	0x20002c14
 8008624:	20002c24 	.word	0x20002c24

08008628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <prvInsertBlockIntoFreeList+0xac>)
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e002      	b.n	800863c <prvInsertBlockIntoFreeList+0x14>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d8f7      	bhi.n	8008636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	4413      	add	r3, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d108      	bne.n	800866a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d118      	bne.n	80086b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d00d      	beq.n	80086a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	441a      	add	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e008      	b.n	80086b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086a6:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <prvInsertBlockIntoFreeList+0xb0>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e003      	b.n	80086b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d002      	beq.n	80086c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20002c08 	.word	0x20002c08
 80086d8:	20002c10 	.word	0x20002c10

080086dc <memset>:
 80086dc:	4402      	add	r2, r0
 80086de:	4603      	mov	r3, r0
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d100      	bne.n	80086e6 <memset+0xa>
 80086e4:	4770      	bx	lr
 80086e6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ea:	e7f9      	b.n	80086e0 <memset+0x4>

080086ec <_reclaim_reent>:
 80086ec:	4b29      	ldr	r3, [pc, #164]	; (8008794 <_reclaim_reent+0xa8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4283      	cmp	r3, r0
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	d04b      	beq.n	8008790 <_reclaim_reent+0xa4>
 80086f8:	69c3      	ldr	r3, [r0, #28]
 80086fa:	b143      	cbz	r3, 800870e <_reclaim_reent+0x22>
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d144      	bne.n	800878c <_reclaim_reent+0xa0>
 8008702:	69e3      	ldr	r3, [r4, #28]
 8008704:	6819      	ldr	r1, [r3, #0]
 8008706:	b111      	cbz	r1, 800870e <_reclaim_reent+0x22>
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f879 	bl	8008800 <_free_r>
 800870e:	6961      	ldr	r1, [r4, #20]
 8008710:	b111      	cbz	r1, 8008718 <_reclaim_reent+0x2c>
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f874 	bl	8008800 <_free_r>
 8008718:	69e1      	ldr	r1, [r4, #28]
 800871a:	b111      	cbz	r1, 8008722 <_reclaim_reent+0x36>
 800871c:	4620      	mov	r0, r4
 800871e:	f000 f86f 	bl	8008800 <_free_r>
 8008722:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008724:	b111      	cbz	r1, 800872c <_reclaim_reent+0x40>
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f86a 	bl	8008800 <_free_r>
 800872c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872e:	b111      	cbz	r1, 8008736 <_reclaim_reent+0x4a>
 8008730:	4620      	mov	r0, r4
 8008732:	f000 f865 	bl	8008800 <_free_r>
 8008736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008738:	b111      	cbz	r1, 8008740 <_reclaim_reent+0x54>
 800873a:	4620      	mov	r0, r4
 800873c:	f000 f860 	bl	8008800 <_free_r>
 8008740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008742:	b111      	cbz	r1, 800874a <_reclaim_reent+0x5e>
 8008744:	4620      	mov	r0, r4
 8008746:	f000 f85b 	bl	8008800 <_free_r>
 800874a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800874c:	b111      	cbz	r1, 8008754 <_reclaim_reent+0x68>
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f856 	bl	8008800 <_free_r>
 8008754:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008756:	b111      	cbz	r1, 800875e <_reclaim_reent+0x72>
 8008758:	4620      	mov	r0, r4
 800875a:	f000 f851 	bl	8008800 <_free_r>
 800875e:	6a23      	ldr	r3, [r4, #32]
 8008760:	b1b3      	cbz	r3, 8008790 <_reclaim_reent+0xa4>
 8008762:	4620      	mov	r0, r4
 8008764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008768:	4718      	bx	r3
 800876a:	5949      	ldr	r1, [r1, r5]
 800876c:	b941      	cbnz	r1, 8008780 <_reclaim_reent+0x94>
 800876e:	3504      	adds	r5, #4
 8008770:	69e3      	ldr	r3, [r4, #28]
 8008772:	2d80      	cmp	r5, #128	; 0x80
 8008774:	68d9      	ldr	r1, [r3, #12]
 8008776:	d1f8      	bne.n	800876a <_reclaim_reent+0x7e>
 8008778:	4620      	mov	r0, r4
 800877a:	f000 f841 	bl	8008800 <_free_r>
 800877e:	e7c0      	b.n	8008702 <_reclaim_reent+0x16>
 8008780:	680e      	ldr	r6, [r1, #0]
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f83c 	bl	8008800 <_free_r>
 8008788:	4631      	mov	r1, r6
 800878a:	e7ef      	b.n	800876c <_reclaim_reent+0x80>
 800878c:	2500      	movs	r5, #0
 800878e:	e7ef      	b.n	8008770 <_reclaim_reent+0x84>
 8008790:	bd70      	pop	{r4, r5, r6, pc}
 8008792:	bf00      	nop
 8008794:	2000005c 	.word	0x2000005c

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	4d0d      	ldr	r5, [pc, #52]	; (80087d0 <__libc_init_array+0x38>)
 800879c:	4c0d      	ldr	r4, [pc, #52]	; (80087d4 <__libc_init_array+0x3c>)
 800879e:	1b64      	subs	r4, r4, r5
 80087a0:	10a4      	asrs	r4, r4, #2
 80087a2:	2600      	movs	r6, #0
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	4d0b      	ldr	r5, [pc, #44]	; (80087d8 <__libc_init_array+0x40>)
 80087aa:	4c0c      	ldr	r4, [pc, #48]	; (80087dc <__libc_init_array+0x44>)
 80087ac:	f000 f880 	bl	80088b0 <_init>
 80087b0:	1b64      	subs	r4, r4, r5
 80087b2:	10a4      	asrs	r4, r4, #2
 80087b4:	2600      	movs	r6, #0
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	08008a3c 	.word	0x08008a3c
 80087d4:	08008a3c 	.word	0x08008a3c
 80087d8:	08008a3c 	.word	0x08008a3c
 80087dc:	08008a40 	.word	0x08008a40

080087e0 <__retarget_lock_acquire_recursive>:
 80087e0:	4770      	bx	lr

080087e2 <__retarget_lock_release_recursive>:
 80087e2:	4770      	bx	lr

080087e4 <memcpy>:
 80087e4:	440a      	add	r2, r1
 80087e6:	4291      	cmp	r1, r2
 80087e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087ec:	d100      	bne.n	80087f0 <memcpy+0xc>
 80087ee:	4770      	bx	lr
 80087f0:	b510      	push	{r4, lr}
 80087f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087fa:	4291      	cmp	r1, r2
 80087fc:	d1f9      	bne.n	80087f2 <memcpy+0xe>
 80087fe:	bd10      	pop	{r4, pc}

08008800 <_free_r>:
 8008800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008802:	2900      	cmp	r1, #0
 8008804:	d044      	beq.n	8008890 <_free_r+0x90>
 8008806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880a:	9001      	str	r0, [sp, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f1a1 0404 	sub.w	r4, r1, #4
 8008812:	bfb8      	it	lt
 8008814:	18e4      	addlt	r4, r4, r3
 8008816:	f000 f83f 	bl	8008898 <__malloc_lock>
 800881a:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <_free_r+0x94>)
 800881c:	9801      	ldr	r0, [sp, #4]
 800881e:	6813      	ldr	r3, [r2, #0]
 8008820:	b933      	cbnz	r3, 8008830 <_free_r+0x30>
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	6014      	str	r4, [r2, #0]
 8008826:	b003      	add	sp, #12
 8008828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800882c:	f000 b83a 	b.w	80088a4 <__malloc_unlock>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d908      	bls.n	8008846 <_free_r+0x46>
 8008834:	6825      	ldr	r5, [r4, #0]
 8008836:	1961      	adds	r1, r4, r5
 8008838:	428b      	cmp	r3, r1
 800883a:	bf01      	itttt	eq
 800883c:	6819      	ldreq	r1, [r3, #0]
 800883e:	685b      	ldreq	r3, [r3, #4]
 8008840:	1949      	addeq	r1, r1, r5
 8008842:	6021      	streq	r1, [r4, #0]
 8008844:	e7ed      	b.n	8008822 <_free_r+0x22>
 8008846:	461a      	mov	r2, r3
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	b10b      	cbz	r3, 8008850 <_free_r+0x50>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d9fa      	bls.n	8008846 <_free_r+0x46>
 8008850:	6811      	ldr	r1, [r2, #0]
 8008852:	1855      	adds	r5, r2, r1
 8008854:	42a5      	cmp	r5, r4
 8008856:	d10b      	bne.n	8008870 <_free_r+0x70>
 8008858:	6824      	ldr	r4, [r4, #0]
 800885a:	4421      	add	r1, r4
 800885c:	1854      	adds	r4, r2, r1
 800885e:	42a3      	cmp	r3, r4
 8008860:	6011      	str	r1, [r2, #0]
 8008862:	d1e0      	bne.n	8008826 <_free_r+0x26>
 8008864:	681c      	ldr	r4, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	6053      	str	r3, [r2, #4]
 800886a:	440c      	add	r4, r1
 800886c:	6014      	str	r4, [r2, #0]
 800886e:	e7da      	b.n	8008826 <_free_r+0x26>
 8008870:	d902      	bls.n	8008878 <_free_r+0x78>
 8008872:	230c      	movs	r3, #12
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	e7d6      	b.n	8008826 <_free_r+0x26>
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	1961      	adds	r1, r4, r5
 800887c:	428b      	cmp	r3, r1
 800887e:	bf04      	itt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	bf04      	itt	eq
 8008888:	1949      	addeq	r1, r1, r5
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	6054      	str	r4, [r2, #4]
 800888e:	e7ca      	b.n	8008826 <_free_r+0x26>
 8008890:	b003      	add	sp, #12
 8008892:	bd30      	pop	{r4, r5, pc}
 8008894:	20002d64 	.word	0x20002d64

08008898 <__malloc_lock>:
 8008898:	4801      	ldr	r0, [pc, #4]	; (80088a0 <__malloc_lock+0x8>)
 800889a:	f7ff bfa1 	b.w	80087e0 <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	20002d60 	.word	0x20002d60

080088a4 <__malloc_unlock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__malloc_unlock+0x8>)
 80088a6:	f7ff bf9c 	b.w	80087e2 <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	20002d60 	.word	0x20002d60

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
