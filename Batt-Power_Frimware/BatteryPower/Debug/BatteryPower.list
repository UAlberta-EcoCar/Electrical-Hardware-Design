
BatteryPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b0  080073b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  20000010  080073c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  080073c8  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018567  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003595  00000000  00000000  000385ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc4  00000000  00000000  0003d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000331d  00000000  00000000  0003dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016817  00000000  00000000  000412e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbef3  00000000  00000000  00057af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000565c  00000000  00000000  001339ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00139048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007300 	.word	0x08007300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007300 	.word	0x08007300

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN PFP */

uint32_t conversion_completed = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d104      	bne.n	80004ea <HAL_ADC_ConvCpltCallback+0x1e>
    conversion_completed++;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e8:	6013      	str	r3, [r2, #0]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000268 	.word	0x20000268

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc91 	bl	8000e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f81e 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f996 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f976 	bl	8000800 <MX_DMA_Init>
  MX_CAN1_Init();
 8000514:	f000 f90e 	bl	8000734 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f942 	bl	80007a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800051c:	f000 f866 	bl	80005ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f004 f966 	bl	80047f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of pull_sensor */
  pull_sensorHandle = osThreadNew(StartAdcTask, NULL, &pull_sensor_attributes);
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x3c>)
 8000526:	2100      	movs	r1, #0
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0x40>)
 800052a:	f004 f9ab 	bl	8004884 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <main+0x44>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f004 f980 	bl	8004838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x38>
 800053a:	bf00      	nop
 800053c:	0800733c 	.word	0x0800733c
 8000540:	0800090d 	.word	0x0800090d
 8000544:	20000188 	.word	0x20000188

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fe98 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f002 fb05 	bl	8002b7c <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 fa90 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800057c:	2310      	movs	r3, #16
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000598:	2314      	movs	r3, #20
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fb3b 	bl	8002c28 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005b8:	f000 fa70 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2102      	movs	r1, #2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ff3b 	bl	8003450 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e0:	f000 fa5c 	bl	8000a9c <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	; 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000604:	4a45      	ldr	r2, [pc, #276]	; (800071c <MX_ADC1_Init+0x130>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b43      	ldr	r3, [pc, #268]	; (8000718 <MX_ADC1_Init+0x12c>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b42      	ldr	r3, [pc, #264]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <MX_ADC1_Init+0x12c>)
 800061c:	2201      	movs	r2, #1
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000622:	2204      	movs	r2, #4
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000628:	2200      	movs	r2, #0
 800062a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <MX_ADC1_Init+0x12c>)
 800062e:	2200      	movs	r2, #0
 8000630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000634:	2205      	movs	r2, #5
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <MX_ADC1_Init+0x12c>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b34      	ldr	r3, [pc, #208]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <MX_ADC1_Init+0x12c>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <MX_ADC1_Init+0x12c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000662:	482d      	ldr	r0, [pc, #180]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000664:	f000 fe1e 	bl	80012a4 <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 fa15 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_ADC1_Init+0x134>)
 8000674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000676:	2306      	movs	r3, #6
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067e:	237f      	movs	r3, #127	; 0x7f
 8000680:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000682:	2304      	movs	r3, #4
 8000684:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4822      	ldr	r0, [pc, #136]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000690:	f000 ffe2 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 f9ff 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_ADC1_Init+0x138>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a2:	230c      	movs	r3, #12
 80006a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <MX_ADC1_Init+0x12c>)
 80006ac:	f000 ffd4 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80006b6:	f000 f9f1 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_ADC1_Init+0x13c>)
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006be:	2312      	movs	r3, #18
 80006c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <MX_ADC1_Init+0x12c>)
 80006c8:	f000 ffc6 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80006d2:	f000 f9e3 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ADC1_Init+0x140>)
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006da:	2318      	movs	r3, #24
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x12c>)
 80006e4:	f000 ffb8 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80006ee:	f000 f9d5 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_ADC1_Init+0x144>)
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0x12c>)
 8000702:	f000 ffa9 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 800070c:	f000 f9c6 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000002c 	.word	0x2000002c
 800071c:	50040000 	.word	0x50040000
 8000720:	19200040 	.word	0x19200040
 8000724:	1d500080 	.word	0x1d500080
 8000728:	21800100 	.word	0x21800100
 800072c:	25b00200 	.word	0x25b00200
 8000730:	2a000400 	.word	0x2a000400

08000734 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_CAN1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_CAN1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_CAN1_Init+0x64>)
 8000740:	2210      	movs	r2, #16
 8000742:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_CAN1_Init+0x64>)
 8000752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000756:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_CAN1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_CAN1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_CAN1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_CAN1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CAN1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_CAN1_Init+0x64>)
 8000784:	f001 fc64 	bl	8002050 <HAL_CAN_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 f985 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000d8 	.word	0x200000d8
 800079c:	40006400 	.word	0x40006400

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f003 fb40 	bl	8003e68 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f955 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000100 	.word	0x20000100
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_DMA_Init+0x38>)
 8000808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <MX_DMA_Init+0x38>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6493      	str	r3, [r2, #72]	; 0x48
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_DMA_Init+0x38>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f001 fdeb 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f001 fe04 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a24      	ldr	r2, [pc, #144]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPLED1_Pin|GPLED2_Pin|GPLED3_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2138      	movs	r1, #56	; 0x38
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <MX_GPIO_Init+0xc8>)
 80008a0:	f002 f946 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_GPIO_Init+0xcc>)
 80008bc:	f001 ffce 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 80008c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 ffc0 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLED1_Pin GPLED2_Pin GPLED3_Pin */
  GPIO_InitStruct.Pin = GPLED1_Pin|GPLED2_Pin|GPLED3_Pin;
 80008dc:	2338      	movs	r3, #56	; 0x38
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0xc8>)
 80008f4:	f001 ffb2 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400
 8000908:	48000800 	.word	0x48000800

0800090c <StartAdcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const float ADC_VOLT_REF = 3.3f / 4096.0f;
 8000914:	4b59      	ldr	r3, [pc, #356]	; (8000a7c <StartAdcTask+0x170>)
 8000916:	61bb      	str	r3, [r7, #24]
	const float VOLT_TO_CURR = 2.5f; //A/V
 8000918:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <StartAdcTask+0x174>)
 800091a:	617b      	str	r3, [r7, #20]
	const float BATTERY_VOLT_DIVIDER = 10.8f; // voltage divider input 18.5v/ output 1.7123412v
 800091c:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <StartAdcTask+0x178>)
 800091e:	613b      	str	r3, [r7, #16]
	const float OUTPUT_VOLT_DIVIDER = 7.1f; // voltage divider input 12v/ output 1.68862275v
 8000920:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <StartAdcTask+0x17c>)
 8000922:	60fb      	str	r3, [r7, #12]
	memset(adcResults, 0, 5);
 8000924:	2205      	movs	r2, #5
 8000926:	2100      	movs	r1, #0
 8000928:	4858      	ldr	r0, [pc, #352]	; (8000a8c <StartAdcTask+0x180>)
 800092a:	f006 fcaf 	bl	800728c <memset>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 800092e:	2205      	movs	r2, #5
 8000930:	4956      	ldr	r1, [pc, #344]	; (8000a8c <StartAdcTask+0x180>)
 8000932:	4857      	ldr	r0, [pc, #348]	; (8000a90 <StartAdcTask+0x184>)
 8000934:	f000 fdf8 	bl	8001528 <HAL_ADC_Start_DMA>
	int i = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	  if (conversion_completed) {
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <StartAdcTask+0x188>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	f000 8096 	beq.w	8000a72 <StartAdcTask+0x166>
		  battery_board_data[i].batt_volt = adcResults[0] * ADC_VOLT_REF * BATTERY_VOLT_DIVIDER;
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <StartAdcTask+0x180>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000952:	edd7 7a06 	vldr	s15, [r7, #24]
 8000956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800095a:	edd7 7a04 	vldr	s15, [r7, #16]
 800095e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000966:	ee17 0a90 	vmov	r0, s15
 800096a:	494b      	ldr	r1, [pc, #300]	; (8000a98 <StartAdcTask+0x18c>)
 800096c:	69fa      	ldr	r2, [r7, #28]
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	6018      	str	r0, [r3, #0]
		  battery_board_data[i].batt_cur = adcResults[1] * ADC_VOLT_REF * VOLT_TO_CURR;
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <StartAdcTask+0x180>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000986:	edd7 7a06 	vldr	s15, [r7, #24]
 800098a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800098e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099a:	ee17 0a90 	vmov	r0, s15
 800099e:	493e      	ldr	r1, [pc, #248]	; (8000a98 <StartAdcTask+0x18c>)
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	3304      	adds	r3, #4
 80009ae:	6018      	str	r0, [r3, #0]
		  battery_board_data[i].output_cur = adcResults[2] * ADC_VOLT_REF * VOLT_TO_CURR;
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <StartAdcTask+0x180>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	ee07 3a90 	vmov	s15, r3
 80009b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80009c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80009c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d0:	ee17 0a90 	vmov	r0, s15
 80009d4:	4930      	ldr	r1, [pc, #192]	; (8000a98 <StartAdcTask+0x18c>)
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	4613      	mov	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	440b      	add	r3, r1
 80009e2:	330c      	adds	r3, #12
 80009e4:	6018      	str	r0, [r3, #0]
		  battery_board_data[i].output_volt = adcResults[3] * ADC_VOLT_REF * OUTPUT_VOLT_DIVIDER;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <StartAdcTask+0x180>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a06:	ee17 0a90 	vmov	r0, s15
 8000a0a:	4923      	ldr	r1, [pc, #140]	; (8000a98 <StartAdcTask+0x18c>)
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	6018      	str	r0, [r3, #0]
		  battery_board_data[i].output_cur = adcResults[4] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <StartAdcTask+0x180>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a28:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	ee17 0a90 	vmov	r0, s15
 8000a40:	4915      	ldr	r1, [pc, #84]	; (8000a98 <StartAdcTask+0x18c>)
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	330c      	adds	r3, #12
 8000a50:	6018      	str	r0, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 8000a52:	2205      	movs	r2, #5
 8000a54:	490d      	ldr	r1, [pc, #52]	; (8000a8c <StartAdcTask+0x180>)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <StartAdcTask+0x184>)
 8000a58:	f000 fd66 	bl	8001528 <HAL_ADC_Start_DMA>
		  conversion_completed = 0;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <StartAdcTask+0x188>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		  i++;
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
		  if (i >= 10){
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	2b09      	cmp	r3, #9
 8000a6c:	dd01      	ble.n	8000a72 <StartAdcTask+0x166>
			  i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
		  }
	  }
	  osDelay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f003 ff98 	bl	80049a8 <osDelay>
	  if (conversion_completed) {
 8000a78:	e760      	b.n	800093c <StartAdcTask+0x30>
 8000a7a:	bf00      	nop
 8000a7c:	3a533333 	.word	0x3a533333
 8000a80:	40200000 	.word	0x40200000
 8000a84:	412ccccd 	.word	0x412ccccd
 8000a88:	40e33333 	.word	0x40e33333
 8000a8c:	20000254 	.word	0x20000254
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	20000268 	.word	0x20000268
 8000a98:	2000018c 	.word	0x2000018c

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x4c>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f001 fc8a 	bl	80023fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	; 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2254      	movs	r2, #84	; 0x54
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 fbb7 	bl	800728c <memset>
  if(hadc->Instance==ADC1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a3b      	ldr	r2, [pc, #236]	; (8000c10 <HAL_ADC_MspInit+0x118>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d16e      	bne.n	8000c06 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fe9e 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b62:	f7ff ff9b 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_ADC_MspInit+0x11c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ACD_Battery_Voltage_Pin|Battery_Curr_Pin|Current_Out_12V_Pin|ADC_12V_Voltage_Out_Pin
 8000b96:	233e      	movs	r3, #62	; 0x3e
 8000b98:	667b      	str	r3, [r7, #100]	; 0x64
                          |Current_Buck_12V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f001 fe56 	bl	800285c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_ADC_MspInit+0x124>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000be0:	2220      	movs	r2, #32
 8000be2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bec:	f001 fc3e 	bl	800246c <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000bf6:	f7ff ff51 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000bfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_ADC_MspInit+0x120>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3778      	adds	r7, #120	; 0x78
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	50040000 	.word	0x50040000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	20000090 	.word	0x20000090
 8000c1c:	40020008 	.word	0x40020008

08000c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d129      	bne.n	8000c96 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c84:	2309      	movs	r3, #9
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f001 fde3 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40006400 	.word	0x40006400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	; 0x78
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2254      	movs	r2, #84	; 0x54
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 fadf 	bl	800728c <memset>
  if(huart->Instance==USART1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <HAL_UART_MspInit+0xa4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d135      	bne.n	8000d44 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fdd7 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf0:	f7ff fed4 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d24:	23c0      	movs	r3, #192	; 0xc0
 8000d26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0xac>)
 8000d40:	f001 fd8c 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3778      	adds	r7, #120	; 0x78
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8a4 	bl	8000ed4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d8c:	f005 fa1a 	bl	80061c4 <xTaskGetSchedulerState>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d001      	beq.n	8000d9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d96:	f005 ffff 	bl	8006d98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA1_Channel1_IRQHandler+0x10>)
 8000da6:	f001 fc79 	bl	800269c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000090 	.word	0x20000090

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f006 fa49 	bl	800729c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0a:	f7ff fb79 	bl	8000500 <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e1c:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8000e20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e24:	20001b78 	.word	0x20001b78

08000e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_IRQHandler>

08000e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f001 fad7 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f80e 	bl	8000e5c <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e001      	b.n	8000e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4c:	f7ff fe2c 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d023      	beq.n	8000eb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_InitTick+0x70>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fae3 	bl	8002452 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10f      	bne.n	8000eb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d809      	bhi.n	8000eac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f001 faad 	bl	80023fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0x74>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e004      	b.n	8000ebc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e001      	b.n	8000ebc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000026c 	.word	0x2000026c

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000026c 	.word	0x2000026c

08000f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3360      	adds	r3, #96	; 0x60
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LL_ADC_SetOffset+0x44>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	03fff000 	.word	0x03fff000

08000fc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3360      	adds	r3, #96	; 0x60
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3360      	adds	r3, #96	; 0x60
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	431a      	orrs	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800101a:	bf00      	nop
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3330      	adds	r3, #48	; 0x30
 800105c:	461a      	mov	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	4413      	add	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	211f      	movs	r1, #31
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0e9b      	lsrs	r3, r3, #26
 8001084:	f003 011f 	and.w	r1, r3, #31
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3314      	adds	r3, #20
 80010b4:	461a      	mov	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	0e5b      	lsrs	r3, r3, #25
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0d1b      	lsrs	r3, r3, #20
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2107      	movs	r1, #7
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	401a      	ands	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	0d1b      	lsrs	r3, r3, #20
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0318 	and.w	r3, r3, #24
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001120:	40d9      	lsrs	r1, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	400b      	ands	r3, r1
 8001126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800112a:	431a      	orrs	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	0007ffff 	.word	0x0007ffff

08001144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6093      	str	r3, [r2, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800117c:	d101      	bne.n	8001182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011cc:	d101      	bne.n	80011d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <LL_ADC_IsEnabled+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_ADC_IsEnabled+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800123e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001242:	f043 0204 	orr.w	r2, r3, #4
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	2b04      	cmp	r3, #4
 8001268:	d101      	bne.n	800126e <LL_ADC_REG_IsConversionOngoing+0x18>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b08      	cmp	r3, #8
 800128e:	d101      	bne.n	8001294 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e126      	b.n	800150c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fc13 	bl	8000af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff3f 	bl	8001168 <LL_ADC_IsDeepPowerDownEnabled>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff25 	bl	8001144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff5a 	bl	80011b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d115      	bne.n	8001336 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff3e 	bl	8001190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001314:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_ADC_Init+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	099b      	lsrs	r3, r3, #6
 800131a:	4a7f      	ldr	r2, [pc, #508]	; (8001518 <HAL_ADC_Init+0x274>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	3301      	adds	r3, #1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001328:	e002      	b.n	8001330 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3b01      	subs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff3c 	bl	80011b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10d      	bne.n	8001362 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff75 	bl	8001256 <LL_ADC_REG_IsConversionOngoing>
 800136c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80bf 	bne.w	80014fa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80bb 	bne.w	80014fa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff35 	bl	8001208 <LL_ADC_IsEnabled>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013a4:	485d      	ldr	r0, [pc, #372]	; (800151c <HAL_ADC_Init+0x278>)
 80013a6:	f7ff ff2f 	bl	8001208 <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4619      	mov	r1, r3
 80013b6:	485a      	ldr	r0, [pc, #360]	; (8001520 <HAL_ADC_Init+0x27c>)
 80013b8:	f7ff fdac 	bl	8000f14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e5b      	ldrb	r3, [r3, #25]
 80013c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d106      	bne.n	80013f8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	3b01      	subs	r3, #1
 80013f0:	045b      	lsls	r3, r3, #17
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <HAL_ADC_Init+0x280>)
 800141c:	4013      	ands	r3, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	430b      	orrs	r3, r1
 8001426:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff25 	bl	800127c <LL_ADC_INJ_IsConversionOngoing>
 8001432:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d13d      	bne.n	80014b6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d13a      	bne.n	80014b6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001444:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800145c:	f023 0302 	bic.w	r3, r3, #2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	69b9      	ldr	r1, [r7, #24]
 8001466:	430b      	orrs	r3, r1
 8001468:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001470:	2b01      	cmp	r3, #1
 8001472:	d118      	bne.n	80014a6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800148a:	4311      	orrs	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001490:	4311      	orrs	r1, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001496:	430a      	orrs	r2, r1
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	e007      	b.n	80014b6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10c      	bne.n	80014d8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f023 010f 	bic.w	r1, r3, #15
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
 80014d6:	e007      	b.n	80014e8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020f 	bic.w	r2, r2, #15
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	f023 0303 	bic.w	r3, r3, #3
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
 80014f8:	e007      	b.n	800150a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fe:	f043 0210 	orr.w	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800150a:	7ffb      	ldrb	r3, [r7, #31]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	053e2d63 	.word	0x053e2d63
 800151c:	50040000 	.word	0x50040000
 8001520:	50040300 	.word	0x50040300
 8001524:	fff0c007 	.word	0xfff0c007

08001528 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe8c 	bl	8001256 <LL_ADC_REG_IsConversionOngoing>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d167      	bne.n	8001614 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Start_DMA+0x2a>
 800154e:	2302      	movs	r3, #2
 8001550:	e063      	b.n	800161a <HAL_ADC_Start_DMA+0xf2>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fc5e 	bl	8001e1c <ADC_Enable>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d14f      	bne.n	800160a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f023 0206 	bic.w	r2, r3, #6
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	659a      	str	r2, [r3, #88]	; 0x58
 8001596:	e002      	b.n	800159e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_ADC_Start_DMA+0xfc>)
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_ADC_Start_DMA+0x100>)
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_ADC_Start_DMA+0x104>)
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	221c      	movs	r2, #28
 80015bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0210 	orr.w	r2, r2, #16
 80015d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3340      	adds	r3, #64	; 0x40
 80015f0:	4619      	mov	r1, r3
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f000 fff1 	bl	80025dc <HAL_DMA_Start_IT>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe13 	bl	800122e <LL_ADC_REG_StartConversion>
 8001608:	e006      	b.n	8001618 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001612:	e001      	b.n	8001618 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001614:	2302      	movs	r3, #2
 8001616:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001618:	7dfb      	ldrb	r3, [r7, #23]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	08001f29 	.word	0x08001f29
 8001628:	08002001 	.word	0x08002001
 800162c:	0800201d 	.word	0x0800201d

08001630 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0b6      	sub	sp, #216	; 0xd8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x22>
 8001676:	2302      	movs	r3, #2
 8001678:	e3bb      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x79a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fde5 	bl	8001256 <LL_ADC_REG_IsConversionOngoing>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 83a0 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d824      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	3b02      	subs	r3, #2
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d81b      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x8e>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <HAL_ADC_ConfigChannel+0x5c>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	080016cd 	.word	0x080016cd
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016dd 	.word	0x080016dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80016c4:	230c      	movs	r3, #12
 80016c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016ca:	e010      	b.n	80016ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80016cc:	2312      	movs	r3, #18
 80016ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016d2:	e00c      	b.n	80016ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80016d4:	2318      	movs	r3, #24
 80016d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016da:	e008      	b.n	80016ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80016dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016e4:	e003      	b.n	80016ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80016e6:	2306      	movs	r3, #6
 80016e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80016fc:	f7ff fca6 	bl	800104c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fda6 	bl	8001256 <LL_ADC_REG_IsConversionOngoing>
 800170a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fdb2 	bl	800127c <LL_ADC_INJ_IsConversionOngoing>
 8001718:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800171c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 81a4 	bne.w	8001a6e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 819f 	bne.w	8001a6e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	461a      	mov	r2, r3
 800173e:	f7ff fcb1 	bl	80010a4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00a      	beq.n	800177a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6919      	ldr	r1, [r3, #16]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001774:	f7ff fc02 	bl	8000f7c <LL_ADC_SetOffset>
 8001778:	e179      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fc1f 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x14e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc14 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	e01e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x18c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc09 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80017d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1a4>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	e018      	b.n	800182e <HAL_ADC_ConfigChannel+0x1d6>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e004      	b.n	800182e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbd8 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fbbc 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x214>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fbb1 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	e01e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x252>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fba6 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800188a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800189e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x26a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	e018      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x29c>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80018d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80018de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80018e6:	2320      	movs	r3, #32
 80018e8:	e004      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80018ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d106      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb75 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fb59 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x2da>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb4e 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	e01e      	b.n	8001970 <HAL_ADC_ConfigChannel+0x318>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2102      	movs	r1, #2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fb43 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e004      	b.n	800196e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x330>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	e014      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x35a>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800199c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e004      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80019a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d106      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb16 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2103      	movs	r1, #3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fafa 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10a      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x398>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff faef 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	e017      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x3c8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2103      	movs	r1, #3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fae4 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a12:	2320      	movs	r3, #32
 8001a14:	e003      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x3e0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	e011      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x404>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e003      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2103      	movs	r1, #3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fac1 	bl	8000ff0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fbc8 	bl	8001208 <LL_ADC_IsEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8140 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f7ff fb35 	bl	80010fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4a8f      	ldr	r2, [pc, #572]	; (8001cd4 <HAL_ADC_ConfigChannel+0x67c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f040 8131 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x46e>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2b09      	cmp	r3, #9
 8001abc:	bf94      	ite	ls
 8001abe:	2301      	movls	r3, #1
 8001ac0:	2300      	movhi	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e019      	b.n	8001afa <HAL_ADC_ConfigChannel+0x4a2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e003      	b.n	8001aea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d079      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x4c2>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b18:	e015      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x4ee>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	069b      	lsls	r3, r3, #26
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x50e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	e017      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x53e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e003      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	ea42 0103 	orr.w	r1, r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x564>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	3301      	adds	r3, #1
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	051b      	lsls	r3, r3, #20
 8001bba:	e018      	b.n	8001bee <HAL_ADC_ConfigChannel+0x596>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 021f 	and.w	r2, r3, #31
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	e081      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x5b6>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	3301      	adds	r3, #1
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0c:	e015      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5e2>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x602>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	e017      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x632>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	61bb      	str	r3, [r7, #24]
  return result;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e003      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x65e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 021f 	and.w	r2, r3, #31
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x69c>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
  return result;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e006      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x688>
 8001cd2:	bf00      	nop
 8001cd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	3b1e      	subs	r3, #30
 8001cee:	051b      	lsls	r3, r3, #20
 8001cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7ff f9d2 	bl	80010a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_ADC_ConfigChannel+0x7a4>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06c      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d0c:	483c      	ldr	r0, [pc, #240]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d0e:	f7ff f927 	bl	8000f60 <LL_ADC_GetCommonPathInternalCh>
 8001d12:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3a      	ldr	r2, [pc, #232]	; (8001e04 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d127      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d121      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d157      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482f      	ldr	r0, [pc, #188]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d42:	f7ff f8fa 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_ADC_ConfigChannel+0x7b4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_ADC_ConfigChannel+0x7b8>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d6e:	e03a      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d9c:	f7ff f8cd 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da0:	e021      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d11c      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ADC_ConfigChannel+0x7b0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d111      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a8>)
 8001dce:	f7ff f8b4 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
 8001dd2:	e008      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	37d8      	adds	r7, #216	; 0xd8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	80080000 	.word	0x80080000
 8001e00:	50040300 	.word	0x50040300
 8001e04:	c7520000 	.word	0xc7520000
 8001e08:	50040000 	.word	0x50040000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	053e2d63 	.word	0x053e2d63
 8001e14:	cb840000 	.word	0xcb840000
 8001e18:	80000001 	.word	0x80000001

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f9eb 	bl	8001208 <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d169      	bne.n	8001f0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <ADC_Enable+0xfc>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e055      	b.n	8001f0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f9ba 	bl	80011e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e6c:	482b      	ldr	r0, [pc, #172]	; (8001f1c <ADC_Enable+0x100>)
 8001e6e:	f7ff f877 	bl	8000f60 <LL_ADC_GetCommonPathInternalCh>
 8001e72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <ADC_Enable+0x104>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <ADC_Enable+0x108>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e96:	e002      	b.n	8001e9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f82a 	bl	8000efc <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eaa:	e028      	b.n	8001efe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f9a9 	bl	8001208 <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f98d 	bl	80011e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec6:	f7ff f819 	bl	8000efc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d914      	bls.n	8001efe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d00d      	beq.n	8001efe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d1cf      	bne.n	8001eac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	8000003f 	.word	0x8000003f
 8001f1c:	50040300 	.word	0x50040300
 8001f20:	20000000 	.word	0x20000000
 8001f24:	053e2d63 	.word	0x053e2d63

08001f28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d14b      	bne.n	8001fda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d021      	beq.n	8001fa0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f860 	bl	8001026 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d032      	beq.n	8001fd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d12b      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f9e:	e018      	b.n	8001fd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d111      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7fe fa7a 	bl	80004cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fd8:	e00e      	b.n	8001ff8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fb2c 	bl	8001644 <HAL_ADC_ErrorCallback>
}
 8001fec:	e004      	b.n	8001ff8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fb0e 	bl	8001630 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fafe 	bl	8001644 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0ed      	b.n	800223e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fdd6 	bl	8000c20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002084:	f7fe ff3a 	bl	8000efc <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800208a:	e012      	b.n	80020b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800208c:	f7fe ff36 	bl	8000efc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b0a      	cmp	r3, #10
 8002098:	d90b      	bls.n	80020b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0c5      	b.n	800223e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0e5      	beq.n	800208c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0202 	bic.w	r2, r2, #2
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d0:	f7fe ff14 	bl	8000efc <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020d6:	e012      	b.n	80020fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d8:	f7fe ff10 	bl	8000efc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d90b      	bls.n	80020fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e09f      	b.n	800223e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e5      	bne.n	80020d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7e5b      	ldrb	r3, [r3, #25]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e007      	b.n	8002160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e9b      	ldrb	r3, [r3, #26]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7edb      	ldrb	r3, [r3, #27]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0210 	orr.w	r2, r2, #16
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7f1b      	ldrb	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0208 	orr.w	r2, r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7f5b      	ldrb	r3, [r3, #29]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0204 	bic.w	r2, r2, #4
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff3e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff31 	bl	80022ac <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e098      	b.n	80025b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_DMA_Init+0x150>)
 8002486:	429a      	cmp	r2, r3
 8002488:	d80f      	bhi.n	80024aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_DMA_Init+0x154>)
 8002492:	4413      	add	r3, r2
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_DMA_Init+0x158>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a48      	ldr	r2, [pc, #288]	; (80025c8 <HAL_DMA_Init+0x15c>)
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
 80024a8:	e00e      	b.n	80024c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_DMA_Init+0x160>)
 80024b2:	4413      	add	r3, r2
 80024b4:	4a43      	ldr	r2, [pc, #268]	; (80025c4 <HAL_DMA_Init+0x158>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	009a      	lsls	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_DMA_Init+0x164>)
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002522:	d039      	beq.n	8002598 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_DMA_Init+0x15c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d11a      	bne.n	8002564 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_DMA_Init+0x168>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 031c 	and.w	r3, r3, #28
 800253a:	210f      	movs	r1, #15
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <HAL_DMA_Init+0x168>)
 8002544:	4013      	ands	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_DMA_Init+0x168>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f003 031c 	and.w	r3, r3, #28
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	491d      	ldr	r1, [pc, #116]	; (80025d4 <HAL_DMA_Init+0x168>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
 8002562:	e019      	b.n	8002598 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f003 031c 	and.w	r3, r3, #28
 8002570:	210f      	movs	r1, #15
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	4917      	ldr	r1, [pc, #92]	; (80025d8 <HAL_DMA_Init+0x16c>)
 800257a:	4013      	ands	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f003 031c 	and.w	r3, r3, #28
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	4911      	ldr	r1, [pc, #68]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40020407 	.word	0x40020407
 80025c0:	bffdfff8 	.word	0xbffdfff8
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	40020000 	.word	0x40020000
 80025cc:	bffdfbf8 	.word	0xbffdfbf8
 80025d0:	40020400 	.word	0x40020400
 80025d4:	400200a8 	.word	0x400200a8
 80025d8:	400204a8 	.word	0x400204a8

080025dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_DMA_Start_IT+0x20>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e04b      	b.n	8002694 <HAL_DMA_Start_IT+0xb8>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d13a      	bne.n	8002686 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f8e0 	bl	80027fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 020e 	orr.w	r2, r2, #14
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00f      	b.n	8002674 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 020a 	orr.w	r2, r2, #10
 8002672:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e005      	b.n	8002692 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f003 031c 	and.w	r3, r3, #28
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d026      	beq.n	8002716 <HAL_DMA_IRQHandler+0x7a>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d021      	beq.n	8002716 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 021c 	and.w	r2, r3, #28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2104      	movs	r1, #4
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b00      	cmp	r3, #0
 800270a:	d071      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002714:	e06c      	b.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 031c 	and.w	r3, r3, #28
 800271e:	2202      	movs	r2, #2
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02e      	beq.n	8002788 <HAL_DMA_IRQHandler+0xec>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d029      	beq.n	8002788 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020a 	bic.w	r2, r2, #10
 8002750:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 021c 	and.w	r2, r3, #28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2102      	movs	r1, #2
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d038      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002786:	e033      	b.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 031c 	and.w	r3, r3, #28
 8002790:	2208      	movs	r2, #8
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02a      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d025      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 020e 	bic.w	r2, r2, #14
 80027b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 021c 	and.w	r2, r3, #28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
}
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f003 021c 	and.w	r2, r3, #28
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d108      	bne.n	800283e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800283c:	e007      	b.n	800284e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286a:	e148      	b.n	8002afe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 813a 	beq.w	8002af8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d005      	beq.n	800289c <HAL_GPIO_Init+0x40>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d130      	bne.n	80028fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d2:	2201      	movs	r2, #1
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0201 	and.w	r2, r3, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b03      	cmp	r3, #3
 8002908:	d017      	beq.n	800293a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d123      	bne.n	800298e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	6939      	ldr	r1, [r7, #16]
 800298a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0203 	and.w	r2, r3, #3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8094 	beq.w	8002af8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_GPIO_Init+0x2c0>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_GPIO_Init+0x2c0>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6613      	str	r3, [r2, #96]	; 0x60
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x2c0>)
 80029de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029e8:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x2c4>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a12:	d00d      	beq.n	8002a30 <HAL_GPIO_Init+0x1d4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a43      	ldr	r2, [pc, #268]	; (8002b24 <HAL_GPIO_Init+0x2c8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_Init+0x1d0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_GPIO_Init+0x2cc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_GPIO_Init+0x1cc>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e004      	b.n	8002a32 <HAL_GPIO_Init+0x1d6>
 8002a28:	2307      	movs	r3, #7
 8002a2a:	e002      	b.n	8002a32 <HAL_GPIO_Init+0x1d6>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_GPIO_Init+0x1d6>
 8002a30:	2300      	movs	r3, #0
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	f002 0203 	and.w	r2, r2, #3
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	4093      	lsls	r3, r2
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a42:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_GPIO_Init+0x2c4>)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a74:	4a2d      	ldr	r2, [pc, #180]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f aeaf 	bne.w	800286c <HAL_GPIO_Init+0x10>
  }
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40007000 	.word	0x40007000

08002b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8a:	d130      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b98:	d038      	beq.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2232      	movs	r2, #50	; 0x32
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc0:	e002      	b.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	d102      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f2      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be8:	d110      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d007      	beq.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	20000000 	.word	0x20000000
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f000 bc02 	b.w	8003440 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3c:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c46:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80e4 	beq.w	8002e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4c>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	f040 808b 	bne.w	8002d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 8087 	bne.w	8002d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c74:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x64>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e3d9      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x7e>
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_OscConfig+0x8a>
 8002ca6:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d223      	bcs.n	8002cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fd8c 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e3ba      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	496d      	ldr	r1, [pc, #436]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce8:	4b6b      	ldr	r3, [pc, #428]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	4968      	ldr	r1, [pc, #416]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
 8002cfc:	e025      	b.n	8002d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfe:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4960      	ldr	r1, [pc, #384]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1c:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	495b      	ldr	r1, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fd4c 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e37a      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4a:	f000 fc81 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4950      	ldr	r1, [pc, #320]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a4e      	ldr	r2, [pc, #312]	; (8002ea0 <HAL_RCC_OscConfig+0x278>)
 8002d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f874 	bl	8000e5c <HAL_InitTick>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d052      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	e35e      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d032      	beq.n	8002df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d8a:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a42      	ldr	r2, [pc, #264]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d96:	f7fe f8b1 	bl	8000efc <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9e:	f7fe f8ad 	bl	8000efc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e347      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	f043 0308 	orr.w	r3, r3, #8
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4930      	ldr	r1, [pc, #192]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	492b      	ldr	r1, [pc, #172]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
 8002dee:	e01a      	b.n	8002e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f87e 	bl	8000efc <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e04:	f7fe f87a 	bl	8000efc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e314      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1dc>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d073      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_OscConfig+0x21c>
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d10e      	bne.n	8002e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d063      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2f0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d15f      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e2f1      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x24c>
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e025      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d114      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x280>
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a02      	ldr	r2, [pc, #8]	; (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e013      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08007360 	.word	0x08007360
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9f      	ldr	r2, [pc, #636]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b9d      	ldr	r3, [pc, #628]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9c      	ldr	r2, [pc, #624]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f818 	bl	8000efc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe f814 	bl	8000efc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e2ae      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	4b92      	ldr	r3, [pc, #584]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2a8>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f804 	bl	8000efc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f800 	bl	8000efc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e29a      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0a:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2d0>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d060      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x310>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d116      	bne.n	8002f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	4b7c      	ldr	r3, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x328>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e277      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f50:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	4973      	ldr	r1, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	e040      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d023      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fd ffbf 	bl	8000efc <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fd ffbb 	bl	8000efc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e255      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	495f      	ldr	r1, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e018      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd ff9b 	bl	8000efc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fd ff97 	bl	8000efc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e231      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03c      	beq.n	800306e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003002:	4a4a      	ldr	r2, [pc, #296]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fd ff76 	bl	8000efc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd ff72 	bl	8000efc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e20c      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCC_OscConfig+0x3ec>
 8003034:	e01b      	b.n	800306e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303c:	4a3b      	ldr	r2, [pc, #236]	; (800312c <HAL_RCC_OscConfig+0x504>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd ff59 	bl	8000efc <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7fd ff55 	bl	8000efc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1ef      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a6 	beq.w	80031c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6593      	str	r3, [r2, #88]	; 0x58
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_RCC_OscConfig+0x504>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_RCC_OscConfig+0x508>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d118      	bne.n	80030e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_OscConfig+0x508>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_RCC_OscConfig+0x508>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c0:	f7fd ff1c 	bl	8000efc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fd ff18 	bl	8000efc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1b2      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_RCC_OscConfig+0x508>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x4d8>
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_OscConfig+0x504>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	4a0d      	ldr	r2, [pc, #52]	; (800312c <HAL_RCC_OscConfig+0x504>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fe:	e029      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d115      	bne.n	8003134 <HAL_RCC_OscConfig+0x50c>
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_RCC_OscConfig+0x504>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a03      	ldr	r2, [pc, #12]	; (800312c <HAL_RCC_OscConfig+0x504>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
 8003134:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4a99      	ldr	r2, [pc, #612]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003144:	4b96      	ldr	r3, [pc, #600]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a95      	ldr	r2, [pc, #596]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d016      	beq.n	800318a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fd fece 	bl	8000efc <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fd feca 	bl	8000efc <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e162      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ed      	beq.n	8003164 <HAL_RCC_OscConfig+0x53c>
 8003188:	e015      	b.n	80031b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fd feb7 	bl	8000efc <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fd feb3 	bl	8000efc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e14b      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	4b7d      	ldr	r3, [pc, #500]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ed      	bne.n	8003192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03c      	beq.n	800324e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01c      	beq.n	8003216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031dc:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80031de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e2:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fd fe86 	bl	8000efc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f4:	f7fd fe82 	bl	8000efc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e11c      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003206:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <HAL_RCC_OscConfig+0x5cc>
 8003214:	e01b      	b.n	800324e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003216:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321c:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fd fe69 	bl	8000efc <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322e:	f7fd fe65 	bl	8000efc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0ff      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ef      	bne.n	800322e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80f3 	beq.w	800343e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	2b02      	cmp	r3, #2
 800325e:	f040 80c9 	bne.w	80033f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0203 	and.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	429a      	cmp	r2, r3
 8003274:	d12c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	3b01      	subs	r3, #1
 8003282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d123      	bne.n	80032d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d11b      	bne.n	80032d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d113      	bne.n	80032d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	3b01      	subs	r3, #1
 80032b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d109      	bne.n	80032d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d06b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d062      	beq.n	800339c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0ac      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f2:	f7fd fe03 	bl	8000efc <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fd fdff 	bl	8000efc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e099      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x77c>)
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003328:	3a01      	subs	r2, #1
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	4311      	orrs	r1, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003332:	0212      	lsls	r2, r2, #8
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800333a:	0852      	lsrs	r2, r2, #1
 800333c:	3a01      	subs	r2, #1
 800333e:	0552      	lsls	r2, r2, #21
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	3a01      	subs	r2, #1
 800334a:	0652      	lsls	r2, r2, #25
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003352:	06d2      	lsls	r2, r2, #27
 8003354:	430a      	orrs	r2, r1
 8003356:	4912      	ldr	r1, [pc, #72]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003358:	4313      	orrs	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003374:	f7fd fdc2 	bl	8000efc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fd fdbe 	bl	8000efc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e058      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_OscConfig+0x778>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800339a:	e050      	b.n	800343e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04f      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d144      	bne.n	800343e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a23      	ldr	r2, [pc, #140]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fd fd96 	bl	8000efc <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fd92 	bl	8000efc <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e02c      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x7ac>
 80033f2:	e024      	b.n	800343e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d01f      	beq.n	800343a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 8003400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd fd79 	bl	8000efc <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd fd75 	bl	8000efc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4905      	ldr	r1, [pc, #20]	; (8003448 <HAL_RCC_OscConfig+0x820>)
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_OscConfig+0x824>)
 8003434:	4013      	ands	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
 8003438:	e001      	b.n	800343e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	feeefffc 	.word	0xfeeefffc

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0e7      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b75      	ldr	r3, [pc, #468]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b72      	ldr	r3, [pc, #456]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	4970      	ldr	r1, [pc, #448]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0cf      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d908      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4960      	ldr	r1, [pc, #384]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d04c      	beq.n	8003568 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d121      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0a6      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d115      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e09a      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003506:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08e      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e086      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4943      	ldr	r1, [pc, #268]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fd fce0 	bl	8000efc <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fd fcdc 	bl	8000efc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e06e      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003580:	429a      	cmp	r2, r3
 8003582:	d208      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	492b      	ldr	r1, [pc, #172]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d210      	bcs.n	80035c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 0207 	bic.w	r2, r3, #7
 80035ac:	4923      	ldr	r1, [pc, #140]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e036      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4918      	ldr	r1, [pc, #96]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4910      	ldr	r1, [pc, #64]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003604:	f000 f824 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1f4>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1fc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fc17 	bl	8000e5c <HAL_InitTick>
 800362e:	4603      	mov	r3, r0
 8003630:	72fb      	strb	r3, [r7, #11]

  return status;
 8003632:	7afb      	ldrb	r3, [r7, #11]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	08007360 	.word	0x08007360
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d11e      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e005      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ac:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e004      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d134      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0xac>
 80036f4:	e005      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	e005      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_GetSysClockFreq+0x114>)
 80036fe:	617b      	str	r3, [r7, #20]
      break;
 8003700:	e002      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	3301      	adds	r3, #1
 8003714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	fb03 f202 	mul.w	r2, r3, r2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	0e5b      	lsrs	r3, r3, #25
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	3301      	adds	r3, #1
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003748:	69bb      	ldr	r3, [r7, #24]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	08007378 	.word	0x08007378
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200

08003768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000000 	.word	0x20000000

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08007370 	.word	0x08007370

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b0:	f7ff ffda 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08007370 	.word	0x08007370

080037d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff f9b6 	bl	8002b60 <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
 80037f6:	e014      	b.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003810:	f7ff f9a6 	bl	8002b60 <HAL_PWREx_GetVoltageRange>
 8003814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d10b      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d919      	bls.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2ba0      	cmp	r3, #160	; 0xa0
 8003834:	d902      	bls.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003836:	2302      	movs	r3, #2
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e013      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800383c:	2301      	movs	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e010      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d902      	bls.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003848:	2303      	movs	r3, #3
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e00a      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d102      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003854:	2302      	movs	r3, #2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e004      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d101      	bne.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003860:	2301      	movs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	40022000 	.word	0x40022000

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a4:	2300      	movs	r3, #0
 80038a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038bc:	d01a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c2:	d814      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038cc:	d10f      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a5c      	ldr	r2, [pc, #368]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038da:	e00c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9ce 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	74fb      	strb	r3, [r7, #19]
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038fc:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	494e      	ldr	r1, [pc, #312]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 809e 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800392a:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6593      	str	r3, [r2, #88]	; 0x58
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003958:	2301      	movs	r3, #1
 800395a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003968:	f7fd fac8 	bl	8000efc <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7fd fac4 	bl	8000efc <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	74fb      	strb	r3, [r7, #19]
        break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003984:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d15a      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01e      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d019      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fa84 	bl	8000efc <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fd fa80 	bl	8000efc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d902      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a0e:	e006      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ec      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a3a:	e009      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a50:	7c7b      	ldrb	r3, [r7, #17]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4b8a      	ldr	r3, [pc, #552]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	4a89      	ldr	r2, [pc, #548]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6e:	4b84      	ldr	r3, [pc, #528]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 0203 	bic.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4980      	ldr	r1, [pc, #512]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a90:	4b7b      	ldr	r3, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f023 020c 	bic.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	4978      	ldr	r1, [pc, #480]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab2:	4b73      	ldr	r3, [pc, #460]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	496f      	ldr	r1, [pc, #444]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	4967      	ldr	r1, [pc, #412]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af6:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	495e      	ldr	r1, [pc, #376]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4956      	ldr	r1, [pc, #344]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b3a:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	494d      	ldr	r1, [pc, #308]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d028      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b5c:	4b48      	ldr	r3, [pc, #288]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4945      	ldr	r1, [pc, #276]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
 8003b88:	e011      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b92:	d10c      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f872 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d028      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bba:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	492d      	ldr	r1, [pc, #180]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a28      	ldr	r2, [pc, #160]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be4:	60d3      	str	r3, [r2, #12]
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f843 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	4916      	ldr	r1, [pc, #88]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f820 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6c:	4904      	ldr	r1, [pc, #16]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c92:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9e:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d10d      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb6:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d047      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e044      	b.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d018      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x86>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d825      	bhi.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x62>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d009      	beq.n	8003cf8 <RCCEx_PLLSAI1_Config+0x74>
 8003ce4:	e020      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11d      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf6:	e01a      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e013      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d16:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d26:	e006      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e004      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3e:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4943      	ldr	r1, [pc, #268]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17c      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd f8c6 	bl	8000efc <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d74:	f7fd f8c2 	bl	8000efc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
        break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ef      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15f      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d110      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	06d2      	lsls	r2, r2, #27
 8003db8:	430a      	orrs	r2, r1
 8003dba:	492a      	ldr	r1, [pc, #168]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
 8003dc0:	e027      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d112      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	0211      	lsls	r1, r2, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6912      	ldr	r2, [r2, #16]
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0552      	lsls	r2, r2, #21
 8003de4:	430a      	orrs	r2, r1
 8003de6:	491f      	ldr	r1, [pc, #124]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
 8003dec:	e011      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003df6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	0211      	lsls	r1, r2, #8
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6952      	ldr	r2, [r2, #20]
 8003e04:	0852      	lsrs	r2, r2, #1
 8003e06:	3a01      	subs	r2, #1
 8003e08:	0652      	lsls	r2, r2, #25
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd f86d 	bl	8000efc <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e24:	e009      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e26:	f7fd f869 	bl	8000efc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	73fb      	strb	r3, [r7, #15]
          break;
 8003e38:	e005      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4903      	ldr	r1, [pc, #12]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e040      	b.n	8003efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc ff0c 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa54 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f825 	bl	8003f04 <UART_SetConfig>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01b      	b.n	8003efc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fad3 	bl	80044a0 <UART_CheckIdleState>
 8003efa:	4603      	mov	r3, r0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b08a      	sub	sp, #40	; 0x28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4bb4      	ldr	r3, [pc, #720]	; (8004204 <UART_SetConfig+0x300>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4aa9      	ldr	r2, [pc, #676]	; (8004208 <UART_SetConfig+0x304>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4aa0      	ldr	r2, [pc, #640]	; (800420c <UART_SetConfig+0x308>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d126      	bne.n	8003fdc <UART_SetConfig+0xd8>
 8003f8e:	4ba0      	ldr	r3, [pc, #640]	; (8004210 <UART_SetConfig+0x30c>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d81b      	bhi.n	8003fd4 <UART_SetConfig+0xd0>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0xa0>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	e080      	b.n	80040be <UART_SetConfig+0x1ba>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e07c      	b.n	80040be <UART_SetConfig+0x1ba>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e078      	b.n	80040be <UART_SetConfig+0x1ba>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e074      	b.n	80040be <UART_SetConfig+0x1ba>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e070      	b.n	80040be <UART_SetConfig+0x1ba>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a8c      	ldr	r2, [pc, #560]	; (8004214 <UART_SetConfig+0x310>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d138      	bne.n	8004058 <UART_SetConfig+0x154>
 8003fe6:	4b8a      	ldr	r3, [pc, #552]	; (8004210 <UART_SetConfig+0x30c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d82d      	bhi.n	8004050 <UART_SetConfig+0x14c>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0xf8>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004051 	.word	0x08004051
 8004004:	08004051 	.word	0x08004051
 8004008:	08004051 	.word	0x08004051
 800400c:	08004041 	.word	0x08004041
 8004010:	08004051 	.word	0x08004051
 8004014:	08004051 	.word	0x08004051
 8004018:	08004051 	.word	0x08004051
 800401c:	08004039 	.word	0x08004039
 8004020:	08004051 	.word	0x08004051
 8004024:	08004051 	.word	0x08004051
 8004028:	08004051 	.word	0x08004051
 800402c:	08004049 	.word	0x08004049
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e042      	b.n	80040be <UART_SetConfig+0x1ba>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e03e      	b.n	80040be <UART_SetConfig+0x1ba>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004046:	e03a      	b.n	80040be <UART_SetConfig+0x1ba>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e036      	b.n	80040be <UART_SetConfig+0x1ba>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e032      	b.n	80040be <UART_SetConfig+0x1ba>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <UART_SetConfig+0x304>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d12a      	bne.n	80040b8 <UART_SetConfig+0x1b4>
 8004062:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <UART_SetConfig+0x30c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800406c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004070:	d01a      	beq.n	80040a8 <UART_SetConfig+0x1a4>
 8004072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004076:	d81b      	bhi.n	80040b0 <UART_SetConfig+0x1ac>
 8004078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407c:	d00c      	beq.n	8004098 <UART_SetConfig+0x194>
 800407e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004082:	d815      	bhi.n	80040b0 <UART_SetConfig+0x1ac>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <UART_SetConfig+0x18c>
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408c:	d008      	beq.n	80040a0 <UART_SetConfig+0x19c>
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x1ac>
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e012      	b.n	80040be <UART_SetConfig+0x1ba>
 8004098:	2302      	movs	r3, #2
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e00e      	b.n	80040be <UART_SetConfig+0x1ba>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e00a      	b.n	80040be <UART_SetConfig+0x1ba>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ae:	e006      	b.n	80040be <UART_SetConfig+0x1ba>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b6:	e002      	b.n	80040be <UART_SetConfig+0x1ba>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a51      	ldr	r2, [pc, #324]	; (8004208 <UART_SetConfig+0x304>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d17a      	bne.n	80041be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d824      	bhi.n	800411a <UART_SetConfig+0x216>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <UART_SetConfig+0x1d4>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800410b 	.word	0x0800410b
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800411b 	.word	0x0800411b
 80040f8:	08004113 	.word	0x08004113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fc:	f7ff fb40 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8004100:	61f8      	str	r0, [r7, #28]
        break;
 8004102:	e010      	b.n	8004126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b44      	ldr	r3, [pc, #272]	; (8004218 <UART_SetConfig+0x314>)
 8004106:	61fb      	str	r3, [r7, #28]
        break;
 8004108:	e00d      	b.n	8004126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7ff faa1 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800410e:	61f8      	str	r0, [r7, #28]
        break;
 8004110:	e009      	b.n	8004126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	61fb      	str	r3, [r7, #28]
        break;
 8004118:	e005      	b.n	8004126 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8107 	beq.w	800433c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	429a      	cmp	r2, r3
 800413c:	d305      	bcc.n	800414a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	429a      	cmp	r2, r3
 8004148:	d903      	bls.n	8004152 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004150:	e0f4      	b.n	800433c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2200      	movs	r2, #0
 8004156:	461c      	mov	r4, r3
 8004158:	4615      	mov	r5, r2
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	022b      	lsls	r3, r5, #8
 8004164:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004168:	0222      	lsls	r2, r4, #8
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6849      	ldr	r1, [r1, #4]
 800416e:	0849      	lsrs	r1, r1, #1
 8004170:	2000      	movs	r0, #0
 8004172:	4688      	mov	r8, r1
 8004174:	4681      	mov	r9, r0
 8004176:	eb12 0a08 	adds.w	sl, r2, r8
 800417a:	eb43 0b09 	adc.w	fp, r3, r9
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800418c:	4650      	mov	r0, sl
 800418e:	4659      	mov	r1, fp
 8004190:	f7fc f81e 	bl	80001d0 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a2:	d308      	bcc.n	80041b6 <UART_SetConfig+0x2b2>
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d204      	bcs.n	80041b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	e0c2      	b.n	800433c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041bc:	e0be      	b.n	800433c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c6:	d16a      	bne.n	800429e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80041c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d834      	bhi.n	800423a <UART_SetConfig+0x336>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x2d4>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	0800421d 	.word	0x0800421d
 80041e0:	08004225 	.word	0x08004225
 80041e4:	0800423b 	.word	0x0800423b
 80041e8:	0800422b 	.word	0x0800422b
 80041ec:	0800423b 	.word	0x0800423b
 80041f0:	0800423b 	.word	0x0800423b
 80041f4:	0800423b 	.word	0x0800423b
 80041f8:	08004233 	.word	0x08004233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7ff fac0 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8004200:	61f8      	str	r0, [r7, #28]
        break;
 8004202:	e020      	b.n	8004246 <UART_SetConfig+0x342>
 8004204:	efff69f3 	.word	0xefff69f3
 8004208:	40008000 	.word	0x40008000
 800420c:	40013800 	.word	0x40013800
 8004210:	40021000 	.word	0x40021000
 8004214:	40004400 	.word	0x40004400
 8004218:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800421c:	f7ff fac6 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004220:	61f8      	str	r0, [r7, #28]
        break;
 8004222:	e010      	b.n	8004246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004224:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <UART_SetConfig+0x454>)
 8004226:	61fb      	str	r3, [r7, #28]
        break;
 8004228:	e00d      	b.n	8004246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422a:	f7ff fa11 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800422e:	61f8      	str	r0, [r7, #28]
        break;
 8004230:	e009      	b.n	8004246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004236:	61fb      	str	r3, [r7, #28]
        break;
 8004238:	e005      	b.n	8004246 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d077      	beq.n	800433c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005a      	lsls	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d916      	bls.n	8004296 <UART_SetConfig+0x392>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d212      	bcs.n	8004296 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f023 030f 	bic.w	r3, r3, #15
 8004278:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	b29a      	uxth	r2, r3
 8004286:	8afb      	ldrh	r3, [r7, #22]
 8004288:	4313      	orrs	r3, r2
 800428a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	8afa      	ldrh	r2, [r7, #22]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	e052      	b.n	800433c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800429c:	e04e      	b.n	800433c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d827      	bhi.n	80042f6 <UART_SetConfig+0x3f2>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x3a8>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042f7 	.word	0x080042f7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff fa56 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e014      	b.n	8004302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7ff fa68 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 80042dc:	61f8      	str	r0, [r7, #28]
        break;
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <UART_SetConfig+0x454>)
 80042e2:	61fb      	str	r3, [r7, #28]
        break;
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7ff f9b3 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80042ea:	61f8      	str	r0, [r7, #28]
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004300:	bf00      	nop
    }

    if (pclk != 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d019      	beq.n	800433c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085a      	lsrs	r2, r3, #1
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b0f      	cmp	r3, #15
 8004320:	d909      	bls.n	8004336 <UART_SetConfig+0x432>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d205      	bcs.n	8004336 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b098      	sub	sp, #96	; 0x60
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fc fd24 	bl	8000efc <HAL_GetTick>
 80044b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d12e      	bne.n	8004522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f88c 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d021      	beq.n	8004522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	647b      	str	r3, [r7, #68]	; 0x44
 80044fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e062      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d149      	bne.n	80045c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	2200      	movs	r2, #0
 800453a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f856 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03c      	beq.n	80045c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	623b      	str	r3, [r7, #32]
   return(result);
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800455e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
 800456a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60fb      	str	r3, [r7, #12]
   return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	617b      	str	r3, [r7, #20]
   return(result);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e011      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3758      	adds	r7, #88	; 0x58
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	e049      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d045      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fc fc77 	bl	8000efc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e048      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d031      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d110      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2208      	movs	r2, #8
 8004646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f838 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2208      	movs	r2, #8
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e029      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d111      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800467a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f81e 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0a6      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b095      	sub	sp, #84	; 0x54
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	643b      	str	r3, [r7, #64]	; 0x40
 80046e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	61fb      	str	r3, [r7, #28]
   return(result);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	2b01      	cmp	r3, #1
 8004732:	d118      	bne.n	8004766 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	60bb      	str	r3, [r7, #8]
   return(result);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 0310 	bic.w	r3, r3, #16
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	613b      	str	r3, [r7, #16]
   return(result);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	669a      	str	r2, [r3, #104]	; 0x68
}
 800477a:	bf00      	nop
 800477c:	3754      	adds	r7, #84	; 0x54
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <__NVIC_SetPriority>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db0a      	blt.n	80047b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	490c      	ldr	r1, [pc, #48]	; (80047d4 <__NVIC_SetPriority+0x4c>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	440b      	add	r3, r1
 80047ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047b0:	e00a      	b.n	80047c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <__NVIC_SetPriority+0x50>)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3b04      	subs	r3, #4
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	761a      	strb	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047e0:	2100      	movs	r1, #0
 80047e2:	f06f 0004 	mvn.w	r0, #4
 80047e6:	f7ff ffcf 	bl	8004788 <__NVIC_SetPriority>
#endif
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f6:	f3ef 8305 	mrs	r3, IPSR
 80047fa:	603b      	str	r3, [r7, #0]
  return(result);
 80047fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004802:	f06f 0305 	mvn.w	r3, #5
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e00c      	b.n	8004824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <osKernelInitialize+0x44>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <osKernelInitialize+0x44>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e002      	b.n	8004824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004824:	687b      	ldr	r3, [r7, #4]
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000270 	.word	0x20000270

08004838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483e:	f3ef 8305 	mrs	r3, IPSR
 8004842:	603b      	str	r3, [r7, #0]
  return(result);
 8004844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800484a:	f06f 0305 	mvn.w	r3, #5
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e010      	b.n	8004874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <osKernelStart+0x48>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d109      	bne.n	800486e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800485a:	f7ff ffbf 	bl	80047dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <osKernelStart+0x48>)
 8004860:	2202      	movs	r2, #2
 8004862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004864:	f001 f866 	bl	8005934 <vTaskStartScheduler>
      stat = osOK;
 8004868:	2300      	movs	r3, #0
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e002      	b.n	8004874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000270 	.word	0x20000270

08004884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af04      	add	r7, sp, #16
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004894:	f3ef 8305 	mrs	r3, IPSR
 8004898:	617b      	str	r3, [r7, #20]
  return(result);
 800489a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800489c:	2b00      	cmp	r3, #0
 800489e:	d17e      	bne.n	800499e <osThreadNew+0x11a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d07b      	beq.n	800499e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048aa:	2318      	movs	r3, #24
 80048ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d045      	beq.n	800494a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <osThreadNew+0x48>
        name = attr->name;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <osThreadNew+0x6e>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b38      	cmp	r3, #56	; 0x38
 80048e4:	d805      	bhi.n	80048f2 <osThreadNew+0x6e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <osThreadNew+0x72>
        return (NULL);
 80048f2:	2300      	movs	r3, #0
 80048f4:	e054      	b.n	80049a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <osThreadNew+0xa8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b5b      	cmp	r3, #91	; 0x5b
 8004914:	d90a      	bls.n	800492c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <osThreadNew+0xa8>
        mem = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e010      	b.n	800494e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10c      	bne.n	800494e <osThreadNew+0xca>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d108      	bne.n	800494e <osThreadNew+0xca>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <osThreadNew+0xca>
          mem = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e001      	b.n	800494e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d110      	bne.n	8004976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fe0c 	bl	8005588 <xTaskCreateStatic>
 8004970:	4603      	mov	r3, r0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e013      	b.n	800499e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d110      	bne.n	800499e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	b29a      	uxth	r2, r3
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fe57 	bl	8005642 <xTaskCreate>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <osThreadNew+0x11a>
            hTask = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800499e:	693b      	ldr	r3, [r7, #16]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b0:	f3ef 8305 	mrs	r3, IPSR
 80049b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <osDelay+0x1c>
    stat = osErrorISR;
 80049bc:	f06f 0305 	mvn.w	r3, #5
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e007      	b.n	80049d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 ff7c 	bl	80058cc <vTaskDelay>
    }
  }

  return (stat);
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80049f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <vApplicationGetIdleTaskMemory+0x30>)
 80049f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000274 	.word	0x20000274
 8004a10:	200002d0 	.word	0x200002d0

08004a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <vApplicationGetTimerTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	200004d0 	.word	0x200004d0
 8004a44:	2000052c 	.word	0x2000052c

08004a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 0208 	add.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f103 0208 	add.w	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f103 0208 	add.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d103      	bne.n	8004b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e00c      	b.n	8004b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e002      	b.n	8004b18 <vListInsert+0x2e>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d2f6      	bcs.n	8004b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6892      	ldr	r2, [r2, #8]
 8004b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6852      	ldr	r2, [r2, #4]
 8004b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d103      	bne.n	8004b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1e5a      	subs	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bda:	f002 f84b 	bl	8006c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	441a      	add	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d114      	bne.n	8004c5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01a      	beq.n	8004c6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3310      	adds	r3, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f903 	bl	8005e48 <xTaskRemoveFromEventList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <xQueueGenericReset+0xcc>)
 8004c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	e009      	b.n	8004c6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fef2 	bl	8004a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3324      	adds	r3, #36	; 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff feed 	bl	8004a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c6e:	f002 f831 	bl	8006cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c72:	2301      	movs	r3, #1
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08e      	sub	sp, #56	; 0x38
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <xQueueGenericCreateStatic+0x52>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <xQueueGenericCreateStatic+0x56>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericCreateStatic+0x58>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <xQueueGenericCreateStatic+0x7e>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericCreateStatic+0x82>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericCreateStatic+0x84>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	61fb      	str	r3, [r7, #28]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d1e:	2350      	movs	r3, #80	; 0x50
 8004d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d00a      	beq.n	8004d3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	61bb      	str	r3, [r7, #24]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f805 	bl	8004d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3730      	adds	r7, #48	; 0x30
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e002      	b.n	8004d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d9e:	2101      	movs	r1, #1
 8004da0:	69b8      	ldr	r0, [r7, #24]
 8004da2:	f7ff ff05 	bl	8004bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	; 0x38
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xQueueGenericSend+0x32>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <xQueueGenericSend+0x40>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <xQueueGenericSend+0x44>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <xQueueGenericSend+0x46>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <xQueueGenericSend+0x60>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x6e>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <xQueueGenericSend+0x72>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <xQueueGenericSend+0x74>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	623b      	str	r3, [r7, #32]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e46:	f001 f9bd 	bl	80061c4 <xTaskGetSchedulerState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xQueueGenericSend+0x9e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueGenericSend+0xa2>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericSend+0xa4>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61fb      	str	r3, [r7, #28]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e76:	f001 fefd 	bl	8006c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <xQueueGenericSend+0xd4>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d129      	bne.n	8004ee0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e92:	f000 fa0b 	bl	80052ac <prvCopyDataToQueue>
 8004e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	3324      	adds	r3, #36	; 0x24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 ffcf 	bl	8005e48 <xTaskRemoveFromEventList>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004eb0:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <xQueueGenericSend+0x1f8>)
 8004eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	e00a      	b.n	8004ed8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <xQueueGenericSend+0x1f8>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed8:	f001 fefc 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e063      	b.n	8004fa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee6:	f001 fef5 	bl	8006cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e05c      	b.n	8004fa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f809 	bl	8005f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f02:	f001 fee7 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f06:	f000 fd7b 	bl	8005a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f0a:	f001 feb3 	bl	8006c74 <vPortEnterCritical>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f14:	b25b      	sxtb	r3, r3
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d103      	bne.n	8004f24 <xQueueGenericSend+0x16c>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSend+0x182>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3a:	f001 fecb 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f3e:	1d3a      	adds	r2, r7, #4
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fff8 	bl	8005f3c <xTaskCheckForTimeOut>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d124      	bne.n	8004f9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f54:	f000 faa2 	bl	800549c <prvIsQueueFull>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	3310      	adds	r3, #16
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 ff1e 	bl	8005da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6e:	f000 fa2d 	bl	80053cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f72:	f000 fd53 	bl	8005a1c <xTaskResumeAll>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af7c 	bne.w	8004e76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <xQueueGenericSend+0x1f8>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	e772      	b.n	8004e76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fa1b 	bl	80053cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f96:	f000 fd41 	bl	8005a1c <xTaskResumeAll>
 8004f9a:	e76c      	b.n	8004e76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9e:	f000 fa15 	bl	80053cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa2:	f000 fd3b 	bl	8005a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3738      	adds	r7, #56	; 0x38
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b090      	sub	sp, #64	; 0x40
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x3c>
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x40>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <xQueueGenericSendFromISR+0x42>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d103      	bne.n	800501e <xQueueGenericSendFromISR+0x6a>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <xQueueGenericSendFromISR+0x6e>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <xQueueGenericSendFromISR+0x70>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	623b      	str	r3, [r7, #32]
}
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503e:	f001 fefb 	bl	8006e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005042:	f3ef 8211 	mrs	r2, BASEPRI
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61fa      	str	r2, [r7, #28]
 8005058:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800505a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <xQueueGenericSendFromISR+0xbc>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d12f      	bne.n	80050d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005086:	f000 f911 	bl	80052ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800508a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d112      	bne.n	80050ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d016      	beq.n	80050ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fed1 	bl	8005e48 <xTaskRemoveFromEventList>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e007      	b.n	80050ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050be:	3301      	adds	r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	b25a      	sxtb	r2, r3
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ca:	2301      	movs	r3, #1
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050ce:	e001      	b.n	80050d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3740      	adds	r7, #64	; 0x40
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xQueueReceive+0x30>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	623b      	str	r3, [r7, #32]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <xQueueReceive+0x3e>
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <xQueueReceive+0x42>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueReceive+0x44>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueReceive+0x5e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	61fb      	str	r3, [r7, #28]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800514a:	f001 f83b 	bl	80061c4 <xTaskGetSchedulerState>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <xQueueReceive+0x6e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <xQueueReceive+0x72>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueReceive+0x74>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueReceive+0x8e>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61bb      	str	r3, [r7, #24]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800517a:	f001 fd7b 	bl	8006c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01f      	beq.n	80051ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518e:	f000 f8f7 	bl	8005380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	3310      	adds	r3, #16
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe4e 	bl	8005e48 <xTaskRemoveFromEventList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051b2:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <xQueueReceive+0x1bc>)
 80051b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051c2:	f001 fd87 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e069      	b.n	800529e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051d0:	f001 fd80 	bl	8006cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e062      	b.n	800529e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fe94 	bl	8005f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ec:	f001 fd72 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051f0:	f000 fc06 	bl	8005a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051f4:	f001 fd3e 	bl	8006c74 <vPortEnterCritical>
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051fe:	b25b      	sxtb	r3, r3
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d103      	bne.n	800520e <xQueueReceive+0x122>
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005214:	b25b      	sxtb	r3, r3
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d103      	bne.n	8005224 <xQueueReceive+0x138>
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005224:	f001 fd56 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005228:	1d3a      	adds	r2, r7, #4
 800522a:	f107 0310 	add.w	r3, r7, #16
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fe83 	bl	8005f3c <xTaskCheckForTimeOut>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d123      	bne.n	8005284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800523c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523e:	f000 f917 	bl	8005470 <prvIsQueueEmpty>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d017      	beq.n	8005278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	3324      	adds	r3, #36	; 0x24
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fda9 	bl	8005da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005258:	f000 f8b8 	bl	80053cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800525c:	f000 fbde 	bl	8005a1c <xTaskResumeAll>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d189      	bne.n	800517a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <xQueueReceive+0x1bc>)
 8005268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	e780      	b.n	800517a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527a:	f000 f8a7 	bl	80053cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800527e:	f000 fbcd 	bl	8005a1c <xTaskResumeAll>
 8005282:	e77a      	b.n	800517a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005286:	f000 f8a1 	bl	80053cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800528a:	f000 fbc7 	bl	8005a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800528e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005290:	f000 f8ee 	bl	8005470 <prvIsQueueEmpty>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	f43f af6f 	beq.w	800517a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800529c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3730      	adds	r7, #48	; 0x30
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d14d      	bne.n	800536e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 ff92 	bl	8006200 <xTaskPriorityDisinherit>
 80052dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
 80052e4:	e043      	b.n	800536e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d119      	bne.n	8005320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6858      	ldr	r0, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	461a      	mov	r2, r3
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	f001 fff4 	bl	80072e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d32b      	bcc.n	800536e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	e026      	b.n	800536e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68d8      	ldr	r0, [r3, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	461a      	mov	r2, r3
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	f001 ffda 	bl	80072e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	425b      	negs	r3, r3
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d207      	bcs.n	800535c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	425b      	negs	r3, r3
 8005356:	441a      	add	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d105      	bne.n	800536e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	3b01      	subs	r3, #1
 800536c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005376:	697b      	ldr	r3, [r7, #20]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d303      	bcc.n	80053b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	461a      	mov	r2, r3
 80053be:	6838      	ldr	r0, [r7, #0]
 80053c0:	f001 ff90 	bl	80072e4 <memcpy>
	}
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053d4:	f001 fc4e 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053e0:	e011      	b.n	8005406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d012      	beq.n	8005410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fd2a 	bl	8005e48 <xTaskRemoveFromEventList>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053fa:	f000 fe01 	bl	8006000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	3b01      	subs	r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	dce9      	bgt.n	80053e2 <prvUnlockQueue+0x16>
 800540e:	e000      	b.n	8005412 <prvUnlockQueue+0x46>
					break;
 8005410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800541a:	f001 fc5b 	bl	8006cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800541e:	f001 fc29 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800542a:	e011      	b.n	8005450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3310      	adds	r3, #16
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fd05 	bl	8005e48 <xTaskRemoveFromEventList>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005444:	f000 fddc 	bl	8006000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	3b01      	subs	r3, #1
 800544c:	b2db      	uxtb	r3, r3
 800544e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005454:	2b00      	cmp	r3, #0
 8005456:	dce9      	bgt.n	800542c <prvUnlockQueue+0x60>
 8005458:	e000      	b.n	800545c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800545a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005464:	f001 fc36 	bl	8006cd4 <vPortExitCritical>
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005478:	f001 fbfc 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e001      	b.n	800548e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800548e:	f001 fc21 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 8005492:	68fb      	ldr	r3, [r7, #12]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054a4:	f001 fbe6 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d102      	bne.n	80054ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e001      	b.n	80054be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054be:	f001 fc09 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e014      	b.n	8005506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <vQueueAddToRegistry+0x50>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054e8:	490c      	ldr	r1, [pc, #48]	; (800551c <vQueueAddToRegistry+0x50>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054f2:	4a0a      	ldr	r2, [pc, #40]	; (800551c <vQueueAddToRegistry+0x50>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054fe:	e006      	b.n	800550e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b07      	cmp	r3, #7
 800550a:	d9e7      	bls.n	80054dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	2000092c 	.word	0x2000092c

08005520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005530:	f001 fba0 	bl	8006c74 <vPortEnterCritical>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800553a:	b25b      	sxtb	r3, r3
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d103      	bne.n	800554a <vQueueWaitForMessageRestricted+0x2a>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005550:	b25b      	sxtb	r3, r3
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d103      	bne.n	8005560 <vQueueWaitForMessageRestricted+0x40>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005560:	f001 fbb8 	bl	8006cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	3324      	adds	r3, #36	; 0x24
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fc3b 	bl	8005df0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7ff ff26 	bl	80053cc <prvUnlockQueue>
	}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08e      	sub	sp, #56	; 0x38
 800558c:	af04      	add	r7, sp, #16
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	623b      	str	r3, [r7, #32]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xTaskCreateStatic+0x46>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	61fb      	str	r3, [r7, #28]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ce:	235c      	movs	r3, #92	; 0x5c
 80055d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b5c      	cmp	r3, #92	; 0x5c
 80055d6:	d00a      	beq.n	80055ee <xTaskCreateStatic+0x66>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61bb      	str	r3, [r7, #24]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01e      	beq.n	8005634 <xTaskCreateStatic+0xac>
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800560e:	2300      	movs	r3, #0
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	f107 0314 	add.w	r3, r7, #20
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f850 	bl	80056cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800562c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800562e:	f000 f8dd 	bl	80057ec <prvAddNewTaskToReadyList>
 8005632:	e001      	b.n	8005638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005638:	697b      	ldr	r3, [r7, #20]
	}
 800563a:	4618      	mov	r0, r3
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005642:	b580      	push	{r7, lr}
 8005644:	b08c      	sub	sp, #48	; 0x30
 8005646:	af04      	add	r7, sp, #16
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fc2e 	bl	8006eb8 <pvPortMalloc>
 800565c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005664:	205c      	movs	r0, #92	; 0x5c
 8005666:	f001 fc27 	bl	8006eb8 <pvPortMalloc>
 800566a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
 8005678:	e005      	b.n	8005686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f001 fce8 	bl	8007050 <vPortFree>
 8005680:	e001      	b.n	8005686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d017      	beq.n	80056bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	2300      	movs	r3, #0
 8005698:	9303      	str	r3, [sp, #12]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	9302      	str	r3, [sp, #8]
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f80e 	bl	80056cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056b0:	69f8      	ldr	r0, [r7, #28]
 80056b2:	f000 f89b 	bl	80057ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056b6:	2301      	movs	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e002      	b.n	80056c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056c2:	69bb      	ldr	r3, [r7, #24]
	}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	461a      	mov	r2, r3
 80056e4:	21a5      	movs	r1, #165	; 0xa5
 80056e6:	f001 fdd1 	bl	800728c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056f4:	3b01      	subs	r3, #1
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f023 0307 	bic.w	r3, r3, #7
 8005702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <prvInitialiseNewTask+0x58>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	617b      	str	r3, [r7, #20]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01f      	beq.n	800576a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	e012      	b.n	8005756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	7819      	ldrb	r1, [r3, #0]
 8005738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	3334      	adds	r3, #52	; 0x34
 8005740:	460a      	mov	r2, r1
 8005742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d9e9      	bls.n	8005730 <prvInitialiseNewTask+0x64>
 800575c:	e000      	b.n	8005760 <prvInitialiseNewTask+0x94>
			{
				break;
 800575e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005768:	e003      	b.n	8005772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	2b37      	cmp	r3, #55	; 0x37
 8005776:	d901      	bls.n	800577c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005778:	2337      	movs	r3, #55	; 0x37
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff f978 	bl	8004a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	3318      	adds	r3, #24
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff f973 	bl	8004a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	69b8      	ldr	r0, [r7, #24]
 80057cc:	f001 f928 	bl	8006a20 <pxPortInitialiseStack>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e2:	bf00      	nop
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057f4:	f001 fa3e 	bl	8006c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057f8:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <prvAddNewTaskToReadyList+0xc4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <prvAddNewTaskToReadyList+0xc4>)
 8005800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005802:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <prvAddNewTaskToReadyList+0xc8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800580a:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <prvAddNewTaskToReadyList+0xc8>)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <prvAddNewTaskToReadyList+0xc4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d110      	bne.n	800583a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005818:	f000 fc16 	bl	8006048 <prvInitialiseTaskLists>
 800581c:	e00d      	b.n	800583a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800581e:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <prvAddNewTaskToReadyList+0xcc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <prvAddNewTaskToReadyList+0xc8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	429a      	cmp	r2, r3
 8005832:	d802      	bhi.n	800583a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <prvAddNewTaskToReadyList+0xc8>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <prvAddNewTaskToReadyList+0xd0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <prvAddNewTaskToReadyList+0xd0>)
 8005842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <prvAddNewTaskToReadyList+0xd0>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <prvAddNewTaskToReadyList+0xd4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d903      	bls.n	8005860 <prvAddNewTaskToReadyList+0x74>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <prvAddNewTaskToReadyList+0xd4>)
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <prvAddNewTaskToReadyList+0xd8>)
 800586e:	441a      	add	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f7ff f913 	bl	8004aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800587c:	f001 fa2a 	bl	8006cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <prvAddNewTaskToReadyList+0xcc>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvAddNewTaskToReadyList+0xc8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	429a      	cmp	r2, r3
 8005894:	d207      	bcs.n	80058a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvAddNewTaskToReadyList+0xdc>)
 8005898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000e40 	.word	0x20000e40
 80058b4:	2000096c 	.word	0x2000096c
 80058b8:	20000e4c 	.word	0x20000e4c
 80058bc:	20000e5c 	.word	0x20000e5c
 80058c0:	20000e48 	.word	0x20000e48
 80058c4:	20000970 	.word	0x20000970
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <vTaskDelay+0x60>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <vTaskDelay+0x30>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60bb      	str	r3, [r7, #8]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058fc:	f000 f880 	bl	8005a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005900:	2100      	movs	r1, #0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fcea 	bl	80062dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005908:	f000 f888 	bl	8005a1c <xTaskResumeAll>
 800590c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <vTaskDelay+0x64>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000e68 	.word	0x20000e68
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005942:	463a      	mov	r2, r7
 8005944:	1d39      	adds	r1, r7, #4
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f848 	bl	80049e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	9202      	str	r2, [sp, #8]
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	2300      	movs	r3, #0
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	460a      	mov	r2, r1
 8005962:	4921      	ldr	r1, [pc, #132]	; (80059e8 <vTaskStartScheduler+0xb4>)
 8005964:	4821      	ldr	r0, [pc, #132]	; (80059ec <vTaskStartScheduler+0xb8>)
 8005966:	f7ff fe0f 	bl	8005588 <xTaskCreateStatic>
 800596a:	4603      	mov	r3, r0
 800596c:	4a20      	ldr	r2, [pc, #128]	; (80059f0 <vTaskStartScheduler+0xbc>)
 800596e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005970:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <vTaskStartScheduler+0xbc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005978:	2301      	movs	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e001      	b.n	8005982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005988:	f000 fcfc 	bl	8006384 <xTimerCreateTimerTask>
 800598c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d116      	bne.n	80059c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	613b      	str	r3, [r7, #16]
}
 80059a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059a8:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <vTaskStartScheduler+0xc0>)
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <vTaskStartScheduler+0xc4>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059b6:	4b11      	ldr	r3, [pc, #68]	; (80059fc <vTaskStartScheduler+0xc8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059bc:	f001 f8b8 	bl	8006b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059c0:	e00e      	b.n	80059e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d10a      	bne.n	80059e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60fb      	str	r3, [r7, #12]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <vTaskStartScheduler+0xaa>
}
 80059e0:	bf00      	nop
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	08007324 	.word	0x08007324
 80059ec:	08006019 	.word	0x08006019
 80059f0:	20000e64 	.word	0x20000e64
 80059f4:	20000e60 	.word	0x20000e60
 80059f8:	20000e4c 	.word	0x20000e4c
 80059fc:	20000e44 	.word	0x20000e44

08005a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <vTaskSuspendAll+0x18>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a03      	ldr	r2, [pc, #12]	; (8005a18 <vTaskSuspendAll+0x18>)
 8005a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	20000e68 	.word	0x20000e68

08005a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a2a:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	603b      	str	r3, [r7, #0]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a48:	f001 f914 	bl	8006c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a4c:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a56:	4b37      	ldr	r3, [pc, #220]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d162      	bne.n	8005b24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <xTaskResumeAll+0x11c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d05e      	beq.n	8005b24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a66:	e02f      	b.n	8005ac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <xTaskResumeAll+0x120>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3318      	adds	r3, #24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff f871 	bl	8004b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f86c 	bl	8004b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <xTaskResumeAll+0x124>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <xTaskResumeAll+0x7c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <xTaskResumeAll+0x124>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <xTaskResumeAll+0x128>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7fe fff7 	bl	8004aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <xTaskResumeAll+0x12c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ac2:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <xTaskResumeAll+0x130>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <xTaskResumeAll+0x120>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1cb      	bne.n	8005a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ad6:	f000 fb55 	bl	8006184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <xTaskResumeAll+0x134>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ae6:	f000 f847 	bl	8005b78 <xTaskIncrementTick>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005af0:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <xTaskResumeAll+0x130>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f1      	bne.n	8005ae6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <xTaskResumeAll+0x134>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <xTaskResumeAll+0x130>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <xTaskResumeAll+0x138>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b24:	f001 f8d6 	bl	8006cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005b28:	68bb      	ldr	r3, [r7, #8]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000e68 	.word	0x20000e68
 8005b38:	20000e40 	.word	0x20000e40
 8005b3c:	20000e00 	.word	0x20000e00
 8005b40:	20000e48 	.word	0x20000e48
 8005b44:	20000970 	.word	0x20000970
 8005b48:	2000096c 	.word	0x2000096c
 8005b4c:	20000e54 	.word	0x20000e54
 8005b50:	20000e50 	.word	0x20000e50
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <xTaskGetTickCount+0x1c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b64:	687b      	ldr	r3, [r7, #4]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000e44 	.word	0x20000e44

08005b78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b82:	4b4f      	ldr	r3, [pc, #316]	; (8005cc0 <xTaskIncrementTick+0x148>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 808f 	bne.w	8005caa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b8c:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <xTaskIncrementTick+0x14c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b94:	4a4b      	ldr	r2, [pc, #300]	; (8005cc4 <xTaskIncrementTick+0x14c>)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d120      	bne.n	8005be2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ba0:	4b49      	ldr	r3, [pc, #292]	; (8005cc8 <xTaskIncrementTick+0x150>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	603b      	str	r3, [r7, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <xTaskIncrementTick+0x46>
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <xTaskIncrementTick+0x150>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <xTaskIncrementTick+0x154>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <xTaskIncrementTick+0x150>)
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <xTaskIncrementTick+0x154>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <xTaskIncrementTick+0x158>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	4a3d      	ldr	r2, [pc, #244]	; (8005cd0 <xTaskIncrementTick+0x158>)
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	f000 fad1 	bl	8006184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005be2:	4b3c      	ldr	r3, [pc, #240]	; (8005cd4 <xTaskIncrementTick+0x15c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d349      	bcc.n	8005c80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bec:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <xTaskIncrementTick+0x150>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <xTaskIncrementTick+0x15c>)
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	601a      	str	r2, [r3, #0]
					break;
 8005bfe:	e03f      	b.n	8005c80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <xTaskIncrementTick+0x150>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d203      	bcs.n	8005c20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c18:	4a2e      	ldr	r2, [pc, #184]	; (8005cd4 <xTaskIncrementTick+0x15c>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c1e:	e02f      	b.n	8005c80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe ff99 	bl	8004b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3318      	adds	r3, #24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe ff90 	bl	8004b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <xTaskIncrementTick+0x160>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d903      	bls.n	8005c50 <xTaskIncrementTick+0xd8>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <xTaskIncrementTick+0x160>)
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4a1f      	ldr	r2, [pc, #124]	; (8005cdc <xTaskIncrementTick+0x164>)
 8005c5e:	441a      	add	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe ff1b 	bl	8004aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <xTaskIncrementTick+0x168>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3b8      	bcc.n	8005bec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7e:	e7b5      	b.n	8005bec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <xTaskIncrementTick+0x168>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4915      	ldr	r1, [pc, #84]	; (8005cdc <xTaskIncrementTick+0x164>)
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d901      	bls.n	8005c9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xTaskIncrementTick+0x16c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e004      	b.n	8005cb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <xTaskIncrementTick+0x170>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <xTaskIncrementTick+0x170>)
 8005cb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cb4:	697b      	ldr	r3, [r7, #20]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000e68 	.word	0x20000e68
 8005cc4:	20000e44 	.word	0x20000e44
 8005cc8:	20000df8 	.word	0x20000df8
 8005ccc:	20000dfc 	.word	0x20000dfc
 8005cd0:	20000e58 	.word	0x20000e58
 8005cd4:	20000e60 	.word	0x20000e60
 8005cd8:	20000e48 	.word	0x20000e48
 8005cdc:	20000970 	.word	0x20000970
 8005ce0:	2000096c 	.word	0x2000096c
 8005ce4:	20000e54 	.word	0x20000e54
 8005ce8:	20000e50 	.word	0x20000e50

08005cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cf2:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <vTaskSwitchContext+0xa8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <vTaskSwitchContext+0xac>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d00:	e041      	b.n	8005d86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005d02:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <vTaskSwitchContext+0xac>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d08:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <vTaskSwitchContext+0xb0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e010      	b.n	8005d32 <vTaskSwitchContext+0x46>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <vTaskSwitchContext+0x40>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	607b      	str	r3, [r7, #4]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vTaskSwitchContext+0x3e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	491b      	ldr	r1, [pc, #108]	; (8005da0 <vTaskSwitchContext+0xb4>)
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0e4      	beq.n	8005d10 <vTaskSwitchContext+0x24>
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <vTaskSwitchContext+0xb4>)
 8005d52:	4413      	add	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3308      	adds	r3, #8
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d104      	bne.n	8005d76 <vTaskSwitchContext+0x8a>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <vTaskSwitchContext+0xb8>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	4a06      	ldr	r2, [pc, #24]	; (8005d9c <vTaskSwitchContext+0xb0>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6013      	str	r3, [r2, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000e68 	.word	0x20000e68
 8005d98:	20000e54 	.word	0x20000e54
 8005d9c:	20000e48 	.word	0x20000e48
 8005da0:	20000970 	.word	0x20000970
 8005da4:	2000096c 	.word	0x2000096c

08005da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <vTaskPlaceOnEventList+0x44>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe fe87 	bl	8004aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ddc:	2101      	movs	r1, #1
 8005dde:	6838      	ldr	r0, [r7, #0]
 8005de0:	f000 fa7c 	bl	80062dc <prvAddCurrentTaskToDelayedList>
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	2000096c 	.word	0x2000096c

08005df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	617b      	str	r3, [r7, #20]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7fe fe3e 	bl	8004aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	68b8      	ldr	r0, [r7, #8]
 8005e36:	f000 fa51 	bl	80062dc <prvAddCurrentTaskToDelayedList>
	}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000096c 	.word	0x2000096c

08005e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60fb      	str	r3, [r7, #12]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3318      	adds	r3, #24
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe fe6f 	bl	8004b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <xTaskRemoveFromEventList+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11d      	bne.n	8005ec2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fe66 	bl	8004b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <xTaskRemoveFromEventList+0xb4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d903      	bls.n	8005ea4 <xTaskRemoveFromEventList+0x5c>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	4a16      	ldr	r2, [pc, #88]	; (8005efc <xTaskRemoveFromEventList+0xb4>)
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <xTaskRemoveFromEventList+0xb8>)
 8005eb2:	441a      	add	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f7fe fdf1 	bl	8004aa2 <vListInsertEnd>
 8005ec0:	e005      	b.n	8005ece <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	480e      	ldr	r0, [pc, #56]	; (8005f04 <xTaskRemoveFromEventList+0xbc>)
 8005eca:	f7fe fdea 	bl	8004aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <xTaskRemoveFromEventList+0xc0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d905      	bls.n	8005ee8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <xTaskRemoveFromEventList+0xc4>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e001      	b.n	8005eec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005eec:	697b      	ldr	r3, [r7, #20]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000e68 	.word	0x20000e68
 8005efc:	20000e48 	.word	0x20000e48
 8005f00:	20000970 	.word	0x20000970
 8005f04:	20000e00 	.word	0x20000e00
 8005f08:	2000096c 	.word	0x2000096c
 8005f0c:	20000e54 	.word	0x20000e54

08005f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <vTaskInternalSetTimeOutState+0x24>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <vTaskInternalSetTimeOutState+0x28>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	605a      	str	r2, [r3, #4]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000e58 	.word	0x20000e58
 8005f38:	20000e44 	.word	0x20000e44

08005f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	613b      	str	r3, [r7, #16]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60fb      	str	r3, [r7, #12]
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f7e:	f000 fe79 	bl	8006c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f82:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <xTaskCheckForTimeOut+0xbc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d102      	bne.n	8005fa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	e023      	b.n	8005fea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <xTaskCheckForTimeOut+0xc0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d007      	beq.n	8005fbe <xTaskCheckForTimeOut+0x82>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	e015      	b.n	8005fea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d20b      	bcs.n	8005fe0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ff9b 	bl	8005f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	e004      	b.n	8005fea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f000 fe73 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 8005fee:	69fb      	ldr	r3, [r7, #28]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000e44 	.word	0x20000e44
 8005ffc:	20000e58 	.word	0x20000e58

08006000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <vTaskMissedYield+0x14>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	bf00      	nop
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000e54 	.word	0x20000e54

08006018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006020:	f000 f852 	bl	80060c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <prvIdleTask+0x28>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d9f9      	bls.n	8006020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <prvIdleTask+0x2c>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800603c:	e7f0      	b.n	8006020 <prvIdleTask+0x8>
 800603e:	bf00      	nop
 8006040:	20000970 	.word	0x20000970
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	e00c      	b.n	800606e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <prvInitialiseTaskLists+0x60>)
 8006060:	4413      	add	r3, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fcf0 	bl	8004a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3301      	adds	r3, #1
 800606c:	607b      	str	r3, [r7, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b37      	cmp	r3, #55	; 0x37
 8006072:	d9ef      	bls.n	8006054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006074:	480d      	ldr	r0, [pc, #52]	; (80060ac <prvInitialiseTaskLists+0x64>)
 8006076:	f7fe fce7 	bl	8004a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800607a:	480d      	ldr	r0, [pc, #52]	; (80060b0 <prvInitialiseTaskLists+0x68>)
 800607c:	f7fe fce4 	bl	8004a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006080:	480c      	ldr	r0, [pc, #48]	; (80060b4 <prvInitialiseTaskLists+0x6c>)
 8006082:	f7fe fce1 	bl	8004a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006086:	480c      	ldr	r0, [pc, #48]	; (80060b8 <prvInitialiseTaskLists+0x70>)
 8006088:	f7fe fcde 	bl	8004a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800608c:	480b      	ldr	r0, [pc, #44]	; (80060bc <prvInitialiseTaskLists+0x74>)
 800608e:	f7fe fcdb 	bl	8004a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <prvInitialiseTaskLists+0x78>)
 8006094:	4a05      	ldr	r2, [pc, #20]	; (80060ac <prvInitialiseTaskLists+0x64>)
 8006096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <prvInitialiseTaskLists+0x7c>)
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <prvInitialiseTaskLists+0x68>)
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000970 	.word	0x20000970
 80060ac:	20000dd0 	.word	0x20000dd0
 80060b0:	20000de4 	.word	0x20000de4
 80060b4:	20000e00 	.word	0x20000e00
 80060b8:	20000e14 	.word	0x20000e14
 80060bc:	20000e2c 	.word	0x20000e2c
 80060c0:	20000df8 	.word	0x20000df8
 80060c4:	20000dfc 	.word	0x20000dfc

080060c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060ce:	e019      	b.n	8006104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060d0:	f000 fdd0 	bl	8006c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <prvCheckTasksWaitingTermination+0x50>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fd3b 	bl	8004b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	4a0b      	ldr	r2, [pc, #44]	; (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060fa:	f000 fdeb 	bl	8006cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f810 	bl	8006124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e1      	bne.n	80060d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000e14 	.word	0x20000e14
 800611c:	20000e40 	.word	0x20000e40
 8006120:	20000e28 	.word	0x20000e28

08006124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4618      	mov	r0, r3
 800613c:	f000 ff88 	bl	8007050 <vPortFree>
				vPortFree( pxTCB );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 ff85 	bl	8007050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006146:	e018      	b.n	800617a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800614e:	2b01      	cmp	r3, #1
 8006150:	d103      	bne.n	800615a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 ff7c 	bl	8007050 <vPortFree>
	}
 8006158:	e00f      	b.n	800617a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006160:	2b02      	cmp	r3, #2
 8006162:	d00a      	beq.n	800617a <prvDeleteTCB+0x56>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <prvDeleteTCB+0x54>
	}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvResetNextTaskUnblockTime+0x38>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800619c:	e008      	b.n	80061b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <prvResetNextTaskUnblockTime+0x38>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <prvResetNextTaskUnblockTime+0x3c>)
 80061ae:	6013      	str	r3, [r2, #0]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	20000df8 	.word	0x20000df8
 80061c0:	20000e60 	.word	0x20000e60

080061c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <xTaskGetSchedulerState+0x34>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061d2:	2301      	movs	r3, #1
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	e008      	b.n	80061ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <xTaskGetSchedulerState+0x38>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061e0:	2302      	movs	r3, #2
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e001      	b.n	80061ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ea:	687b      	ldr	r3, [r7, #4]
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	20000e4c 	.word	0x20000e4c
 80061fc:	20000e68 	.word	0x20000e68

08006200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d056      	beq.n	80062c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006216:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <xTaskPriorityDisinherit+0xd0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	429a      	cmp	r2, r3
 800621e:	d00a      	beq.n	8006236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60bb      	str	r3, [r7, #8]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	1e5a      	subs	r2, r3, #1
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	429a      	cmp	r2, r3
 8006268:	d02c      	beq.n	80062c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	2b00      	cmp	r3, #0
 8006270:	d128      	bne.n	80062c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fc70 	bl	8004b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <xTaskPriorityDisinherit+0xd4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d903      	bls.n	80062a4 <xTaskPriorityDisinherit+0xa4>
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <xTaskPriorityDisinherit+0xd4>)
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <xTaskPriorityDisinherit+0xd8>)
 80062b2:	441a      	add	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe fbf1 	bl	8004aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062c4:	697b      	ldr	r3, [r7, #20]
	}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	2000096c 	.word	0x2000096c
 80062d4:	20000e48 	.word	0x20000e48
 80062d8:	20000970 	.word	0x20000970

080062dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062e6:	4b21      	ldr	r3, [pc, #132]	; (800636c <prvAddCurrentTaskToDelayedList+0x90>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ec:	4b20      	ldr	r3, [pc, #128]	; (8006370 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fc32 	bl	8004b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d10a      	bne.n	8006316 <prvAddCurrentTaskToDelayedList+0x3a>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <prvAddCurrentTaskToDelayedList+0x94>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4819      	ldr	r0, [pc, #100]	; (8006374 <prvAddCurrentTaskToDelayedList+0x98>)
 8006310:	f7fe fbc7 	bl	8004aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006314:	e026      	b.n	8006364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800631e:	4b14      	ldr	r3, [pc, #80]	; (8006370 <prvAddCurrentTaskToDelayedList+0x94>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	429a      	cmp	r2, r3
 800632c:	d209      	bcs.n	8006342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <prvAddCurrentTaskToDelayedList+0x94>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f7fe fbd5 	bl	8004aea <vListInsert>
}
 8006340:	e010      	b.n	8006364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <prvAddCurrentTaskToDelayedList+0x94>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe fbcb 	bl	8004aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d202      	bcs.n	8006364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800635e:	4a08      	ldr	r2, [pc, #32]	; (8006380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6013      	str	r3, [r2, #0]
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000e44 	.word	0x20000e44
 8006370:	2000096c 	.word	0x2000096c
 8006374:	20000e2c 	.word	0x20000e2c
 8006378:	20000dfc 	.word	0x20000dfc
 800637c:	20000df8 	.word	0x20000df8
 8006380:	20000e60 	.word	0x20000e60

08006384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800638e:	f000 fb07 	bl	80069a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTimerCreateTimerTask+0x80>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063a2:	1d3a      	adds	r2, r7, #4
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fb31 	bl	8004a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	9202      	str	r2, [sp, #8]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	2302      	movs	r3, #2
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	460a      	mov	r2, r1
 80063c4:	4910      	ldr	r1, [pc, #64]	; (8006408 <xTimerCreateTimerTask+0x84>)
 80063c6:	4811      	ldr	r0, [pc, #68]	; (800640c <xTimerCreateTimerTask+0x88>)
 80063c8:	f7ff f8de 	bl	8005588 <xTaskCreateStatic>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <xTimerCreateTimerTask+0x8c>)
 80063d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063d2:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <xTimerCreateTimerTask+0x8c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063da:	2301      	movs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063fa:	697b      	ldr	r3, [r7, #20]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000e9c 	.word	0x20000e9c
 8006408:	0800732c 	.word	0x0800732c
 800640c:	08006549 	.word	0x08006549
 8006410:	20000ea0 	.word	0x20000ea0

08006414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	623b      	str	r3, [r7, #32]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006442:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <xTimerGenericCommand+0x98>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d02a      	beq.n	80064a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b05      	cmp	r3, #5
 800645a:	dc18      	bgt.n	800648e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800645c:	f7ff feb2 	bl	80061c4 <xTaskGetSchedulerState>
 8006460:	4603      	mov	r3, r0
 8006462:	2b02      	cmp	r3, #2
 8006464:	d109      	bne.n	800647a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <xTimerGenericCommand+0x98>)
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f107 0110 	add.w	r1, r7, #16
 800646e:	2300      	movs	r3, #0
 8006470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006472:	f7fe fca1 	bl	8004db8 <xQueueGenericSend>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24
 8006478:	e012      	b.n	80064a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <xTimerGenericCommand+0x98>)
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f107 0110 	add.w	r1, r7, #16
 8006482:	2300      	movs	r3, #0
 8006484:	2200      	movs	r2, #0
 8006486:	f7fe fc97 	bl	8004db8 <xQueueGenericSend>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24
 800648c:	e008      	b.n	80064a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <xTimerGenericCommand+0x98>)
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f107 0110 	add.w	r1, r7, #16
 8006496:	2300      	movs	r3, #0
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	f7fe fd8b 	bl	8004fb4 <xQueueGenericSendFromISR>
 800649e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000e9c 	.word	0x20000e9c

080064b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <prvProcessExpiredTimer+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fb47 	bl	8004b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d022      	beq.n	8006522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	18d1      	adds	r1, r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	6978      	ldr	r0, [r7, #20]
 80064ea:	f000 f8d1 	bl	8006690 <prvInsertTimerInActiveList>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01f      	beq.n	8006534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064f4:	2300      	movs	r3, #0
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	2100      	movs	r1, #0
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7ff ff88 	bl	8006414 <xTimerGenericCommand>
 8006504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d113      	bne.n	8006534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60fb      	str	r3, [r7, #12]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	b2da      	uxtb	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	6978      	ldr	r0, [r7, #20]
 800653a:	4798      	blx	r3
}
 800653c:	bf00      	nop
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000e94 	.word	0x20000e94

08006548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4618      	mov	r0, r3
 8006556:	f000 f857 	bl	8006608 <prvGetNextExpireTime>
 800655a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f803 	bl	800656c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006566:	f000 f8d5 	bl	8006714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800656a:	e7f1      	b.n	8006550 <prvTimerTask+0x8>

0800656c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006576:	f7ff fa43 	bl	8005a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800657a:	f107 0308 	add.w	r3, r7, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f866 	bl	8006650 <prvSampleTimeNow>
 8006584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d130      	bne.n	80065ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <prvProcessTimerOrBlockTask+0x3c>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	429a      	cmp	r2, r3
 8006598:	d806      	bhi.n	80065a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800659a:	f7ff fa3f 	bl	8005a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff85 	bl	80064b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065a6:	e024      	b.n	80065f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <prvProcessTimerOrBlockTask+0x90>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <prvProcessTimerOrBlockTask+0x50>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <prvProcessTimerOrBlockTask+0x52>
 80065bc:	2300      	movs	r3, #0
 80065be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <prvProcessTimerOrBlockTask+0x94>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4619      	mov	r1, r3
 80065ce:	f7fe ffa7 	bl	8005520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065d2:	f7ff fa23 	bl	8005a1c <xTaskResumeAll>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <prvProcessTimerOrBlockTask+0x98>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
}
 80065ec:	e001      	b.n	80065f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065ee:	f7ff fa15 	bl	8005a1c <xTaskResumeAll>
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000e98 	.word	0x20000e98
 8006600:	20000e9c 	.word	0x20000e9c
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <prvGetNextExpireTime+0x44>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <prvGetNextExpireTime+0x16>
 800661a:	2201      	movs	r2, #1
 800661c:	e000      	b.n	8006620 <prvGetNextExpireTime+0x18>
 800661e:	2200      	movs	r2, #0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d105      	bne.n	8006638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <prvGetNextExpireTime+0x44>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e001      	b.n	800663c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800663c:	68fb      	ldr	r3, [r7, #12]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000e94 	.word	0x20000e94

08006650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006658:	f7ff fa7e 	bl	8005b58 <xTaskGetTickCount>
 800665c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <prvSampleTimeNow+0x3c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d205      	bcs.n	8006674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006668:	f000 f936 	bl	80068d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e002      	b.n	800667a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800667a:	4a04      	ldr	r2, [pc, #16]	; (800668c <prvSampleTimeNow+0x3c>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000ea4 	.word	0x20000ea4

08006690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d812      	bhi.n	80066dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066c4:	2301      	movs	r3, #1
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e01b      	b.n	8006702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ca:	4b10      	ldr	r3, [pc, #64]	; (800670c <prvInsertTimerInActiveList+0x7c>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe fa08 	bl	8004aea <vListInsert>
 80066da:	e012      	b.n	8006702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d206      	bcs.n	80066f2 <prvInsertTimerInActiveList+0x62>
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d302      	bcc.n	80066f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e007      	b.n	8006702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <prvInsertTimerInActiveList+0x80>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f7fe f9f4 	bl	8004aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000e98 	.word	0x20000e98
 8006710:	20000e94 	.word	0x20000e94

08006714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08e      	sub	sp, #56	; 0x38
 8006718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800671a:	e0ca      	b.n	80068b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	da18      	bge.n	8006754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	3304      	adds	r3, #4
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61fb      	str	r3, [r7, #28]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674a:	6850      	ldr	r0, [r2, #4]
 800674c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674e:	6892      	ldr	r2, [r2, #8]
 8006750:	4611      	mov	r1, r2
 8006752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f2c0 80ab 	blt.w	80068b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	3304      	adds	r3, #4
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe f9f5 	bl	8004b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006772:	463b      	mov	r3, r7
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff6b 	bl	8006650 <prvSampleTimeNow>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b09      	cmp	r3, #9
 8006780:	f200 8096 	bhi.w	80068b0 <prvProcessReceivedCommands+0x19c>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <prvProcessReceivedCommands+0x78>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067b5 	.word	0x080067b5
 8006798:	08006829 	.word	0x08006829
 800679c:	0800683d 	.word	0x0800683d
 80067a0:	08006887 	.word	0x08006887
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067b5 	.word	0x080067b5
 80067ac:	08006829 	.word	0x08006829
 80067b0:	0800683d 	.word	0x0800683d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	18d1      	adds	r1, r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d4:	f7ff ff5c 	bl	8006690 <prvInsertTimerInActiveList>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d069      	beq.n	80068b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d05e      	beq.n	80068b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	441a      	add	r2, r3
 80067fc:	2300      	movs	r3, #0
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2300      	movs	r3, #0
 8006802:	2100      	movs	r1, #0
 8006804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006806:	f7ff fe05 	bl	8006414 <xTimerGenericCommand>
 800680a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d14f      	bne.n	80068b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61bb      	str	r3, [r7, #24]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800683a:	e03a      	b.n	80068b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	617b      	str	r3, [r7, #20]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	18d1      	adds	r1, r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006880:	f7ff ff06 	bl	8006690 <prvInsertTimerInActiveList>
					break;
 8006884:	e015      	b.n	80068b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d103      	bne.n	800689c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006896:	f000 fbdb 	bl	8007050 <vPortFree>
 800689a:	e00a      	b.n	80068b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ae:	e000      	b.n	80068b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80068b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <prvProcessReceivedCommands+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1d39      	adds	r1, r7, #4
 80068b8:	2200      	movs	r2, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fc16 	bl	80050ec <xQueueReceive>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f af2a 	bne.w	800671c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	; 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000e9c 	.word	0x20000e9c

080068d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068de:	e048      	b.n	8006972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068e0:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <prvSwitchTimerLists+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ea:	4b2b      	ldr	r3, [pc, #172]	; (8006998 <prvSwitchTimerLists+0xc0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe f92f 	bl	8004b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02e      	beq.n	8006972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d90e      	bls.n	8006944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006932:	4b19      	ldr	r3, [pc, #100]	; (8006998 <prvSwitchTimerLists+0xc0>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe f8d4 	bl	8004aea <vListInsert>
 8006942:	e016      	b.n	8006972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006944:	2300      	movs	r3, #0
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	2300      	movs	r3, #0
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fd60 	bl	8006414 <xTimerGenericCommand>
 8006954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	603b      	str	r3, [r7, #0]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <prvSwitchTimerLists+0xc0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1b1      	bne.n	80068e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <prvSwitchTimerLists+0xc0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <prvSwitchTimerLists+0xc4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvSwitchTimerLists+0xc0>)
 8006988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <prvSwitchTimerLists+0xc4>)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6013      	str	r3, [r2, #0]
}
 8006990:	bf00      	nop
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000e94 	.word	0x20000e94
 800699c:	20000e98 	.word	0x20000e98

080069a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069a6:	f000 f965 	bl	8006c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069aa:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d120      	bne.n	80069f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069b2:	4814      	ldr	r0, [pc, #80]	; (8006a04 <prvCheckForValidListAndQueue+0x64>)
 80069b4:	f7fe f848 	bl	8004a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069b8:	4813      	ldr	r0, [pc, #76]	; (8006a08 <prvCheckForValidListAndQueue+0x68>)
 80069ba:	f7fe f845 	bl	8004a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <prvCheckForValidListAndQueue+0x6c>)
 80069c0:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <prvCheckForValidListAndQueue+0x64>)
 80069c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <prvCheckForValidListAndQueue+0x70>)
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <prvCheckForValidListAndQueue+0x68>)
 80069c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <prvCheckForValidListAndQueue+0x74>)
 80069d0:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <prvCheckForValidListAndQueue+0x78>)
 80069d2:	2110      	movs	r1, #16
 80069d4:	200a      	movs	r0, #10
 80069d6:	f7fe f953 	bl	8004c80 <xQueueGenericCreateStatic>
 80069da:	4603      	mov	r3, r0
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <prvCheckForValidListAndQueue+0x60>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	490b      	ldr	r1, [pc, #44]	; (8006a1c <prvCheckForValidListAndQueue+0x7c>)
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fd6c 	bl	80054cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f4:	f000 f96e 	bl	8006cd4 <vPortExitCritical>
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000e9c 	.word	0x20000e9c
 8006a04:	20000e6c 	.word	0x20000e6c
 8006a08:	20000e80 	.word	0x20000e80
 8006a0c:	20000e94 	.word	0x20000e94
 8006a10:	20000e98 	.word	0x20000e98
 8006a14:	20000f48 	.word	0x20000f48
 8006a18:	20000ea8 	.word	0x20000ea8
 8006a1c:	08007334 	.word	0x08007334

08006a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a50:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <pxPortInitialiseStack+0x64>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3b14      	subs	r3, #20
 8006a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3b04      	subs	r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f06f 0202 	mvn.w	r2, #2
 8006a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3b20      	subs	r3, #32
 8006a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	08006a89 	.word	0x08006a89

08006a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <prvTaskExitError+0x54>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d00a      	beq.n	8006ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <prvTaskExitError+0x28>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60bb      	str	r3, [r7, #8]
}
 8006ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ac6:	bf00      	nop
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0fc      	beq.n	8006ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	2000000c 	.word	0x2000000c

08006ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b08:	4808      	ldr	r0, [pc, #32]	; (8006b2c <prvPortStartFirstTask+0x24>)
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f380 8808 	msr	MSP, r0
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8814 	msr	CONTROL, r0
 8006b1a:	b662      	cpsie	i
 8006b1c:	b661      	cpsie	f
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	df00      	svc	0
 8006b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b2a:	bf00      	nop
 8006b2c:	e000ed08 	.word	0xe000ed08

08006b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b36:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <xPortStartScheduler+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10a      	bne.n	8006b56 <xPortStartScheduler+0x26>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	; (8006c58 <xPortStartScheduler+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10a      	bne.n	8006b76 <xPortStartScheduler+0x46>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <xPortStartScheduler+0x130>)
 8006b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b9e:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba4:	e009      	b.n	8006bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d0ef      	beq.n	8006ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bc6:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1c3 0307 	rsb	r3, r3, #7
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d00a      	beq.n	8006be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60bb      	str	r3, [r7, #8]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c06:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c1e:	f000 f8dd 	bl	8006ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <xPortStartScheduler+0x13c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c28:	f000 f8fc 	bl	8006e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c38:	f7ff ff66 	bl	8006b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c3c:	f7ff f856 	bl	8005cec <vTaskSwitchContext>
	prvTaskExitError();
 8006c40:	f7ff ff22 	bl	8006a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	410fc271 	.word	0x410fc271
 8006c58:	410fc270 	.word	0x410fc270
 8006c5c:	e000e400 	.word	0xe000e400
 8006c60:	20000f98 	.word	0x20000f98
 8006c64:	20000f9c 	.word	0x20000f9c
 8006c68:	e000ed20 	.word	0xe000ed20
 8006c6c:	2000000c 	.word	0x2000000c
 8006c70:	e000ef34 	.word	0xe000ef34

08006c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	607b      	str	r3, [r7, #4]
}
 8006c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10f      	bne.n	8006cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <vPortEnterCritical+0x5c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	603b      	str	r3, [r7, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vPortEnterCritical+0x4a>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	2000000c 	.word	0x2000000c
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <vPortExitCritical+0x50>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <vPortExitCritical+0x24>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	607b      	str	r3, [r7, #4]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <vPortExitCritical+0x50>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vPortExitCritical+0x50>)
 8006d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <vPortExitCritical+0x50>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <vPortExitCritical+0x42>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000000c 	.word	0x2000000c
	...

08006d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d30:	f3ef 8009 	mrs	r0, PSP
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <pxCurrentTCBConst>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f01e 0f10 	tst.w	lr, #16
 8006d40:	bf08      	it	eq
 8006d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d54:	f380 8811 	msr	BASEPRI, r0
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f7fe ffc4 	bl	8005cec <vTaskSwitchContext>
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f380 8811 	msr	BASEPRI, r0
 8006d6c:	bc09      	pop	{r0, r3}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	f01e 0f10 	tst.w	lr, #16
 8006d7a:	bf08      	it	eq
 8006d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d80:	f380 8809 	msr	PSP, r0
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst>:
 8006d90:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006db2:	f7fe fee1 	bl	8005b78 <xTaskIncrementTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <xPortSysTickHandler+0x40>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <vPortSetupTimerInterrupt+0x38>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <vPortSetupTimerInterrupt+0x3c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <vPortSetupTimerInterrupt+0x40>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <vPortSetupTimerInterrupt+0x44>)
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dfe:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010
 8006e14:	e000e018 	.word	0xe000e018
 8006e18:	20000000 	.word	0x20000000
 8006e1c:	10624dd3 	.word	0x10624dd3
 8006e20:	e000e014 	.word	0xe000e014

08006e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e34 <vPortEnableVFP+0x10>
 8006e28:	6801      	ldr	r1, [r0, #0]
 8006e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e2e:	6001      	str	r1, [r0, #0]
 8006e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e32:	bf00      	nop
 8006e34:	e000ed88 	.word	0xe000ed88

08006e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e3e:	f3ef 8305 	mrs	r3, IPSR
 8006e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b0f      	cmp	r3, #15
 8006e48:	d914      	bls.n	8006e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <vPortValidateInterruptPriority+0x70>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e54:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vPortValidateInterruptPriority+0x74>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	7afa      	ldrb	r2, [r7, #11]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d20a      	bcs.n	8006e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <vPortValidateInterruptPriority+0x78>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <vPortValidateInterruptPriority+0x7c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d90a      	bls.n	8006e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	603b      	str	r3, [r7, #0]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <vPortValidateInterruptPriority+0x60>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e3f0 	.word	0xe000e3f0
 8006eac:	20000f98 	.word	0x20000f98
 8006eb0:	e000ed0c 	.word	0xe000ed0c
 8006eb4:	20000f9c 	.word	0x20000f9c

08006eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec4:	f7fe fd9c 	bl	8005a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ec8:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <pvPortMalloc+0x180>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed0:	f000 f920 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <pvPortMalloc+0x184>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 8093 	bne.w	8007008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	3308      	adds	r3, #8
 8006f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <pvPortMalloc+0x6c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	617b      	str	r3, [r7, #20]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d06e      	beq.n	8007008 <pvPortMalloc+0x150>
 8006f2a:	4b45      	ldr	r3, [pc, #276]	; (8007040 <pvPortMalloc+0x188>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d869      	bhi.n	8007008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f34:	4b43      	ldr	r3, [pc, #268]	; (8007044 <pvPortMalloc+0x18c>)
 8006f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <pvPortMalloc+0x18c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3e:	e004      	b.n	8006f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <pvPortMalloc+0xa4>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f1      	bne.n	8006f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <pvPortMalloc+0x180>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d050      	beq.n	8007008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	2308      	movs	r3, #8
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d91f      	bls.n	8006fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	613b      	str	r3, [r7, #16]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fc2:	69b8      	ldr	r0, [r7, #24]
 8006fc4:	f000 f908 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <pvPortMalloc+0x188>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <pvPortMalloc+0x188>)
 8006fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <pvPortMalloc+0x188>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <pvPortMalloc+0x190>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d203      	bcs.n	8006fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <pvPortMalloc+0x188>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <pvPortMalloc+0x190>)
 8006fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <pvPortMalloc+0x184>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <pvPortMalloc+0x194>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <pvPortMalloc+0x194>)
 8007006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007008:	f7fe fd08 	bl	8005a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <pvPortMalloc+0x174>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <pvPortMalloc+0x172>
	return pvReturn;
 800702c:	69fb      	ldr	r3, [r7, #28]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20001b60 	.word	0x20001b60
 800703c:	20001b74 	.word	0x20001b74
 8007040:	20001b64 	.word	0x20001b64
 8007044:	20001b58 	.word	0x20001b58
 8007048:	20001b68 	.word	0x20001b68
 800704c:	20001b6c 	.word	0x20001b6c

08007050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04d      	beq.n	80070fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007062:	2308      	movs	r3, #8
 8007064:	425b      	negs	r3, r3
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <vPortFree+0xb8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vPortFree+0x44>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60fb      	str	r3, [r7, #12]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <vPortFree+0x62>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60bb      	str	r3, [r7, #8]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <vPortFree+0xb8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01e      	beq.n	80070fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11a      	bne.n	80070fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <vPortFree+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070d8:	f7fe fc92 	bl	8005a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <vPortFree+0xbc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <vPortFree+0xbc>)
 80070e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f000 f874 	bl	80071d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <vPortFree+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a06      	ldr	r2, [pc, #24]	; (8007110 <vPortFree+0xc0>)
 80070f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070fa:	f7fe fc8f 	bl	8005a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20001b74 	.word	0x20001b74
 800710c:	20001b64 	.word	0x20001b64
 8007110:	20001b70 	.word	0x20001b70

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000fa0 	.word	0x20000fa0
 80071c4:	20001b58 	.word	0x20001b58
 80071c8:	20001b60 	.word	0x20001b60
 80071cc:	20001b68 	.word	0x20001b68
 80071d0:	20001b64 	.word	0x20001b64
 80071d4:	20001b74 	.word	0x20001b74

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20001b58 	.word	0x20001b58
 8007288:	20001b60 	.word	0x20001b60

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <__libc_init_array>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4d0d      	ldr	r5, [pc, #52]	; (80072d4 <__libc_init_array+0x38>)
 80072a0:	4c0d      	ldr	r4, [pc, #52]	; (80072d8 <__libc_init_array+0x3c>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	2600      	movs	r6, #0
 80072a8:	42a6      	cmp	r6, r4
 80072aa:	d109      	bne.n	80072c0 <__libc_init_array+0x24>
 80072ac:	4d0b      	ldr	r5, [pc, #44]	; (80072dc <__libc_init_array+0x40>)
 80072ae:	4c0c      	ldr	r4, [pc, #48]	; (80072e0 <__libc_init_array+0x44>)
 80072b0:	f000 f826 	bl	8007300 <_init>
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	2600      	movs	r6, #0
 80072ba:	42a6      	cmp	r6, r4
 80072bc:	d105      	bne.n	80072ca <__libc_init_array+0x2e>
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c4:	4798      	blx	r3
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7ee      	b.n	80072a8 <__libc_init_array+0xc>
 80072ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ce:	4798      	blx	r3
 80072d0:	3601      	adds	r6, #1
 80072d2:	e7f2      	b.n	80072ba <__libc_init_array+0x1e>
 80072d4:	080073b0 	.word	0x080073b0
 80072d8:	080073b0 	.word	0x080073b0
 80072dc:	080073b0 	.word	0x080073b0
 80072e0:	080073b4 	.word	0x080073b4

080072e4 <memcpy>:
 80072e4:	440a      	add	r2, r1
 80072e6:	4291      	cmp	r1, r2
 80072e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ec:	d100      	bne.n	80072f0 <memcpy+0xc>
 80072ee:	4770      	bx	lr
 80072f0:	b510      	push	{r4, lr}
 80072f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fa:	4291      	cmp	r1, r2
 80072fc:	d1f9      	bne.n	80072f2 <memcpy+0xe>
 80072fe:	bd10      	pop	{r4, pc}

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
