
BatteryPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b8  080076b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076c0  080076c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080076c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  20000010  080076d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fc4  080076d8  00021fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018725  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003591  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd7  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000331d  00000000  00000000  0003e1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016881  00000000  00000000  000414cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbfef  00000000  00000000  00057d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056bc  00000000  00000000  00133d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001393f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007530 	.word	0x08007530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007530 	.word	0x08007530

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN PFP */

uint32_t conversion_completed = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d104      	bne.n	80004ea <HAL_ADC_ConvCpltCallback+0x1e>
    conversion_completed++;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <HAL_ADC_ConvCpltCallback+0x30>)
 80004e8:	6013      	str	r3, [r2, #0]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	200006b4 	.word	0x200006b4

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fcc5 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f860 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9dc 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f9bc 	bl	800088c <MX_DMA_Init>
  MX_CAN1_Init();
 8000514:	f000 f954 	bl	80007c0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f988 	bl	800082c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f004 f9ce 	bl	80048c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of error_queue */
  error_queueHandle = osMessageQueueNew (16, sizeof(uint16_t), &error_queue_attributes);
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <main+0x8c>)
 8000526:	2102      	movs	r1, #2
 8000528:	2010      	movs	r0, #16
 800052a:	f004 fac0 	bl	8004aae <osMessageQueueNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <main+0x90>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of USB_queue */
  USB_queueHandle = osMessageQueueNew (16, sizeof(uint16_t), &USB_queue_attributes);
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <main+0x94>)
 8000536:	2102      	movs	r1, #2
 8000538:	2010      	movs	r0, #16
 800053a:	f004 fab8 	bl	8004aae <osMessageQueueNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a15      	ldr	r2, [pc, #84]	; (8000598 <main+0x98>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of pull_sensor */
  pull_sensorHandle = osThreadNew(StartAdcTask, NULL, &pull_sensor_attributes);
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <main+0x9c>)
 8000546:	2100      	movs	r1, #0
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <main+0xa0>)
 800054a:	f004 fa03 	bl	8004954 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <main+0xa4>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of CAN_requested */
  CAN_requestedHandle = osThreadNew(startCanTransmit, NULL, &CAN_requested_attributes);
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <main+0xa8>)
 8000556:	2100      	movs	r1, #0
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <main+0xac>)
 800055a:	f004 f9fb 	bl	8004954 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <main+0xb0>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of ERROR_handler */
  ERROR_handlerHandle = osThreadNew(startErrorTask, NULL, &ERROR_handler_attributes);
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <main+0xb4>)
 8000566:	2100      	movs	r1, #0
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <main+0xb8>)
 800056a:	f004 f9f3 	bl	8004954 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <main+0xbc>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of USB_output */
  USB_outputHandle = osThreadNew(startUsbTask, NULL, &USB_output_attributes);
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <main+0xc0>)
 8000576:	2100      	movs	r1, #0
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <main+0xc4>)
 800057a:	f004 f9eb 	bl	8004954 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <main+0xc8>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f004 f9c0 	bl	8004908 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x88>
 800058a:	bf00      	nop
 800058c:	08007640 	.word	0x08007640
 8000590:	20000198 	.word	0x20000198
 8000594:	08007658 	.word	0x08007658
 8000598:	2000019c 	.word	0x2000019c
 800059c:	080075b0 	.word	0x080075b0
 80005a0:	080009bd 	.word	0x080009bd
 80005a4:	20000188 	.word	0x20000188
 80005a8:	080075d4 	.word	0x080075d4
 80005ac:	08000ad5 	.word	0x08000ad5
 80005b0:	2000018c 	.word	0x2000018c
 80005b4:	080075f8 	.word	0x080075f8
 80005b8:	08000ae5 	.word	0x08000ae5
 80005bc:	20000190 	.word	0x20000190
 80005c0:	0800761c 	.word	0x0800761c
 80005c4:	08000af5 	.word	0x08000af5
 80005c8:	20000194 	.word	0x20000194

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 ff6e 	bl	80074bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f2:	f002 faf7 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fa82 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000616:	2314      	movs	r3, #20
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fb30 	bl	8002c90 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 fa65 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f002 ff30 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 fa51 	bl	8000b04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000662:	2200      	movs	r2, #0
 8000664:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000668:	2000      	movs	r0, #0
 800066a:	f003 f825 	bl	80036b8 <HAL_RCC_MCOConfig>
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	; 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <MX_ADC1_Init+0x12c>)
 8000690:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <MX_ADC1_Init+0x130>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000694:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MX_ADC1_Init+0x12c>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <MX_ADC1_Init+0x12c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006a6:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b2:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80006be:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006c0:	2205      	movs	r2, #5
 80006c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d8:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ee:	482d      	ldr	r0, [pc, #180]	; (80007a4 <MX_ADC1_Init+0x12c>)
 80006f0:	f000 fe0c 	bl	800130c <HAL_ADC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006fa:	f000 fa03 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_ADC1_Init+0x134>)
 8000700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000702:	2306      	movs	r3, #6
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070a:	237f      	movs	r3, #127	; 0x7f
 800070c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070e:	2304      	movs	r3, #4
 8000710:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4822      	ldr	r0, [pc, #136]	; (80007a4 <MX_ADC1_Init+0x12c>)
 800071c:	f000 ffd0 	bl	80016c0 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000726:	f000 f9ed 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x138>)
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800072e:	230c      	movs	r3, #12
 8000730:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	481b      	ldr	r0, [pc, #108]	; (80007a4 <MX_ADC1_Init+0x12c>)
 8000738:	f000 ffc2 	bl	80016c0 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000742:	f000 f9df 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_ADC1_Init+0x13c>)
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800074a:	2312      	movs	r3, #18
 800074c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x12c>)
 8000754:	f000 ffb4 	bl	80016c0 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800075e:	f000 f9d1 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ADC1_Init+0x140>)
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000766:	2318      	movs	r3, #24
 8000768:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_ADC1_Init+0x12c>)
 8000770:	f000 ffa6 	bl	80016c0 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800077a:	f000 f9c3 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_ADC1_Init+0x144>)
 8000780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0x12c>)
 800078e:	f000 ff97 	bl	80016c0 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000798:	f000 f9b4 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000002c 	.word	0x2000002c
 80007a8:	50040000 	.word	0x50040000
 80007ac:	19200040 	.word	0x19200040
 80007b0:	1d500080 	.word	0x1d500080
 80007b4:	21800100 	.word	0x21800100
 80007b8:	25b00200 	.word	0x25b00200
 80007bc:	2a000400 	.word	0x2a000400

080007c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_CAN1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_CAN1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_CAN1_Init+0x64>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_CAN1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_CAN1_Init+0x64>)
 80007de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_CAN1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_CAN1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_CAN1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_CAN1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_CAN1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_CAN1_Init+0x64>)
 8000810:	f001 fc52 	bl	80020b8 <HAL_CAN_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 f973 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000d8 	.word	0x200000d8
 8000828:	40006400 	.word	0x40006400

0800082c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_USART1_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000870:	f003 fb62 	bl	8003f38 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f943 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000100 	.word	0x20000100
 8000888:	40013800 	.word	0x40013800

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x38>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x38>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6493      	str	r3, [r2, #72]	; 0x48
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x38>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	200b      	movs	r0, #11
 80008b0:	f001 fdd9 	bl	8002466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008b4:	200b      	movs	r0, #11
 80008b6:	f001 fdf2 	bl	800249e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_GPIO_Init+0xe8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPLED1_Pin|GPLED2_Pin|GPLED3_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2138      	movs	r1, #56	; 0x38
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_GPIO_Init+0xec>)
 800092c:	f002 f934 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_GPIO_Init+0xf0>)
 8000948:	f001 ffbc 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 ffaa 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800097a:	2302      	movs	r3, #2
 800097c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 ff9c 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLED1_Pin GPLED2_Pin GPLED3_Pin */
  GPIO_InitStruct.Pin = GPLED1_Pin|GPLED2_Pin|GPLED3_Pin;
 800098c:	2338      	movs	r3, #56	; 0x38
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xec>)
 80009a4:	f001 ff8e 	bl	80028c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400
 80009b8:	48000800 	.word	0x48000800

080009bc <StartAdcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const float ADC_VOLT_REF = 3.3F / 4096.0F;
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <StartAdcTask+0xf8>)
 80009c6:	617b      	str	r3, [r7, #20]
	const float VOLT_TO_CURR = 2.5F; //A/V
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <StartAdcTask+0xfc>)
 80009ca:	613b      	str	r3, [r7, #16]
	const float BATTERY_VOLT_DIVIDER = 10.8039215549; // voltage divider input 18.5v/ output 1.7123412v
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <StartAdcTask+0x100>)
 80009ce:	60fb      	str	r3, [r7, #12]
	const float OUTPUT_VOLT_DIVIDER = 7.10638299762; // voltage divider input 12v/ output 1.68862275v
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <StartAdcTask+0x104>)
 80009d2:	60bb      	str	r3, [r7, #8]
	memset(adcResults, 0, 5);
 80009d4:	2205      	movs	r2, #5
 80009d6:	2100      	movs	r1, #0
 80009d8:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <StartAdcTask+0x108>)
 80009da:	f006 fd6f 	bl	80074bc <memset>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 80009de:	2205      	movs	r2, #5
 80009e0:	4938      	ldr	r1, [pc, #224]	; (8000ac4 <StartAdcTask+0x108>)
 80009e2:	4839      	ldr	r0, [pc, #228]	; (8000ac8 <StartAdcTask+0x10c>)
 80009e4:	f000 fdd4 	bl	8001590 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {
	  if (conversion_completed == 1) {
 80009e8:	4b38      	ldr	r3, [pc, #224]	; (8000acc <StartAdcTask+0x110>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d15c      	bne.n	8000aaa <StartAdcTask+0xee>
		  battery_board_data.batt_volt[0] = adcResults[0] * ADC_VOLT_REF * BATTERY_VOLT_DIVIDER;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <StartAdcTask+0x108>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	ee07 3a90 	vmov	s15, r3
 80009f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <StartAdcTask+0x114>)
 8000a0e:	edc3 7a00 	vstr	s15, [r3]
		  battery_board_data.batt_cur[0] = adcResults[1] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <StartAdcTask+0x108>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <StartAdcTask+0x114>)
 8000a30:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
		  battery_board_data.output_cur[0] = adcResults[2] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <StartAdcTask+0x108>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <StartAdcTask+0x114>)
 8000a52:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		  battery_board_data.output_volt[0] = adcResults[3] * ADC_VOLT_REF * OUTPUT_VOLT_DIVIDER;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <StartAdcTask+0x108>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <StartAdcTask+0x114>)
 8000a74:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		  battery_board_data.output_cur[0] = adcResults[4] * ADC_VOLT_REF * VOLT_TO_CURR;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <StartAdcTask+0x108>)
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	ee07 3a90 	vmov	s15, r3
 8000a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <StartAdcTask+0x114>)
 8000a96:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResults, 5);
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <StartAdcTask+0x108>)
 8000a9e:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <StartAdcTask+0x10c>)
 8000aa0:	f000 fd76 	bl	8001590 <HAL_ADC_Start_DMA>
		  conversion_completed = 0;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <StartAdcTask+0x110>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f003 ffe4 	bl	8004a78 <osDelay>
	  if (conversion_completed == 1) {
 8000ab0:	e79a      	b.n	80009e8 <StartAdcTask+0x2c>
 8000ab2:	bf00      	nop
 8000ab4:	3a533333 	.word	0x3a533333
 8000ab8:	40200000 	.word	0x40200000
 8000abc:	412cdcdd 	.word	0x412cdcdd
 8000ac0:	40e3677d 	.word	0x40e3677d
 8000ac4:	200006a0 	.word	0x200006a0
 8000ac8:	2000002c 	.word	0x2000002c
 8000acc:	200006b4 	.word	0x200006b4
 8000ad0:	200001a0 	.word	0x200001a0

08000ad4 <startCanTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCanTransmit */
void startCanTransmit(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCanTransmit */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f003 ffcb 	bl	8004a78 <osDelay>
 8000ae2:	e7fb      	b.n	8000adc <startCanTransmit+0x8>

08000ae4 <startErrorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorTask */
void startErrorTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startErrorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f003 ffc3 	bl	8004a78 <osDelay>
 8000af2:	e7fb      	b.n	8000aec <startErrorTask+0x8>

08000af4 <startUsbTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUsbTask */
void startUsbTask(void *argument)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUsbTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f003 ffbb 	bl	8004a78 <osDelay>
 8000b02:	e7fb      	b.n	8000afc <startUsbTask+0x8>

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f001 fc8a 	bl	8002466 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2254      	movs	r2, #84	; 0x54
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 fc9b 	bl	80074bc <memset>
  if(hadc->Instance==ADC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <HAL_ADC_MspInit+0x118>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d16e      	bne.n	8000c6e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b9a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fed2 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bca:	f7ff ff9b 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_ADC_MspInit+0x11c>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ACD_Battery_Voltage_Pin|Battery_Curr_Pin|Current_Out_12V_Pin|ADC_12V_Voltage_Out_Pin
 8000bfe:	233e      	movs	r3, #62	; 0x3e
 8000c00:	667b      	str	r3, [r7, #100]	; 0x64
                          |Current_Buck_12V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c02:	230b      	movs	r3, #11
 8000c04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f001 fe56 	bl	80028c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <HAL_ADC_MspInit+0x124>)
 8000c1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c54:	f001 fc3e 	bl	80024d4 <HAL_DMA_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000c5e:	f7ff ff51 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <HAL_ADC_MspInit+0x120>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3778      	adds	r7, #120	; 0x78
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	50040000 	.word	0x50040000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	20000090 	.word	0x20000090
 8000c84:	40020008 	.word	0x40020008

08000c88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_CAN_MspInit+0x80>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d129      	bne.n	8000cfe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cec:	2309      	movs	r3, #9
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f001 fde3 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09e      	sub	sp, #120	; 0x78
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2254      	movs	r2, #84	; 0x54
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fbc3 	bl	80074bc <memset>
  if(huart->Instance==USART1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d135      	bne.n	8000dac <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fe0b 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff fed4 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d60:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6613      	str	r3, [r2, #96]	; 0x60
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000da8:	f001 fd8c 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3778      	adds	r7, #120	; 0x78
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013800 	.word	0x40013800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8a4 	bl	8000f3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000df4:	f005 fafa 	bl	80063ec <xTaskGetSchedulerState>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dfe:	f006 f8e3 	bl	8006fc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA1_Channel1_IRQHandler+0x10>)
 8000e0e:	f001 fc79 	bl	8002704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000090 	.word	0x20000090

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f006 fb2d 	bl	80074cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fb45 	bl	8000500 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e84:	080076c8 	.word	0x080076c8
  ldr r2, =_sbss
 8000e88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e8c:	20001fc4 	.word	0x20001fc4

08000e90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f001 fad7 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f80e 	bl	8000ec4 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff fe2c 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_InitTick+0x6c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d023      	beq.n	8000f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_InitTick+0x70>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_InitTick+0x6c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fae3 	bl	80024ba <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d809      	bhi.n	8000f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f001 faad 	bl	8002466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_InitTick+0x74>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e004      	b.n	8000f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e001      	b.n	8000f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200006b8 	.word	0x200006b8

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200006b8 	.word	0x200006b8

08000f7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	609a      	str	r2, [r3, #8]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3360      	adds	r3, #96	; 0x60
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <LL_ADC_SetOffset+0x44>)
 8001006:	4013      	ands	r3, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	4313      	orrs	r3, r2
 8001014:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	03fff000 	.word	0x03fff000

0800102c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3360      	adds	r3, #96	; 0x60
 800103a:	461a      	mov	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3360      	adds	r3, #96	; 0x60
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	431a      	orrs	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3330      	adds	r3, #48	; 0x30
 80010c4:	461a      	mov	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	211f      	movs	r1, #31
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	0e9b      	lsrs	r3, r3, #26
 80010ec:	f003 011f 	and.w	r1, r3, #31
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	431a      	orrs	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3314      	adds	r3, #20
 800111c:	461a      	mov	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	0e5b      	lsrs	r3, r3, #25
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	0d1b      	lsrs	r3, r3, #20
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	2107      	movs	r1, #7
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	401a      	ands	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	0d1b      	lsrs	r3, r3, #20
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0318 	and.w	r3, r3, #24
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001188:	40d9      	lsrs	r1, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	400b      	ands	r3, r1
 800118e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001192:	431a      	orrs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	0007ffff 	.word	0x0007ffff

080011ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6093      	str	r3, [r2, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e4:	d101      	bne.n	80011ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800120c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001234:	d101      	bne.n	800123a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <LL_ADC_IsEnabled+0x18>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_ADC_IsEnabled+0x1a>
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012aa:	f043 0204 	orr.w	r2, r3, #4
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d101      	bne.n	80012fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e126      	b.n	8001574 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fc13 	bl	8000b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff3f 	bl	80011d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff25 	bl	80011ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff5a 	bl	8001220 <LL_ADC_IsInternalRegulatorEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff3e 	bl	80011f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800137c:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_ADC_Init+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	4a7f      	ldr	r2, [pc, #508]	; (8001580 <HAL_ADC_Init+0x274>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	3301      	adds	r3, #1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001390:	e002      	b.n	8001398 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff3c 	bl	8001220 <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	f043 0210 	orr.w	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff75 	bl	80012be <LL_ADC_REG_IsConversionOngoing>
 80013d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80bf 	bne.w	8001562 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 80bb 	bne.w	8001562 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013f4:	f043 0202 	orr.w	r2, r3, #2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff35 	bl	8001270 <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800140c:	485d      	ldr	r0, [pc, #372]	; (8001584 <HAL_ADC_Init+0x278>)
 800140e:	f7ff ff2f 	bl	8001270 <LL_ADC_IsEnabled>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4619      	mov	r1, r3
 800141e:	485a      	ldr	r0, [pc, #360]	; (8001588 <HAL_ADC_Init+0x27c>)
 8001420:	f7ff fdac 	bl	8000f7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7e5b      	ldrb	r3, [r3, #25]
 8001428:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800142e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001434:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800143a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	045b      	lsls	r3, r3, #17
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_ADC_Init+0x280>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff25 	bl	80012e4 <LL_ADC_INJ_IsConversionOngoing>
 800149a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d13d      	bne.n	800151e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d13a      	bne.n	800151e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014c4:	f023 0302 	bic.w	r3, r3, #2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	69b9      	ldr	r1, [r7, #24]
 80014ce:	430b      	orrs	r3, r1
 80014d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d118      	bne.n	800150e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014e6:	f023 0304 	bic.w	r3, r3, #4
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014fe:	430a      	orrs	r2, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	e007      	b.n	800151e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10c      	bne.n	8001540 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f023 010f 	bic.w	r1, r3, #15
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
 800153e:	e007      	b.n	8001550 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020f 	bic.w	r2, r2, #15
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
 8001560:	e007      	b.n	8001572 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001572:	7ffb      	ldrb	r3, [r7, #31]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	053e2d63 	.word	0x053e2d63
 8001584:	50040000 	.word	0x50040000
 8001588:	50040300 	.word	0x50040300
 800158c:	fff0c007 	.word	0xfff0c007

08001590 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe8c 	bl	80012be <LL_ADC_REG_IsConversionOngoing>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d167      	bne.n	800167c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Start_DMA+0x2a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e063      	b.n	8001682 <HAL_ADC_Start_DMA+0xf2>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fc5e 	bl	8001e84 <ADC_Enable>
 80015c8:	4603      	mov	r3, r0
 80015ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d14f      	bne.n	8001672 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f023 0206 	bic.w	r2, r3, #6
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58
 80015fe:	e002      	b.n	8001606 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_ADC_Start_DMA+0xfc>)
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_ADC_Start_DMA+0x100>)
 8001614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_ADC_Start_DMA+0x104>)
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	221c      	movs	r2, #28
 8001624:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0210 	orr.w	r2, r2, #16
 800163c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3340      	adds	r3, #64	; 0x40
 8001658:	4619      	mov	r1, r3
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f000 fff1 	bl	8002644 <HAL_DMA_Start_IT>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe13 	bl	8001296 <LL_ADC_REG_StartConversion>
 8001670:	e006      	b.n	8001680 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800167a:	e001      	b.n	8001680 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800167c:	2302      	movs	r3, #2
 800167e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	08001f91 	.word	0x08001f91
 8001690:	08002069 	.word	0x08002069
 8001694:	08002085 	.word	0x08002085

08001698 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0b6      	sub	sp, #216	; 0xd8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x22>
 80016de:	2302      	movs	r3, #2
 80016e0:	e3bb      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x79a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fde5 	bl	80012be <LL_ADC_REG_IsConversionOngoing>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 83a0 	bne.w	8001e3c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d824      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3b02      	subs	r3, #2
 8001712:	2b03      	cmp	r3, #3
 8001714:	d81b      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x8e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_ADC_ConfigChannel+0x5c>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001735 	.word	0x08001735
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001745 	.word	0x08001745
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800172c:	230c      	movs	r3, #12
 800172e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001732:	e010      	b.n	8001756 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001734:	2312      	movs	r3, #18
 8001736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800173a:	e00c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800173c:	2318      	movs	r3, #24
 800173e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001742:	e008      	b.n	8001756 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800174c:	e003      	b.n	8001756 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800174e:	2306      	movs	r3, #6
 8001750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001754:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001764:	f7ff fca6 	bl	80010b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fda6 	bl	80012be <LL_ADC_REG_IsConversionOngoing>
 8001772:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fdb2 	bl	80012e4 <LL_ADC_INJ_IsConversionOngoing>
 8001780:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 81a4 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800178e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 819f 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f7ff fcb1 	bl	800110c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00a      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017dc:	f7ff fc02 	bl	8000fe4 <LL_ADC_SetOffset>
 80017e0:	e179      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc1f 	bl	800102c <LL_ADC_GetOffsetChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <HAL_ADC_ConfigChannel+0x14e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc14 	bl	800102c <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	e01e      	b.n	800184c <HAL_ADC_ConfigChannel+0x18c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc09 	bl	800102c <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800182c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001834:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800183c:	2320      	movs	r3, #32
 800183e:	e004      	b.n	800184a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1a4>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0e9b      	lsrs	r3, r3, #26
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	e018      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1d6>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800187c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001888:	2320      	movs	r3, #32
 800188a:	e004      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800188c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001896:	429a      	cmp	r2, r3
 8001898:	d106      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fbd8 	bl	8001058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fbbc 	bl	800102c <LL_ADC_GetOffsetChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x214>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fbb1 	bl	800102c <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	e01e      	b.n	8001912 <HAL_ADC_ConfigChannel+0x252>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fba6 	bl	800102c <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80018f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80018fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001902:	2320      	movs	r3, #32
 8001904:	e004      	b.n	8001910 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <HAL_ADC_ConfigChannel+0x26a>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	e018      	b.n	800195c <HAL_ADC_ConfigChannel+0x29c>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800193e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001942:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e004      	b.n	800195c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb75 	bl	8001058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2102      	movs	r1, #2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb59 	bl	800102c <LL_ADC_GetOffsetChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <HAL_ADC_ConfigChannel+0x2da>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb4e 	bl	800102c <LL_ADC_GetOffsetChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	e01e      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x318>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2102      	movs	r1, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb43 	bl	800102c <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80019b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80019c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e004      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80019cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x330>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	e014      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x35a>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80019fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e004      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d106      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	2102      	movs	r1, #2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fb16 	bl	8001058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2103      	movs	r1, #3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fafa 	bl	800102c <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x398>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2103      	movs	r1, #3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff faef 	bl	800102c <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	f003 021f 	and.w	r2, r3, #31
 8001a56:	e017      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x3c8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fae4 	bl	800102c <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a72:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	e003      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x3e0>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	e011      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x404>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2103      	movs	r1, #3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fac1 	bl	8001058 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fbc8 	bl	8001270 <LL_ADC_IsEnabled>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 8140 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f7ff fb35 	bl	8001164 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a8f      	ldr	r2, [pc, #572]	; (8001d3c <HAL_ADC_ConfigChannel+0x67c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	f040 8131 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10b      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x46e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	bf94      	ite	ls
 8001b26:	2301      	movls	r3, #1
 8001b28:	2300      	movhi	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	e019      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x4a2>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e003      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	bf94      	ite	ls
 8001b5c:	2301      	movls	r3, #1
 8001b5e:	2300      	movhi	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d079      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x4c2>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	3301      	adds	r3, #1
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b80:	e015      	b.n	8001bae <HAL_ADC_ConfigChannel+0x4ee>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b92:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e003      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	069b      	lsls	r3, r3, #26
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x50e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	e017      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x53e>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	ea42 0103 	orr.w	r1, r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x564>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	3301      	adds	r3, #1
 8001c16:	f003 021f 	and.w	r2, r3, #31
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	051b      	lsls	r3, r3, #20
 8001c22:	e018      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x596>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f003 021f 	and.w	r2, r3, #31
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c56:	430b      	orrs	r3, r1
 8001c58:	e081      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x5b6>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c74:	e015      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x5e2>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x602>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	e017      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x632>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	61bb      	str	r3, [r7, #24]
  return result;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	ea42 0103 	orr.w	r1, r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x65e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 021f 	and.w	r2, r3, #31
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	051b      	lsls	r3, r3, #20
 8001d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	e01e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x69c>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e006      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x688>
 8001d3a:	bf00      	nop
 8001d3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	051b      	lsls	r3, r3, #20
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7ff f9d2 	bl	800110c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d06c      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d74:	483c      	ldr	r0, [pc, #240]	; (8001e68 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d76:	f7ff f927 	bl	8000fc8 <LL_ADC_GetCommonPathInternalCh>
 8001d7a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <HAL_ADC_ConfigChannel+0x7ac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d127      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d121      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a35      	ldr	r2, [pc, #212]	; (8001e70 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d157      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001da2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da6:	4619      	mov	r1, r3
 8001da8:	482f      	ldr	r0, [pc, #188]	; (8001e68 <HAL_ADC_ConfigChannel+0x7a8>)
 8001daa:	f7ff f8fa 	bl	8000fa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_ADC_ConfigChannel+0x7b4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <HAL_ADC_ConfigChannel+0x7b8>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd6:	e03a      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d113      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10d      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_ADC_ConfigChannel+0x7b0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d12a      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e00:	4619      	mov	r1, r3
 8001e02:	4819      	ldr	r0, [pc, #100]	; (8001e68 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e04:	f7ff f8cd 	bl	8000fa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e08:	e021      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d11c      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d116      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d111      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e36:	f7ff f8b4 	bl	8000fa2 <LL_ADC_SetCommonPathInternalCh>
 8001e3a:	e008      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	37d8      	adds	r7, #216	; 0xd8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	80080000 	.word	0x80080000
 8001e68:	50040300 	.word	0x50040300
 8001e6c:	c7520000 	.word	0xc7520000
 8001e70:	50040000 	.word	0x50040000
 8001e74:	20000000 	.word	0x20000000
 8001e78:	053e2d63 	.word	0x053e2d63
 8001e7c:	cb840000 	.word	0xcb840000
 8001e80:	80000001 	.word	0x80000001

08001e84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f9eb 	bl	8001270 <LL_ADC_IsEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d169      	bne.n	8001f74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <ADC_Enable+0xfc>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e055      	b.n	8001f76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f9ba 	bl	8001248 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ed4:	482b      	ldr	r0, [pc, #172]	; (8001f84 <ADC_Enable+0x100>)
 8001ed6:	f7ff f877 	bl	8000fc8 <LL_ADC_GetCommonPathInternalCh>
 8001eda:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <ADC_Enable+0x104>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <ADC_Enable+0x108>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001efe:	e002      	b.n	8001f06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f82a 	bl	8000f64 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f12:	e028      	b.n	8001f66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f9a9 	bl	8001270 <LL_ADC_IsEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f98d 	bl	8001248 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f2e:	f7ff f819 	bl	8000f64 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d914      	bls.n	8001f66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00d      	beq.n	8001f66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d1cf      	bne.n	8001f14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	8000003f 	.word	0x8000003f
 8001f84:	50040300 	.word	0x50040300
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	053e2d63 	.word	0x053e2d63

08001f90 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d14b      	bne.n	8002042 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f860 	bl	800108e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d032      	beq.n	800203a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12b      	bne.n	800203a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11f      	bne.n	800203a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
 8002006:	e018      	b.n	800203a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d111      	bne.n	800203a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7fe fa46 	bl	80004cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002040:	e00e      	b.n	8002060 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fb2c 	bl	80016ac <HAL_ADC_ErrorCallback>
}
 8002054:	e004      	b.n	8002060 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff fb0e 	bl	8001698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f043 0204 	orr.w	r2, r3, #4
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff fafe 	bl	80016ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0ed      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fdd6 	bl	8000c88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7fe ff3a 	bl	8000f64 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f2:	e012      	b.n	800211a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f4:	f7fe ff36 	bl	8000f64 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	d90b      	bls.n	800211a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0c5      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0e5      	beq.n	80020f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0202 	bic.w	r2, r2, #2
 8002136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7fe ff14 	bl	8000f64 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800213e:	e012      	b.n	8002166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002140:	f7fe ff10 	bl	8000f64 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d90b      	bls.n	8002166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e09f      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e5      	bne.n	8002140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e9b      	ldrb	r3, [r3, #26]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0220 	bic.w	r2, r2, #32
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7edb      	ldrb	r3, [r3, #27]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0210 	bic.w	r2, r2, #16
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e007      	b.n	8002246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f5b      	ldrb	r3, [r3, #29]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e098      	b.n	8002618 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_DMA_Init+0x150>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d80f      	bhi.n	8002512 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_DMA_Init+0x154>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_DMA_Init+0x158>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_DMA_Init+0x15c>)
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
 8002510:	e00e      	b.n	8002530 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_DMA_Init+0x160>)
 800251a:	4413      	add	r3, r2
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_DMA_Init+0x158>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_DMA_Init+0x164>)
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258a:	d039      	beq.n	8002600 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_DMA_Init+0x15c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11a      	bne.n	80025cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_DMA_Init+0x168>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f003 031c 	and.w	r3, r3, #28
 80025a2:	210f      	movs	r1, #15
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_DMA_Init+0x168>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_DMA_Init+0x168>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f003 031c 	and.w	r3, r3, #28
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	491d      	ldr	r1, [pc, #116]	; (800263c <HAL_DMA_Init+0x168>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e019      	b.n	8002600 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f003 031c 	and.w	r3, r3, #28
 80025d8:	210f      	movs	r1, #15
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f003 031c 	and.w	r3, r3, #28
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	4911      	ldr	r1, [pc, #68]	; (8002640 <HAL_DMA_Init+0x16c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40020407 	.word	0x40020407
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020000 	.word	0x40020000
 8002634:	bffdfbf8 	.word	0xbffdfbf8
 8002638:	40020400 	.word	0x40020400
 800263c:	400200a8 	.word	0x400200a8
 8002640:	400204a8 	.word	0x400204a8

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Start_IT+0x20>
 8002660:	2302      	movs	r3, #2
 8002662:	e04b      	b.n	80026fc <HAL_DMA_Start_IT+0xb8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d13a      	bne.n	80026ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f8e0 	bl	8002862 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 020e 	orr.w	r2, r2, #14
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00f      	b.n	80026dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 020a 	orr.w	r2, r2, #10
 80026da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e005      	b.n	80026fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
 80026f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f003 031c 	and.w	r3, r3, #28
 8002724:	2204      	movs	r2, #4
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d026      	beq.n	800277e <HAL_DMA_IRQHandler+0x7a>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d021      	beq.n	800277e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f003 021c 	and.w	r2, r3, #28
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2104      	movs	r1, #4
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	2b00      	cmp	r3, #0
 8002772:	d071      	beq.n	8002858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800277c:	e06c      	b.n	8002858 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 031c 	and.w	r3, r3, #28
 8002786:	2202      	movs	r2, #2
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02e      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xec>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d029      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 020a 	bic.w	r2, r2, #10
 80027b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f003 021c 	and.w	r2, r3, #28
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2102      	movs	r1, #2
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d038      	beq.n	8002858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80027ee:	e033      	b.n	8002858 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f003 031c 	and.w	r3, r3, #28
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02a      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d025      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 020e 	bic.w	r2, r2, #14
 800281c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 021c 	and.w	r2, r3, #28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002858:	bf00      	nop
 800285a:	bf00      	nop
}
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 021c 	and.w	r2, r3, #28
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d108      	bne.n	80028a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a4:	e007      	b.n	80028b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	e148      	b.n	8002b66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 813a 	beq.w	8002b60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d005      	beq.n	8002904 <HAL_GPIO_Init+0x40>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d130      	bne.n	8002966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800293a:	2201      	movs	r2, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0201 	and.w	r2, r3, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b03      	cmp	r3, #3
 8002970:	d017      	beq.n	80029a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8094 	beq.w	8002b60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6613      	str	r3, [r2, #96]	; 0x60
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_Init+0x1d4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	; (8002b8c <HAL_GPIO_Init+0x2c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x1d0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_GPIO_Init+0x2cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_Init+0x1cc>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e004      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a90:	2307      	movs	r3, #7
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	f002 0203 	and.w	r2, r2, #3
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aaa:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002adc:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b06:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b5a:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f aeaf 	bne.w	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	48000400 	.word	0x48000400
 8002b90:	48000800 	.word	0x48000800
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d130      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d038      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9b      	lsrs	r3, r3, #18
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c28:	e002      	b.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d102      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f2      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d110      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e00f      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d007      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 bc02 	b.w	80034a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cae:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80e4 	beq.w	8002e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4c>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	f040 808b 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 8087 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x64>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e3d9      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_RCC_OscConfig+0x7e>
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_OscConfig+0x8a>
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d223      	bcs.n	8002d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fdc0 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e3ba      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	496d      	ldr	r1, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	4968      	ldr	r1, [pc, #416]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e025      	b.n	8002db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d66:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	495b      	ldr	r1, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fd80 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e37a      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db2:	f000 fcb5 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	4950      	ldr	r1, [pc, #320]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f874 	bl	8000ec4 <HAL_InitTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d052      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	e35e      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d032      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a42      	ldr	r2, [pc, #264]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe f8b1 	bl	8000f64 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e06:	f7fe f8ad 	bl	8000f64 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e347      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4930      	ldr	r1, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	492b      	ldr	r1, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e64:	f7fe f87e 	bl	8000f64 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6c:	f7fe f87a 	bl	8000f64 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e314      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1dc>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d073      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x21c>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d063      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d15f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e2f1      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x24c>
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e025      	b.n	8002f28 <HAL_RCC_OscConfig+0x298>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d114      	bne.n	8002f10 <HAL_RCC_OscConfig+0x280>
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a02      	ldr	r2, [pc, #8]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x298>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08007670 	.word	0x08007670
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a9f      	ldr	r2, [pc, #636]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b9d      	ldr	r3, [pc, #628]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a9c      	ldr	r2, [pc, #624]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f818 	bl	8000f64 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe f814 	bl	8000f64 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2ae      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe f804 	bl	8000f64 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe f800 	bl	8000f64 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e29a      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d0>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d060      	beq.n	8003050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x310>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d116      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x328>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e277      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	4973      	ldr	r1, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	e040      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd6:	4b6f      	ldr	r3, [pc, #444]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fd ffbf 	bl	8000f64 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fd ffbb 	bl	8000f64 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e255      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	4b65      	ldr	r3, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b62      	ldr	r3, [pc, #392]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	495f      	ldr	r1, [pc, #380]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e018      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5c      	ldr	r2, [pc, #368]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd ff9b 	bl	8000f64 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fd ff97 	bl	8000f64 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e231      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01c      	beq.n	800309e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fd ff76 	bl	8000f64 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fd ff72 	bl	8000f64 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e20c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ef      	beq.n	800307c <HAL_RCC_OscConfig+0x3ec>
 800309c:	e01b      	b.n	80030d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fd ff59 	bl	8000f64 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fd ff55 	bl	8000f64 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1ef      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ef      	bne.n	80030b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a6 	beq.w	8003230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d118      	bne.n	800314e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fd ff1c 	bl	8000f64 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fd ff18 	bl	8000f64 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1b2      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_RCC_OscConfig+0x4d8>
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	e029      	b.n	80031bc <HAL_RCC_OscConfig+0x52c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d115      	bne.n	800319c <HAL_RCC_OscConfig+0x50c>
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a07      	ldr	r2, [pc, #28]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a03      	ldr	r2, [pc, #12]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x52c>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a99      	ldr	r2, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ac:	4b96      	ldr	r3, [pc, #600]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a95      	ldr	r2, [pc, #596]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fd fece 	bl	8000f64 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fd feca 	bl	8000f64 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e162      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ed      	beq.n	80031cc <HAL_RCC_OscConfig+0x53c>
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fd feb7 	bl	8000f64 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd feb3 	bl	8000f64 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e14b      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ed      	bne.n	80031fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7ffb      	ldrb	r3, [r7, #31]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a77      	ldr	r2, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fe86 	bl	8000f64 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325c:	f7fd fe82 	bl	8000f64 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e11c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCC_OscConfig+0x5cc>
 800327c:	e01b      	b.n	80032b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800327e:	4b62      	ldr	r3, [pc, #392]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003284:	4a60      	ldr	r2, [pc, #384]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fd fe69 	bl	8000f64 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003296:	f7fd fe65 	bl	8000f64 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0ff      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80f3 	beq.w	80034a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f040 80c9 	bne.w	800345c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ca:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d12c      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	3b01      	subs	r3, #1
 80032ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d123      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11b      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d113      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d109      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d06b      	beq.n	8003410 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d062      	beq.n	8003404 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0ac      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335a:	f7fd fe03 	bl	8000f64 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fd fdff 	bl	8000f64 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e099      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x77c>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003390:	3a01      	subs	r2, #1
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800339a:	0212      	lsls	r2, r2, #8
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0552      	lsls	r2, r2, #21
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0652      	lsls	r2, r2, #25
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ba:	06d2      	lsls	r2, r2, #27
 80033bc:	430a      	orrs	r2, r1
 80033be:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033dc:	f7fd fdc2 	bl	8000f64 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd fdbe 	bl	8000f64 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e058      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003402:	e050      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04f      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
 8003408:	40021000 	.word	0x40021000
 800340c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d144      	bne.n	80034a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003434:	f7fd fd96 	bl	8000f64 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd fd92 	bl	8000f64 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e02c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x7ac>
 800345a:	e024      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d01f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fd fd79 	bl	8000f64 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fd fd75 	bl	8000f64 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e00f      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4905      	ldr	r1, [pc, #20]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x824>)
 800349c:	4013      	ands	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
 80034a0:	e001      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	feeefffc 	.word	0xfeeefffc

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0e7      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4970      	ldr	r1, [pc, #448]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cf      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	429a      	cmp	r2, r3
 8003516:	d908      	bls.n	800352a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4960      	ldr	r1, [pc, #384]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04c      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	4b5a      	ldr	r3, [pc, #360]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d121      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0a6      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09a      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356e:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e08e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e086      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4943      	ldr	r1, [pc, #268]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fd fce0 	bl	8000f64 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fd fcdc 	bl	8000f64 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e06e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d208      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	492b      	ldr	r1, [pc, #172]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d210      	bcs.n	800362e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	4923      	ldr	r1, [pc, #140]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e036      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4918      	ldr	r1, [pc, #96]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4910      	ldr	r1, [pc, #64]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366c:	f000 f858 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	490b      	ldr	r1, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1f4>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1fc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fc17 	bl	8000ec4 <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	72fb      	strb	r3, [r7, #11]

  return status;
 800369a:	7afb      	ldrb	r3, [r7, #11]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08007670 	.word	0x08007670
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_MCOConfig+0x64>)
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_RCC_MCOConfig+0x64>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_MCOConfig+0x64>)
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80036dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036e6:	2302      	movs	r3, #2
 80036e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036fc:	f7ff f8e2 	bl	80028c4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_MCOConfig+0x64>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	430b      	orrs	r3, r1
 800370e:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCC_MCOConfig+0x64>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d121      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d11e      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <HAL_RCC_GetSysClockFreq+0x10c>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d102      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e004      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d134      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xac>
 80037c4:	e005      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c8:	617b      	str	r3, [r7, #20]
      break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	617b      	str	r3, [r7, #20]
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	617b      	str	r3, [r7, #20]
      break;
 80037d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	fb03 f202 	mul.w	r2, r3, r2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0e5b      	lsrs	r3, r3, #25
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	3301      	adds	r3, #1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003818:	69bb      	ldr	r3, [r7, #24]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	08007688 	.word	0x08007688
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08007680 	.word	0x08007680

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003880:	f7ff ffda 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0adb      	lsrs	r3, r3, #11
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08007680 	.word	0x08007680

080038a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c0:	f7ff f982 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 80038c4:	6178      	str	r0, [r7, #20]
 80038c6:	e014      	b.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e0:	f7ff f972 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 80038e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d10b      	bne.n	8003912 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d919      	bls.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2ba0      	cmp	r3, #160	; 0xa0
 8003904:	d902      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e013      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e010      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d902      	bls.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003918:	2303      	movs	r3, #3
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e00a      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d102      	bne.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003924:	2302      	movs	r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e004      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d101      	bne.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	4909      	ldr	r1, [pc, #36]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	40022000 	.word	0x40022000

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2300      	movs	r3, #0
 8003976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003980:	2b00      	cmp	r3, #0
 8003982:	d031      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800398c:	d01a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800398e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003992:	d814      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399c:	d10f      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800399e:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	4a5c      	ldr	r2, [pc, #368]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039aa:	e00c      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f9ce 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	74fb      	strb	r3, [r7, #19]
      break;
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c6:	7cfb      	ldrb	r3, [r7, #19]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039cc:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	494e      	ldr	r1, [pc, #312]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039e2:	e001      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 809e 	beq.w	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a38:	f7fd fa94 	bl	8000f64 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a3e:	e009      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fd fa90 	bl	8000f64 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	74fb      	strb	r3, [r7, #19]
        break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d15a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a66:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01e      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d019      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aae:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d016      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fa50 	bl	8000f64 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fa4c 	bl	8000f64 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d902      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ade:	e006      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ec      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b0a:	e009      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b20:	7c7b      	ldrb	r3, [r7, #17]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b8a      	ldr	r3, [pc, #552]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4a89      	ldr	r2, [pc, #548]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b3e:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4980      	ldr	r1, [pc, #512]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b60:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 020c 	bic.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	4978      	ldr	r1, [pc, #480]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	496f      	ldr	r1, [pc, #444]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	4967      	ldr	r1, [pc, #412]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	495e      	ldr	r1, [pc, #376]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4956      	ldr	r1, [pc, #344]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0a:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	494d      	ldr	r1, [pc, #308]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d028      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4945      	ldr	r1, [pc, #276]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4c:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	60d3      	str	r3, [r2, #12]
 8003c58:	e011      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f872 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d028      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	492d      	ldr	r1, [pc, #180]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb4:	60d3      	str	r3, [r2, #12]
 8003cb6:	e011      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f843 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01c      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f820 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3c:	4904      	ldr	r1, [pc, #16]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d44:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d62:	4b74      	ldr	r3, [pc, #464]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d6e:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d10d      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
       ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d86:	4b6b      	ldr	r3, [pc, #428]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
       ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d047      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e044      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d018      	beq.n	8003dda <RCCEx_PLLSAI1_Config+0x86>
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d825      	bhi.n	8003df8 <RCCEx_PLLSAI1_Config+0xa4>
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d002      	beq.n	8003db6 <RCCEx_PLLSAI1_Config+0x62>
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d009      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x74>
 8003db4:	e020      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db6:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e01a      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc8:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d116      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd8:	e013      	b.n	8003e02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dda:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de6:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df6:	e006      	b.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e004      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	430b      	orrs	r3, r1
 8003e24:	4943      	ldr	r1, [pc, #268]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d17c      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e30:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3f      	ldr	r2, [pc, #252]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fd f892 	bl	8000f64 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fd f88e 	bl	8000f64 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ef      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d15f      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d110      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e70:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	06d2      	lsls	r2, r2, #27
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	492a      	ldr	r1, [pc, #168]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	610b      	str	r3, [r1, #16]
 8003e90:	e027      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d112      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e98:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6892      	ldr	r2, [r2, #8]
 8003ea8:	0211      	lsls	r1, r2, #8
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6912      	ldr	r2, [r2, #16]
 8003eae:	0852      	lsrs	r2, r2, #1
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0552      	lsls	r2, r2, #21
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	491f      	ldr	r1, [pc, #124]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	610b      	str	r3, [r1, #16]
 8003ebc:	e011      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ec6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	0211      	lsls	r1, r2, #8
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6952      	ldr	r2, [r2, #20]
 8003ed4:	0852      	lsrs	r2, r2, #1
 8003ed6:	3a01      	subs	r2, #1
 8003ed8:	0652      	lsls	r2, r2, #25
 8003eda:	430a      	orrs	r2, r1
 8003edc:	4915      	ldr	r1, [pc, #84]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd f839 	bl	8000f64 <HAL_GetTick>
 8003ef2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef4:	e009      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef6:	f7fd f835 	bl	8000f64 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	73fb      	strb	r3, [r7, #15]
          break;
 8003f08:	e005      	b.n	8003f16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ef      	beq.n	8003ef6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e040      	b.n	8003fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fed8 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa54 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f825 	bl	8003fd4 <UART_SetConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01b      	b.n	8003fcc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fad3 	bl	8004570 <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b08a      	sub	sp, #40	; 0x28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bb4      	ldr	r3, [pc, #720]	; (80042d4 <UART_SetConfig+0x300>)
 8004004:	4013      	ands	r3, r2
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4aa9      	ldr	r2, [pc, #676]	; (80042d8 <UART_SetConfig+0x304>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	4313      	orrs	r3, r2
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4aa0      	ldr	r2, [pc, #640]	; (80042dc <UART_SetConfig+0x308>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d126      	bne.n	80040ac <UART_SetConfig+0xd8>
 800405e:	4ba0      	ldr	r3, [pc, #640]	; (80042e0 <UART_SetConfig+0x30c>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d81b      	bhi.n	80040a4 <UART_SetConfig+0xd0>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0xa0>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004095 	.word	0x08004095
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409d 	.word	0x0800409d
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e080      	b.n	800418e <UART_SetConfig+0x1ba>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004092:	e07c      	b.n	800418e <UART_SetConfig+0x1ba>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409a:	e078      	b.n	800418e <UART_SetConfig+0x1ba>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a2:	e074      	b.n	800418e <UART_SetConfig+0x1ba>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e070      	b.n	800418e <UART_SetConfig+0x1ba>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a8c      	ldr	r2, [pc, #560]	; (80042e4 <UART_SetConfig+0x310>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d138      	bne.n	8004128 <UART_SetConfig+0x154>
 80040b6:	4b8a      	ldr	r3, [pc, #552]	; (80042e0 <UART_SetConfig+0x30c>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d82d      	bhi.n	8004120 <UART_SetConfig+0x14c>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0xf8>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	08004101 	.word	0x08004101
 80040d0:	08004121 	.word	0x08004121
 80040d4:	08004121 	.word	0x08004121
 80040d8:	08004121 	.word	0x08004121
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004121 	.word	0x08004121
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004121 	.word	0x08004121
 80040ec:	08004109 	.word	0x08004109
 80040f0:	08004121 	.word	0x08004121
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004119 	.word	0x08004119
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e042      	b.n	800418e <UART_SetConfig+0x1ba>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e03e      	b.n	800418e <UART_SetConfig+0x1ba>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e03a      	b.n	800418e <UART_SetConfig+0x1ba>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e036      	b.n	800418e <UART_SetConfig+0x1ba>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004126:	e032      	b.n	800418e <UART_SetConfig+0x1ba>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6a      	ldr	r2, [pc, #424]	; (80042d8 <UART_SetConfig+0x304>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d12a      	bne.n	8004188 <UART_SetConfig+0x1b4>
 8004132:	4b6b      	ldr	r3, [pc, #428]	; (80042e0 <UART_SetConfig+0x30c>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800413c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004140:	d01a      	beq.n	8004178 <UART_SetConfig+0x1a4>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0x1ac>
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0x194>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d815      	bhi.n	8004180 <UART_SetConfig+0x1ac>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x18c>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d008      	beq.n	8004170 <UART_SetConfig+0x19c>
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x1ac>
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e012      	b.n	800418e <UART_SetConfig+0x1ba>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e00e      	b.n	800418e <UART_SetConfig+0x1ba>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e00a      	b.n	800418e <UART_SetConfig+0x1ba>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e006      	b.n	800418e <UART_SetConfig+0x1ba>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e002      	b.n	800418e <UART_SetConfig+0x1ba>
 8004188:	2310      	movs	r3, #16
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a51      	ldr	r2, [pc, #324]	; (80042d8 <UART_SetConfig+0x304>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d17a      	bne.n	800428e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419c:	2b08      	cmp	r3, #8
 800419e:	d824      	bhi.n	80041ea <UART_SetConfig+0x216>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x1d4>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041db 	.word	0x080041db
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041eb 	.word	0x080041eb
 80041c8:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7ff fb40 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
        break;
 80041d2:	e010      	b.n	80041f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <UART_SetConfig+0x314>)
 80041d6:	61fb      	str	r3, [r7, #28]
        break;
 80041d8:	e00d      	b.n	80041f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7ff faa1 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80041de:	61f8      	str	r0, [r7, #28]
        break;
 80041e0:	e009      	b.n	80041f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	61fb      	str	r3, [r7, #28]
        break;
 80041e8:	e005      	b.n	80041f6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8107 	beq.w	800440c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	429a      	cmp	r2, r3
 800420c:	d305      	bcc.n	800421a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	429a      	cmp	r2, r3
 8004218:	d903      	bls.n	8004222 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004220:	e0f4      	b.n	800440c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2200      	movs	r2, #0
 8004226:	461c      	mov	r4, r3
 8004228:	4615      	mov	r5, r2
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	022b      	lsls	r3, r5, #8
 8004234:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004238:	0222      	lsls	r2, r4, #8
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6849      	ldr	r1, [r1, #4]
 800423e:	0849      	lsrs	r1, r1, #1
 8004240:	2000      	movs	r0, #0
 8004242:	4688      	mov	r8, r1
 8004244:	4681      	mov	r9, r0
 8004246:	eb12 0a08 	adds.w	sl, r2, r8
 800424a:	eb43 0b09 	adc.w	fp, r3, r9
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800425c:	4650      	mov	r0, sl
 800425e:	4659      	mov	r1, fp
 8004260:	f7fb ffb6 	bl	80001d0 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4613      	mov	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004272:	d308      	bcc.n	8004286 <UART_SetConfig+0x2b2>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d204      	bcs.n	8004286 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e0c2      	b.n	800440c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800428c:	e0be      	b.n	800440c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004296:	d16a      	bne.n	800436e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800429c:	2b08      	cmp	r3, #8
 800429e:	d834      	bhi.n	800430a <UART_SetConfig+0x336>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x2d4>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042ed 	.word	0x080042ed
 80042b0:	080042f5 	.word	0x080042f5
 80042b4:	0800430b 	.word	0x0800430b
 80042b8:	080042fb 	.word	0x080042fb
 80042bc:	0800430b 	.word	0x0800430b
 80042c0:	0800430b 	.word	0x0800430b
 80042c4:	0800430b 	.word	0x0800430b
 80042c8:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7ff fac0 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
        break;
 80042d2:	e020      	b.n	8004316 <UART_SetConfig+0x342>
 80042d4:	efff69f3 	.word	0xefff69f3
 80042d8:	40008000 	.word	0x40008000
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40004400 	.word	0x40004400
 80042e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7ff fac6 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <UART_SetConfig+0x454>)
 80042f6:	61fb      	str	r3, [r7, #28]
        break;
 80042f8:	e00d      	b.n	8004316 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7ff fa11 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80042fe:	61f8      	str	r0, [r7, #28]
        break;
 8004300:	e009      	b.n	8004316 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61fb      	str	r3, [r7, #28]
        break;
 8004308:	e005      	b.n	8004316 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d077      	beq.n	800440c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005a      	lsls	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b0f      	cmp	r3, #15
 8004336:	d916      	bls.n	8004366 <UART_SetConfig+0x392>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d212      	bcs.n	8004366 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f023 030f 	bic.w	r3, r3, #15
 8004348:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	b29a      	uxth	r2, r3
 8004356:	8afb      	ldrh	r3, [r7, #22]
 8004358:	4313      	orrs	r3, r2
 800435a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	8afa      	ldrh	r2, [r7, #22]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e052      	b.n	800440c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800436c:	e04e      	b.n	800440c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004372:	2b08      	cmp	r3, #8
 8004374:	d827      	bhi.n	80043c6 <UART_SetConfig+0x3f2>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x3a8>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	080043c7 	.word	0x080043c7
 800438c:	080043b7 	.word	0x080043b7
 8004390:	080043c7 	.word	0x080043c7
 8004394:	080043c7 	.word	0x080043c7
 8004398:	080043c7 	.word	0x080043c7
 800439c:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7ff fa56 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80043a4:	61f8      	str	r0, [r7, #28]
        break;
 80043a6:	e014      	b.n	80043d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7ff fa68 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 80043ac:	61f8      	str	r0, [r7, #28]
        break;
 80043ae:	e010      	b.n	80043d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <UART_SetConfig+0x454>)
 80043b2:	61fb      	str	r3, [r7, #28]
        break;
 80043b4:	e00d      	b.n	80043d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7ff f9b3 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80043ba:	61f8      	str	r0, [r7, #28]
        break;
 80043bc:	e009      	b.n	80043d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	61fb      	str	r3, [r7, #28]
        break;
 80043c4:	e005      	b.n	80043d2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d0:	bf00      	nop
    }

    if (pclk != 0U)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d019      	beq.n	800440c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	085a      	lsrs	r2, r3, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	441a      	add	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b0f      	cmp	r3, #15
 80043f0:	d909      	bls.n	8004406 <UART_SetConfig+0x432>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d205      	bcs.n	8004406 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e002      	b.n	800440c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004418:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	00f42400 	.word	0x00f42400

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b098      	sub	sp, #96	; 0x60
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004580:	f7fc fcf0 	bl	8000f64 <HAL_GetTick>
 8004584:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d12e      	bne.n	80045f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f88c 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d021      	beq.n	80045f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	653b      	str	r3, [r7, #80]	; 0x50
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
 80045ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e062      	b.n	80046b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d149      	bne.n	8004694 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f856 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03c      	beq.n	8004694 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	623b      	str	r3, [r7, #32]
   return(result);
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	633b      	str	r3, [r7, #48]	; 0x30
 800463a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800463e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60fb      	str	r3, [r7, #12]
   return(result);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466c:	61fa      	str	r2, [r7, #28]
 800466e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	617b      	str	r3, [r7, #20]
   return(result);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e011      	b.n	80046b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3758      	adds	r7, #88	; 0x58
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d0:	e049      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d045      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fc fc43 	bl	8000f64 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e048      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d031      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d110      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f838 	bl	800478e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2208      	movs	r2, #8
 8004722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e029      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004740:	d111      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f81e 	bl	800478e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e00f      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d0a6      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800478e:	b480      	push	{r7}
 8004790:	b095      	sub	sp, #84	; 0x54
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
 80047b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004800:	2b01      	cmp	r3, #1
 8004802:	d118      	bne.n	8004836 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	60bb      	str	r3, [r7, #8]
   return(result);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f023 0310 	bic.w	r3, r3, #16
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	613b      	str	r3, [r7, #16]
   return(result);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e6      	bne.n	8004804 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	669a      	str	r2, [r3, #104]	; 0x68
}
 800484a:	bf00      	nop
 800484c:	3754      	adds	r7, #84	; 0x54
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <__NVIC_SetPriority>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	6039      	str	r1, [r7, #0]
 8004862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db0a      	blt.n	8004882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	490c      	ldr	r1, [pc, #48]	; (80048a4 <__NVIC_SetPriority+0x4c>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	0112      	lsls	r2, r2, #4
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	440b      	add	r3, r1
 800487c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004880:	e00a      	b.n	8004898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	4908      	ldr	r1, [pc, #32]	; (80048a8 <__NVIC_SetPriority+0x50>)
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	3b04      	subs	r3, #4
 8004890:	0112      	lsls	r2, r2, #4
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	440b      	add	r3, r1
 8004896:	761a      	strb	r2, [r3, #24]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000e100 	.word	0xe000e100
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048b0:	2100      	movs	r1, #0
 80048b2:	f06f 0004 	mvn.w	r0, #4
 80048b6:	f7ff ffcf 	bl	8004858 <__NVIC_SetPriority>
#endif
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c6:	f3ef 8305 	mrs	r3, IPSR
 80048ca:	603b      	str	r3, [r7, #0]
  return(result);
 80048cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048d2:	f06f 0305 	mvn.w	r3, #5
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	e00c      	b.n	80048f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <osKernelInitialize+0x44>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <osKernelInitialize+0x44>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	e002      	b.n	80048f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048f4:	687b      	ldr	r3, [r7, #4]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	200006bc 	.word	0x200006bc

08004908 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490e:	f3ef 8305 	mrs	r3, IPSR
 8004912:	603b      	str	r3, [r7, #0]
  return(result);
 8004914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <osKernelStart+0x1a>
    stat = osErrorISR;
 800491a:	f06f 0305 	mvn.w	r3, #5
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	e010      	b.n	8004944 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <osKernelStart+0x48>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d109      	bne.n	800493e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800492a:	f7ff ffbf 	bl	80048ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <osKernelStart+0x48>)
 8004930:	2202      	movs	r2, #2
 8004932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004934:	f001 f912 	bl	8005b5c <vTaskStartScheduler>
      stat = osOK;
 8004938:	2300      	movs	r3, #0
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	e002      	b.n	8004944 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004944:	687b      	ldr	r3, [r7, #4]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200006bc 	.word	0x200006bc

08004954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af04      	add	r7, sp, #16
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004964:	f3ef 8305 	mrs	r3, IPSR
 8004968:	617b      	str	r3, [r7, #20]
  return(result);
 800496a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800496c:	2b00      	cmp	r3, #0
 800496e:	d17e      	bne.n	8004a6e <osThreadNew+0x11a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d07b      	beq.n	8004a6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800497a:	2318      	movs	r3, #24
 800497c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d045      	beq.n	8004a1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <osThreadNew+0x48>
        name = attr->name;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <osThreadNew+0x6e>
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b38      	cmp	r3, #56	; 0x38
 80049b4:	d805      	bhi.n	80049c2 <osThreadNew+0x6e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <osThreadNew+0x72>
        return (NULL);
 80049c2:	2300      	movs	r3, #0
 80049c4:	e054      	b.n	8004a70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <osThreadNew+0xa8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b5b      	cmp	r3, #91	; 0x5b
 80049e4:	d90a      	bls.n	80049fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <osThreadNew+0xa8>
        mem = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e010      	b.n	8004a1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10c      	bne.n	8004a1e <osThreadNew+0xca>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <osThreadNew+0xca>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <osThreadNew+0xca>
          mem = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e001      	b.n	8004a1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d110      	bne.n	8004a46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 feb8 	bl	80057b0 <xTaskCreateStatic>
 8004a40:	4603      	mov	r3, r0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e013      	b.n	8004a6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d110      	bne.n	8004a6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f107 0310 	add.w	r3, r7, #16
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 ff03 	bl	800586a <xTaskCreate>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d001      	beq.n	8004a6e <osThreadNew+0x11a>
            hTask = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a6e:	693b      	ldr	r3, [r7, #16]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a80:	f3ef 8305 	mrs	r3, IPSR
 8004a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <osDelay+0x1c>
    stat = osErrorISR;
 8004a8c:	f06f 0305 	mvn.w	r3, #5
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e007      	b.n	8004aa4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f001 f828 	bl	8005af4 <vTaskDelay>
    }
  }

  return (stat);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b08a      	sub	sp, #40	; 0x28
 8004ab2:	af02      	add	r7, sp, #8
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d15f      	bne.n	8004b8a <osMessageQueueNew+0xdc>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d05c      	beq.n	8004b8a <osMessageQueueNew+0xdc>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d059      	beq.n	8004b8a <osMessageQueueNew+0xdc>
    mem = -1;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d029      	beq.n	8004b36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d012      	beq.n	8004b10 <osMessageQueueNew+0x62>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b4f      	cmp	r3, #79	; 0x4f
 8004af0:	d90e      	bls.n	8004b10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <osMessageQueueNew+0x62>
        mem = 1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e014      	b.n	8004b3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d110      	bne.n	8004b3a <osMessageQueueNew+0x8c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10c      	bne.n	8004b3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <osMessageQueueNew+0x8c>
          mem = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e001      	b.n	8004b3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10b      	bne.n	8004b58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	9100      	str	r1, [sp, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f970 	bl	8004e34 <xQueueGenericCreateStatic>
 8004b54:	61f8      	str	r0, [r7, #28]
 8004b56:	e008      	b.n	8004b6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f9de 	bl	8004f24 <xQueueGenericCreate>
 8004b68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e001      	b.n	8004b82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	69f8      	ldr	r0, [r7, #28]
 8004b86:	f000 fdb5 	bl	80056f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ba4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <vApplicationGetIdleTaskMemory+0x30>)
 8004baa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	200006c0 	.word	0x200006c0
 8004bc4:	2000071c 	.word	0x2000071c

08004bc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <vApplicationGetTimerTaskMemory+0x30>)
 8004bde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	2000091c 	.word	0x2000091c
 8004bf8:	20000978 	.word	0x20000978

08004bfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f103 0208 	add.w	r2, r3, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f103 0208 	add.w	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d103      	bne.n	8004cbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e00c      	b.n	8004cd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e002      	b.n	8004ccc <vListInsert+0x2e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d2f6      	bcs.n	8004cc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6852      	ldr	r2, [r2, #4]
 8004d30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d103      	bne.n	8004d44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d8e:	f002 f889 	bl	8006ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	441a      	add	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d114      	bne.n	8004e0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3310      	adds	r3, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f93d 	bl	8006070 <xTaskRemoveFromEventList>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <xQueueGenericReset+0xcc>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	e009      	b.n	8004e22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fef2 	bl	8004bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff feed 	bl	8004bfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f002 f86f 	bl	8006f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <xQueueGenericCreateStatic+0x52>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <xQueueGenericCreateStatic+0x56>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericCreateStatic+0x58>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <xQueueGenericCreateStatic+0x7e>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericCreateStatic+0x82>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericCreateStatic+0x84>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61fb      	str	r3, [r7, #28]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ed2:	2350      	movs	r3, #80	; 0x50
 8004ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b50      	cmp	r3, #80	; 0x50
 8004eda:	d00a      	beq.n	8004ef2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	61bb      	str	r3, [r7, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ef2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f83f 	bl	8004f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	613b      	str	r3, [r7, #16]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3350      	adds	r3, #80	; 0x50
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f002 f8c3 	bl	80070e8 <pvPortMalloc>
 8004f62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3350      	adds	r3, #80	; 0x50
 8004f72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f7c:	79fa      	ldrb	r2, [r7, #7]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f805 	bl	8004f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	69b8      	ldr	r0, [r7, #24]
 8004fca:	f7ff fecb 	bl	8004d64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08e      	sub	sp, #56	; 0x38
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xQueueGenericSend+0x32>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <xQueueGenericSend+0x40>
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueGenericSend+0x44>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueGenericSend+0x46>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <xQueueGenericSend+0x60>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d103      	bne.n	800504e <xQueueGenericSend+0x6e>
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <xQueueGenericSend+0x72>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <xQueueGenericSend+0x74>
 8005052:	2300      	movs	r3, #0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <xQueueGenericSend+0x8e>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	623b      	str	r3, [r7, #32]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800506e:	f001 f9bd 	bl	80063ec <xTaskGetSchedulerState>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <xQueueGenericSend+0x9e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <xQueueGenericSend+0xa2>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xQueueGenericSend+0xa4>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xQueueGenericSend+0xbe>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	61fb      	str	r3, [r7, #28]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800509e:	f001 ff01 	bl	8006ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <xQueueGenericSend+0xd4>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d129      	bne.n	8005108 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ba:	f000 fa0b 	bl	80054d4 <prvCopyDataToQueue>
 80050be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	3324      	adds	r3, #36	; 0x24
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 ffcf 	bl	8006070 <xTaskRemoveFromEventList>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050d8:	4b3f      	ldr	r3, [pc, #252]	; (80051d8 <xQueueGenericSend+0x1f8>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	e00a      	b.n	8005100 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050f0:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <xQueueGenericSend+0x1f8>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005100:	f001 ff00 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	e063      	b.n	80051d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800510e:	f001 fef9 	bl	8006f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005112:	2300      	movs	r3, #0
 8005114:	e05c      	b.n	80051d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	4618      	mov	r0, r3
 8005122:	f001 f809 	bl	8006138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800512a:	f001 feeb 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800512e:	f000 fd7b 	bl	8005c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005132:	f001 feb7 	bl	8006ea4 <vPortEnterCritical>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513c:	b25b      	sxtb	r3, r3
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d103      	bne.n	800514c <xQueueGenericSend+0x16c>
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005152:	b25b      	sxtb	r3, r3
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d103      	bne.n	8005162 <xQueueGenericSend+0x182>
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005162:	f001 fecf 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005166:	1d3a      	adds	r2, r7, #4
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fff8 	bl	8006164 <xTaskCheckForTimeOut>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d124      	bne.n	80051c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800517a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800517c:	f000 faa2 	bl	80056c4 <prvIsQueueFull>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	3310      	adds	r3, #16
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ff1e 	bl	8005fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005196:	f000 fa2d 	bl	80055f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800519a:	f000 fd53 	bl	8005c44 <xTaskResumeAll>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f47f af7c 	bne.w	800509e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <xQueueGenericSend+0x1f8>)
 80051a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	e772      	b.n	800509e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ba:	f000 fa1b 	bl	80055f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051be:	f000 fd41 	bl	8005c44 <xTaskResumeAll>
 80051c2:	e76c      	b.n	800509e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c6:	f000 fa15 	bl	80055f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ca:	f000 fd3b 	bl	8005c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3738      	adds	r7, #56	; 0x38
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b090      	sub	sp, #64	; 0x40
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <xQueueGenericSendFromISR+0x3c>
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <xQueueGenericSendFromISR+0x40>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <xQueueGenericSendFromISR+0x42>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d103      	bne.n	8005246 <xQueueGenericSendFromISR+0x6a>
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x6e>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericSendFromISR+0x70>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	623b      	str	r3, [r7, #32]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005266:	f001 feff 	bl	8007068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800526a:	f3ef 8211 	mrs	r2, BASEPRI
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005282:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <xQueueGenericSendFromISR+0xbc>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d12f      	bne.n	80052f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052ae:	f000 f911 	bl	80054d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d112      	bne.n	80052e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d016      	beq.n	80052f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fed1 	bl	8006070 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e007      	b.n	80052f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	b25a      	sxtb	r2, r3
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052f2:	2301      	movs	r3, #1
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80052f6:	e001      	b.n	80052fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005306:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800530a:	4618      	mov	r0, r3
 800530c:	3740      	adds	r7, #64	; 0x40
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <xQueueReceive+0x30>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	623b      	str	r3, [r7, #32]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <xQueueReceive+0x3e>
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <xQueueReceive+0x42>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xQueueReceive+0x44>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueReceive+0x5e>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	61fb      	str	r3, [r7, #28]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005372:	f001 f83b 	bl	80063ec <xTaskGetSchedulerState>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <xQueueReceive+0x6e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <xQueueReceive+0x72>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueReceive+0x74>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueReceive+0x8e>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61bb      	str	r3, [r7, #24]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053a2:	f001 fd7f 	bl	8006ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01f      	beq.n	80053f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f000 f8f7 	bl	80055a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1e5a      	subs	r2, r3, #1
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	3310      	adds	r3, #16
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fe4e 	bl	8006070 <xTaskRemoveFromEventList>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053da:	4b3d      	ldr	r3, [pc, #244]	; (80054d0 <xQueueReceive+0x1bc>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053ea:	f001 fd8b 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e069      	b.n	80054c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f8:	f001 fd84 	bl	8006f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e062      	b.n	80054c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005406:	f107 0310 	add.w	r3, r7, #16
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fe94 	bl	8006138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005414:	f001 fd76 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005418:	f000 fc06 	bl	8005c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800541c:	f001 fd42 	bl	8006ea4 <vPortEnterCritical>
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005426:	b25b      	sxtb	r3, r3
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d103      	bne.n	8005436 <xQueueReceive+0x122>
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800543c:	b25b      	sxtb	r3, r3
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d103      	bne.n	800544c <xQueueReceive+0x138>
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544c:	f001 fd5a 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005450:	1d3a      	adds	r2, r7, #4
 8005452:	f107 0310 	add.w	r3, r7, #16
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fe83 	bl	8006164 <xTaskCheckForTimeOut>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d123      	bne.n	80054ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005466:	f000 f917 	bl	8005698 <prvIsQueueEmpty>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	3324      	adds	r3, #36	; 0x24
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fda9 	bl	8005fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800547e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005480:	f000 f8b8 	bl	80055f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005484:	f000 fbde 	bl	8005c44 <xTaskResumeAll>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d189      	bne.n	80053a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xQueueReceive+0x1bc>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	e780      	b.n	80053a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a2:	f000 f8a7 	bl	80055f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a6:	f000 fbcd 	bl	8005c44 <xTaskResumeAll>
 80054aa:	e77a      	b.n	80053a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ae:	f000 f8a1 	bl	80055f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b2:	f000 fbc7 	bl	8005c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b8:	f000 f8ee 	bl	8005698 <prvIsQueueEmpty>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f43f af6f 	beq.w	80053a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3730      	adds	r7, #48	; 0x30
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10d      	bne.n	800550e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d14d      	bne.n	8005596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 ff92 	bl	8006428 <xTaskPriorityDisinherit>
 8005504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	e043      	b.n	8005596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d119      	bne.n	8005548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6858      	ldr	r0, [r3, #4]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	461a      	mov	r2, r3
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	f001 fff8 	bl	8007514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	d32b      	bcc.n	8005596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e026      	b.n	8005596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68d8      	ldr	r0, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	461a      	mov	r2, r3
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	f001 ffde 	bl	8007514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	425b      	negs	r3, r3
 8005562:	441a      	add	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d207      	bcs.n	8005584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	425b      	negs	r3, r3
 800557e:	441a      	add	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d105      	bne.n	8005596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3b01      	subs	r3, #1
 8005594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800559e:	697b      	ldr	r3, [r7, #20]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d018      	beq.n	80055ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	441a      	add	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d303      	bcc.n	80055dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68d9      	ldr	r1, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	461a      	mov	r2, r3
 80055e6:	6838      	ldr	r0, [r7, #0]
 80055e8:	f001 ff94 	bl	8007514 <memcpy>
	}
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055fc:	f001 fc52 	bl	8006ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005608:	e011      	b.n	800562e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d012      	beq.n	8005638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3324      	adds	r3, #36	; 0x24
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fd2a 	bl	8006070 <xTaskRemoveFromEventList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005622:	f000 fe01 	bl	8006228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	3b01      	subs	r3, #1
 800562a:	b2db      	uxtb	r3, r3
 800562c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800562e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dce9      	bgt.n	800560a <prvUnlockQueue+0x16>
 8005636:	e000      	b.n	800563a <prvUnlockQueue+0x46>
					break;
 8005638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005642:	f001 fc5f 	bl	8006f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005646:	f001 fc2d 	bl	8006ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005652:	e011      	b.n	8005678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d012      	beq.n	8005682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3310      	adds	r3, #16
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fd05 	bl	8006070 <xTaskRemoveFromEventList>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800566c:	f000 fddc 	bl	8006228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005670:	7bbb      	ldrb	r3, [r7, #14]
 8005672:	3b01      	subs	r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dce9      	bgt.n	8005654 <prvUnlockQueue+0x60>
 8005680:	e000      	b.n	8005684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	22ff      	movs	r2, #255	; 0xff
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800568c:	f001 fc3a 	bl	8006f04 <vPortExitCritical>
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056a0:	f001 fc00 	bl	8006ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e001      	b.n	80056b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056b6:	f001 fc25 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056cc:	f001 fbea 	bl	8006ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d102      	bne.n	80056e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e001      	b.n	80056e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056e6:	f001 fc0d 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e014      	b.n	800572e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <vQueueAddToRegistry+0x50>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005710:	490c      	ldr	r1, [pc, #48]	; (8005744 <vQueueAddToRegistry+0x50>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <vQueueAddToRegistry+0x50>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005726:	e006      	b.n	8005736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b07      	cmp	r3, #7
 8005732:	d9e7      	bls.n	8005704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000d78 	.word	0x20000d78

08005748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005758:	f001 fba4 	bl	8006ea4 <vPortEnterCritical>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d103      	bne.n	8005772 <vQueueWaitForMessageRestricted+0x2a>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005778:	b25b      	sxtb	r3, r3
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d103      	bne.n	8005788 <vQueueWaitForMessageRestricted+0x40>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005788:	f001 fbbc 	bl	8006f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3324      	adds	r3, #36	; 0x24
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fc3b 	bl	8006018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057a2:	6978      	ldr	r0, [r7, #20]
 80057a4:	f7ff ff26 	bl	80055f4 <prvUnlockQueue>
	}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	; 0x38
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xTaskCreateStatic+0x2a>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61fb      	str	r3, [r7, #28]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057f6:	235c      	movs	r3, #92	; 0x5c
 80057f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b5c      	cmp	r3, #92	; 0x5c
 80057fe:	d00a      	beq.n	8005816 <xTaskCreateStatic+0x66>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	61bb      	str	r3, [r7, #24]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005816:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01e      	beq.n	800585c <xTaskCreateStatic+0xac>
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800582c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005836:	2300      	movs	r3, #0
 8005838:	9303      	str	r3, [sp, #12]
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	9302      	str	r3, [sp, #8]
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f850 	bl	80058f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005856:	f000 f8dd 	bl	8005a14 <prvAddNewTaskToReadyList>
 800585a:	e001      	b.n	8005860 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005860:	697b      	ldr	r3, [r7, #20]
	}
 8005862:	4618      	mov	r0, r3
 8005864:	3728      	adds	r7, #40	; 0x28
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800586a:	b580      	push	{r7, lr}
 800586c:	b08c      	sub	sp, #48	; 0x30
 800586e:	af04      	add	r7, sp, #16
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fc32 	bl	80070e8 <pvPortMalloc>
 8005884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00e      	beq.n	80058aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800588c:	205c      	movs	r0, #92	; 0x5c
 800588e:	f001 fc2b 	bl	80070e8 <pvPortMalloc>
 8005892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
 80058a0:	e005      	b.n	80058ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f001 fcec 	bl	8007280 <vPortFree>
 80058a8:	e001      	b.n	80058ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d017      	beq.n	80058e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	2300      	movs	r3, #0
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	9302      	str	r3, [sp, #8]
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f80e 	bl	80058f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058d8:	69f8      	ldr	r0, [r7, #28]
 80058da:	f000 f89b 	bl	8005a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058de:	2301      	movs	r3, #1
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e002      	b.n	80058ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ea:	69bb      	ldr	r3, [r7, #24]
	}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	461a      	mov	r2, r3
 800590c:	21a5      	movs	r1, #165	; 0xa5
 800590e:	f001 fdd5 	bl	80074bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800591c:	3b01      	subs	r3, #1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	617b      	str	r3, [r7, #20]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01f      	beq.n	8005992 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	e012      	b.n	800597e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	7819      	ldrb	r1, [r3, #0]
 8005960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	3334      	adds	r3, #52	; 0x34
 8005968:	460a      	mov	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d9e9      	bls.n	8005958 <prvInitialiseNewTask+0x64>
 8005984:	e000      	b.n	8005988 <prvInitialiseNewTask+0x94>
			{
				break;
 8005986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005990:	e003      	b.n	800599a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	2b37      	cmp	r3, #55	; 0x37
 800599e:	d901      	bls.n	80059a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059a0:	2337      	movs	r3, #55	; 0x37
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	3304      	adds	r3, #4
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f93e 	bl	8004c3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	3318      	adds	r3, #24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff f939 	bl	8004c3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	69b8      	ldr	r0, [r7, #24]
 80059f4:	f001 f928 	bl	8006c48 <pxPortInitialiseStack>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a0a:	bf00      	nop
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a1c:	f001 fa42 	bl	8006ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a20:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <prvAddNewTaskToReadyList+0xc4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <prvAddNewTaskToReadyList+0xc4>)
 8005a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a2a:	4b2c      	ldr	r3, [pc, #176]	; (8005adc <prvAddNewTaskToReadyList+0xc8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a32:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <prvAddNewTaskToReadyList+0xc8>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <prvAddNewTaskToReadyList+0xc4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d110      	bne.n	8005a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a40:	f000 fc16 	bl	8006270 <prvInitialiseTaskLists>
 8005a44:	e00d      	b.n	8005a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a46:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <prvAddNewTaskToReadyList+0xcc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <prvAddNewTaskToReadyList+0xc8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d802      	bhi.n	8005a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <prvAddNewTaskToReadyList+0xc8>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <prvAddNewTaskToReadyList+0xd0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <prvAddNewTaskToReadyList+0xd0>)
 8005a6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <prvAddNewTaskToReadyList+0xd0>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <prvAddNewTaskToReadyList+0xd4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <prvAddNewTaskToReadyList+0x74>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <prvAddNewTaskToReadyList+0xd4>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <prvAddNewTaskToReadyList+0xd8>)
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7ff f8d9 	bl	8004c56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa4:	f001 fa2e 	bl	8006f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <prvAddNewTaskToReadyList+0xcc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvAddNewTaskToReadyList+0xc8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d207      	bcs.n	8005ace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <prvAddNewTaskToReadyList+0xdc>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	2000128c 	.word	0x2000128c
 8005adc:	20000db8 	.word	0x20000db8
 8005ae0:	20001298 	.word	0x20001298
 8005ae4:	200012a8 	.word	0x200012a8
 8005ae8:	20001294 	.word	0x20001294
 8005aec:	20000dbc 	.word	0x20000dbc
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b06:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <vTaskDelay+0x60>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <vTaskDelay+0x30>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60bb      	str	r3, [r7, #8]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b24:	f000 f880 	bl	8005c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b28:	2100      	movs	r1, #0
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fcea 	bl	8006504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b30:	f000 f888 	bl	8005c44 <xTaskResumeAll>
 8005b34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <vTaskDelay+0x64>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200012b4 	.word	0x200012b4
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	1d39      	adds	r1, r7, #4
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff f80e 	bl	8004b94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	9202      	str	r2, [sp, #8]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	2300      	movs	r3, #0
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2300      	movs	r3, #0
 8005b88:	460a      	mov	r2, r1
 8005b8a:	4921      	ldr	r1, [pc, #132]	; (8005c10 <vTaskStartScheduler+0xb4>)
 8005b8c:	4821      	ldr	r0, [pc, #132]	; (8005c14 <vTaskStartScheduler+0xb8>)
 8005b8e:	f7ff fe0f 	bl	80057b0 <xTaskCreateStatic>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <vTaskStartScheduler+0xbc>)
 8005b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b98:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <vTaskStartScheduler+0xbc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e001      	b.n	8005baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bb0:	f000 fcfc 	bl	80065ac <xTimerCreateTimerTask>
 8005bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d116      	bne.n	8005bea <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
}
 8005bce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <vTaskStartScheduler+0xc0>)
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <vTaskStartScheduler+0xc4>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <vTaskStartScheduler+0xc8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005be4:	f001 f8bc 	bl	8006d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005be8:	e00e      	b.n	8005c08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d10a      	bne.n	8005c08 <vTaskStartScheduler+0xac>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskStartScheduler+0xaa>
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	08007598 	.word	0x08007598
 8005c14:	08006241 	.word	0x08006241
 8005c18:	200012b0 	.word	0x200012b0
 8005c1c:	200012ac 	.word	0x200012ac
 8005c20:	20001298 	.word	0x20001298
 8005c24:	20001290 	.word	0x20001290

08005c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vTaskSuspendAll+0x18>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	4a03      	ldr	r2, [pc, #12]	; (8005c40 <vTaskSuspendAll+0x18>)
 8005c34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	200012b4 	.word	0x200012b4

08005c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c52:	4b42      	ldr	r3, [pc, #264]	; (8005d5c <xTaskResumeAll+0x118>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	603b      	str	r3, [r7, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c70:	f001 f918 	bl	8006ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c74:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xTaskResumeAll+0x118>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4a38      	ldr	r2, [pc, #224]	; (8005d5c <xTaskResumeAll+0x118>)
 8005c7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7e:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <xTaskResumeAll+0x118>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d162      	bne.n	8005d4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c86:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <xTaskResumeAll+0x11c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d05e      	beq.n	8005d4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8e:	e02f      	b.n	8005cf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <xTaskResumeAll+0x120>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3318      	adds	r3, #24
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f837 	bl	8004d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff f832 	bl	8004d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <xTaskResumeAll+0x124>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d903      	bls.n	8005cc0 <xTaskResumeAll+0x7c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <xTaskResumeAll+0x124>)
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <xTaskResumeAll+0x128>)
 8005cce:	441a      	add	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7fe ffbd 	bl	8004c56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <xTaskResumeAll+0x12c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cea:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <xTaskResumeAll+0x130>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cf0:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xTaskResumeAll+0x120>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1cb      	bne.n	8005c90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cfe:	f000 fb55 	bl	80063ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <xTaskResumeAll+0x134>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d0e:	f000 f847 	bl	8005da0 <xTaskIncrementTick>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d18:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <xTaskResumeAll+0x130>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f1      	bne.n	8005d0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <xTaskResumeAll+0x134>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d30:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <xTaskResumeAll+0x130>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <xTaskResumeAll+0x138>)
 8005d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d4c:	f001 f8da 	bl	8006f04 <vPortExitCritical>

	return xAlreadyYielded;
 8005d50:	68bb      	ldr	r3, [r7, #8]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200012b4 	.word	0x200012b4
 8005d60:	2000128c 	.word	0x2000128c
 8005d64:	2000124c 	.word	0x2000124c
 8005d68:	20001294 	.word	0x20001294
 8005d6c:	20000dbc 	.word	0x20000dbc
 8005d70:	20000db8 	.word	0x20000db8
 8005d74:	200012a0 	.word	0x200012a0
 8005d78:	2000129c 	.word	0x2000129c
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <xTaskGetTickCount+0x1c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d8c:	687b      	ldr	r3, [r7, #4]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20001290 	.word	0x20001290

08005da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005daa:	4b4f      	ldr	r3, [pc, #316]	; (8005ee8 <xTaskIncrementTick+0x148>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 808f 	bne.w	8005ed2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db4:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <xTaskIncrementTick+0x14c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	; (8005eec <xTaskIncrementTick+0x14c>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d120      	bne.n	8005e0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc8:	4b49      	ldr	r3, [pc, #292]	; (8005ef0 <xTaskIncrementTick+0x150>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	603b      	str	r3, [r7, #0]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <xTaskIncrementTick+0x46>
 8005de8:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <xTaskIncrementTick+0x150>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <xTaskIncrementTick+0x154>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <xTaskIncrementTick+0x150>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <xTaskIncrementTick+0x154>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <xTaskIncrementTick+0x158>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <xTaskIncrementTick+0x158>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f000 fad1 	bl	80063ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e0a:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d349      	bcc.n	8005ea8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <xTaskIncrementTick+0x150>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1e:	4b37      	ldr	r3, [pc, #220]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	601a      	str	r2, [r3, #0]
					break;
 8005e26:	e03f      	b.n	8005ea8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <xTaskIncrementTick+0x150>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d203      	bcs.n	8005e48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e40:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e46:	e02f      	b.n	8005ea8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe ff5f 	bl	8004d10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe ff56 	bl	8004d10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <xTaskIncrementTick+0x160>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskIncrementTick+0xd8>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <xTaskIncrementTick+0x160>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <xTaskIncrementTick+0x164>)
 8005e86:	441a      	add	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe fee1 	bl	8004c56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <xTaskIncrementTick+0x168>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3b8      	bcc.n	8005e14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea6:	e7b5      	b.n	8005e14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <xTaskIncrementTick+0x168>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4915      	ldr	r1, [pc, #84]	; (8005f04 <xTaskIncrementTick+0x164>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d901      	bls.n	8005ec4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ec4:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <xTaskIncrementTick+0x16c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e004      	b.n	8005edc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <xTaskIncrementTick+0x170>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <xTaskIncrementTick+0x170>)
 8005eda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005edc:	697b      	ldr	r3, [r7, #20]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200012b4 	.word	0x200012b4
 8005eec:	20001290 	.word	0x20001290
 8005ef0:	20001244 	.word	0x20001244
 8005ef4:	20001248 	.word	0x20001248
 8005ef8:	200012a4 	.word	0x200012a4
 8005efc:	200012ac 	.word	0x200012ac
 8005f00:	20001294 	.word	0x20001294
 8005f04:	20000dbc 	.word	0x20000dbc
 8005f08:	20000db8 	.word	0x20000db8
 8005f0c:	200012a0 	.word	0x200012a0
 8005f10:	2000129c 	.word	0x2000129c

08005f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1a:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <vTaskSwitchContext+0xa8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f22:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <vTaskSwitchContext+0xac>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f28:	e041      	b.n	8005fae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f2a:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <vTaskSwitchContext+0xac>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f30:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <vTaskSwitchContext+0xb0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e010      	b.n	8005f5a <vTaskSwitchContext+0x46>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	607b      	str	r3, [r7, #4]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vTaskSwitchContext+0x3e>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	491b      	ldr	r1, [pc, #108]	; (8005fc8 <vTaskSwitchContext+0xb4>)
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0e4      	beq.n	8005f38 <vTaskSwitchContext+0x24>
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <vTaskSwitchContext+0xb4>)
 8005f7a:	4413      	add	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d104      	bne.n	8005f9e <vTaskSwitchContext+0x8a>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <vTaskSwitchContext+0xb8>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4a06      	ldr	r2, [pc, #24]	; (8005fc4 <vTaskSwitchContext+0xb0>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6013      	str	r3, [r2, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	200012b4 	.word	0x200012b4
 8005fc0:	200012a0 	.word	0x200012a0
 8005fc4:	20001294 	.word	0x20001294
 8005fc8:	20000dbc 	.word	0x20000dbc
 8005fcc:	20000db8 	.word	0x20000db8

08005fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <vTaskPlaceOnEventList+0x44>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fe fe4d 	bl	8004c9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006004:	2101      	movs	r1, #1
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f000 fa7c 	bl	8006504 <prvAddCurrentTaskToDelayedList>
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000db8 	.word	0x20000db8

08006018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	617b      	str	r3, [r7, #20]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <vTaskPlaceOnEventListRestricted+0x54>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3318      	adds	r3, #24
 8006046:	4619      	mov	r1, r3
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7fe fe04 	bl	8004c56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68b8      	ldr	r0, [r7, #8]
 800605e:	f000 fa51 	bl	8006504 <prvAddCurrentTaskToDelayedList>
	}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000db8 	.word	0x20000db8

08006070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	60fb      	str	r3, [r7, #12]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3318      	adds	r3, #24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fe35 	bl	8004d10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <xTaskRemoveFromEventList+0xb0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11d      	bne.n	80060ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fe2c 	bl	8004d10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <xTaskRemoveFromEventList+0xb4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d903      	bls.n	80060cc <xTaskRemoveFromEventList+0x5c>
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <xTaskRemoveFromEventList+0xb4>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <xTaskRemoveFromEventList+0xb8>)
 80060da:	441a      	add	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fe fdb7 	bl	8004c56 <vListInsertEnd>
 80060e8:	e005      	b.n	80060f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3318      	adds	r3, #24
 80060ee:	4619      	mov	r1, r3
 80060f0:	480e      	ldr	r0, [pc, #56]	; (800612c <xTaskRemoveFromEventList+0xbc>)
 80060f2:	f7fe fdb0 	bl	8004c56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <xTaskRemoveFromEventList+0xc0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d905      	bls.n	8006110 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006104:	2301      	movs	r3, #1
 8006106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <xTaskRemoveFromEventList+0xc4>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e001      	b.n	8006114 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006114:	697b      	ldr	r3, [r7, #20]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200012b4 	.word	0x200012b4
 8006124:	20001294 	.word	0x20001294
 8006128:	20000dbc 	.word	0x20000dbc
 800612c:	2000124c 	.word	0x2000124c
 8006130:	20000db8 	.word	0x20000db8
 8006134:	200012a0 	.word	0x200012a0

08006138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <vTaskInternalSetTimeOutState+0x24>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <vTaskInternalSetTimeOutState+0x28>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	605a      	str	r2, [r3, #4]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	200012a4 	.word	0x200012a4
 8006160:	20001290 	.word	0x20001290

08006164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	613b      	str	r3, [r7, #16]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061a6:	f000 fe7d 	bl	8006ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <xTaskCheckForTimeOut+0xbc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d102      	bne.n	80061ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e023      	b.n	8006212 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <xTaskCheckForTimeOut+0xc0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d007      	beq.n	80061e6 <xTaskCheckForTimeOut+0x82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	e015      	b.n	8006212 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d20b      	bcs.n	8006208 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff9b 	bl	8006138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	61fb      	str	r3, [r7, #28]
 8006206:	e004      	b.n	8006212 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006212:	f000 fe77 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8006216:	69fb      	ldr	r3, [r7, #28]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20001290 	.word	0x20001290
 8006224:	200012a4 	.word	0x200012a4

08006228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800622c:	4b03      	ldr	r3, [pc, #12]	; (800623c <vTaskMissedYield+0x14>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200012a0 	.word	0x200012a0

08006240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006248:	f000 f852 	bl	80062f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <prvIdleTask+0x28>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d9f9      	bls.n	8006248 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <prvIdleTask+0x2c>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006264:	e7f0      	b.n	8006248 <prvIdleTask+0x8>
 8006266:	bf00      	nop
 8006268:	20000dbc 	.word	0x20000dbc
 800626c:	e000ed04 	.word	0xe000ed04

08006270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
 800627a:	e00c      	b.n	8006296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <prvInitialiseTaskLists+0x60>)
 8006288:	4413      	add	r3, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fcb6 	bl	8004bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b37      	cmp	r3, #55	; 0x37
 800629a:	d9ef      	bls.n	800627c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800629c:	480d      	ldr	r0, [pc, #52]	; (80062d4 <prvInitialiseTaskLists+0x64>)
 800629e:	f7fe fcad 	bl	8004bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062a2:	480d      	ldr	r0, [pc, #52]	; (80062d8 <prvInitialiseTaskLists+0x68>)
 80062a4:	f7fe fcaa 	bl	8004bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062a8:	480c      	ldr	r0, [pc, #48]	; (80062dc <prvInitialiseTaskLists+0x6c>)
 80062aa:	f7fe fca7 	bl	8004bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062ae:	480c      	ldr	r0, [pc, #48]	; (80062e0 <prvInitialiseTaskLists+0x70>)
 80062b0:	f7fe fca4 	bl	8004bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062b4:	480b      	ldr	r0, [pc, #44]	; (80062e4 <prvInitialiseTaskLists+0x74>)
 80062b6:	f7fe fca1 	bl	8004bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <prvInitialiseTaskLists+0x78>)
 80062bc:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <prvInitialiseTaskLists+0x64>)
 80062be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <prvInitialiseTaskLists+0x7c>)
 80062c2:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <prvInitialiseTaskLists+0x68>)
 80062c4:	601a      	str	r2, [r3, #0]
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000dbc 	.word	0x20000dbc
 80062d4:	2000121c 	.word	0x2000121c
 80062d8:	20001230 	.word	0x20001230
 80062dc:	2000124c 	.word	0x2000124c
 80062e0:	20001260 	.word	0x20001260
 80062e4:	20001278 	.word	0x20001278
 80062e8:	20001244 	.word	0x20001244
 80062ec:	20001248 	.word	0x20001248

080062f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062f6:	e019      	b.n	800632c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062f8:	f000 fdd4 	bl	8006ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <prvCheckTasksWaitingTermination+0x50>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe fd01 	bl	8004d10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <prvCheckTasksWaitingTermination+0x54>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3b01      	subs	r3, #1
 8006314:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <prvCheckTasksWaitingTermination+0x54>)
 8006316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <prvCheckTasksWaitingTermination+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3b01      	subs	r3, #1
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <prvCheckTasksWaitingTermination+0x58>)
 8006320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006322:	f000 fdef 	bl	8006f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f810 	bl	800634c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <prvCheckTasksWaitingTermination+0x58>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e1      	bne.n	80062f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20001260 	.word	0x20001260
 8006344:	2000128c 	.word	0x2000128c
 8006348:	20001274 	.word	0x20001274

0800634c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	4618      	mov	r0, r3
 8006364:	f000 ff8c 	bl	8007280 <vPortFree>
				vPortFree( pxTCB );
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 ff89 	bl	8007280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800636e:	e018      	b.n	80063a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006376:	2b01      	cmp	r3, #1
 8006378:	d103      	bne.n	8006382 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 ff80 	bl	8007280 <vPortFree>
	}
 8006380:	e00f      	b.n	80063a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006388:	2b02      	cmp	r3, #2
 800638a:	d00a      	beq.n	80063a2 <prvDeleteTCB+0x56>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	60fb      	str	r3, [r7, #12]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <prvDeleteTCB+0x54>
	}
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b2:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <prvResetNextTaskUnblockTime+0x38>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <prvResetNextTaskUnblockTime+0x3c>)
 80063be:	f04f 32ff 	mov.w	r2, #4294967295
 80063c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063c4:	e008      	b.n	80063d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <prvResetNextTaskUnblockTime+0x38>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <prvResetNextTaskUnblockTime+0x3c>)
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20001244 	.word	0x20001244
 80063e8:	200012ac 	.word	0x200012ac

080063ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063f2:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <xTaskGetSchedulerState+0x34>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063fa:	2301      	movs	r3, #1
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	e008      	b.n	8006412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <xTaskGetSchedulerState+0x38>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006408:	2302      	movs	r3, #2
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	e001      	b.n	8006412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006412:	687b      	ldr	r3, [r7, #4]
	}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20001298 	.word	0x20001298
 8006424:	200012b4 	.word	0x200012b4

08006428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d056      	beq.n	80064ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <xTaskPriorityDisinherit+0xd0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	429a      	cmp	r2, r3
 8006446:	d00a      	beq.n	800645e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	60bb      	str	r3, [r7, #8]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648e:	429a      	cmp	r2, r3
 8006490:	d02c      	beq.n	80064ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006496:	2b00      	cmp	r3, #0
 8006498:	d128      	bne.n	80064ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fc36 	bl	8004d10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <xTaskPriorityDisinherit+0xd4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <xTaskPriorityDisinherit+0xa4>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <xTaskPriorityDisinherit+0xd4>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <xTaskPriorityDisinherit+0xd8>)
 80064da:	441a      	add	r2, r3
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7fe fbb7 	bl	8004c56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ec:	697b      	ldr	r3, [r7, #20]
	}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000db8 	.word	0x20000db8
 80064fc:	20001294 	.word	0x20001294
 8006500:	20000dbc 	.word	0x20000dbc

08006504 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800650e:	4b21      	ldr	r3, [pc, #132]	; (8006594 <prvAddCurrentTaskToDelayedList+0x90>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006514:	4b20      	ldr	r3, [pc, #128]	; (8006598 <prvAddCurrentTaskToDelayedList+0x94>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3304      	adds	r3, #4
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fbf8 	bl	8004d10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d10a      	bne.n	800653e <prvAddCurrentTaskToDelayedList+0x3a>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <prvAddCurrentTaskToDelayedList+0x94>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4819      	ldr	r0, [pc, #100]	; (800659c <prvAddCurrentTaskToDelayedList+0x98>)
 8006538:	f7fe fb8d 	bl	8004c56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800653c:	e026      	b.n	800658c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <prvAddCurrentTaskToDelayedList+0x94>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	429a      	cmp	r2, r3
 8006554:	d209      	bcs.n	800656a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <prvAddCurrentTaskToDelayedList+0x94>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f7fe fb9b 	bl	8004c9e <vListInsert>
}
 8006568:	e010      	b.n	800658c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656a:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <prvAddCurrentTaskToDelayedList+0x94>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7fe fb91 	bl	8004c9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	d202      	bcs.n	800658c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6013      	str	r3, [r2, #0]
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20001290 	.word	0x20001290
 8006598:	20000db8 	.word	0x20000db8
 800659c:	20001278 	.word	0x20001278
 80065a0:	20001248 	.word	0x20001248
 80065a4:	20001244 	.word	0x20001244
 80065a8:	200012ac 	.word	0x200012ac

080065ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065b6:	f000 fb07 	bl	8006bc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ba:	4b1c      	ldr	r3, [pc, #112]	; (800662c <xTimerCreateTimerTask+0x80>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d021      	beq.n	8006606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065ca:	1d3a      	adds	r2, r7, #4
 80065cc:	f107 0108 	add.w	r1, r7, #8
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe faf7 	bl	8004bc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	2302      	movs	r3, #2
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	460a      	mov	r2, r1
 80065ec:	4910      	ldr	r1, [pc, #64]	; (8006630 <xTimerCreateTimerTask+0x84>)
 80065ee:	4811      	ldr	r0, [pc, #68]	; (8006634 <xTimerCreateTimerTask+0x88>)
 80065f0:	f7ff f8de 	bl	80057b0 <xTaskCreateStatic>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <xTimerCreateTimerTask+0x8c>)
 80065f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <xTimerCreateTimerTask+0x8c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006602:	2301      	movs	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	613b      	str	r3, [r7, #16]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006622:	697b      	ldr	r3, [r7, #20]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200012e8 	.word	0x200012e8
 8006630:	080075a0 	.word	0x080075a0
 8006634:	08006771 	.word	0x08006771
 8006638:	200012ec 	.word	0x200012ec

0800663c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800664a:	2300      	movs	r3, #0
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	623b      	str	r3, [r7, #32]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <xTimerGenericCommand+0x98>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02a      	beq.n	80066c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b05      	cmp	r3, #5
 8006682:	dc18      	bgt.n	80066b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006684:	f7ff feb2 	bl	80063ec <xTaskGetSchedulerState>
 8006688:	4603      	mov	r3, r0
 800668a:	2b02      	cmp	r3, #2
 800668c:	d109      	bne.n	80066a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <xTimerGenericCommand+0x98>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f107 0110 	add.w	r1, r7, #16
 8006696:	2300      	movs	r3, #0
 8006698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669a:	f7fe fca1 	bl	8004fe0 <xQueueGenericSend>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24
 80066a0:	e012      	b.n	80066c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <xTimerGenericCommand+0x98>)
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f107 0110 	add.w	r1, r7, #16
 80066aa:	2300      	movs	r3, #0
 80066ac:	2200      	movs	r2, #0
 80066ae:	f7fe fc97 	bl	8004fe0 <xQueueGenericSend>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
 80066b4:	e008      	b.n	80066c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <xTimerGenericCommand+0x98>)
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	f107 0110 	add.w	r1, r7, #16
 80066be:	2300      	movs	r3, #0
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	f7fe fd8b 	bl	80051dc <xQueueGenericSendFromISR>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	; 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200012e8 	.word	0x200012e8

080066d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e2:	4b22      	ldr	r3, [pc, #136]	; (800676c <prvProcessExpiredTimer+0x94>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fb0d 	bl	8004d10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d022      	beq.n	800674a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	18d1      	adds	r1, r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f000 f8d1 	bl	80068b8 <prvInsertTimerInActiveList>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01f      	beq.n	800675c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800671c:	2300      	movs	r3, #0
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	2100      	movs	r1, #0
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f7ff ff88 	bl	800663c <xTimerGenericCommand>
 800672c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d113      	bne.n	800675c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	4798      	blx	r3
}
 8006764:	bf00      	nop
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	200012e0 	.word	0x200012e0

08006770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f857 	bl	8006830 <prvGetNextExpireTime>
 8006782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f803 	bl	8006794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800678e:	f000 f8d5 	bl	800693c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006792:	e7f1      	b.n	8006778 <prvTimerTask+0x8>

08006794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800679e:	f7ff fa43 	bl	8005c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f866 	bl	8006878 <prvSampleTimeNow>
 80067ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d130      	bne.n	8006816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <prvProcessTimerOrBlockTask+0x3c>
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d806      	bhi.n	80067d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067c2:	f7ff fa3f 	bl	8005c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff85 	bl	80066d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067ce:	e024      	b.n	800681a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <prvProcessTimerOrBlockTask+0x90>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <prvProcessTimerOrBlockTask+0x50>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <prvProcessTimerOrBlockTask+0x52>
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvProcessTimerOrBlockTask+0x94>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f7fe ffa7 	bl	8005748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067fa:	f7ff fa23 	bl	8005c44 <xTaskResumeAll>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <prvProcessTimerOrBlockTask+0x98>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
}
 8006814:	e001      	b.n	800681a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006816:	f7ff fa15 	bl	8005c44 <xTaskResumeAll>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200012e4 	.word	0x200012e4
 8006828:	200012e8 	.word	0x200012e8
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006838:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <prvGetNextExpireTime+0x44>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <prvGetNextExpireTime+0x16>
 8006842:	2201      	movs	r2, #1
 8006844:	e000      	b.n	8006848 <prvGetNextExpireTime+0x18>
 8006846:	2200      	movs	r2, #0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvGetNextExpireTime+0x44>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e001      	b.n	8006864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	200012e0 	.word	0x200012e0

08006878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006880:	f7ff fa7e 	bl	8005d80 <xTaskGetTickCount>
 8006884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <prvSampleTimeNow+0x3c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d205      	bcs.n	800689c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006890:	f000 f936 	bl	8006b00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e002      	b.n	80068a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068a2:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <prvSampleTimeNow+0x3c>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200012f0 	.word	0x200012f0

080068b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d812      	bhi.n	8006904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e01b      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <prvInsertTimerInActiveList+0x7c>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe f9ce 	bl	8004c9e <vListInsert>
 8006902:	e012      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d206      	bcs.n	800691a <prvInsertTimerInActiveList+0x62>
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d302      	bcc.n	800691a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e007      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <prvInsertTimerInActiveList+0x80>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe f9ba 	bl	8004c9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800692a:	697b      	ldr	r3, [r7, #20]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	200012e4 	.word	0x200012e4
 8006938:	200012e0 	.word	0x200012e0

0800693c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08e      	sub	sp, #56	; 0x38
 8006940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006942:	e0ca      	b.n	8006ada <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da18      	bge.n	800697c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	3304      	adds	r3, #4
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	61fb      	str	r3, [r7, #28]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006972:	6850      	ldr	r0, [r2, #4]
 8006974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006976:	6892      	ldr	r2, [r2, #8]
 8006978:	4611      	mov	r1, r2
 800697a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f2c0 80ab 	blt.w	8006ada <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe f9bb 	bl	8004d10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800699a:	463b      	mov	r3, r7
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff6b 	bl	8006878 <prvSampleTimeNow>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b09      	cmp	r3, #9
 80069a8:	f200 8096 	bhi.w	8006ad8 <prvProcessReceivedCommands+0x19c>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <prvProcessReceivedCommands+0x78>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069dd 	.word	0x080069dd
 80069c0:	08006a51 	.word	0x08006a51
 80069c4:	08006a65 	.word	0x08006a65
 80069c8:	08006aaf 	.word	0x08006aaf
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069dd 	.word	0x080069dd
 80069d4:	08006a51 	.word	0x08006a51
 80069d8:	08006a65 	.word	0x08006a65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	18d1      	adds	r1, r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fc:	f7ff ff5c 	bl	80068b8 <prvInsertTimerInActiveList>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d069      	beq.n	8006ada <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d05e      	beq.n	8006ada <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	441a      	add	r2, r3
 8006a24:	2300      	movs	r3, #0
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2e:	f7ff fe05 	bl	800663c <xTimerGenericCommand>
 8006a32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d14f      	bne.n	8006ada <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	61bb      	str	r3, [r7, #24]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a62:	e03a      	b.n	8006ada <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	617b      	str	r3, [r7, #20]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	18d1      	adds	r1, r2, r3
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa8:	f7ff ff06 	bl	80068b8 <prvInsertTimerInActiveList>
					break;
 8006aac:	e015      	b.n	8006ada <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abe:	f000 fbdf 	bl	8007280 <vPortFree>
 8006ac2:	e00a      	b.n	8006ada <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ad6:	e000      	b.n	8006ada <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006ad8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <prvProcessReceivedCommands+0x1c0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	1d39      	adds	r1, r7, #4
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fc16 	bl	8005314 <xQueueReceive>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f af2a 	bne.w	8006944 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	3730      	adds	r7, #48	; 0x30
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200012e8 	.word	0x200012e8

08006b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b06:	e048      	b.n	8006b9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b08:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b12:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe f8f5 	bl	8004d10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d02e      	beq.n	8006b9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d90e      	bls.n	8006b6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fe f89a 	bl	8004c9e <vListInsert>
 8006b6a:	e016      	b.n	8006b9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fd60 	bl	800663c <xTimerGenericCommand>
 8006b7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	603b      	str	r3, [r7, #0]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1b1      	bne.n	8006b08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <prvSwitchTimerLists+0xc4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <prvSwitchTimerLists+0xc0>)
 8006bb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bb2:	4a04      	ldr	r2, [pc, #16]	; (8006bc4 <prvSwitchTimerLists+0xc4>)
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	6013      	str	r3, [r2, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200012e0 	.word	0x200012e0
 8006bc4:	200012e4 	.word	0x200012e4

08006bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bce:	f000 f969 	bl	8006ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bd2:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <prvCheckForValidListAndQueue+0x60>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d120      	bne.n	8006c1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bda:	4814      	ldr	r0, [pc, #80]	; (8006c2c <prvCheckForValidListAndQueue+0x64>)
 8006bdc:	f7fe f80e 	bl	8004bfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006be0:	4813      	ldr	r0, [pc, #76]	; (8006c30 <prvCheckForValidListAndQueue+0x68>)
 8006be2:	f7fe f80b 	bl	8004bfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <prvCheckForValidListAndQueue+0x6c>)
 8006be8:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <prvCheckForValidListAndQueue+0x64>)
 8006bea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bec:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <prvCheckForValidListAndQueue+0x70>)
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <prvCheckForValidListAndQueue+0x68>)
 8006bf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <prvCheckForValidListAndQueue+0x74>)
 8006bf8:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <prvCheckForValidListAndQueue+0x78>)
 8006bfa:	2110      	movs	r1, #16
 8006bfc:	200a      	movs	r0, #10
 8006bfe:	f7fe f919 	bl	8004e34 <xQueueGenericCreateStatic>
 8006c02:	4603      	mov	r3, r0
 8006c04:	4a08      	ldr	r2, [pc, #32]	; (8006c28 <prvCheckForValidListAndQueue+0x60>)
 8006c06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <prvCheckForValidListAndQueue+0x60>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <prvCheckForValidListAndQueue+0x60>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	490b      	ldr	r1, [pc, #44]	; (8006c44 <prvCheckForValidListAndQueue+0x7c>)
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fd6c 	bl	80056f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c1c:	f000 f972 	bl	8006f04 <vPortExitCritical>
}
 8006c20:	bf00      	nop
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200012e8 	.word	0x200012e8
 8006c2c:	200012b8 	.word	0x200012b8
 8006c30:	200012cc 	.word	0x200012cc
 8006c34:	200012e0 	.word	0x200012e0
 8006c38:	200012e4 	.word	0x200012e4
 8006c3c:	20001394 	.word	0x20001394
 8006c40:	200012f4 	.word	0x200012f4
 8006c44:	080075a8 	.word	0x080075a8

08006c48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b04      	subs	r3, #4
 8006c58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3b04      	subs	r3, #4
 8006c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c78:	4a0c      	ldr	r2, [pc, #48]	; (8006cac <pxPortInitialiseStack+0x64>)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3b14      	subs	r3, #20
 8006c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3b04      	subs	r3, #4
 8006c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f06f 0202 	mvn.w	r2, #2
 8006c96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3b20      	subs	r3, #32
 8006c9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	08006cb1 	.word	0x08006cb1

08006cb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cba:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <prvTaskExitError+0x54>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d00a      	beq.n	8006cda <prvTaskExitError+0x2a>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <prvTaskExitError+0x28>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60bb      	str	r3, [r7, #8]
}
 8006cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cee:	bf00      	nop
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0fc      	beq.n	8006cf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	2000000c 	.word	0x2000000c
	...

08006d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <pxCurrentTCBConst2>)
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	6808      	ldr	r0, [r1, #0]
 8006d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1a:	f380 8809 	msr	PSP, r0
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8811 	msr	BASEPRI, r0
 8006d2a:	4770      	bx	lr
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst2>:
 8006d30:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d38:	4808      	ldr	r0, [pc, #32]	; (8006d5c <prvPortStartFirstTask+0x24>)
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	6800      	ldr	r0, [r0, #0]
 8006d3e:	f380 8808 	msr	MSP, r0
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f380 8814 	msr	CONTROL, r0
 8006d4a:	b662      	cpsie	i
 8006d4c:	b661      	cpsie	f
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	df00      	svc	0
 8006d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d5a:	bf00      	nop
 8006d5c:	e000ed08 	.word	0xe000ed08

08006d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d66:	4b46      	ldr	r3, [pc, #280]	; (8006e80 <xPortStartScheduler+0x120>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a46      	ldr	r2, [pc, #280]	; (8006e84 <xPortStartScheduler+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10a      	bne.n	8006d86 <xPortStartScheduler+0x26>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	613b      	str	r3, [r7, #16]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <xPortStartScheduler+0x120>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <xPortStartScheduler+0x128>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10a      	bne.n	8006da6 <xPortStartScheduler+0x46>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60fb      	str	r3, [r7, #12]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006da6:	4b39      	ldr	r3, [pc, #228]	; (8006e8c <xPortStartScheduler+0x12c>)
 8006da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b31      	ldr	r3, [pc, #196]	; (8006e90 <xPortStartScheduler+0x130>)
 8006dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dd4:	e009      	b.n	8006dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d0ef      	beq.n	8006dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006df6:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <xPortStartScheduler+0x134>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1c3 0307 	rsb	r3, r3, #7
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00a      	beq.n	8006e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60bb      	str	r3, [r7, #8]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e36:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e4e:	f000 f8dd 	bl	800700c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <xPortStartScheduler+0x13c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e58:	f000 f8fc 	bl	8007054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e5c:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <xPortStartScheduler+0x140>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <xPortStartScheduler+0x140>)
 8006e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e68:	f7ff ff66 	bl	8006d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e6c:	f7ff f852 	bl	8005f14 <vTaskSwitchContext>
	prvTaskExitError();
 8006e70:	f7ff ff1e 	bl	8006cb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	e000ed00 	.word	0xe000ed00
 8006e84:	410fc271 	.word	0x410fc271
 8006e88:	410fc270 	.word	0x410fc270
 8006e8c:	e000e400 	.word	0xe000e400
 8006e90:	200013e4 	.word	0x200013e4
 8006e94:	200013e8 	.word	0x200013e8
 8006e98:	e000ed20 	.word	0xe000ed20
 8006e9c:	2000000c 	.word	0x2000000c
 8006ea0:	e000ef34 	.word	0xe000ef34

08006ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	607b      	str	r3, [r7, #4]
}
 8006ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <vPortEnterCritical+0x58>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <vPortEnterCritical+0x58>)
 8006ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <vPortEnterCritical+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d10f      	bne.n	8006ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <vPortEnterCritical+0x5c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <vPortEnterCritical+0x4a>
	}
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <vPortExitCritical+0x50>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <vPortExitCritical+0x24>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	607b      	str	r3, [r7, #4]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <vPortExitCritical+0x50>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <vPortExitCritical+0x50>)
 8006f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <vPortExitCritical+0x50>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <vPortExitCritical+0x42>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f383 8811 	msr	BASEPRI, r3
}
 8006f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c
	...

08006f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f60:	f3ef 8009 	mrs	r0, PSP
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <pxCurrentTCBConst>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f01e 0f10 	tst.w	lr, #16
 8006f70:	bf08      	it	eq
 8006f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f84:	f380 8811 	msr	BASEPRI, r0
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f7fe ffc0 	bl	8005f14 <vTaskSwitchContext>
 8006f94:	f04f 0000 	mov.w	r0, #0
 8006f98:	f380 8811 	msr	BASEPRI, r0
 8006f9c:	bc09      	pop	{r0, r3}
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa6:	f01e 0f10 	tst.w	lr, #16
 8006faa:	bf08      	it	eq
 8006fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fb0:	f380 8809 	msr	PSP, r0
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst>:
 8006fc0:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
}
 8006fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fe2:	f7fe fedd 	bl	8005da0 <xTaskIncrementTick>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <xPortSysTickHandler+0x40>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <vPortSetupTimerInterrupt+0x38>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <vPortSetupTimerInterrupt+0x3c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <vPortSetupTimerInterrupt+0x40>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	099b      	lsrs	r3, r3, #6
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <vPortSetupTimerInterrupt+0x44>)
 800702a:	3b01      	subs	r3, #1
 800702c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800702e:	4b04      	ldr	r3, [pc, #16]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007030:	2207      	movs	r2, #7
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	e000e010 	.word	0xe000e010
 8007044:	e000e018 	.word	0xe000e018
 8007048:	20000000 	.word	0x20000000
 800704c:	10624dd3 	.word	0x10624dd3
 8007050:	e000e014 	.word	0xe000e014

08007054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007064 <vPortEnableVFP+0x10>
 8007058:	6801      	ldr	r1, [r0, #0]
 800705a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800705e:	6001      	str	r1, [r0, #0]
 8007060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007062:	bf00      	nop
 8007064:	e000ed88 	.word	0xe000ed88

08007068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800706e:	f3ef 8305 	mrs	r3, IPSR
 8007072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d914      	bls.n	80070a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <vPortValidateInterruptPriority+0x70>)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007084:	4b15      	ldr	r3, [pc, #84]	; (80070dc <vPortValidateInterruptPriority+0x74>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	7afa      	ldrb	r2, [r7, #11]
 800708a:	429a      	cmp	r2, r3
 800708c:	d20a      	bcs.n	80070a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	607b      	str	r3, [r7, #4]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <vPortValidateInterruptPriority+0x78>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <vPortValidateInterruptPriority+0x7c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d90a      	bls.n	80070ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	603b      	str	r3, [r7, #0]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <vPortValidateInterruptPriority+0x60>
	}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000e3f0 	.word	0xe000e3f0
 80070dc:	200013e4 	.word	0x200013e4
 80070e0:	e000ed0c 	.word	0xe000ed0c
 80070e4:	200013e8 	.word	0x200013e8

080070e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070f4:	f7fe fd98 	bl	8005c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070f8:	4b5b      	ldr	r3, [pc, #364]	; (8007268 <pvPortMalloc+0x180>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007100:	f000 f920 	bl	8007344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007104:	4b59      	ldr	r3, [pc, #356]	; (800726c <pvPortMalloc+0x184>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 8093 	bne.w	8007238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01d      	beq.n	8007154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007118:	2208      	movs	r2, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d014      	beq.n	8007154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	3308      	adds	r3, #8
 8007132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <pvPortMalloc+0x6c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d06e      	beq.n	8007238 <pvPortMalloc+0x150>
 800715a:	4b45      	ldr	r3, [pc, #276]	; (8007270 <pvPortMalloc+0x188>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d869      	bhi.n	8007238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007164:	4b43      	ldr	r3, [pc, #268]	; (8007274 <pvPortMalloc+0x18c>)
 8007166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007168:	4b42      	ldr	r3, [pc, #264]	; (8007274 <pvPortMalloc+0x18c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800716e:	e004      	b.n	800717a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d903      	bls.n	800718c <pvPortMalloc+0xa4>
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f1      	bne.n	8007170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <pvPortMalloc+0x180>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	429a      	cmp	r2, r3
 8007194:	d050      	beq.n	8007238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2208      	movs	r2, #8
 800719c:	4413      	add	r3, r2
 800719e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	2308      	movs	r3, #8
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d91f      	bls.n	80071f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <pvPortMalloc+0xf8>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	613b      	str	r3, [r7, #16]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071f2:	69b8      	ldr	r0, [r7, #24]
 80071f4:	f000 f908 	bl	8007408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <pvPortMalloc+0x188>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <pvPortMalloc+0x188>)
 8007204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <pvPortMalloc+0x188>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <pvPortMalloc+0x190>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d203      	bcs.n	800721a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007212:	4b17      	ldr	r3, [pc, #92]	; (8007270 <pvPortMalloc+0x188>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <pvPortMalloc+0x190>)
 8007218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <pvPortMalloc+0x184>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	431a      	orrs	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <pvPortMalloc+0x194>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	4a11      	ldr	r2, [pc, #68]	; (800727c <pvPortMalloc+0x194>)
 8007236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007238:	f7fe fd04 	bl	8005c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <pvPortMalloc+0x174>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60fb      	str	r3, [r7, #12]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <pvPortMalloc+0x172>
	return pvReturn;
 800725c:	69fb      	ldr	r3, [r7, #28]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3728      	adds	r7, #40	; 0x28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20001fac 	.word	0x20001fac
 800726c:	20001fc0 	.word	0x20001fc0
 8007270:	20001fb0 	.word	0x20001fb0
 8007274:	20001fa4 	.word	0x20001fa4
 8007278:	20001fb4 	.word	0x20001fb4
 800727c:	20001fb8 	.word	0x20001fb8

08007280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04d      	beq.n	800732e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007292:	2308      	movs	r3, #8
 8007294:	425b      	negs	r3, r3
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	4b24      	ldr	r3, [pc, #144]	; (8007338 <vPortFree+0xb8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <vPortFree+0x44>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <vPortFree+0x62>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60bb      	str	r3, [r7, #8]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4b14      	ldr	r3, [pc, #80]	; (8007338 <vPortFree+0xb8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01e      	beq.n	800732e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11a      	bne.n	800732e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <vPortFree+0xb8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	43db      	mvns	r3, r3
 8007302:	401a      	ands	r2, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007308:	f7fe fc8e 	bl	8005c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <vPortFree+0xbc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4413      	add	r3, r2
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <vPortFree+0xbc>)
 8007318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800731a:	6938      	ldr	r0, [r7, #16]
 800731c:	f000 f874 	bl	8007408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <vPortFree+0xc0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	4a06      	ldr	r2, [pc, #24]	; (8007340 <vPortFree+0xc0>)
 8007328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800732a:	f7fe fc8b 	bl	8005c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800732e:	bf00      	nop
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20001fc0 	.word	0x20001fc0
 800733c:	20001fb0 	.word	0x20001fb0
 8007340:	20001fbc 	.word	0x20001fbc

08007344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800734a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800734e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <prvHeapInit+0xac>)
 8007352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3307      	adds	r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0307 	bic.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <prvHeapInit+0xac>)
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800737c:	4a1d      	ldr	r2, [pc, #116]	; (80073f4 <prvHeapInit+0xb0>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <prvHeapInit+0xb0>)
 8007384:	2200      	movs	r2, #0
 8007386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007390:	2208      	movs	r2, #8
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <prvHeapInit+0xb4>)
 80073a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <prvHeapInit+0xb4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <prvHeapInit+0xb4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvHeapInit+0xb4>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <prvHeapInit+0xb8>)
 80073d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <prvHeapInit+0xbc>)
 80073da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <prvHeapInit+0xc0>)
 80073de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	200013ec 	.word	0x200013ec
 80073f4:	20001fa4 	.word	0x20001fa4
 80073f8:	20001fac 	.word	0x20001fac
 80073fc:	20001fb4 	.word	0x20001fb4
 8007400:	20001fb0 	.word	0x20001fb0
 8007404:	20001fc0 	.word	0x20001fc0

08007408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <prvInsertBlockIntoFreeList+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e002      	b.n	800741c <prvInsertBlockIntoFreeList+0x14>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d8f7      	bhi.n	8007416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d108      	bne.n	800744a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d118      	bne.n	8007490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d00d      	beq.n	8007486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e008      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e003      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d002      	beq.n	80074a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20001fa4 	.word	0x20001fa4
 80074b8:	20001fac 	.word	0x20001fac

080074bc <memset>:
 80074bc:	4402      	add	r2, r0
 80074be:	4603      	mov	r3, r0
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d100      	bne.n	80074c6 <memset+0xa>
 80074c4:	4770      	bx	lr
 80074c6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ca:	e7f9      	b.n	80074c0 <memset+0x4>

080074cc <__libc_init_array>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	4d0d      	ldr	r5, [pc, #52]	; (8007504 <__libc_init_array+0x38>)
 80074d0:	4c0d      	ldr	r4, [pc, #52]	; (8007508 <__libc_init_array+0x3c>)
 80074d2:	1b64      	subs	r4, r4, r5
 80074d4:	10a4      	asrs	r4, r4, #2
 80074d6:	2600      	movs	r6, #0
 80074d8:	42a6      	cmp	r6, r4
 80074da:	d109      	bne.n	80074f0 <__libc_init_array+0x24>
 80074dc:	4d0b      	ldr	r5, [pc, #44]	; (800750c <__libc_init_array+0x40>)
 80074de:	4c0c      	ldr	r4, [pc, #48]	; (8007510 <__libc_init_array+0x44>)
 80074e0:	f000 f826 	bl	8007530 <_init>
 80074e4:	1b64      	subs	r4, r4, r5
 80074e6:	10a4      	asrs	r4, r4, #2
 80074e8:	2600      	movs	r6, #0
 80074ea:	42a6      	cmp	r6, r4
 80074ec:	d105      	bne.n	80074fa <__libc_init_array+0x2e>
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f4:	4798      	blx	r3
 80074f6:	3601      	adds	r6, #1
 80074f8:	e7ee      	b.n	80074d8 <__libc_init_array+0xc>
 80074fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fe:	4798      	blx	r3
 8007500:	3601      	adds	r6, #1
 8007502:	e7f2      	b.n	80074ea <__libc_init_array+0x1e>
 8007504:	080076c0 	.word	0x080076c0
 8007508:	080076c0 	.word	0x080076c0
 800750c:	080076c0 	.word	0x080076c0
 8007510:	080076c4 	.word	0x080076c4

08007514 <memcpy>:
 8007514:	440a      	add	r2, r1
 8007516:	4291      	cmp	r1, r2
 8007518:	f100 33ff 	add.w	r3, r0, #4294967295
 800751c:	d100      	bne.n	8007520 <memcpy+0xc>
 800751e:	4770      	bx	lr
 8007520:	b510      	push	{r4, lr}
 8007522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752a:	4291      	cmp	r1, r2
 800752c:	d1f9      	bne.n	8007522 <memcpy+0xe>
 800752e:	bd10      	pop	{r4, pc}

08007530 <_init>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr

0800753c <_fini>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr
