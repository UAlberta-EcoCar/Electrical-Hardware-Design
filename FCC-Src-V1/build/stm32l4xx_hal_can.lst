ARM GAS  /tmp/cce3S0ea.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_hal_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_CAN_Init,"ax",%progbits
  20              		.align	1
  21              		.global	HAL_CAN_Init
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CAN_Init:
  27              	.LFB132:
  28              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c"
   1:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @file    stm32l4xx_hal_can.c
   4:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  15:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
  16:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @attention
  17:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  18:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * Copyright (c) 2017 STMicroelectronics.
  19:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * All rights reserved.
  20:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  21:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * This software is licensed under terms that can be found in the LICENSE file
  22:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * in the root directory of this software component.
  23:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  24:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  25:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
  26:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @verbatim
  27:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
  28:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         ##### How to use this driver #####
  29:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
  30:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
ARM GAS  /tmp/cce3S0ea.s 			page 2


  31:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  32:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_MspInit():
  33:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  34:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Configure CAN pins
  35:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  36:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  37:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  38:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  39:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  40:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  41:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  42:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  43:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  44:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  45:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  46:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  47:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           functions:
  48:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  49:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  50:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  51:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  52:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           messages.
  53:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  54:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  55:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           can be used:
  56:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  57:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  58:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  59:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  60:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  61:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailboxes.
  62:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  63:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  in a Tx mailbox.
  64:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  65:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  66:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  67:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  68:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  69:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  70:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           stored in the Rx Fifo.
  71:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  72:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  73:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  74:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  75:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  76:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  77:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Polling mode operation ***
  78:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==============================
  79:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  80:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Reception:
  81:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  82:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  until at least one message is received.
  83:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  84:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  85:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Transmission:
  86:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  87:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
ARM GAS  /tmp/cce3S0ea.s 			page 3


  88:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then request transmission of a message using
  89:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  90:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  91:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  92:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Interrupt mode operation ***
  93:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ================================
  94:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  95:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  96:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function. Then, the process can be controlled through the
  97:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  98:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  99:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications can be deactivated using
 101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
 102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
 104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
 105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
 106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
 107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           here.
 108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
 109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
 110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  read, the notification can be activated again.
 114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Sleep mode ***
 117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==================
 118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
 119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           be completed.
 123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           will be entered.
 126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The wake-up from sleep mode can be triggered by two ways:
 135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *** Callback registration ***
 141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   =============================================
 142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
ARM GAS  /tmp/cce3S0ea.s 			page 4


 145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use Function HAL_CAN_RegisterCallback() to register an interrupt callback.
 146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Function HAL_CAN_RegisterCallback() allows to register following callbacks:
 148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and a pointer to the user callback function.
 165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use function HAL_CAN_UnRegisterCallback() to reset a callback to the default
 167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   weak function.
 168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and the Callback ID.
 170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function allows to reset following callbacks:
 171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   By default, after the HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   example HAL_CAN_ErrorCallback().
 190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   reset to the legacy weak function in the HAL_CAN_Init()/ HAL_CAN_DeInit() only when
 192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the HAL_CAN_Init()/ HAL_CAN_DeInit()
 194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   using HAL_CAN_RegisterCallback() before calling HAL_CAN_DeInit()
ARM GAS  /tmp/cce3S0ea.s 			page 5


 202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   or HAL_CAN_Init() function.
 203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   are set to the corresponding weak functions.
 207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @endverbatim
 209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
 210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #include "stm32l4xx_hal.h"
 214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @addtogroup STM32L4xx_HAL_Driver
 216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if defined(CAN1)
 220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN CAN
 222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief CAN driver modules
 223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* HAL_CAN_LEGACY_MODULE_ENABLED */
 231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
ARM GAS  /tmp/cce3S0ea.s 			page 6


 259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
  29              		.loc 1 275 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
 277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
  45              		.loc 1 279 6
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
  49              		.loc 1 281 12
  50 000e 0123     		movs	r3, #1
  51 0010 EDE0     		b	.L3
  52              	.L2:
 282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
 285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
ARM GAS  /tmp/cce3S0ea.s 			page 7


 292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
  53              		.loc 1 326 11
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 93F82030 		ldrb	r3, [r3, #32]
  56 0018 DBB2     		uxtb	r3, r3
  57              		.loc 1 326 6
  58 001a 002B     		cmp	r3, #0
  59 001c 02D1     		bne	.L4
 327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
  60              		.loc 1 329 5
  61 001e 7868     		ldr	r0, [r7, #4]
  62 0020 FFF7FEFF 		bl	HAL_CAN_MspInit
  63              	.L4:
 330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Request initialisation */
 334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
  64              		.loc 1 334 3
  65 0024 7B68     		ldr	r3, [r7, #4]
  66 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cce3S0ea.s 			page 8


  67 0028 1A68     		ldr	r2, [r3]
  68 002a 7B68     		ldr	r3, [r7, #4]
  69 002c 1B68     		ldr	r3, [r3]
  70 002e 42F00102 		orr	r2, r2, #1
  71 0032 1A60     		str	r2, [r3]
 335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
  72              		.loc 1 337 15
  73 0034 FFF7FEFF 		bl	HAL_GetTick
  74 0038 F860     		str	r0, [r7, #12]
 338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
  75              		.loc 1 340 9
  76 003a 12E0     		b	.L5
  77              	.L6:
 341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
  78              		.loc 1 342 10
  79 003c FFF7FEFF 		bl	HAL_GetTick
  80 0040 0246     		mov	r2, r0
  81              		.loc 1 342 24
  82 0042 FB68     		ldr	r3, [r7, #12]
  83 0044 D31A     		subs	r3, r2, r3
  84              		.loc 1 342 8
  85 0046 0A2B     		cmp	r3, #10
  86 0048 0BD9     		bls	.L5
 343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
  87              		.loc 1 345 23
  88 004a 7B68     		ldr	r3, [r7, #4]
  89 004c 5B6A     		ldr	r3, [r3, #36]
  90 004e 43F40032 		orr	r2, r3, #131072
  91 0052 7B68     		ldr	r3, [r7, #4]
  92 0054 5A62     		str	r2, [r3, #36]
 346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
  93              		.loc 1 348 19
  94 0056 7B68     		ldr	r3, [r7, #4]
  95 0058 0522     		movs	r2, #5
  96 005a 83F82020 		strb	r2, [r3, #32]
 349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
  97              		.loc 1 350 14
  98 005e 0123     		movs	r3, #1
  99 0060 C5E0     		b	.L3
 100              	.L5:
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 101              		.loc 1 340 15
 102 0062 7B68     		ldr	r3, [r7, #4]
 103 0064 1B68     		ldr	r3, [r3]
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 104              		.loc 1 340 25
 105 0066 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cce3S0ea.s 			page 9


 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 106              		.loc 1 340 31
 107 0068 03F00103 		and	r3, r3, #1
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 108              		.loc 1 340 9
 109 006c 002B     		cmp	r3, #0
 110 006e E5D0     		beq	.L6
 351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Exit from sleep mode */
 355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 111              		.loc 1 355 3
 112 0070 7B68     		ldr	r3, [r7, #4]
 113 0072 1B68     		ldr	r3, [r3]
 114 0074 1A68     		ldr	r2, [r3]
 115 0076 7B68     		ldr	r3, [r7, #4]
 116 0078 1B68     		ldr	r3, [r3]
 117 007a 22F00202 		bic	r2, r2, #2
 118 007e 1A60     		str	r2, [r3]
 356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
 119              		.loc 1 358 15
 120 0080 FFF7FEFF 		bl	HAL_GetTick
 121 0084 F860     		str	r0, [r7, #12]
 359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 122              		.loc 1 361 9
 123 0086 12E0     		b	.L7
 124              	.L8:
 362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 125              		.loc 1 363 10
 126 0088 FFF7FEFF 		bl	HAL_GetTick
 127 008c 0246     		mov	r2, r0
 128              		.loc 1 363 24
 129 008e FB68     		ldr	r3, [r7, #12]
 130 0090 D31A     		subs	r3, r2, r3
 131              		.loc 1 363 8
 132 0092 0A2B     		cmp	r3, #10
 133 0094 0BD9     		bls	.L7
 364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 134              		.loc 1 366 23
 135 0096 7B68     		ldr	r3, [r7, #4]
 136 0098 5B6A     		ldr	r3, [r3, #36]
 137 009a 43F40032 		orr	r2, r3, #131072
 138 009e 7B68     		ldr	r3, [r7, #4]
 139 00a0 5A62     		str	r2, [r3, #36]
 367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 140              		.loc 1 369 19
 141 00a2 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cce3S0ea.s 			page 10


 142 00a4 0522     		movs	r2, #5
 143 00a6 83F82020 		strb	r2, [r3, #32]
 370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 144              		.loc 1 371 14
 145 00aa 0123     		movs	r3, #1
 146 00ac 9FE0     		b	.L3
 147              	.L7:
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 148              		.loc 1 361 15
 149 00ae 7B68     		ldr	r3, [r7, #4]
 150 00b0 1B68     		ldr	r3, [r3]
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 151              		.loc 1 361 25
 152 00b2 5B68     		ldr	r3, [r3, #4]
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 153              		.loc 1 361 31
 154 00b4 03F00203 		and	r3, r3, #2
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 155              		.loc 1 361 9
 156 00b8 002B     		cmp	r3, #0
 157 00ba E5D1     		bne	.L8
 372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 158              		.loc 1 376 17
 159 00bc 7B68     		ldr	r3, [r7, #4]
 160 00be 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 161              		.loc 1 376 6
 162 00c0 012B     		cmp	r3, #1
 163 00c2 08D1     		bne	.L9
 377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 164              		.loc 1 378 5
 165 00c4 7B68     		ldr	r3, [r7, #4]
 166 00c6 1B68     		ldr	r3, [r3]
 167 00c8 1A68     		ldr	r2, [r3]
 168 00ca 7B68     		ldr	r3, [r7, #4]
 169 00cc 1B68     		ldr	r3, [r3]
 170 00ce 42F08002 		orr	r2, r2, #128
 171 00d2 1A60     		str	r2, [r3]
 172 00d4 07E0     		b	.L10
 173              	.L9:
 379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 174              		.loc 1 382 5
 175 00d6 7B68     		ldr	r3, [r7, #4]
 176 00d8 1B68     		ldr	r3, [r3]
 177 00da 1A68     		ldr	r2, [r3]
 178 00dc 7B68     		ldr	r3, [r7, #4]
 179 00de 1B68     		ldr	r3, [r3]
 180 00e0 22F08002 		bic	r2, r2, #128
 181 00e4 1A60     		str	r2, [r3]
ARM GAS  /tmp/cce3S0ea.s 			page 11


 182              	.L10:
 383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 183              		.loc 1 386 17
 184 00e6 7B68     		ldr	r3, [r7, #4]
 185 00e8 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 186              		.loc 1 386 6
 187 00ea 012B     		cmp	r3, #1
 188 00ec 08D1     		bne	.L11
 387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 189              		.loc 1 388 5
 190 00ee 7B68     		ldr	r3, [r7, #4]
 191 00f0 1B68     		ldr	r3, [r3]
 192 00f2 1A68     		ldr	r2, [r3]
 193 00f4 7B68     		ldr	r3, [r7, #4]
 194 00f6 1B68     		ldr	r3, [r3]
 195 00f8 42F04002 		orr	r2, r2, #64
 196 00fc 1A60     		str	r2, [r3]
 197 00fe 07E0     		b	.L12
 198              	.L11:
 389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 199              		.loc 1 392 5
 200 0100 7B68     		ldr	r3, [r7, #4]
 201 0102 1B68     		ldr	r3, [r3]
 202 0104 1A68     		ldr	r2, [r3]
 203 0106 7B68     		ldr	r3, [r7, #4]
 204 0108 1B68     		ldr	r3, [r3]
 205 010a 22F04002 		bic	r2, r2, #64
 206 010e 1A60     		str	r2, [r3]
 207              	.L12:
 393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 208              		.loc 1 396 17
 209 0110 7B68     		ldr	r3, [r7, #4]
 210 0112 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 211              		.loc 1 396 6
 212 0114 012B     		cmp	r3, #1
 213 0116 08D1     		bne	.L13
 397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 214              		.loc 1 398 5
 215 0118 7B68     		ldr	r3, [r7, #4]
 216 011a 1B68     		ldr	r3, [r3]
 217 011c 1A68     		ldr	r2, [r3]
 218 011e 7B68     		ldr	r3, [r7, #4]
 219 0120 1B68     		ldr	r3, [r3]
 220 0122 42F02002 		orr	r2, r2, #32
 221 0126 1A60     		str	r2, [r3]
 222 0128 07E0     		b	.L14
ARM GAS  /tmp/cce3S0ea.s 			page 12


 223              	.L13:
 399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 224              		.loc 1 402 5
 225 012a 7B68     		ldr	r3, [r7, #4]
 226 012c 1B68     		ldr	r3, [r3]
 227 012e 1A68     		ldr	r2, [r3]
 228 0130 7B68     		ldr	r3, [r7, #4]
 229 0132 1B68     		ldr	r3, [r3]
 230 0134 22F02002 		bic	r2, r2, #32
 231 0138 1A60     		str	r2, [r3]
 232              	.L14:
 403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic retransmission */
 406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 233              		.loc 1 406 17
 234 013a 7B68     		ldr	r3, [r7, #4]
 235 013c DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 236              		.loc 1 406 6
 237 013e 012B     		cmp	r3, #1
 238 0140 08D1     		bne	.L15
 407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 239              		.loc 1 408 5
 240 0142 7B68     		ldr	r3, [r7, #4]
 241 0144 1B68     		ldr	r3, [r3]
 242 0146 1A68     		ldr	r2, [r3]
 243 0148 7B68     		ldr	r3, [r7, #4]
 244 014a 1B68     		ldr	r3, [r3]
 245 014c 22F01002 		bic	r2, r2, #16
 246 0150 1A60     		str	r2, [r3]
 247 0152 07E0     		b	.L16
 248              	.L15:
 409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 249              		.loc 1 412 5
 250 0154 7B68     		ldr	r3, [r7, #4]
 251 0156 1B68     		ldr	r3, [r3]
 252 0158 1A68     		ldr	r2, [r3]
 253 015a 7B68     		ldr	r3, [r7, #4]
 254 015c 1B68     		ldr	r3, [r3]
 255 015e 42F01002 		orr	r2, r2, #16
 256 0162 1A60     		str	r2, [r3]
 257              	.L16:
 413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 258              		.loc 1 416 17
 259 0164 7B68     		ldr	r3, [r7, #4]
 260 0166 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 261              		.loc 1 416 6
ARM GAS  /tmp/cce3S0ea.s 			page 13


 262 0168 012B     		cmp	r3, #1
 263 016a 08D1     		bne	.L17
 417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 264              		.loc 1 418 5
 265 016c 7B68     		ldr	r3, [r7, #4]
 266 016e 1B68     		ldr	r3, [r3]
 267 0170 1A68     		ldr	r2, [r3]
 268 0172 7B68     		ldr	r3, [r7, #4]
 269 0174 1B68     		ldr	r3, [r3]
 270 0176 42F00802 		orr	r2, r2, #8
 271 017a 1A60     		str	r2, [r3]
 272 017c 07E0     		b	.L18
 273              	.L17:
 419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 274              		.loc 1 422 5
 275 017e 7B68     		ldr	r3, [r7, #4]
 276 0180 1B68     		ldr	r3, [r3]
 277 0182 1A68     		ldr	r2, [r3]
 278 0184 7B68     		ldr	r3, [r7, #4]
 279 0186 1B68     		ldr	r3, [r3]
 280 0188 22F00802 		bic	r2, r2, #8
 281 018c 1A60     		str	r2, [r3]
 282              	.L18:
 423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 283              		.loc 1 426 17
 284 018e 7B68     		ldr	r3, [r7, #4]
 285 0190 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 286              		.loc 1 426 6
 287 0192 012B     		cmp	r3, #1
 288 0194 08D1     		bne	.L19
 427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 289              		.loc 1 428 5
 290 0196 7B68     		ldr	r3, [r7, #4]
 291 0198 1B68     		ldr	r3, [r3]
 292 019a 1A68     		ldr	r2, [r3]
 293 019c 7B68     		ldr	r3, [r7, #4]
 294 019e 1B68     		ldr	r3, [r3]
 295 01a0 42F00402 		orr	r2, r2, #4
 296 01a4 1A60     		str	r2, [r3]
 297 01a6 07E0     		b	.L20
 298              	.L19:
 429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 299              		.loc 1 432 5
 300 01a8 7B68     		ldr	r3, [r7, #4]
 301 01aa 1B68     		ldr	r3, [r3]
 302 01ac 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cce3S0ea.s 			page 14


 303 01ae 7B68     		ldr	r3, [r7, #4]
 304 01b0 1B68     		ldr	r3, [r3]
 305 01b2 22F00402 		bic	r2, r2, #4
 306 01b6 1A60     		str	r2, [r3]
 307              	.L20:
 433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the bit timing register */
 436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 308              		.loc 1 436 3
 309 01b8 7B68     		ldr	r3, [r7, #4]
 310 01ba 9A68     		ldr	r2, [r3, #8]
 311 01bc 7B68     		ldr	r3, [r7, #4]
 312 01be DB68     		ldr	r3, [r3, #12]
 313 01c0 1A43     		orrs	r2, r2, r3
 314 01c2 7B68     		ldr	r3, [r7, #4]
 315 01c4 1B69     		ldr	r3, [r3, #16]
 316 01c6 1A43     		orrs	r2, r2, r3
 317 01c8 7B68     		ldr	r3, [r7, #4]
 318 01ca 5B69     		ldr	r3, [r3, #20]
 319 01cc 42EA0301 		orr	r1, r2, r3
 320 01d0 7B68     		ldr	r3, [r7, #4]
 321 01d2 5B68     		ldr	r3, [r3, #4]
 322 01d4 5A1E     		subs	r2, r3, #1
 323 01d6 7B68     		ldr	r3, [r7, #4]
 324 01d8 1B68     		ldr	r3, [r3]
 325 01da 0A43     		orrs	r2, r2, r1
 326 01dc DA61     		str	r2, [r3, #28]
 437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the error code */
 443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 327              		.loc 1 443 19
 328 01de 7B68     		ldr	r3, [r7, #4]
 329 01e0 0022     		movs	r2, #0
 330 01e2 5A62     		str	r2, [r3, #36]
 444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the CAN state */
 446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 331              		.loc 1 446 15
 332 01e4 7B68     		ldr	r3, [r7, #4]
 333 01e6 0122     		movs	r2, #1
 334 01e8 83F82020 		strb	r2, [r3, #32]
 447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 335              		.loc 1 449 10
 336 01ec 0023     		movs	r3, #0
 337              	.L3:
 450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 338              		.loc 1 450 1
 339 01ee 1846     		mov	r0, r3
 340 01f0 1037     		adds	r7, r7, #16
 341              	.LCFI3:
ARM GAS  /tmp/cce3S0ea.s 			page 15


 342              		.cfi_def_cfa_offset 8
 343 01f2 BD46     		mov	sp, r7
 344              	.LCFI4:
 345              		.cfi_def_cfa_register 13
 346              		@ sp needed
 347 01f4 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE132:
 351              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 352              		.align	1
 353              		.global	HAL_CAN_DeInit
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 358              	HAL_CAN_DeInit:
 359              	.LFB133:
 451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         reset values.
 455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 360              		.loc 1 460 1
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              	.LCFI5:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 82B0     		sub	sp, sp, #8
 370              	.LCFI6:
 371              		.cfi_def_cfa_offset 16
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI7:
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
 461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
 376              		.loc 1 462 6
 377 0008 7B68     		ldr	r3, [r7, #4]
 378 000a 002B     		cmp	r3, #0
 379 000c 01D1     		bne	.L22
 463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 380              		.loc 1 464 12
 381 000e 0123     		movs	r3, #1
 382 0010 15E0     		b	.L23
 383              	.L22:
 465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
ARM GAS  /tmp/cce3S0ea.s 			page 16


 468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Stop the CAN module */
 471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 384              		.loc 1 471 9
 385 0012 7868     		ldr	r0, [r7, #4]
 386 0014 FFF7FEFF 		bl	HAL_CAN_Stop
 472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 387              		.loc 1 484 3
 388 0018 7868     		ldr	r0, [r7, #4]
 389 001a FFF7FEFF 		bl	HAL_CAN_MspDeInit
 485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 390              		.loc 1 488 3
 391 001e 7B68     		ldr	r3, [r7, #4]
 392 0020 1B68     		ldr	r3, [r3]
 393 0022 1A68     		ldr	r2, [r3]
 394 0024 7B68     		ldr	r3, [r7, #4]
 395 0026 1B68     		ldr	r3, [r3]
 396 0028 42F40042 		orr	r2, r2, #32768
 397 002c 1A60     		str	r2, [r3]
 489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 398              		.loc 1 491 19
 399 002e 7B68     		ldr	r3, [r7, #4]
 400 0030 0022     		movs	r2, #0
 401 0032 5A62     		str	r2, [r3, #36]
 492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Change CAN state */
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 402              		.loc 1 494 15
 403 0034 7B68     		ldr	r3, [r7, #4]
 404 0036 0022     		movs	r2, #0
 405 0038 83F82020 		strb	r2, [r3, #32]
 495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 406              		.loc 1 497 10
 407 003c 0023     		movs	r3, #0
 408              	.L23:
 498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 409              		.loc 1 498 1
ARM GAS  /tmp/cce3S0ea.s 			page 17


 410 003e 1846     		mov	r0, r3
 411 0040 0837     		adds	r7, r7, #8
 412              	.LCFI8:
 413              		.cfi_def_cfa_offset 8
 414 0042 BD46     		mov	sp, r7
 415              	.LCFI9:
 416              		.cfi_def_cfa_register 13
 417              		@ sp needed
 418 0044 80BD     		pop	{r7, pc}
 419              		.cfi_endproc
 420              	.LFE133:
 422              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
 423              		.align	1
 424              		.weak	HAL_CAN_MspInit
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 429              	HAL_CAN_MspInit:
 430              	.LFB134:
 499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 431              		.loc 1 507 1
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 8
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436 0000 80B4     		push	{r7}
 437              	.LCFI10:
 438              		.cfi_def_cfa_offset 4
 439              		.cfi_offset 7, -4
 440 0002 83B0     		sub	sp, sp, #12
 441              	.LCFI11:
 442              		.cfi_def_cfa_offset 16
 443 0004 00AF     		add	r7, sp, #0
 444              	.LCFI12:
 445              		.cfi_def_cfa_register 7
 446 0006 7860     		str	r0, [r7, #4]
 508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 447              		.loc 1 514 1
 448 0008 00BF     		nop
 449 000a 0C37     		adds	r7, r7, #12
 450              	.LCFI13:
 451              		.cfi_def_cfa_offset 4
 452 000c BD46     		mov	sp, r7
ARM GAS  /tmp/cce3S0ea.s 			page 18


 453              	.LCFI14:
 454              		.cfi_def_cfa_register 13
 455              		@ sp needed
 456 000e 5DF8047B 		ldr	r7, [sp], #4
 457              	.LCFI15:
 458              		.cfi_restore 7
 459              		.cfi_def_cfa_offset 0
 460 0012 7047     		bx	lr
 461              		.cfi_endproc
 462              	.LFE134:
 464              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 465              		.align	1
 466              		.weak	HAL_CAN_MspDeInit
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 471              	HAL_CAN_MspDeInit:
 472              	.LFB135:
 515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 473              		.loc 1 523 1
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0000 80B4     		push	{r7}
 479              	.LCFI16:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 0002 83B0     		sub	sp, sp, #12
 483              	.LCFI17:
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              	.LCFI18:
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 489              		.loc 1 530 1
 490 0008 00BF     		nop
 491 000a 0C37     		adds	r7, r7, #12
 492              	.LCFI19:
 493              		.cfi_def_cfa_offset 4
 494 000c BD46     		mov	sp, r7
 495              	.LCFI20:
ARM GAS  /tmp/cce3S0ea.s 			page 19


 496              		.cfi_def_cfa_register 13
 497              		@ sp needed
 498 000e 5DF8047B 		ldr	r7, [sp], #4
 499              	.LCFI21:
 500              		.cfi_restore 7
 501              		.cfi_def_cfa_offset 0
 502 0012 7047     		bx	lr
 503              		.cfi_endproc
 504              	.LFE135:
 506              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 507              		.align	1
 508              		.global	HAL_CAN_ConfigFilter
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 513              	HAL_CAN_ConfigFilter:
 514              	.LFB136:
 531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                            void (* pCallback)(CAN_HandleTypeDef *_hcan))
 560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pCallback == NULL)
 564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cce3S0ea.s 			page 20


 571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
ARM GAS  /tmp/cce3S0ea.s 			page 21


 628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 648:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 649:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 651:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 652:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 653:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 654:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 655:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 656:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 657:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 658:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 659:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 660:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 661:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 662:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 663:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 664:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 665:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 666:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 667:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 668:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 669:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 670:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 671:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 672:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 673:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 674:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 675:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 676:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 677:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 678:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 679:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         CAN callback is redirected to the weak predefined callback
 680:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 681:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 682:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 683:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
 684:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
ARM GAS  /tmp/cce3S0ea.s 			page 22


 685:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 686:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 687:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 688:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 689:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 690:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 691:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 692:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 693:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 694:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 695:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 704:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 705:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 707:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 708:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 710:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 711:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 713:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 715:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 716:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 717:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 718:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 719:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 720:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 721:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 723:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 724:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 725:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 726:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 728:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 729:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 731:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 733:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 734:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 736:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 737:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 738:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 739:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 740:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 741:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
ARM GAS  /tmp/cce3S0ea.s 			page 23


 742:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 743:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 744:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 746:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 747:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 748:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 749:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 750:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 751:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 753:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 754:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 756:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 758:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 759:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 760:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 762:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 763:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 764:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 766:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 767:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 768:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 769:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 771:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 772:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 774:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 776:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 779:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 780:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 781:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 782:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 783:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 784:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 785:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 786:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 787:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 789:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 790:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 791:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 792:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 793:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 794:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 796:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 797:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
ARM GAS  /tmp/cce3S0ea.s 			page 24


 799:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 801:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 802:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 803:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 804:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 805:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 806:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 807:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 809:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 810:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 811:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 812:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 814:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 815:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 817:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Configuration functions.
 818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 819:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 820:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Configuration functions #####
 822:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 823:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 824:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 825:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 826:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 827:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 828:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 829:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 830:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 832:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 833:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 834:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 835:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 836:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         contains the filter configuration information.
 837:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 838:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterCon
 840:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 515              		.loc 1 840 1
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 24
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520 0000 80B4     		push	{r7}
 521              	.LCFI22:
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 0002 87B0     		sub	sp, sp, #28
 525              	.LCFI23:
 526              		.cfi_def_cfa_offset 32
 527 0004 00AF     		add	r7, sp, #0
 528              	.LCFI24:
 529              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cce3S0ea.s 			page 25


 530 0006 7860     		str	r0, [r7, #4]
 531 0008 3960     		str	r1, [r7]
 841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filternbrbitpos;
 842:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 532              		.loc 1 842 16
 533 000a 7B68     		ldr	r3, [r7, #4]
 534 000c 1B68     		ldr	r3, [r3]
 535 000e 7B61     		str	r3, [r7, #20]
 843:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 536              		.loc 1 843 24
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 93F82030 		ldrb	r3, [r3, #32]
 539 0016 FB74     		strb	r3, [r7, #19]
 844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 845:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 540              		.loc 1 845 6
 541 0018 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 542 001a 012B     		cmp	r3, #1
 543 001c 03D0     		beq	.L27
 544              		.loc 1 845 38 discriminator 1
 545 001e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 546 0020 022B     		cmp	r3, #2
 547 0022 40F0AA80 		bne	.L28
 548              	.L27:
 846:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 848:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 849:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 850:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 851:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 853:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 855:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 856:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 858:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 859:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 860:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 861:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     can_ip = CAN1;
 862:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 863:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 864:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 866:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 867:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 868:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 869:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 870:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif
 872:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 873:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Initialisation mode for the filter */
 874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 549              		.loc 1 874 5
 550 0026 7B69     		ldr	r3, [r7, #20]
 551 0028 D3F80032 		ldr	r3, [r3, #512]
 552 002c 43F00102 		orr	r2, r3, #1
ARM GAS  /tmp/cce3S0ea.s 			page 26


 553 0030 7B69     		ldr	r3, [r7, #20]
 554 0032 C3F80022 		str	r2, [r3, #512]
 875:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 876:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 877:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 878:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 879:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 880:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 881:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif
 882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Convert filter number into bit position */
 883:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 555              		.loc 1 883 52
 556 0036 3B68     		ldr	r3, [r7]
 557 0038 5B69     		ldr	r3, [r3, #20]
 558              		.loc 1 883 65
 559 003a 03F01F03 		and	r3, r3, #31
 560              		.loc 1 883 21
 561 003e 0122     		movs	r2, #1
 562 0040 02FA03F3 		lsl	r3, r2, r3
 563 0044 FB60     		str	r3, [r7, #12]
 884:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 885:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Deactivation */
 886:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 564              		.loc 1 886 5
 565 0046 7B69     		ldr	r3, [r7, #20]
 566 0048 D3F81C22 		ldr	r2, [r3, #540]
 567 004c FB68     		ldr	r3, [r7, #12]
 568 004e DB43     		mvns	r3, r3
 569 0050 1A40     		ands	r2, r2, r3
 570 0052 7B69     		ldr	r3, [r7, #20]
 571 0054 C3F81C22 		str	r2, [r3, #540]
 887:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Scale */
 889:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 572              		.loc 1 889 22
 573 0058 3B68     		ldr	r3, [r7]
 574 005a DB69     		ldr	r3, [r3, #28]
 575              		.loc 1 889 8
 576 005c 002B     		cmp	r3, #0
 577 005e 23D1     		bne	.L29
 890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 891:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 16-bit scale for the filter */
 892:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 578              		.loc 1 892 7
 579 0060 7B69     		ldr	r3, [r7, #20]
 580 0062 D3F80C22 		ldr	r2, [r3, #524]
 581 0066 FB68     		ldr	r3, [r7, #12]
 582 0068 DB43     		mvns	r3, r3
 583 006a 1A40     		ands	r2, r2, r3
 584 006c 7B69     		ldr	r3, [r7, #20]
 585 006e C3F80C22 		str	r2, [r3, #524]
 893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 894:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 586              		.loc 1 897 48
ARM GAS  /tmp/cce3S0ea.s 			page 27


 587 0072 3B68     		ldr	r3, [r7]
 588 0074 DB68     		ldr	r3, [r3, #12]
 589              		.loc 1 897 67
 590 0076 1904     		lsls	r1, r3, #16
 898:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 591              		.loc 1 898 47
 592 0078 3B68     		ldr	r3, [r7]
 593 007a 5B68     		ldr	r3, [r3, #4]
 594              		.loc 1 898 22
 595 007c 9BB2     		uxth	r3, r3
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 596              		.loc 1 896 44
 597 007e 3A68     		ldr	r2, [r7]
 598 0080 5269     		ldr	r2, [r2, #20]
 897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 599              		.loc 1 897 75
 600 0082 1943     		orrs	r1, r1, r3
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 601              		.loc 1 896 62
 602 0084 7B69     		ldr	r3, [r7, #20]
 603 0086 4832     		adds	r2, r2, #72
 604 0088 43F83210 		str	r1, [r3, r2, lsl #3]
 899:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 900:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 605              		.loc 1 903 48
 606 008c 3B68     		ldr	r3, [r7]
 607 008e 9B68     		ldr	r3, [r3, #8]
 608              		.loc 1 903 68
 609 0090 1904     		lsls	r1, r3, #16
 904:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 610              		.loc 1 904 47
 611 0092 3B68     		ldr	r3, [r7]
 612 0094 1B68     		ldr	r3, [r3]
 613              		.loc 1 904 22
 614 0096 9AB2     		uxth	r2, r3
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 615              		.loc 1 902 44
 616 0098 3B68     		ldr	r3, [r7]
 617 009a 5B69     		ldr	r3, [r3, #20]
 903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 618              		.loc 1 903 76
 619 009c 0A43     		orrs	r2, r2, r1
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 620              		.loc 1 902 62
 621 009e 7969     		ldr	r1, [r7, #20]
 622 00a0 4833     		adds	r3, r3, #72
 623 00a2 DB00     		lsls	r3, r3, #3
 624 00a4 0B44     		add	r3, r3, r1
 625 00a6 5A60     		str	r2, [r3, #4]
 626              	.L29:
 905:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 907:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 627              		.loc 1 907 22
ARM GAS  /tmp/cce3S0ea.s 			page 28


 628 00a8 3B68     		ldr	r3, [r7]
 629 00aa DB69     		ldr	r3, [r3, #28]
 630              		.loc 1 907 8
 631 00ac 012B     		cmp	r3, #1
 632 00ae 22D1     		bne	.L30
 908:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 909:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit scale for the filter */
 910:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 633              		.loc 1 910 7
 634 00b0 7B69     		ldr	r3, [r7, #20]
 635 00b2 D3F80C22 		ldr	r2, [r3, #524]
 636 00b6 FB68     		ldr	r3, [r7, #12]
 637 00b8 1A43     		orrs	r2, r2, r3
 638 00ba 7B69     		ldr	r3, [r7, #20]
 639 00bc C3F80C22 		str	r2, [r3, #524]
 911:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 640              		.loc 1 914 48
 641 00c0 3B68     		ldr	r3, [r7]
 642 00c2 1B68     		ldr	r3, [r3]
 643              		.loc 1 914 64
 644 00c4 1904     		lsls	r1, r3, #16
 915:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 645              		.loc 1 915 47
 646 00c6 3B68     		ldr	r3, [r7]
 647 00c8 5B68     		ldr	r3, [r3, #4]
 648              		.loc 1 915 22
 649 00ca 9BB2     		uxth	r3, r3
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 650              		.loc 1 913 44
 651 00cc 3A68     		ldr	r2, [r7]
 652 00ce 5269     		ldr	r2, [r2, #20]
 914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 653              		.loc 1 914 72
 654 00d0 1943     		orrs	r1, r1, r3
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 655              		.loc 1 913 62
 656 00d2 7B69     		ldr	r3, [r7, #20]
 657 00d4 4832     		adds	r2, r2, #72
 658 00d6 43F83210 		str	r1, [r3, r2, lsl #3]
 916:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 659              		.loc 1 919 48
 660 00da 3B68     		ldr	r3, [r7]
 661 00dc 9B68     		ldr	r3, [r3, #8]
 662              		.loc 1 919 68
 663 00de 1904     		lsls	r1, r3, #16
 920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 664              		.loc 1 920 47
 665 00e0 3B68     		ldr	r3, [r7]
 666 00e2 DB68     		ldr	r3, [r3, #12]
 667              		.loc 1 920 22
 668 00e4 9AB2     		uxth	r2, r3
ARM GAS  /tmp/cce3S0ea.s 			page 29


 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 669              		.loc 1 918 44
 670 00e6 3B68     		ldr	r3, [r7]
 671 00e8 5B69     		ldr	r3, [r3, #20]
 919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 672              		.loc 1 919 76
 673 00ea 0A43     		orrs	r2, r2, r1
 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 674              		.loc 1 918 62
 675 00ec 7969     		ldr	r1, [r7, #20]
 676 00ee 4833     		adds	r3, r3, #72
 677 00f0 DB00     		lsls	r3, r3, #3
 678 00f2 0B44     		add	r3, r3, r1
 679 00f4 5A60     		str	r2, [r3, #4]
 680              	.L30:
 921:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 922:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Mode */
 924:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 681              		.loc 1 924 22
 682 00f6 3B68     		ldr	r3, [r7]
 683 00f8 9B69     		ldr	r3, [r3, #24]
 684              		.loc 1 924 8
 685 00fa 002B     		cmp	r3, #0
 686 00fc 09D1     		bne	.L31
 925:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 926:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 927:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 687              		.loc 1 927 7
 688 00fe 7B69     		ldr	r3, [r7, #20]
 689 0100 D3F80422 		ldr	r2, [r3, #516]
 690 0104 FB68     		ldr	r3, [r7, #12]
 691 0106 DB43     		mvns	r3, r3
 692 0108 1A40     		ands	r2, r2, r3
 693 010a 7B69     		ldr	r3, [r7, #20]
 694 010c C3F80422 		str	r2, [r3, #516]
 695 0110 07E0     		b	.L32
 696              	.L31:
 928:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 929:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 930:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 932:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 697              		.loc 1 932 7
 698 0112 7B69     		ldr	r3, [r7, #20]
 699 0114 D3F80422 		ldr	r2, [r3, #516]
 700 0118 FB68     		ldr	r3, [r7, #12]
 701 011a 1A43     		orrs	r2, r2, r3
 702 011c 7B69     		ldr	r3, [r7, #20]
 703 011e C3F80422 		str	r2, [r3, #516]
 704              	.L32:
 933:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 934:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 935:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter FIFO assignment */
 936:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 705              		.loc 1 936 22
 706 0122 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cce3S0ea.s 			page 30


 707 0124 1B69     		ldr	r3, [r3, #16]
 708              		.loc 1 936 8
 709 0126 002B     		cmp	r3, #0
 710 0128 09D1     		bne	.L33
 937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 938:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 711              		.loc 1 939 7
 712 012a 7B69     		ldr	r3, [r7, #20]
 713 012c D3F81422 		ldr	r2, [r3, #532]
 714 0130 FB68     		ldr	r3, [r7, #12]
 715 0132 DB43     		mvns	r3, r3
 716 0134 1A40     		ands	r2, r2, r3
 717 0136 7B69     		ldr	r3, [r7, #20]
 718 0138 C3F81422 		str	r2, [r3, #532]
 719 013c 07E0     		b	.L34
 720              	.L33:
 940:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
 942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 943:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 944:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 721              		.loc 1 944 7
 722 013e 7B69     		ldr	r3, [r7, #20]
 723 0140 D3F81422 		ldr	r2, [r3, #532]
 724 0144 FB68     		ldr	r3, [r7, #12]
 725 0146 1A43     		orrs	r2, r2, r3
 726 0148 7B69     		ldr	r3, [r7, #20]
 727 014a C3F81422 		str	r2, [r3, #532]
 728              	.L34:
 945:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 946:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 947:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter activation */
 948:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 729              		.loc 1 948 22
 730 014e 3B68     		ldr	r3, [r7]
 731 0150 1B6A     		ldr	r3, [r3, #32]
 732              		.loc 1 948 8
 733 0152 012B     		cmp	r3, #1
 734 0154 07D1     		bne	.L35
 949:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 735              		.loc 1 950 7
 736 0156 7B69     		ldr	r3, [r7, #20]
 737 0158 D3F81C22 		ldr	r2, [r3, #540]
 738 015c FB68     		ldr	r3, [r7, #12]
 739 015e 1A43     		orrs	r2, r2, r3
 740 0160 7B69     		ldr	r3, [r7, #20]
 741 0162 C3F81C22 		str	r2, [r3, #540]
 742              	.L35:
 951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 952:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 953:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 954:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 743              		.loc 1 954 5
 744 0166 7B69     		ldr	r3, [r7, #20]
 745 0168 D3F80032 		ldr	r3, [r3, #512]
ARM GAS  /tmp/cce3S0ea.s 			page 31


 746 016c 23F00102 		bic	r2, r3, #1
 747 0170 7B69     		ldr	r3, [r7, #20]
 748 0172 C3F80022 		str	r2, [r3, #512]
 955:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
 957:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 749              		.loc 1 957 12
 750 0176 0023     		movs	r3, #0
 751 0178 06E0     		b	.L36
 752              	.L28:
 958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 959:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 960:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
 962:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 753              		.loc 1 962 21
 754 017a 7B68     		ldr	r3, [r7, #4]
 755 017c 5B6A     		ldr	r3, [r3, #36]
 756 017e 43F48022 		orr	r2, r3, #262144
 757 0182 7B68     		ldr	r3, [r7, #4]
 758 0184 5A62     		str	r2, [r3, #36]
 963:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 964:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 759              		.loc 1 964 12
 760 0186 0123     		movs	r3, #1
 761              	.L36:
 965:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 966:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 762              		.loc 1 966 1
 763 0188 1846     		mov	r0, r3
 764 018a 1C37     		adds	r7, r7, #28
 765              	.LCFI25:
 766              		.cfi_def_cfa_offset 4
 767 018c BD46     		mov	sp, r7
 768              	.LCFI26:
 769              		.cfi_def_cfa_register 13
 770              		@ sp needed
 771 018e 5DF8047B 		ldr	r7, [sp], #4
 772              	.LCFI27:
 773              		.cfi_restore 7
 774              		.cfi_def_cfa_offset 0
 775 0192 7047     		bx	lr
 776              		.cfi_endproc
 777              	.LFE136:
 779              		.section	.text.HAL_CAN_Start,"ax",%progbits
 780              		.align	1
 781              		.global	HAL_CAN_Start
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 786              	HAL_CAN_Start:
 787              	.LFB137:
 967:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 968:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 970:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 971:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cce3S0ea.s 			page 32


 972:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 973:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Control functions
 974:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 976:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                       ##### Control functions #####
 978:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 979:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 981:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 982:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 983:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 986:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              and activate the corresponding
 987:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              transmission request
 988:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 989:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 991:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 992:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 993:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 996:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 997:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 998:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 999:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Start the CAN module.
1001:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1002:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1003:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1006:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 788              		.loc 1 1006 1
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 16
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 0000 80B5     		push	{r7, lr}
 793              	.LCFI28:
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 84B0     		sub	sp, sp, #16
 798              	.LCFI29:
 799              		.cfi_def_cfa_offset 24
 800 0004 00AF     		add	r7, sp, #0
 801              	.LCFI30:
 802              		.cfi_def_cfa_register 7
 803 0006 7860     		str	r0, [r7, #4]
1007:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
1008:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1009:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 804              		.loc 1 1009 11
 805 0008 7B68     		ldr	r3, [r7, #4]
 806 000a 93F82030 		ldrb	r3, [r3, #32]
ARM GAS  /tmp/cce3S0ea.s 			page 33


 807 000e DBB2     		uxtb	r3, r3
 808              		.loc 1 1009 6
 809 0010 012B     		cmp	r3, #1
 810 0012 2ED1     		bne	.L38
1010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1011:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 811              		.loc 1 1012 17
 812 0014 7B68     		ldr	r3, [r7, #4]
 813 0016 0222     		movs	r2, #2
 814 0018 83F82020 		strb	r2, [r3, #32]
1013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1014:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request leave initialisation */
1015:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 815              		.loc 1 1015 5
 816 001c 7B68     		ldr	r3, [r7, #4]
 817 001e 1B68     		ldr	r3, [r3]
 818 0020 1A68     		ldr	r2, [r3]
 819 0022 7B68     		ldr	r3, [r7, #4]
 820 0024 1B68     		ldr	r3, [r3]
 821 0026 22F00102 		bic	r2, r2, #1
 822 002a 1A60     		str	r2, [r3]
1016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
 823              		.loc 1 1018 17
 824 002c FFF7FEFF 		bl	HAL_GetTick
 825 0030 F860     		str	r0, [r7, #12]
1019:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 826              		.loc 1 1021 11
 827 0032 12E0     		b	.L39
 828              	.L41:
1022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1023:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 829              		.loc 1 1024 12
 830 0034 FFF7FEFF 		bl	HAL_GetTick
 831 0038 0246     		mov	r2, r0
 832              		.loc 1 1024 26
 833 003a FB68     		ldr	r3, [r7, #12]
 834 003c D31A     		subs	r3, r2, r3
 835              		.loc 1 1024 10
 836 003e 0A2B     		cmp	r3, #10
 837 0040 0BD9     		bls	.L39
1025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1027:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 838              		.loc 1 1027 25
 839 0042 7B68     		ldr	r3, [r7, #4]
 840 0044 5B6A     		ldr	r3, [r3, #36]
 841 0046 43F40032 		orr	r2, r3, #131072
 842 004a 7B68     		ldr	r3, [r7, #4]
 843 004c 5A62     		str	r2, [r3, #36]
1028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
ARM GAS  /tmp/cce3S0ea.s 			page 34


1030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 844              		.loc 1 1030 21
 845 004e 7B68     		ldr	r3, [r7, #4]
 846 0050 0522     		movs	r2, #5
 847 0052 83F82020 		strb	r2, [r3, #32]
1031:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 848              		.loc 1 1032 16
 849 0056 0123     		movs	r3, #1
 850 0058 12E0     		b	.L40
 851              	.L39:
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 852              		.loc 1 1021 17
 853 005a 7B68     		ldr	r3, [r7, #4]
 854 005c 1B68     		ldr	r3, [r3]
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 855              		.loc 1 1021 27
 856 005e 5B68     		ldr	r3, [r3, #4]
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 857              		.loc 1 1021 33
 858 0060 03F00103 		and	r3, r3, #1
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 859              		.loc 1 1021 11
 860 0064 002B     		cmp	r3, #0
 861 0066 E5D1     		bne	.L41
1033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1035:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1036:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 862              		.loc 1 1037 21
 863 0068 7B68     		ldr	r3, [r7, #4]
 864 006a 0022     		movs	r2, #0
 865 006c 5A62     		str	r2, [r3, #36]
1038:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1039:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1040:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 866              		.loc 1 1040 12
 867 006e 0023     		movs	r3, #0
 868 0070 06E0     		b	.L40
 869              	.L38:
1041:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1042:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1043:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1045:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 870              		.loc 1 1045 21
 871 0072 7B68     		ldr	r3, [r7, #4]
 872 0074 5B6A     		ldr	r3, [r3, #36]
 873 0076 43F40022 		orr	r2, r3, #524288
 874 007a 7B68     		ldr	r3, [r7, #4]
 875 007c 5A62     		str	r2, [r3, #36]
1046:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1047:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 876              		.loc 1 1047 12
 877 007e 0123     		movs	r3, #1
 878              	.L40:
ARM GAS  /tmp/cce3S0ea.s 			page 35


1048:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 879              		.loc 1 1049 1
 880 0080 1846     		mov	r0, r3
 881 0082 1037     		adds	r7, r7, #16
 882              	.LCFI31:
 883              		.cfi_def_cfa_offset 8
 884 0084 BD46     		mov	sp, r7
 885              	.LCFI32:
 886              		.cfi_def_cfa_register 13
 887              		@ sp needed
 888 0086 80BD     		pop	{r7, pc}
 889              		.cfi_endproc
 890              	.LFE137:
 892              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 893              		.align	1
 894              		.global	HAL_CAN_Stop
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 899              	HAL_CAN_Stop:
 900              	.LFB138:
1050:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1051:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1052:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1054:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1055:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1057:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1058:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 901              		.loc 1 1058 1
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 16
 904              		@ frame_needed = 1, uses_anonymous_args = 0
 905 0000 80B5     		push	{r7, lr}
 906              	.LCFI33:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 7, -8
 909              		.cfi_offset 14, -4
 910 0002 84B0     		sub	sp, sp, #16
 911              	.LCFI34:
 912              		.cfi_def_cfa_offset 24
 913 0004 00AF     		add	r7, sp, #0
 914              	.LCFI35:
 915              		.cfi_def_cfa_register 7
 916 0006 7860     		str	r0, [r7, #4]
1059:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
1060:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1061:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 917              		.loc 1 1061 11
 918 0008 7B68     		ldr	r3, [r7, #4]
 919 000a 93F82030 		ldrb	r3, [r3, #32]
 920 000e DBB2     		uxtb	r3, r3
 921              		.loc 1 1061 6
 922 0010 022B     		cmp	r3, #2
 923 0012 33D1     		bne	.L43
ARM GAS  /tmp/cce3S0ea.s 			page 36


1062:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1063:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request initialisation */
1064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 924              		.loc 1 1064 5
 925 0014 7B68     		ldr	r3, [r7, #4]
 926 0016 1B68     		ldr	r3, [r3]
 927 0018 1A68     		ldr	r2, [r3]
 928 001a 7B68     		ldr	r3, [r7, #4]
 929 001c 1B68     		ldr	r3, [r3]
 930 001e 42F00102 		orr	r2, r2, #1
 931 0022 1A60     		str	r2, [r3]
1065:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1066:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1067:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
 932              		.loc 1 1067 17
 933 0024 FFF7FEFF 		bl	HAL_GetTick
 934 0028 F860     		str	r0, [r7, #12]
1068:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 935              		.loc 1 1070 11
 936 002a 12E0     		b	.L44
 937              	.L46:
1071:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1072:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1073:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 938              		.loc 1 1073 12
 939 002c FFF7FEFF 		bl	HAL_GetTick
 940 0030 0246     		mov	r2, r0
 941              		.loc 1 1073 26
 942 0032 FB68     		ldr	r3, [r7, #12]
 943 0034 D31A     		subs	r3, r2, r3
 944              		.loc 1 1073 10
 945 0036 0A2B     		cmp	r3, #10
 946 0038 0BD9     		bls	.L44
1074:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1075:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1076:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 947              		.loc 1 1076 25
 948 003a 7B68     		ldr	r3, [r7, #4]
 949 003c 5B6A     		ldr	r3, [r3, #36]
 950 003e 43F40032 		orr	r2, r3, #131072
 951 0042 7B68     		ldr	r3, [r7, #4]
 952 0044 5A62     		str	r2, [r3, #36]
1077:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1078:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
1079:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 953              		.loc 1 1079 21
 954 0046 7B68     		ldr	r3, [r7, #4]
 955 0048 0522     		movs	r2, #5
 956 004a 83F82020 		strb	r2, [r3, #32]
1080:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1081:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 957              		.loc 1 1081 16
 958 004e 0123     		movs	r3, #1
 959 0050 1BE0     		b	.L45
 960              	.L44:
ARM GAS  /tmp/cce3S0ea.s 			page 37


1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 961              		.loc 1 1070 17
 962 0052 7B68     		ldr	r3, [r7, #4]
 963 0054 1B68     		ldr	r3, [r3]
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 964              		.loc 1 1070 27
 965 0056 5B68     		ldr	r3, [r3, #4]
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 966              		.loc 1 1070 33
 967 0058 03F00103 		and	r3, r3, #1
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 968              		.loc 1 1070 11
 969 005c 002B     		cmp	r3, #0
 970 005e E5D0     		beq	.L46
1082:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1083:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1084:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1085:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Exit from sleep mode */
1086:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 971              		.loc 1 1086 5
 972 0060 7B68     		ldr	r3, [r7, #4]
 973 0062 1B68     		ldr	r3, [r3]
 974 0064 1A68     		ldr	r2, [r3]
 975 0066 7B68     		ldr	r3, [r7, #4]
 976 0068 1B68     		ldr	r3, [r3]
 977 006a 22F00202 		bic	r2, r2, #2
 978 006e 1A60     		str	r2, [r3]
1087:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1088:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1089:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 979              		.loc 1 1089 17
 980 0070 7B68     		ldr	r3, [r7, #4]
 981 0072 0122     		movs	r2, #1
 982 0074 83F82020 		strb	r2, [r3, #32]
1090:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1091:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1092:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 983              		.loc 1 1092 12
 984 0078 0023     		movs	r3, #0
 985 007a 06E0     		b	.L45
 986              	.L43:
1093:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1094:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1095:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1096:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1097:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 987              		.loc 1 1097 21
 988 007c 7B68     		ldr	r3, [r7, #4]
 989 007e 5B6A     		ldr	r3, [r3, #36]
 990 0080 43F48012 		orr	r2, r3, #1048576
 991 0084 7B68     		ldr	r3, [r7, #4]
 992 0086 5A62     		str	r2, [r3, #36]
1098:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1099:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 993              		.loc 1 1099 12
 994 0088 0123     		movs	r3, #1
 995              	.L45:
ARM GAS  /tmp/cce3S0ea.s 			page 38


1100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 996              		.loc 1 1101 1
 997 008a 1846     		mov	r0, r3
 998 008c 1037     		adds	r7, r7, #16
 999              	.LCFI36:
 1000              		.cfi_def_cfa_offset 8
 1001 008e BD46     		mov	sp, r7
 1002              	.LCFI37:
 1003              		.cfi_def_cfa_register 13
 1004              		@ sp needed
 1005 0090 80BD     		pop	{r7, pc}
 1006              		.cfi_endproc
 1007              	.LFE138:
 1009              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 1010              		.align	1
 1011              		.global	HAL_CAN_RequestSleep
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1016              	HAL_CAN_RequestSleep:
 1017              	.LFB139:
1102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of a CAN frame) has been completed.
1108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1018              		.loc 1 1113 1
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 16
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 0000 80B4     		push	{r7}
 1024              	.LCFI38:
 1025              		.cfi_def_cfa_offset 4
 1026              		.cfi_offset 7, -4
 1027 0002 85B0     		sub	sp, sp, #20
 1028              	.LCFI39:
 1029              		.cfi_def_cfa_offset 24
 1030 0004 00AF     		add	r7, sp, #0
 1031              	.LCFI40:
 1032              		.cfi_def_cfa_register 7
 1033 0006 7860     		str	r0, [r7, #4]
1114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1034              		.loc 1 1114 24
 1035 0008 7B68     		ldr	r3, [r7, #4]
 1036 000a 93F82030 		ldrb	r3, [r3, #32]
 1037 000e FB73     		strb	r3, [r7, #15]
1115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/cce3S0ea.s 			page 39


 1038              		.loc 1 1116 6
 1039 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1040 0012 012B     		cmp	r3, #1
 1041 0014 02D0     		beq	.L48
 1042              		.loc 1 1116 38 discriminator 1
 1043 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1044 0018 022B     		cmp	r3, #2
 1045 001a 09D1     		bne	.L49
 1046              	.L48:
1117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request Sleep mode */
1120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 1047              		.loc 1 1120 5
 1048 001c 7B68     		ldr	r3, [r7, #4]
 1049 001e 1B68     		ldr	r3, [r3]
 1050 0020 1A68     		ldr	r2, [r3]
 1051 0022 7B68     		ldr	r3, [r7, #4]
 1052 0024 1B68     		ldr	r3, [r3]
 1053 0026 42F00202 		orr	r2, r2, #2
 1054 002a 1A60     		str	r2, [r3]
1121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1055              		.loc 1 1123 12
 1056 002c 0023     		movs	r3, #0
 1057 002e 06E0     		b	.L50
 1058              	.L49:
1124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1059              		.loc 1 1128 21
 1060 0030 7B68     		ldr	r3, [r7, #4]
 1061 0032 5B6A     		ldr	r3, [r3, #36]
 1062 0034 43F48022 		orr	r2, r3, #262144
 1063 0038 7B68     		ldr	r3, [r7, #4]
 1064 003a 5A62     		str	r2, [r3, #36]
1129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1065              		.loc 1 1131 12
 1066 003c 0123     		movs	r3, #1
 1067              	.L50:
1132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1068              		.loc 1 1133 1
 1069 003e 1846     		mov	r0, r3
 1070 0040 1437     		adds	r7, r7, #20
 1071              	.LCFI41:
 1072              		.cfi_def_cfa_offset 4
 1073 0042 BD46     		mov	sp, r7
 1074              	.LCFI42:
 1075              		.cfi_def_cfa_register 13
 1076              		@ sp needed
 1077 0044 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cce3S0ea.s 			page 40


 1078              	.LCFI43:
 1079              		.cfi_restore 7
 1080              		.cfi_def_cfa_offset 0
 1081 0048 7047     		bx	lr
 1082              		.cfi_endproc
 1083              	.LFE139:
 1085              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 1086              		.align	1
 1087              		.global	HAL_CAN_WakeUp
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1092              	HAL_CAN_WakeUp:
 1093              	.LFB140:
1134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         is exited.
1139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1094              		.loc 1 1144 1
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 24
 1097              		@ frame_needed = 1, uses_anonymous_args = 0
 1098              		@ link register save eliminated.
 1099 0000 80B4     		push	{r7}
 1100              	.LCFI44:
 1101              		.cfi_def_cfa_offset 4
 1102              		.cfi_offset 7, -4
 1103 0002 87B0     		sub	sp, sp, #28
 1104              	.LCFI45:
 1105              		.cfi_def_cfa_offset 32
 1106 0004 00AF     		add	r7, sp, #0
 1107              	.LCFI46:
 1108              		.cfi_def_cfa_register 7
 1109 0006 7860     		str	r0, [r7, #4]
1145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   __IO uint32_t count = 0;
 1110              		.loc 1 1145 17
 1111 0008 0023     		movs	r3, #0
 1112 000a FB60     		str	r3, [r7, #12]
1146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 1113              		.loc 1 1146 12
 1114 000c 1C4B     		ldr	r3, .L57
 1115 000e 7B61     		str	r3, [r7, #20]
1147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1116              		.loc 1 1147 24
 1117 0010 7B68     		ldr	r3, [r7, #4]
 1118 0012 93F82030 		ldrb	r3, [r3, #32]
 1119 0016 FB74     		strb	r3, [r7, #19]
1148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1120              		.loc 1 1149 6
ARM GAS  /tmp/cce3S0ea.s 			page 41


 1121 0018 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1122 001a 012B     		cmp	r3, #1
 1123 001c 02D0     		beq	.L52
 1124              		.loc 1 1149 38 discriminator 1
 1125 001e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1126 0020 022B     		cmp	r3, #2
 1127 0022 1FD1     		bne	.L53
 1128              	.L52:
1150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wake up request */
1153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 1129              		.loc 1 1153 5
 1130 0024 7B68     		ldr	r3, [r7, #4]
 1131 0026 1B68     		ldr	r3, [r3]
 1132 0028 1A68     		ldr	r2, [r3]
 1133 002a 7B68     		ldr	r3, [r7, #4]
 1134 002c 1B68     		ldr	r3, [r3]
 1135 002e 22F00202 		bic	r2, r2, #2
 1136 0032 1A60     		str	r2, [r3]
 1137              	.L56:
1154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait sleep mode is exited */
1156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     do
1157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Increment counter */
1159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       count++;
 1138              		.loc 1 1159 12
 1139 0034 FB68     		ldr	r3, [r7, #12]
 1140 0036 0133     		adds	r3, r3, #1
 1141 0038 FB60     		str	r3, [r7, #12]
1160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check if timeout is reached */
1162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (count > timeout)
 1142              		.loc 1 1162 17
 1143 003a FB68     		ldr	r3, [r7, #12]
 1144              		.loc 1 1162 10
 1145 003c 7A69     		ldr	r2, [r7, #20]
 1146 003e 9A42     		cmp	r2, r3
 1147 0040 07D2     		bcs	.L54
1163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 1148              		.loc 1 1165 25
 1149 0042 7B68     		ldr	r3, [r7, #4]
 1150 0044 5B6A     		ldr	r3, [r3, #36]
 1151 0046 43F40032 		orr	r2, r3, #131072
 1152 004a 7B68     		ldr	r3, [r7, #4]
 1153 004c 5A62     		str	r2, [r3, #36]
1166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 1154              		.loc 1 1167 16
 1155 004e 0123     		movs	r3, #1
 1156 0050 0FE0     		b	.L55
 1157              	.L54:
1168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/cce3S0ea.s 			page 42


1170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 1158              		.loc 1 1170 17
 1159 0052 7B68     		ldr	r3, [r7, #4]
 1160 0054 1B68     		ldr	r3, [r3]
 1161              		.loc 1 1170 27
 1162 0056 5B68     		ldr	r3, [r3, #4]
 1163              		.loc 1 1170 33
 1164 0058 03F00203 		and	r3, r3, #2
 1165              		.loc 1 1170 5
 1166 005c 002B     		cmp	r3, #0
 1167 005e E9D1     		bne	.L56
1171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1168              		.loc 1 1173 12
 1169 0060 0023     		movs	r3, #0
 1170 0062 06E0     		b	.L55
 1171              	.L53:
1174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1172              		.loc 1 1178 21
 1173 0064 7B68     		ldr	r3, [r7, #4]
 1174 0066 5B6A     		ldr	r3, [r3, #36]
 1175 0068 43F48022 		orr	r2, r3, #262144
 1176 006c 7B68     		ldr	r3, [r7, #4]
 1177 006e 5A62     		str	r2, [r3, #36]
1179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1178              		.loc 1 1180 12
 1179 0070 0123     		movs	r3, #1
 1180              	.L55:
1181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1181              		.loc 1 1182 1
 1182 0072 1846     		mov	r0, r3
 1183 0074 1C37     		adds	r7, r7, #28
 1184              	.LCFI47:
 1185              		.cfi_def_cfa_offset 4
 1186 0076 BD46     		mov	sp, r7
 1187              	.LCFI48:
 1188              		.cfi_def_cfa_register 13
 1189              		@ sp needed
 1190 0078 5DF8047B 		ldr	r7, [sp], #4
 1191              	.LCFI49:
 1192              		.cfi_restore 7
 1193              		.cfi_def_cfa_offset 0
 1194 007c 7047     		bx	lr
 1195              	.L58:
 1196 007e 00BF     		.align	2
 1197              	.L57:
 1198 0080 40420F00 		.word	1000000
 1199              		.cfi_endproc
 1200              	.LFE140:
 1202              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
ARM GAS  /tmp/cce3S0ea.s 			page 43


 1203              		.align	1
 1204              		.global	HAL_CAN_IsSleepActive
 1205              		.syntax unified
 1206              		.thumb
 1207              		.thumb_func
 1209              	HAL_CAN_IsSleepActive:
 1210              	.LFB141:
1183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(const CAN_HandleTypeDef *hcan)
1193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1211              		.loc 1 1193 1
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 16
 1214              		@ frame_needed = 1, uses_anonymous_args = 0
 1215              		@ link register save eliminated.
 1216 0000 80B4     		push	{r7}
 1217              	.LCFI50:
 1218              		.cfi_def_cfa_offset 4
 1219              		.cfi_offset 7, -4
 1220 0002 85B0     		sub	sp, sp, #20
 1221              	.LCFI51:
 1222              		.cfi_def_cfa_offset 24
 1223 0004 00AF     		add	r7, sp, #0
 1224              	.LCFI52:
 1225              		.cfi_def_cfa_register 7
 1226 0006 7860     		str	r0, [r7, #4]
1194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
 1227              		.loc 1 1194 12
 1228 0008 0023     		movs	r3, #0
 1229 000a FB60     		str	r3, [r7, #12]
1195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1230              		.loc 1 1195 24
 1231 000c 7B68     		ldr	r3, [r7, #4]
 1232 000e 93F82030 		ldrb	r3, [r3, #32]
 1233 0012 FB72     		strb	r3, [r7, #11]
1196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1234              		.loc 1 1197 6
 1235 0014 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1236 0016 012B     		cmp	r3, #1
 1237 0018 02D0     		beq	.L60
 1238              		.loc 1 1197 38 discriminator 1
 1239 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1240 001c 022B     		cmp	r3, #2
 1241 001e 08D1     		bne	.L61
 1242              	.L60:
1198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Sleep mode */
ARM GAS  /tmp/cce3S0ea.s 			page 44


1201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1243              		.loc 1 1201 14
 1244 0020 7B68     		ldr	r3, [r7, #4]
 1245 0022 1B68     		ldr	r3, [r3]
 1246              		.loc 1 1201 24
 1247 0024 5B68     		ldr	r3, [r3, #4]
 1248              		.loc 1 1201 30
 1249 0026 03F00203 		and	r3, r3, #2
 1250              		.loc 1 1201 8
 1251 002a 002B     		cmp	r3, #0
 1252 002c 01D0     		beq	.L61
1202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 1253              		.loc 1 1203 14
 1254 002e 0123     		movs	r3, #1
 1255 0030 FB60     		str	r3, [r7, #12]
 1256              	.L61:
1204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
1208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 1257              		.loc 1 1208 10
 1258 0032 FB68     		ldr	r3, [r7, #12]
1209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1259              		.loc 1 1209 1
 1260 0034 1846     		mov	r0, r3
 1261 0036 1437     		adds	r7, r7, #20
 1262              	.LCFI53:
 1263              		.cfi_def_cfa_offset 4
 1264 0038 BD46     		mov	sp, r7
 1265              	.LCFI54:
 1266              		.cfi_def_cfa_register 13
 1267              		@ sp needed
 1268 003a 5DF8047B 		ldr	r7, [sp], #4
 1269              	.LCFI55:
 1270              		.cfi_restore 7
 1271              		.cfi_def_cfa_offset 0
 1272 003e 7047     		bx	lr
 1273              		.cfi_endproc
 1274              	.LFE141:
 1276              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1277              		.align	1
 1278              		.global	HAL_CAN_AddTxMessage
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1283              	HAL_CAN_AddTxMessage:
 1284              	.LFB142:
1210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         corresponding transmission request.
1214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
ARM GAS  /tmp/cce3S0ea.s 			page 45


1218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
1224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                        const uint8_t aData[], uint32_t *pTxMailbox)
1225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1285              		.loc 1 1225 1
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 32
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289              		@ link register save eliminated.
 1290 0000 80B4     		push	{r7}
 1291              	.LCFI56:
 1292              		.cfi_def_cfa_offset 4
 1293              		.cfi_offset 7, -4
 1294 0002 89B0     		sub	sp, sp, #36
 1295              	.LCFI57:
 1296              		.cfi_def_cfa_offset 40
 1297 0004 00AF     		add	r7, sp, #0
 1298              	.LCFI58:
 1299              		.cfi_def_cfa_register 7
 1300 0006 F860     		str	r0, [r7, #12]
 1301 0008 B960     		str	r1, [r7, #8]
 1302 000a 7A60     		str	r2, [r7, #4]
 1303 000c 3B60     		str	r3, [r7]
1226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
1227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1304              		.loc 1 1227 24
 1305 000e FB68     		ldr	r3, [r7, #12]
 1306 0010 93F82030 		ldrb	r3, [r3, #32]
 1307 0014 FB77     		strb	r3, [r7, #31]
1228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1308              		.loc 1 1228 18
 1309 0016 FB68     		ldr	r3, [r7, #12]
 1310 0018 1B68     		ldr	r3, [r3]
 1311              		.loc 1 1228 12
 1312 001a 9B68     		ldr	r3, [r3, #8]
 1313 001c BB61     		str	r3, [r7, #24]
1229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
1231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
1232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
1233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
1234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
1235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
1241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
1243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1314              		.loc 1 1244 6
ARM GAS  /tmp/cce3S0ea.s 			page 46


 1315 001e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1316 0020 012B     		cmp	r3, #1
 1317 0022 03D0     		beq	.L64
 1318              		.loc 1 1244 38 discriminator 1
 1319 0024 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1320 0026 022B     		cmp	r3, #2
 1321 0028 40F0AD80 		bne	.L65
 1322              	.L64:
1245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 1323              		.loc 1 1248 15
 1324 002c BB69     		ldr	r3, [r7, #24]
 1325 002e 03F08063 		and	r3, r3, #67108864
 1326              		.loc 1 1248 8
 1327 0032 002B     		cmp	r3, #0
 1328 0034 0AD1     		bne	.L66
1249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1329              		.loc 1 1249 15 discriminator 1
 1330 0036 BB69     		ldr	r3, [r7, #24]
 1331 0038 03F00063 		and	r3, r3, #134217728
1248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1332              		.loc 1 1248 38 discriminator 1
 1333 003c 002B     		cmp	r3, #0
 1334 003e 05D1     		bne	.L66
1250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
 1335              		.loc 1 1250 15
 1336 0040 BB69     		ldr	r3, [r7, #24]
 1337 0042 03F08053 		and	r3, r3, #268435456
1249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1338              		.loc 1 1249 38
 1339 0046 002B     		cmp	r3, #0
 1340 0048 00F09580 		beq	.L67
 1341              	.L66:
1251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Select an empty transmit mailbox */
1253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1342              		.loc 1 1253 46
 1343 004c BB69     		ldr	r3, [r7, #24]
 1344 004e 1B0E     		lsrs	r3, r3, #24
 1345              		.loc 1 1253 23
 1346 0050 03F00303 		and	r3, r3, #3
 1347 0054 7B61     		str	r3, [r7, #20]
1254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Store the Tx mailbox */
1256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1348              		.loc 1 1256 33
 1349 0056 0122     		movs	r2, #1
 1350 0058 7B69     		ldr	r3, [r7, #20]
 1351 005a 9A40     		lsls	r2, r2, r3
 1352              		.loc 1 1256 19
 1353 005c 3B68     		ldr	r3, [r7]
 1354 005e 1A60     		str	r2, [r3]
1257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Id */
1259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
ARM GAS  /tmp/cce3S0ea.s 			page 47


 1355              		.loc 1 1259 18
 1356 0060 BB68     		ldr	r3, [r7, #8]
 1357 0062 9B68     		ldr	r3, [r3, #8]
 1358              		.loc 1 1259 10
 1359 0064 002B     		cmp	r3, #0
 1360 0066 0DD1     		bne	.L68
1260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1361              		.loc 1 1261 68
 1362 0068 BB68     		ldr	r3, [r7, #8]
 1363 006a 1B68     		ldr	r3, [r3]
 1364              		.loc 1 1261 76
 1365 006c 5A05     		lsls	r2, r3, #21
1262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1366              		.loc 1 1262 67
 1367 006e BB68     		ldr	r3, [r7, #8]
 1368 0070 DB68     		ldr	r3, [r3, #12]
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1369              		.loc 1 1261 13
 1370 0072 F968     		ldr	r1, [r7, #12]
 1371 0074 0968     		ldr	r1, [r1]
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1372              		.loc 1 1261 98
 1373 0076 1A43     		orrs	r2, r2, r3
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1374              		.loc 1 1261 57
 1375 0078 7B69     		ldr	r3, [r7, #20]
 1376 007a 1833     		adds	r3, r3, #24
 1377 007c 1B01     		lsls	r3, r3, #4
 1378 007e 0B44     		add	r3, r3, r1
 1379 0080 1A60     		str	r2, [r3]
 1380 0082 0FE0     		b	.L69
 1381              	.L68:
1263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 1382              		.loc 1 1266 68
 1383 0084 BB68     		ldr	r3, [r7, #8]
 1384 0086 5B68     		ldr	r3, [r3, #4]
 1385              		.loc 1 1266 76
 1386 0088 DA00     		lsls	r2, r3, #3
1267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1387              		.loc 1 1267 67
 1388 008a BB68     		ldr	r3, [r7, #8]
 1389 008c 9B68     		ldr	r3, [r3, #8]
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1390              		.loc 1 1266 98
 1391 008e 1A43     		orrs	r2, r2, r3
1268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1392              		.loc 1 1268 67
 1393 0090 BB68     		ldr	r3, [r7, #8]
 1394 0092 DB68     		ldr	r3, [r3, #12]
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1395              		.loc 1 1266 13
 1396 0094 F968     		ldr	r1, [r7, #12]
 1397 0096 0968     		ldr	r1, [r1]
ARM GAS  /tmp/cce3S0ea.s 			page 48


1267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1398              		.loc 1 1267 73
 1399 0098 1A43     		orrs	r2, r2, r3
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1400              		.loc 1 1266 57
 1401 009a 7B69     		ldr	r3, [r7, #20]
 1402 009c 1833     		adds	r3, r3, #24
 1403 009e 1B01     		lsls	r3, r3, #4
 1404 00a0 0B44     		add	r3, r3, r1
 1405 00a2 1A60     		str	r2, [r3]
 1406              	.L69:
1269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the DLC */
1272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1407              		.loc 1 1272 11
 1408 00a4 FB68     		ldr	r3, [r7, #12]
 1409 00a6 1968     		ldr	r1, [r3]
 1410              		.loc 1 1272 66
 1411 00a8 BB68     		ldr	r3, [r7, #8]
 1412 00aa 1A69     		ldr	r2, [r3, #16]
 1413              		.loc 1 1272 56
 1414 00ac 7B69     		ldr	r3, [r7, #20]
 1415 00ae 1833     		adds	r3, r3, #24
 1416 00b0 1B01     		lsls	r3, r3, #4
 1417 00b2 0B44     		add	r3, r3, r1
 1418 00b4 0433     		adds	r3, r3, #4
 1419 00b6 1A60     		str	r2, [r3]
1273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1420              		.loc 1 1275 18
 1421 00b8 BB68     		ldr	r3, [r7, #8]
 1422 00ba 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1423              		.loc 1 1275 10
 1424 00bc 012B     		cmp	r3, #1
 1425 00be 11D1     		bne	.L70
1276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 1426              		.loc 1 1277 9
 1427 00c0 FB68     		ldr	r3, [r7, #12]
 1428 00c2 1A68     		ldr	r2, [r3]
 1429 00c4 7B69     		ldr	r3, [r7, #20]
 1430 00c6 1833     		adds	r3, r3, #24
 1431 00c8 1B01     		lsls	r3, r3, #4
 1432 00ca 1344     		add	r3, r3, r2
 1433 00cc 0433     		adds	r3, r3, #4
 1434 00ce 1B68     		ldr	r3, [r3]
 1435 00d0 FA68     		ldr	r2, [r7, #12]
 1436 00d2 1168     		ldr	r1, [r2]
 1437 00d4 43F48072 		orr	r2, r3, #256
 1438 00d8 7B69     		ldr	r3, [r7, #20]
 1439 00da 1833     		adds	r3, r3, #24
 1440 00dc 1B01     		lsls	r3, r3, #4
 1441 00de 0B44     		add	r3, r3, r1
 1442 00e0 0433     		adds	r3, r3, #4
 1443 00e2 1A60     		str	r2, [r3]
ARM GAS  /tmp/cce3S0ea.s 			page 49


 1444              	.L70:
1278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the data field */
1281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1445              		.loc 1 1281 7
 1446 00e4 7B68     		ldr	r3, [r7, #4]
 1447 00e6 0733     		adds	r3, r3, #7
 1448 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1449 00ea 1A06     		lsls	r2, r3, #24
 1450 00ec 7B68     		ldr	r3, [r7, #4]
 1451 00ee 0633     		adds	r3, r3, #6
 1452 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1453 00f2 1B04     		lsls	r3, r3, #16
 1454 00f4 1A43     		orrs	r2, r2, r3
 1455 00f6 7B68     		ldr	r3, [r7, #4]
 1456 00f8 0533     		adds	r3, r3, #5
 1457 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1458 00fc 1B02     		lsls	r3, r3, #8
 1459 00fe 1343     		orrs	r3, r3, r2
 1460 0100 7A68     		ldr	r2, [r7, #4]
 1461 0102 0432     		adds	r2, r2, #4
 1462 0104 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1463 0106 1046     		mov	r0, r2
 1464 0108 FA68     		ldr	r2, [r7, #12]
 1465 010a 1168     		ldr	r1, [r2]
 1466 010c 43EA0002 		orr	r2, r3, r0
 1467 0110 7B69     		ldr	r3, [r7, #20]
 1468 0112 1B01     		lsls	r3, r3, #4
 1469 0114 0B44     		add	r3, r3, r1
 1470 0116 03F5C673 		add	r3, r3, #396
 1471 011a 1A60     		str	r2, [r3]
1282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1472              		.loc 1 1286 7
 1473 011c 7B68     		ldr	r3, [r7, #4]
 1474 011e 0333     		adds	r3, r3, #3
 1475 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1476 0122 1A06     		lsls	r2, r3, #24
 1477 0124 7B68     		ldr	r3, [r7, #4]
 1478 0126 0233     		adds	r3, r3, #2
 1479 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1480 012a 1B04     		lsls	r3, r3, #16
 1481 012c 1A43     		orrs	r2, r2, r3
 1482 012e 7B68     		ldr	r3, [r7, #4]
 1483 0130 0133     		adds	r3, r3, #1
 1484 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 0134 1B02     		lsls	r3, r3, #8
 1486 0136 1343     		orrs	r3, r3, r2
 1487 0138 7A68     		ldr	r2, [r7, #4]
 1488 013a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1489 013c 1046     		mov	r0, r2
 1490 013e FA68     		ldr	r2, [r7, #12]
 1491 0140 1168     		ldr	r1, [r2]
ARM GAS  /tmp/cce3S0ea.s 			page 50


 1492 0142 43EA0002 		orr	r2, r3, r0
 1493 0146 7B69     		ldr	r3, [r7, #20]
 1494 0148 1B01     		lsls	r3, r3, #4
 1495 014a 0B44     		add	r3, r3, r1
 1496 014c 03F5C473 		add	r3, r3, #392
 1497 0150 1A60     		str	r2, [r3]
1287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Request transmission */
1293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1498              		.loc 1 1293 7
 1499 0152 FB68     		ldr	r3, [r7, #12]
 1500 0154 1A68     		ldr	r2, [r3]
 1501 0156 7B69     		ldr	r3, [r7, #20]
 1502 0158 1833     		adds	r3, r3, #24
 1503 015a 1B01     		lsls	r3, r3, #4
 1504 015c 1344     		add	r3, r3, r2
 1505 015e 1B68     		ldr	r3, [r3]
 1506 0160 FA68     		ldr	r2, [r7, #12]
 1507 0162 1168     		ldr	r1, [r2]
 1508 0164 43F00102 		orr	r2, r3, #1
 1509 0168 7B69     		ldr	r3, [r7, #20]
 1510 016a 1833     		adds	r3, r3, #24
 1511 016c 1B01     		lsls	r3, r3, #4
 1512 016e 0B44     		add	r3, r3, r1
 1513 0170 1A60     		str	r2, [r3]
1294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Return function status */
1296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_OK;
 1514              		.loc 1 1296 14
 1515 0172 0023     		movs	r3, #0
 1516 0174 0EE0     		b	.L71
 1517              	.L67:
1297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
1301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1518              		.loc 1 1301 23
 1519 0176 FB68     		ldr	r3, [r7, #12]
 1520 0178 5B6A     		ldr	r3, [r3, #36]
 1521 017a 43F40012 		orr	r2, r3, #2097152
 1522 017e FB68     		ldr	r3, [r7, #12]
 1523 0180 5A62     		str	r2, [r3, #36]
1302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 1524              		.loc 1 1303 14
 1525 0182 0123     		movs	r3, #1
 1526 0184 06E0     		b	.L71
 1527              	.L65:
1304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/cce3S0ea.s 			page 51


1308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1528              		.loc 1 1309 21
 1529 0186 FB68     		ldr	r3, [r7, #12]
 1530 0188 5B6A     		ldr	r3, [r3, #36]
 1531 018a 43F48022 		orr	r2, r3, #262144
 1532 018e FB68     		ldr	r3, [r7, #12]
 1533 0190 5A62     		str	r2, [r3, #36]
1310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1534              		.loc 1 1311 12
 1535 0192 0123     		movs	r3, #1
 1536              	.L71:
1312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1537              		.loc 1 1313 1
 1538 0194 1846     		mov	r0, r3
 1539 0196 2437     		adds	r7, r7, #36
 1540              	.LCFI59:
 1541              		.cfi_def_cfa_offset 4
 1542 0198 BD46     		mov	sp, r7
 1543              	.LCFI60:
 1544              		.cfi_def_cfa_register 13
 1545              		@ sp needed
 1546 019a 5DF8047B 		ldr	r7, [sp], #4
 1547              	.LCFI61:
 1548              		.cfi_restore 7
 1549              		.cfi_def_cfa_offset 0
 1550 019e 7047     		bx	lr
 1551              		.cfi_endproc
 1552              	.LFE142:
 1554              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1555              		.align	1
 1556              		.global	HAL_CAN_AbortTxRequest
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1561              	HAL_CAN_AbortTxRequest:
 1562              	.LFB143:
1314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Abort transmission requests
1317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1563              		.loc 1 1324 1
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 16
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568 0000 80B4     		push	{r7}
 1569              	.LCFI62:
ARM GAS  /tmp/cce3S0ea.s 			page 52


 1570              		.cfi_def_cfa_offset 4
 1571              		.cfi_offset 7, -4
 1572 0002 85B0     		sub	sp, sp, #20
 1573              	.LCFI63:
 1574              		.cfi_def_cfa_offset 24
 1575 0004 00AF     		add	r7, sp, #0
 1576              	.LCFI64:
 1577              		.cfi_def_cfa_register 7
 1578 0006 7860     		str	r0, [r7, #4]
 1579 0008 3960     		str	r1, [r7]
1325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1580              		.loc 1 1325 24
 1581 000a 7B68     		ldr	r3, [r7, #4]
 1582 000c 93F82030 		ldrb	r3, [r3, #32]
 1583 0010 FB73     		strb	r3, [r7, #15]
1326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1584              		.loc 1 1330 6
 1585 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1586 0014 012B     		cmp	r3, #1
 1587 0016 02D0     		beq	.L73
 1588              		.loc 1 1330 38 discriminator 1
 1589 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1590 001a 022B     		cmp	r3, #2
 1591 001c 28D1     		bne	.L74
 1592              	.L73:
1331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 1593              		.loc 1 1334 22
 1594 001e 3B68     		ldr	r3, [r7]
 1595 0020 03F00103 		and	r3, r3, #1
 1596              		.loc 1 1334 8
 1597 0024 002B     		cmp	r3, #0
 1598 0026 07D0     		beq	.L75
1335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1599              		.loc 1 1337 7
 1600 0028 7B68     		ldr	r3, [r7, #4]
 1601 002a 1B68     		ldr	r3, [r3]
 1602 002c 9A68     		ldr	r2, [r3, #8]
 1603 002e 7B68     		ldr	r3, [r7, #4]
 1604 0030 1B68     		ldr	r3, [r3]
 1605 0032 42F08002 		orr	r2, r2, #128
 1606 0036 9A60     		str	r2, [r3, #8]
 1607              	.L75:
1338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 1608              		.loc 1 1341 22
 1609 0038 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cce3S0ea.s 			page 53


 1610 003a 03F00203 		and	r3, r3, #2
 1611              		.loc 1 1341 8
 1612 003e 002B     		cmp	r3, #0
 1613 0040 07D0     		beq	.L76
1342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1614              		.loc 1 1344 7
 1615 0042 7B68     		ldr	r3, [r7, #4]
 1616 0044 1B68     		ldr	r3, [r3]
 1617 0046 9A68     		ldr	r2, [r3, #8]
 1618 0048 7B68     		ldr	r3, [r7, #4]
 1619 004a 1B68     		ldr	r3, [r3]
 1620 004c 42F40042 		orr	r2, r2, #32768
 1621 0050 9A60     		str	r2, [r3, #8]
 1622              	.L76:
1345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 1623              		.loc 1 1348 22
 1624 0052 3B68     		ldr	r3, [r7]
 1625 0054 03F00403 		and	r3, r3, #4
 1626              		.loc 1 1348 8
 1627 0058 002B     		cmp	r3, #0
 1628 005a 07D0     		beq	.L77
1349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1629              		.loc 1 1351 7
 1630 005c 7B68     		ldr	r3, [r7, #4]
 1631 005e 1B68     		ldr	r3, [r3]
 1632 0060 9A68     		ldr	r2, [r3, #8]
 1633 0062 7B68     		ldr	r3, [r7, #4]
 1634 0064 1B68     		ldr	r3, [r3]
 1635 0066 42F40002 		orr	r2, r2, #8388608
 1636 006a 9A60     		str	r2, [r3, #8]
 1637              	.L77:
1352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1638              		.loc 1 1355 12
 1639 006c 0023     		movs	r3, #0
 1640 006e 06E0     		b	.L78
 1641              	.L74:
1356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1642              		.loc 1 1360 21
 1643 0070 7B68     		ldr	r3, [r7, #4]
 1644 0072 5B6A     		ldr	r3, [r3, #36]
 1645 0074 43F48022 		orr	r2, r3, #262144
 1646 0078 7B68     		ldr	r3, [r7, #4]
 1647 007a 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cce3S0ea.s 			page 54


1361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1648              		.loc 1 1362 12
 1649 007c 0123     		movs	r3, #1
 1650              	.L78:
1363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1651              		.loc 1 1364 1
 1652 007e 1846     		mov	r0, r3
 1653 0080 1437     		adds	r7, r7, #20
 1654              	.LCFI65:
 1655              		.cfi_def_cfa_offset 4
 1656 0082 BD46     		mov	sp, r7
 1657              	.LCFI66:
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 0084 5DF8047B 		ldr	r7, [sp], #4
 1661              	.LCFI67:
 1662              		.cfi_restore 7
 1663              		.cfi_def_cfa_offset 0
 1664 0088 7047     		bx	lr
 1665              		.cfi_endproc
 1666              	.LFE143:
 1668              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1669              		.align	1
 1670              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1675              	HAL_CAN_GetTxMailboxesFreeLevel:
 1676              	.LFB144:
1365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
1373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1677              		.loc 1 1373 1
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 16
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
 1682 0000 80B4     		push	{r7}
 1683              	.LCFI68:
 1684              		.cfi_def_cfa_offset 4
 1685              		.cfi_offset 7, -4
 1686 0002 85B0     		sub	sp, sp, #20
 1687              	.LCFI69:
 1688              		.cfi_def_cfa_offset 24
 1689 0004 00AF     		add	r7, sp, #0
 1690              	.LCFI70:
 1691              		.cfi_def_cfa_register 7
 1692 0006 7860     		str	r0, [r7, #4]
1374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t freelevel = 0U;
ARM GAS  /tmp/cce3S0ea.s 			page 55


 1693              		.loc 1 1374 12
 1694 0008 0023     		movs	r3, #0
 1695 000a FB60     		str	r3, [r7, #12]
1375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1696              		.loc 1 1375 24
 1697 000c 7B68     		ldr	r3, [r7, #4]
 1698 000e 93F82030 		ldrb	r3, [r3, #32]
 1699 0012 FB72     		strb	r3, [r7, #11]
1376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1700              		.loc 1 1377 6
 1701 0014 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1702 0016 012B     		cmp	r3, #1
 1703 0018 02D0     		beq	.L80
 1704              		.loc 1 1377 38 discriminator 1
 1705 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1706 001c 022B     		cmp	r3, #2
 1707 001e 1DD1     		bne	.L81
 1708              	.L80:
1378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1709              		.loc 1 1381 14
 1710 0020 7B68     		ldr	r3, [r7, #4]
 1711 0022 1B68     		ldr	r3, [r3]
 1712              		.loc 1 1381 24
 1713 0024 9B68     		ldr	r3, [r3, #8]
 1714              		.loc 1 1381 30
 1715 0026 03F08063 		and	r3, r3, #67108864
 1716              		.loc 1 1381 8
 1717 002a 002B     		cmp	r3, #0
 1718 002c 02D0     		beq	.L82
1382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1719              		.loc 1 1383 16
 1720 002e FB68     		ldr	r3, [r7, #12]
 1721 0030 0133     		adds	r3, r3, #1
 1722 0032 FB60     		str	r3, [r7, #12]
 1723              	.L82:
1384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1724              		.loc 1 1387 14
 1725 0034 7B68     		ldr	r3, [r7, #4]
 1726 0036 1B68     		ldr	r3, [r3]
 1727              		.loc 1 1387 24
 1728 0038 9B68     		ldr	r3, [r3, #8]
 1729              		.loc 1 1387 30
 1730 003a 03F00063 		and	r3, r3, #134217728
 1731              		.loc 1 1387 8
 1732 003e 002B     		cmp	r3, #0
 1733 0040 02D0     		beq	.L83
1388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1734              		.loc 1 1389 16
ARM GAS  /tmp/cce3S0ea.s 			page 56


 1735 0042 FB68     		ldr	r3, [r7, #12]
 1736 0044 0133     		adds	r3, r3, #1
 1737 0046 FB60     		str	r3, [r7, #12]
 1738              	.L83:
1390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1739              		.loc 1 1393 14
 1740 0048 7B68     		ldr	r3, [r7, #4]
 1741 004a 1B68     		ldr	r3, [r3]
 1742              		.loc 1 1393 24
 1743 004c 9B68     		ldr	r3, [r3, #8]
 1744              		.loc 1 1393 30
 1745 004e 03F08053 		and	r3, r3, #268435456
 1746              		.loc 1 1393 8
 1747 0052 002B     		cmp	r3, #0
 1748 0054 02D0     		beq	.L81
1394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1749              		.loc 1 1395 16
 1750 0056 FB68     		ldr	r3, [r7, #12]
 1751 0058 0133     		adds	r3, r3, #1
 1752 005a FB60     		str	r3, [r7, #12]
 1753              	.L81:
1396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return freelevel;
 1754              		.loc 1 1400 10
 1755 005c FB68     		ldr	r3, [r7, #12]
1401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1756              		.loc 1 1401 1
 1757 005e 1846     		mov	r0, r3
 1758 0060 1437     		adds	r7, r7, #20
 1759              	.LCFI71:
 1760              		.cfi_def_cfa_offset 4
 1761 0062 BD46     		mov	sp, r7
 1762              	.LCFI72:
 1763              		.cfi_def_cfa_register 13
 1764              		@ sp needed
 1765 0064 5DF8047B 		ldr	r7, [sp], #4
 1766              	.LCFI73:
 1767              		.cfi_restore 7
 1768              		.cfi_def_cfa_offset 0
 1769 0068 7047     		bx	lr
 1770              		.cfi_endproc
 1771              	.LFE144:
 1773              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1774              		.align	1
 1775              		.global	HAL_CAN_IsTxMessagePending
 1776              		.syntax unified
 1777              		.thumb
 1778              		.thumb_func
 1780              	HAL_CAN_IsTxMessagePending:
 1781              	.LFB145:
ARM GAS  /tmp/cce3S0ea.s 			page 57


1402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         Mailboxes.
1406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *                Tx Mailbox.
1414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1782              		.loc 1 1416 1
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 16
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 0000 80B4     		push	{r7}
 1788              	.LCFI74:
 1789              		.cfi_def_cfa_offset 4
 1790              		.cfi_offset 7, -4
 1791 0002 85B0     		sub	sp, sp, #20
 1792              	.LCFI75:
 1793              		.cfi_def_cfa_offset 24
 1794 0004 00AF     		add	r7, sp, #0
 1795              	.LCFI76:
 1796              		.cfi_def_cfa_register 7
 1797 0006 7860     		str	r0, [r7, #4]
 1798 0008 3960     		str	r1, [r7]
1417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
 1799              		.loc 1 1417 12
 1800 000a 0023     		movs	r3, #0
 1801 000c FB60     		str	r3, [r7, #12]
1418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1802              		.loc 1 1418 24
 1803 000e 7B68     		ldr	r3, [r7, #4]
 1804 0010 93F82030 		ldrb	r3, [r3, #32]
 1805 0014 FB72     		strb	r3, [r7, #11]
1419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1806              		.loc 1 1423 6
 1807 0016 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1808 0018 012B     		cmp	r3, #1
 1809 001a 02D0     		beq	.L86
 1810              		.loc 1 1423 38 discriminator 1
 1811 001c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1812 001e 022B     		cmp	r3, #2
 1813 0020 0BD1     		bne	.L87
 1814              	.L86:
1424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/cce3S0ea.s 			page 58


1426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1815              		.loc 1 1427 14
 1816 0022 7B68     		ldr	r3, [r7, #4]
 1817 0024 1B68     		ldr	r3, [r3]
 1818              		.loc 1 1427 24
 1819 0026 9A68     		ldr	r2, [r3, #8]
 1820              		.loc 1 1427 45
 1821 0028 3B68     		ldr	r3, [r7]
 1822 002a 9B06     		lsls	r3, r3, #26
 1823              		.loc 1 1427 30
 1824 002c 1A40     		ands	r2, r2, r3
 1825              		.loc 1 1427 83
 1826 002e 3B68     		ldr	r3, [r7]
 1827 0030 9B06     		lsls	r3, r3, #26
 1828              		.loc 1 1427 8
 1829 0032 9A42     		cmp	r2, r3
 1830 0034 01D0     		beq	.L87
1428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 1831              		.loc 1 1429 14
 1832 0036 0123     		movs	r3, #1
 1833 0038 FB60     		str	r3, [r7, #12]
 1834              	.L87:
1430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return status */
1434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 1835              		.loc 1 1434 10
 1836 003a FB68     		ldr	r3, [r7, #12]
1435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1837              		.loc 1 1435 1
 1838 003c 1846     		mov	r0, r3
 1839 003e 1437     		adds	r7, r7, #20
 1840              	.LCFI77:
 1841              		.cfi_def_cfa_offset 4
 1842 0040 BD46     		mov	sp, r7
 1843              	.LCFI78:
 1844              		.cfi_def_cfa_register 13
 1845              		@ sp needed
 1846 0042 5DF8047B 		ldr	r7, [sp], #4
 1847              	.LCFI79:
 1848              		.cfi_restore 7
 1849              		.cfi_def_cfa_offset 0
 1850 0046 7047     		bx	lr
 1851              		.cfi_endproc
 1852              	.LFE145:
 1854              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1855              		.align	1
 1856              		.global	HAL_CAN_GetTxTimestamp
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1861              	HAL_CAN_GetTxTimestamp:
 1862              	.LFB146:
1436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cce3S0ea.s 			page 59


1437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             mode is enabled.
1440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         read.
1444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(const CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1863              		.loc 1 1448 1
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 32
 1866              		@ frame_needed = 1, uses_anonymous_args = 0
 1867              		@ link register save eliminated.
 1868 0000 80B4     		push	{r7}
 1869              	.LCFI80:
 1870              		.cfi_def_cfa_offset 4
 1871              		.cfi_offset 7, -4
 1872 0002 89B0     		sub	sp, sp, #36
 1873              	.LCFI81:
 1874              		.cfi_def_cfa_offset 40
 1875 0004 00AF     		add	r7, sp, #0
 1876              	.LCFI82:
 1877              		.cfi_def_cfa_register 7
 1878 0006 7860     		str	r0, [r7, #4]
 1879 0008 3960     		str	r1, [r7]
1449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t timestamp = 0U;
 1880              		.loc 1 1449 12
 1881 000a 0023     		movs	r3, #0
 1882 000c FB61     		str	r3, [r7, #28]
1450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
1451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1883              		.loc 1 1451 24
 1884 000e 7B68     		ldr	r3, [r7, #4]
 1885 0010 93F82030 		ldrb	r3, [r3, #32]
 1886 0014 FB76     		strb	r3, [r7, #27]
1452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1887              		.loc 1 1456 6
 1888 0016 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1889 0018 012B     		cmp	r3, #1
 1890 001a 02D0     		beq	.L90
 1891              		.loc 1 1456 38 discriminator 1
 1892 001c FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1893 001e 022B     		cmp	r3, #2
 1894 0020 1CD1     		bne	.L91
 1895              	.L90:
 1896 0022 3B68     		ldr	r3, [r7]
 1897 0024 FB60     		str	r3, [r7, #12]
 1898              	.LBB6:
 1899              	.LBB7:
ARM GAS  /tmp/cce3S0ea.s 			page 60


 1900              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
ARM GAS  /tmp/cce3S0ea.s 			page 61


  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
ARM GAS  /tmp/cce3S0ea.s 			page 62


 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
ARM GAS  /tmp/cce3S0ea.s 			page 63


 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cce3S0ea.s 			page 64


 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
ARM GAS  /tmp/cce3S0ea.s 			page 65


 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
ARM GAS  /tmp/cce3S0ea.s 			page 66


 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
ARM GAS  /tmp/cce3S0ea.s 			page 67


 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cce3S0ea.s 			page 68


 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cce3S0ea.s 			page 69


 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cce3S0ea.s 			page 70


 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
ARM GAS  /tmp/cce3S0ea.s 			page 71


 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/cce3S0ea.s 			page 72


 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
ARM GAS  /tmp/cce3S0ea.s 			page 73


 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  /tmp/cce3S0ea.s 			page 74


 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cce3S0ea.s 			page 75


 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cce3S0ea.s 			page 76


 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cce3S0ea.s 			page 77


 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/cce3S0ea.s 			page 78


1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1901              		.loc 2 1055 4
 1902 0026 FB68     		ldr	r3, [r7, #12]
 1903              		.syntax unified
 1904              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1905 0028 93FAA3F3 		rbit r3, r3
 1906              	@ 0 "" 2
 1907              		.thumb
 1908              		.syntax unified
 1909 002c BB60     		str	r3, [r7, #8]
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 1910              		.loc 2 1068 10
 1911 002e BB68     		ldr	r3, [r7, #8]
 1912 0030 3B61     		str	r3, [r7, #16]
 1913              	.LBE7:
 1914              	.LBE6:
ARM GAS  /tmp/cce3S0ea.s 			page 79


 1915              	.LBB8:
 1916              	.LBB9:
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 1917              		.loc 2 1089 6
 1918 0032 3B69     		ldr	r3, [r7, #16]
 1919 0034 002B     		cmp	r3, #0
 1920 0036 01D1     		bne	.L93
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 1921              		.loc 2 1091 12
 1922 0038 2023     		movs	r3, #32
 1923 003a 03E0     		b	.L94
 1924              	.L93:
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 1925              		.loc 2 1093 10
 1926 003c 3B69     		ldr	r3, [r7, #16]
 1927 003e B3FA83F3 		clz	r3, r3
 1928 0042 DBB2     		uxtb	r3, r3
 1929              	.L94:
 1930              	.LBE9:
 1931              	.LBE8:
1457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the Tx mailbox */
1460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1932              		.loc 1 1460 21
 1933 0044 7B61     		str	r3, [r7, #20]
1461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get timestamp */
1463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1934              		.loc 1 1463 22
 1935 0046 7B68     		ldr	r3, [r7, #4]
 1936 0048 1A68     		ldr	r2, [r3]
 1937              		.loc 1 1463 61
 1938 004a 7B69     		ldr	r3, [r7, #20]
 1939 004c 1833     		adds	r3, r3, #24
ARM GAS  /tmp/cce3S0ea.s 			page 80


 1940 004e 1B01     		lsls	r3, r3, #4
 1941 0050 1344     		add	r3, r3, r2
 1942 0052 0433     		adds	r3, r3, #4
 1943 0054 1B68     		ldr	r3, [r3]
 1944              		.loc 1 1463 85
 1945 0056 1B0C     		lsrs	r3, r3, #16
 1946              		.loc 1 1463 15
 1947 0058 9BB2     		uxth	r3, r3
 1948 005a FB61     		str	r3, [r7, #28]
 1949              	.L91:
1464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the timestamp */
1467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return timestamp;
 1950              		.loc 1 1467 10
 1951 005c FB69     		ldr	r3, [r7, #28]
1468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1952              		.loc 1 1468 1
 1953 005e 1846     		mov	r0, r3
 1954 0060 2437     		adds	r7, r7, #36
 1955              	.LCFI83:
 1956              		.cfi_def_cfa_offset 4
 1957 0062 BD46     		mov	sp, r7
 1958              	.LCFI84:
 1959              		.cfi_def_cfa_register 13
 1960              		@ sp needed
 1961 0064 5DF8047B 		ldr	r7, [sp], #4
 1962              	.LCFI85:
 1963              		.cfi_restore 7
 1964              		.cfi_def_cfa_offset 0
 1965 0068 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE146:
 1969              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1970              		.align	1
 1971              		.global	HAL_CAN_GetRxMessage
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1976              	HAL_CAN_GetRxMessage:
 1977              	.LFB147:
1469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of the Rx frame will be stored.
1478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
1482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                        CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
1483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1978              		.loc 1 1483 1
ARM GAS  /tmp/cce3S0ea.s 			page 81


 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 24
 1981              		@ frame_needed = 1, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983 0000 80B4     		push	{r7}
 1984              	.LCFI86:
 1985              		.cfi_def_cfa_offset 4
 1986              		.cfi_offset 7, -4
 1987 0002 87B0     		sub	sp, sp, #28
 1988              	.LCFI87:
 1989              		.cfi_def_cfa_offset 32
 1990 0004 00AF     		add	r7, sp, #0
 1991              	.LCFI88:
 1992              		.cfi_def_cfa_register 7
 1993 0006 F860     		str	r0, [r7, #12]
 1994 0008 B960     		str	r1, [r7, #8]
 1995 000a 7A60     		str	r2, [r7, #4]
 1996 000c 3B60     		str	r3, [r7]
1484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1997              		.loc 1 1484 24
 1998 000e FB68     		ldr	r3, [r7, #12]
 1999 0010 93F82030 		ldrb	r3, [r3, #32]
 2000 0014 FB75     		strb	r3, [r7, #23]
1485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2001              		.loc 1 1488 6
 2002 0016 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2003 0018 012B     		cmp	r3, #1
 2004 001a 03D0     		beq	.L97
 2005              		.loc 1 1488 38 discriminator 1
 2006 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2007 001e 022B     		cmp	r3, #2
 2008 0020 40F0F380 		bne	.L98
 2009              	.L97:
1489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the Rx FIFO */
1492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 2010              		.loc 1 1492 8
 2011 0024 BB68     		ldr	r3, [r7, #8]
 2012 0026 002B     		cmp	r3, #0
 2013 0028 0ED1     		bne	.L99
1493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 2014              		.loc 1 1495 16
 2015 002a FB68     		ldr	r3, [r7, #12]
 2016 002c 1B68     		ldr	r3, [r3]
 2017              		.loc 1 1495 26
 2018 002e DB68     		ldr	r3, [r3, #12]
 2019              		.loc 1 1495 33
 2020 0030 03F00303 		and	r3, r3, #3
 2021              		.loc 1 1495 10
 2022 0034 002B     		cmp	r3, #0
 2023 0036 16D1     		bne	.L100
ARM GAS  /tmp/cce3S0ea.s 			page 82


1496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 2024              		.loc 1 1498 25
 2025 0038 FB68     		ldr	r3, [r7, #12]
 2026 003a 5B6A     		ldr	r3, [r3, #36]
 2027 003c 43F40012 		orr	r2, r3, #2097152
 2028 0040 FB68     		ldr	r3, [r7, #12]
 2029 0042 5A62     		str	r2, [r3, #36]
1499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 2030              		.loc 1 1500 16
 2031 0044 0123     		movs	r3, #1
 2032 0046 E7E0     		b	.L101
 2033              	.L99:
1501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 2034              		.loc 1 1506 16
 2035 0048 FB68     		ldr	r3, [r7, #12]
 2036 004a 1B68     		ldr	r3, [r3]
 2037              		.loc 1 1506 26
 2038 004c 1B69     		ldr	r3, [r3, #16]
 2039              		.loc 1 1506 33
 2040 004e 03F00303 		and	r3, r3, #3
 2041              		.loc 1 1506 10
 2042 0052 002B     		cmp	r3, #0
 2043 0054 07D1     		bne	.L100
1507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 2044              		.loc 1 1509 25
 2045 0056 FB68     		ldr	r3, [r7, #12]
 2046 0058 5B6A     		ldr	r3, [r3, #36]
 2047 005a 43F40012 		orr	r2, r3, #2097152
 2048 005e FB68     		ldr	r3, [r7, #12]
 2049 0060 5A62     		str	r2, [r3, #36]
1510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 2050              		.loc 1 1511 16
 2051 0062 0123     		movs	r3, #1
 2052 0064 D8E0     		b	.L101
 2053              	.L100:
1512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the header */
1516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 2054              		.loc 1 1516 39
 2055 0066 FB68     		ldr	r3, [r7, #12]
 2056 0068 1A68     		ldr	r2, [r3]
 2057              		.loc 1 1516 71
 2058 006a BB68     		ldr	r3, [r7, #8]
 2059 006c 1B33     		adds	r3, r3, #27
ARM GAS  /tmp/cce3S0ea.s 			page 83


 2060 006e 1B01     		lsls	r3, r3, #4
 2061 0070 1344     		add	r3, r3, r2
 2062 0072 1B68     		ldr	r3, [r3]
 2063              		.loc 1 1516 33
 2064 0074 03F00402 		and	r2, r3, #4
 2065              		.loc 1 1516 18
 2066 0078 7B68     		ldr	r3, [r7, #4]
 2067 007a 9A60     		str	r2, [r3, #8]
1517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 2068              		.loc 1 1517 16
 2069 007c 7B68     		ldr	r3, [r7, #4]
 2070 007e 9B68     		ldr	r3, [r3, #8]
 2071              		.loc 1 1517 8
 2072 0080 002B     		cmp	r3, #0
 2073 0082 0CD1     		bne	.L102
1518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 2074              		.loc 1 1519 45
 2075 0084 FB68     		ldr	r3, [r7, #12]
 2076 0086 1A68     		ldr	r2, [r3]
 2077              		.loc 1 1519 77
 2078 0088 BB68     		ldr	r3, [r7, #8]
 2079 008a 1B33     		adds	r3, r3, #27
 2080 008c 1B01     		lsls	r3, r3, #4
 2081 008e 1344     		add	r3, r3, r2
 2082 0090 1B68     		ldr	r3, [r3]
 2083              		.loc 1 1519 83
 2084 0092 5B0D     		lsrs	r3, r3, #21
 2085 0094 C3F30A02 		ubfx	r2, r3, #0, #11
 2086              		.loc 1 1519 22
 2087 0098 7B68     		ldr	r3, [r7, #4]
 2088 009a 1A60     		str	r2, [r3]
 2089 009c 0BE0     		b	.L103
 2090              	.L102:
1520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
1524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 2091              		.loc 1 1524 29
 2092 009e FB68     		ldr	r3, [r7, #12]
 2093 00a0 1A68     		ldr	r2, [r3]
 2094              		.loc 1 1524 61
 2095 00a2 BB68     		ldr	r3, [r7, #8]
 2096 00a4 1B33     		adds	r3, r3, #27
 2097 00a6 1B01     		lsls	r3, r3, #4
 2098 00a8 1344     		add	r3, r3, r2
 2099 00aa 1B68     		ldr	r3, [r3]
 2100              		.loc 1 1524 67
 2101 00ac DB08     		lsrs	r3, r3, #3
 2102 00ae 23F06042 		bic	r2, r3, #-536870912
1523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 2103              		.loc 1 1523 22
 2104 00b2 7B68     		ldr	r3, [r7, #4]
 2105 00b4 5A60     		str	r2, [r3, #4]
 2106              	.L103:
1525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/cce3S0ea.s 			page 84


1526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 2107              		.loc 1 1526 40
 2108 00b6 FB68     		ldr	r3, [r7, #12]
 2109 00b8 1A68     		ldr	r2, [r3]
 2110              		.loc 1 1526 72
 2111 00ba BB68     		ldr	r3, [r7, #8]
 2112 00bc 1B33     		adds	r3, r3, #27
 2113 00be 1B01     		lsls	r3, r3, #4
 2114 00c0 1344     		add	r3, r3, r2
 2115 00c2 1B68     		ldr	r3, [r3]
 2116              		.loc 1 1526 34
 2117 00c4 03F00202 		and	r2, r3, #2
 2118              		.loc 1 1526 18
 2119 00c8 7B68     		ldr	r3, [r7, #4]
 2120 00ca DA60     		str	r2, [r3, #12]
1527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 2121              		.loc 1 1527 41
 2122 00cc FB68     		ldr	r3, [r7, #12]
 2123 00ce 1A68     		ldr	r2, [r3]
 2124              		.loc 1 1527 73
 2125 00d0 BB68     		ldr	r3, [r7, #8]
 2126 00d2 1B33     		adds	r3, r3, #27
 2127 00d4 1B01     		lsls	r3, r3, #4
 2128 00d6 1344     		add	r3, r3, r2
 2129 00d8 0433     		adds	r3, r3, #4
 2130 00da 1B68     		ldr	r3, [r3]
 2131              		.loc 1 1527 80
 2132 00dc 03F00F02 		and	r2, r3, #15
 2133              		.loc 1 1527 18
 2134 00e0 7B68     		ldr	r3, [r7, #4]
 2135 00e2 1A61     		str	r2, [r3, #16]
1528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 2136              		.loc 1 1528 54
 2137 00e4 FB68     		ldr	r3, [r7, #12]
 2138 00e6 1A68     		ldr	r2, [r3]
 2139              		.loc 1 1528 86
 2140 00e8 BB68     		ldr	r3, [r7, #8]
 2141 00ea 1B33     		adds	r3, r3, #27
 2142 00ec 1B01     		lsls	r3, r3, #4
 2143 00ee 1344     		add	r3, r3, r2
 2144 00f0 0433     		adds	r3, r3, #4
 2145 00f2 1B68     		ldr	r3, [r3]
 2146              		.loc 1 1528 93
 2147 00f4 1B0A     		lsrs	r3, r3, #8
 2148 00f6 DAB2     		uxtb	r2, r3
 2149              		.loc 1 1528 31
 2150 00f8 7B68     		ldr	r3, [r7, #4]
 2151 00fa 9A61     		str	r2, [r3, #24]
1529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 2152              		.loc 1 1529 48
 2153 00fc FB68     		ldr	r3, [r7, #12]
 2154 00fe 1A68     		ldr	r2, [r3]
 2155              		.loc 1 1529 80
 2156 0100 BB68     		ldr	r3, [r7, #8]
 2157 0102 1B33     		adds	r3, r3, #27
 2158 0104 1B01     		lsls	r3, r3, #4
 2159 0106 1344     		add	r3, r3, r2
ARM GAS  /tmp/cce3S0ea.s 			page 85


 2160 0108 0433     		adds	r3, r3, #4
 2161 010a 1B68     		ldr	r3, [r3]
 2162              		.loc 1 1529 87
 2163 010c 1B0C     		lsrs	r3, r3, #16
 2164 010e 9AB2     		uxth	r2, r3
 2165              		.loc 1 1529 24
 2166 0110 7B68     		ldr	r3, [r7, #4]
 2167 0112 5A61     		str	r2, [r3, #20]
1530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the data */
1532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2168              		.loc 1 1532 49
 2169 0114 FB68     		ldr	r3, [r7, #12]
 2170 0116 1A68     		ldr	r2, [r3]
 2171              		.loc 1 1532 81
 2172 0118 BB68     		ldr	r3, [r7, #8]
 2173 011a 1B01     		lsls	r3, r3, #4
 2174 011c 1344     		add	r3, r3, r2
 2175 011e 03F5DC73 		add	r3, r3, #440
 2176 0122 1B68     		ldr	r3, [r3]
 2177              		.loc 1 1532 16
 2178 0124 DAB2     		uxtb	r2, r3
 2179              		.loc 1 1532 14
 2180 0126 3B68     		ldr	r3, [r7]
 2181 0128 1A70     		strb	r2, [r3]
1533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2182              		.loc 1 1533 49
 2183 012a FB68     		ldr	r3, [r7, #12]
 2184 012c 1A68     		ldr	r2, [r3]
 2185              		.loc 1 1533 81
 2186 012e BB68     		ldr	r3, [r7, #8]
 2187 0130 1B01     		lsls	r3, r3, #4
 2188 0132 1344     		add	r3, r3, r2
 2189 0134 03F5DC73 		add	r3, r3, #440
 2190 0138 1B68     		ldr	r3, [r3]
 2191              		.loc 1 1533 88
 2192 013a 1A0A     		lsrs	r2, r3, #8
 2193              		.loc 1 1533 10
 2194 013c 3B68     		ldr	r3, [r7]
 2195 013e 0133     		adds	r3, r3, #1
 2196              		.loc 1 1533 16
 2197 0140 D2B2     		uxtb	r2, r2
 2198              		.loc 1 1533 14
 2199 0142 1A70     		strb	r2, [r3]
1534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2200              		.loc 1 1534 49
 2201 0144 FB68     		ldr	r3, [r7, #12]
 2202 0146 1A68     		ldr	r2, [r3]
 2203              		.loc 1 1534 81
 2204 0148 BB68     		ldr	r3, [r7, #8]
 2205 014a 1B01     		lsls	r3, r3, #4
 2206 014c 1344     		add	r3, r3, r2
 2207 014e 03F5DC73 		add	r3, r3, #440
 2208 0152 1B68     		ldr	r3, [r3]
 2209              		.loc 1 1534 88
 2210 0154 1A0C     		lsrs	r2, r3, #16
 2211              		.loc 1 1534 10
ARM GAS  /tmp/cce3S0ea.s 			page 86


 2212 0156 3B68     		ldr	r3, [r7]
 2213 0158 0233     		adds	r3, r3, #2
 2214              		.loc 1 1534 16
 2215 015a D2B2     		uxtb	r2, r2
 2216              		.loc 1 1534 14
 2217 015c 1A70     		strb	r2, [r3]
1535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2218              		.loc 1 1535 49
 2219 015e FB68     		ldr	r3, [r7, #12]
 2220 0160 1A68     		ldr	r2, [r3]
 2221              		.loc 1 1535 81
 2222 0162 BB68     		ldr	r3, [r7, #8]
 2223 0164 1B01     		lsls	r3, r3, #4
 2224 0166 1344     		add	r3, r3, r2
 2225 0168 03F5DC73 		add	r3, r3, #440
 2226 016c 1B68     		ldr	r3, [r3]
 2227              		.loc 1 1535 88
 2228 016e 1A0E     		lsrs	r2, r3, #24
 2229              		.loc 1 1535 10
 2230 0170 3B68     		ldr	r3, [r7]
 2231 0172 0333     		adds	r3, r3, #3
 2232              		.loc 1 1535 16
 2233 0174 D2B2     		uxtb	r2, r2
 2234              		.loc 1 1535 14
 2235 0176 1A70     		strb	r2, [r3]
1536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2236              		.loc 1 1536 49
 2237 0178 FB68     		ldr	r3, [r7, #12]
 2238 017a 1A68     		ldr	r2, [r3]
 2239              		.loc 1 1536 81
 2240 017c BB68     		ldr	r3, [r7, #8]
 2241 017e 1B01     		lsls	r3, r3, #4
 2242 0180 1344     		add	r3, r3, r2
 2243 0182 03F5DE73 		add	r3, r3, #444
 2244 0186 1A68     		ldr	r2, [r3]
 2245              		.loc 1 1536 10
 2246 0188 3B68     		ldr	r3, [r7]
 2247 018a 0433     		adds	r3, r3, #4
 2248              		.loc 1 1536 16
 2249 018c D2B2     		uxtb	r2, r2
 2250              		.loc 1 1536 14
 2251 018e 1A70     		strb	r2, [r3]
1537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2252              		.loc 1 1537 49
 2253 0190 FB68     		ldr	r3, [r7, #12]
 2254 0192 1A68     		ldr	r2, [r3]
 2255              		.loc 1 1537 81
 2256 0194 BB68     		ldr	r3, [r7, #8]
 2257 0196 1B01     		lsls	r3, r3, #4
 2258 0198 1344     		add	r3, r3, r2
 2259 019a 03F5DE73 		add	r3, r3, #444
 2260 019e 1B68     		ldr	r3, [r3]
 2261              		.loc 1 1537 88
 2262 01a0 1A0A     		lsrs	r2, r3, #8
 2263              		.loc 1 1537 10
 2264 01a2 3B68     		ldr	r3, [r7]
 2265 01a4 0533     		adds	r3, r3, #5
ARM GAS  /tmp/cce3S0ea.s 			page 87


 2266              		.loc 1 1537 16
 2267 01a6 D2B2     		uxtb	r2, r2
 2268              		.loc 1 1537 14
 2269 01a8 1A70     		strb	r2, [r3]
1538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2270              		.loc 1 1538 49
 2271 01aa FB68     		ldr	r3, [r7, #12]
 2272 01ac 1A68     		ldr	r2, [r3]
 2273              		.loc 1 1538 81
 2274 01ae BB68     		ldr	r3, [r7, #8]
 2275 01b0 1B01     		lsls	r3, r3, #4
 2276 01b2 1344     		add	r3, r3, r2
 2277 01b4 03F5DE73 		add	r3, r3, #444
 2278 01b8 1B68     		ldr	r3, [r3]
 2279              		.loc 1 1538 88
 2280 01ba 1A0C     		lsrs	r2, r3, #16
 2281              		.loc 1 1538 10
 2282 01bc 3B68     		ldr	r3, [r7]
 2283 01be 0633     		adds	r3, r3, #6
 2284              		.loc 1 1538 16
 2285 01c0 D2B2     		uxtb	r2, r2
 2286              		.loc 1 1538 14
 2287 01c2 1A70     		strb	r2, [r3]
1539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2288              		.loc 1 1539 49
 2289 01c4 FB68     		ldr	r3, [r7, #12]
 2290 01c6 1A68     		ldr	r2, [r3]
 2291              		.loc 1 1539 81
 2292 01c8 BB68     		ldr	r3, [r7, #8]
 2293 01ca 1B01     		lsls	r3, r3, #4
 2294 01cc 1344     		add	r3, r3, r2
 2295 01ce 03F5DE73 		add	r3, r3, #444
 2296 01d2 1B68     		ldr	r3, [r3]
 2297              		.loc 1 1539 88
 2298 01d4 1A0E     		lsrs	r2, r3, #24
 2299              		.loc 1 1539 10
 2300 01d6 3B68     		ldr	r3, [r7]
 2301 01d8 0733     		adds	r3, r3, #7
 2302              		.loc 1 1539 16
 2303 01da D2B2     		uxtb	r2, r2
 2304              		.loc 1 1539 14
 2305 01dc 1A70     		strb	r2, [r3]
1540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Release the FIFO */
1542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 2306              		.loc 1 1542 8
 2307 01de BB68     		ldr	r3, [r7, #8]
 2308 01e0 002B     		cmp	r3, #0
 2309 01e2 08D1     		bne	.L104
1543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 0 */
1545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 2310              		.loc 1 1545 7
 2311 01e4 FB68     		ldr	r3, [r7, #12]
 2312 01e6 1B68     		ldr	r3, [r3]
 2313 01e8 DA68     		ldr	r2, [r3, #12]
 2314 01ea FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cce3S0ea.s 			page 88


 2315 01ec 1B68     		ldr	r3, [r3]
 2316 01ee 42F02002 		orr	r2, r2, #32
 2317 01f2 DA60     		str	r2, [r3, #12]
 2318 01f4 07E0     		b	.L105
 2319              	.L104:
1546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 1 */
1550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 2320              		.loc 1 1550 7
 2321 01f6 FB68     		ldr	r3, [r7, #12]
 2322 01f8 1B68     		ldr	r3, [r3]
 2323 01fa 1A69     		ldr	r2, [r3, #16]
 2324 01fc FB68     		ldr	r3, [r7, #12]
 2325 01fe 1B68     		ldr	r3, [r3]
 2326 0200 42F02002 		orr	r2, r2, #32
 2327 0204 1A61     		str	r2, [r3, #16]
 2328              	.L105:
1551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 2329              		.loc 1 1554 12
 2330 0206 0023     		movs	r3, #0
 2331 0208 06E0     		b	.L101
 2332              	.L98:
1555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2333              		.loc 1 1559 21
 2334 020a FB68     		ldr	r3, [r7, #12]
 2335 020c 5B6A     		ldr	r3, [r3, #36]
 2336 020e 43F48022 		orr	r2, r3, #262144
 2337 0212 FB68     		ldr	r3, [r7, #12]
 2338 0214 5A62     		str	r2, [r3, #36]
1560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 2339              		.loc 1 1561 12
 2340 0216 0123     		movs	r3, #1
 2341              	.L101:
1562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2342              		.loc 1 1563 1
 2343 0218 1846     		mov	r0, r3
 2344 021a 1C37     		adds	r7, r7, #28
 2345              	.LCFI89:
 2346              		.cfi_def_cfa_offset 4
 2347 021c BD46     		mov	sp, r7
 2348              	.LCFI90:
 2349              		.cfi_def_cfa_register 13
 2350              		@ sp needed
 2351 021e 5DF8047B 		ldr	r7, [sp], #4
 2352              	.LCFI91:
 2353              		.cfi_restore 7
ARM GAS  /tmp/cce3S0ea.s 			page 89


 2354              		.cfi_def_cfa_offset 0
 2355 0222 7047     		bx	lr
 2356              		.cfi_endproc
 2357              	.LFE147:
 2359              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 2360              		.align	1
 2361              		.global	HAL_CAN_GetRxFifoFillLevel
 2362              		.syntax unified
 2363              		.thumb
 2364              		.thumb_func
 2366              	HAL_CAN_GetRxFifoFillLevel:
 2367              	.LFB148:
1564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2368              		.loc 1 1574 1
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 16
 2371              		@ frame_needed = 1, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
 2373 0000 80B4     		push	{r7}
 2374              	.LCFI92:
 2375              		.cfi_def_cfa_offset 4
 2376              		.cfi_offset 7, -4
 2377 0002 85B0     		sub	sp, sp, #20
 2378              	.LCFI93:
 2379              		.cfi_def_cfa_offset 24
 2380 0004 00AF     		add	r7, sp, #0
 2381              	.LCFI94:
 2382              		.cfi_def_cfa_register 7
 2383 0006 7860     		str	r0, [r7, #4]
 2384 0008 3960     		str	r1, [r7]
1575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filllevel = 0U;
 2385              		.loc 1 1575 12
 2386 000a 0023     		movs	r3, #0
 2387 000c FB60     		str	r3, [r7, #12]
1576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2388              		.loc 1 1576 24
 2389 000e 7B68     		ldr	r3, [r7, #4]
 2390 0010 93F82030 		ldrb	r3, [r3, #32]
 2391 0014 FB72     		strb	r3, [r7, #11]
1577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2392              		.loc 1 1581 6
 2393 0016 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2394 0018 012B     		cmp	r3, #1
ARM GAS  /tmp/cce3S0ea.s 			page 90


 2395 001a 02D0     		beq	.L107
 2396              		.loc 1 1581 38 discriminator 1
 2397 001c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2398 001e 022B     		cmp	r3, #2
 2399 0020 0FD1     		bne	.L108
 2400              	.L107:
1582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 2401              		.loc 1 1584 8
 2402 0022 3B68     		ldr	r3, [r7]
 2403 0024 002B     		cmp	r3, #0
 2404 0026 06D1     		bne	.L109
1585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 2405              		.loc 1 1586 23
 2406 0028 7B68     		ldr	r3, [r7, #4]
 2407 002a 1B68     		ldr	r3, [r3]
 2408              		.loc 1 1586 33
 2409 002c DB68     		ldr	r3, [r3, #12]
 2410              		.loc 1 1586 17
 2411 002e 03F00303 		and	r3, r3, #3
 2412 0032 FB60     		str	r3, [r7, #12]
 2413 0034 05E0     		b	.L108
 2414              	.L109:
1587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 2415              		.loc 1 1590 23
 2416 0036 7B68     		ldr	r3, [r7, #4]
 2417 0038 1B68     		ldr	r3, [r3]
 2418              		.loc 1 1590 33
 2419 003a 1B69     		ldr	r3, [r3, #16]
 2420              		.loc 1 1590 17
 2421 003c 03F00303 		and	r3, r3, #3
 2422 0040 FB60     		str	r3, [r7, #12]
 2423              	.L108:
1591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return filllevel;
 2424              		.loc 1 1595 10
 2425 0042 FB68     		ldr	r3, [r7, #12]
1596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2426              		.loc 1 1596 1
 2427 0044 1846     		mov	r0, r3
 2428 0046 1437     		adds	r7, r7, #20
 2429              	.LCFI95:
 2430              		.cfi_def_cfa_offset 4
 2431 0048 BD46     		mov	sp, r7
 2432              	.LCFI96:
 2433              		.cfi_def_cfa_register 13
 2434              		@ sp needed
 2435 004a 5DF8047B 		ldr	r7, [sp], #4
 2436              	.LCFI97:
ARM GAS  /tmp/cce3S0ea.s 			page 91


 2437              		.cfi_restore 7
 2438              		.cfi_def_cfa_offset 0
 2439 004e 7047     		bx	lr
 2440              		.cfi_endproc
 2441              	.LFE148:
 2443              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 2444              		.align	1
 2445              		.global	HAL_CAN_ActivateNotification
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2450              	HAL_CAN_ActivateNotification:
 2451              	.LFB149:
1597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
1600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Interrupts management
1604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
1605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
1606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                        ##### Interrupts management #####
1608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
1615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
1616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Enable interrupts.
1620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2452              		.loc 1 1627 1
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 16
 2455              		@ frame_needed = 1, uses_anonymous_args = 0
 2456              		@ link register save eliminated.
 2457 0000 80B4     		push	{r7}
 2458              	.LCFI98:
 2459              		.cfi_def_cfa_offset 4
 2460              		.cfi_offset 7, -4
 2461 0002 85B0     		sub	sp, sp, #20
 2462              	.LCFI99:
 2463              		.cfi_def_cfa_offset 24
 2464 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cce3S0ea.s 			page 92


 2465              	.LCFI100:
 2466              		.cfi_def_cfa_register 7
 2467 0006 7860     		str	r0, [r7, #4]
 2468 0008 3960     		str	r1, [r7]
1628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2469              		.loc 1 1628 24
 2470 000a 7B68     		ldr	r3, [r7, #4]
 2471 000c 93F82030 		ldrb	r3, [r3, #32]
 2472 0010 FB73     		strb	r3, [r7, #15]
1629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2473              		.loc 1 1633 6
 2474 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2475 0014 012B     		cmp	r3, #1
 2476 0016 02D0     		beq	.L112
 2477              		.loc 1 1633 38 discriminator 1
 2478 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2479 001a 022B     		cmp	r3, #2
 2480 001c 09D1     		bne	.L113
 2481              	.L112:
1634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Enable the selected interrupts */
1637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 2482              		.loc 1 1637 5
 2483 001e 7B68     		ldr	r3, [r7, #4]
 2484 0020 1B68     		ldr	r3, [r3]
 2485 0022 5969     		ldr	r1, [r3, #20]
 2486 0024 7B68     		ldr	r3, [r7, #4]
 2487 0026 1B68     		ldr	r3, [r3]
 2488 0028 3A68     		ldr	r2, [r7]
 2489 002a 0A43     		orrs	r2, r2, r1
 2490 002c 5A61     		str	r2, [r3, #20]
1638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 2491              		.loc 1 1640 12
 2492 002e 0023     		movs	r3, #0
 2493 0030 06E0     		b	.L114
 2494              	.L113:
1641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2495              		.loc 1 1645 21
 2496 0032 7B68     		ldr	r3, [r7, #4]
 2497 0034 5B6A     		ldr	r3, [r3, #36]
 2498 0036 43F48022 		orr	r2, r3, #262144
 2499 003a 7B68     		ldr	r3, [r7, #4]
 2500 003c 5A62     		str	r2, [r3, #36]
1646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 2501              		.loc 1 1647 12
ARM GAS  /tmp/cce3S0ea.s 			page 93


 2502 003e 0123     		movs	r3, #1
 2503              	.L114:
1648:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1649:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2504              		.loc 1 1649 1
 2505 0040 1846     		mov	r0, r3
 2506 0042 1437     		adds	r7, r7, #20
 2507              	.LCFI101:
 2508              		.cfi_def_cfa_offset 4
 2509 0044 BD46     		mov	sp, r7
 2510              	.LCFI102:
 2511              		.cfi_def_cfa_register 13
 2512              		@ sp needed
 2513 0046 5DF8047B 		ldr	r7, [sp], #4
 2514              	.LCFI103:
 2515              		.cfi_restore 7
 2516              		.cfi_def_cfa_offset 0
 2517 004a 7047     		bx	lr
 2518              		.cfi_endproc
 2519              	.LFE149:
 2521              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2522              		.align	1
 2523              		.global	HAL_CAN_DeactivateNotification
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2528              	HAL_CAN_DeactivateNotification:
 2529              	.LFB150:
1650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1651:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1652:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Disable interrupts.
1653:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1654:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1655:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1656:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1657:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1658:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1659:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1660:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2530              		.loc 1 1660 1
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 16
 2533              		@ frame_needed = 1, uses_anonymous_args = 0
 2534              		@ link register save eliminated.
 2535 0000 80B4     		push	{r7}
 2536              	.LCFI104:
 2537              		.cfi_def_cfa_offset 4
 2538              		.cfi_offset 7, -4
 2539 0002 85B0     		sub	sp, sp, #20
 2540              	.LCFI105:
 2541              		.cfi_def_cfa_offset 24
 2542 0004 00AF     		add	r7, sp, #0
 2543              	.LCFI106:
 2544              		.cfi_def_cfa_register 7
 2545 0006 7860     		str	r0, [r7, #4]
 2546 0008 3960     		str	r1, [r7]
1661:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
ARM GAS  /tmp/cce3S0ea.s 			page 94


 2547              		.loc 1 1661 24
 2548 000a 7B68     		ldr	r3, [r7, #4]
 2549 000c 93F82030 		ldrb	r3, [r3, #32]
 2550 0010 FB73     		strb	r3, [r7, #15]
1662:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1663:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1664:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1665:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1666:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2551              		.loc 1 1666 6
 2552 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2553 0014 012B     		cmp	r3, #1
 2554 0016 02D0     		beq	.L116
 2555              		.loc 1 1666 38 discriminator 1
 2556 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2557 001a 022B     		cmp	r3, #2
 2558 001c 0AD1     		bne	.L117
 2559              	.L116:
1667:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1668:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1669:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Disable the selected interrupts */
1670:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 2560              		.loc 1 1670 5
 2561 001e 7B68     		ldr	r3, [r7, #4]
 2562 0020 1B68     		ldr	r3, [r3]
 2563 0022 5969     		ldr	r1, [r3, #20]
 2564 0024 3B68     		ldr	r3, [r7]
 2565 0026 DA43     		mvns	r2, r3
 2566 0028 7B68     		ldr	r3, [r7, #4]
 2567 002a 1B68     		ldr	r3, [r3]
 2568 002c 0A40     		ands	r2, r2, r1
 2569 002e 5A61     		str	r2, [r3, #20]
1671:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1672:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1673:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 2570              		.loc 1 1673 12
 2571 0030 0023     		movs	r3, #0
 2572 0032 06E0     		b	.L118
 2573              	.L117:
1674:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1675:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1676:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1677:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1678:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2574              		.loc 1 1678 21
 2575 0034 7B68     		ldr	r3, [r7, #4]
 2576 0036 5B6A     		ldr	r3, [r3, #36]
 2577 0038 43F48022 		orr	r2, r3, #262144
 2578 003c 7B68     		ldr	r3, [r7, #4]
 2579 003e 5A62     		str	r2, [r3, #36]
1679:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1680:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 2580              		.loc 1 1680 12
 2581 0040 0123     		movs	r3, #1
 2582              	.L118:
1681:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1682:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
ARM GAS  /tmp/cce3S0ea.s 			page 95


 2583              		.loc 1 1682 1
 2584 0042 1846     		mov	r0, r3
 2585 0044 1437     		adds	r7, r7, #20
 2586              	.LCFI107:
 2587              		.cfi_def_cfa_offset 4
 2588 0046 BD46     		mov	sp, r7
 2589              	.LCFI108:
 2590              		.cfi_def_cfa_register 13
 2591              		@ sp needed
 2592 0048 5DF8047B 		ldr	r7, [sp], #4
 2593              	.LCFI109:
 2594              		.cfi_restore 7
 2595              		.cfi_def_cfa_offset 0
 2596 004c 7047     		bx	lr
 2597              		.cfi_endproc
 2598              	.LFE150:
 2600              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2601              		.align	1
 2602              		.global	HAL_CAN_IRQHandler
 2603              		.syntax unified
 2604              		.thumb
 2605              		.thumb_func
 2607              	HAL_CAN_IRQHandler:
 2608              	.LFB151:
1683:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1684:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1685:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1686:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1687:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1688:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
1689:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1690:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1691:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2609              		.loc 1 1691 1
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 40
 2612              		@ frame_needed = 1, uses_anonymous_args = 0
 2613 0000 80B5     		push	{r7, lr}
 2614              	.LCFI110:
 2615              		.cfi_def_cfa_offset 8
 2616              		.cfi_offset 7, -8
 2617              		.cfi_offset 14, -4
 2618 0002 8AB0     		sub	sp, sp, #40
 2619              	.LCFI111:
 2620              		.cfi_def_cfa_offset 48
 2621 0004 00AF     		add	r7, sp, #0
 2622              	.LCFI112:
 2623              		.cfi_def_cfa_register 7
 2624 0006 7860     		str	r0, [r7, #4]
1692:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2625              		.loc 1 1692 12
 2626 0008 0023     		movs	r3, #0
 2627 000a 7B62     		str	r3, [r7, #36]
1693:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2628              		.loc 1 1693 25
 2629 000c 7B68     		ldr	r3, [r7, #4]
 2630 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cce3S0ea.s 			page 96


 2631              		.loc 1 1693 12
 2632 0010 5B69     		ldr	r3, [r3, #20]
 2633 0012 3B62     		str	r3, [r7, #32]
1694:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2634              		.loc 1 1694 23
 2635 0014 7B68     		ldr	r3, [r7, #4]
 2636 0016 1B68     		ldr	r3, [r3]
 2637              		.loc 1 1694 12
 2638 0018 5B68     		ldr	r3, [r3, #4]
 2639 001a FB61     		str	r3, [r7, #28]
1695:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2640              		.loc 1 1695 23
 2641 001c 7B68     		ldr	r3, [r7, #4]
 2642 001e 1B68     		ldr	r3, [r3]
 2643              		.loc 1 1695 12
 2644 0020 9B68     		ldr	r3, [r3, #8]
 2645 0022 BB61     		str	r3, [r7, #24]
1696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2646              		.loc 1 1696 24
 2647 0024 7B68     		ldr	r3, [r7, #4]
 2648 0026 1B68     		ldr	r3, [r3]
 2649              		.loc 1 1696 12
 2650 0028 DB68     		ldr	r3, [r3, #12]
 2651 002a 7B61     		str	r3, [r7, #20]
1697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2652              		.loc 1 1697 24
 2653 002c 7B68     		ldr	r3, [r7, #4]
 2654 002e 1B68     		ldr	r3, [r3]
 2655              		.loc 1 1697 12
 2656 0030 1B69     		ldr	r3, [r3, #16]
 2657 0032 3B61     		str	r3, [r7, #16]
1698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2658              		.loc 1 1698 23
 2659 0034 7B68     		ldr	r3, [r7, #4]
 2660 0036 1B68     		ldr	r3, [r3]
 2661              		.loc 1 1698 12
 2662 0038 9B69     		ldr	r3, [r3, #24]
 2663 003a FB60     		str	r3, [r7, #12]
1699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 2664              		.loc 1 1701 19
 2665 003c 3B6A     		ldr	r3, [r7, #32]
 2666 003e 03F00103 		and	r3, r3, #1
 2667              		.loc 1 1701 6
 2668 0042 002B     		cmp	r3, #0
 2669 0044 7CD0     		beq	.L120
1702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1704:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 2670              		.loc 1 1704 19
 2671 0046 BB69     		ldr	r3, [r7, #24]
 2672 0048 03F00103 		and	r3, r3, #1
 2673              		.loc 1 1704 8
 2674 004c 002B     		cmp	r3, #0
 2675 004e 23D0     		beq	.L121
1705:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
ARM GAS  /tmp/cce3S0ea.s 			page 97


1706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1707:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 2676              		.loc 1 1707 7
 2677 0050 7B68     		ldr	r3, [r7, #4]
 2678 0052 1B68     		ldr	r3, [r3]
 2679 0054 0122     		movs	r2, #1
 2680 0056 9A60     		str	r2, [r3, #8]
1708:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 2681              		.loc 1 1709 21
 2682 0058 BB69     		ldr	r3, [r7, #24]
 2683 005a 03F00203 		and	r3, r3, #2
 2684              		.loc 1 1709 10
 2685 005e 002B     		cmp	r3, #0
 2686 0060 03D0     		beq	.L122
1710:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1711:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1713:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1715:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1716:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1717:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
 2687              		.loc 1 1717 9
 2688 0062 7868     		ldr	r0, [r7, #4]
 2689 0064 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2690 0068 16E0     		b	.L121
 2691              	.L122:
1718:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1719:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1720:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1721:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
 2692              		.loc 1 1722 23
 2693 006a BB69     		ldr	r3, [r7, #24]
 2694 006c 03F00403 		and	r3, r3, #4
 2695              		.loc 1 1722 12
 2696 0070 002B     		cmp	r3, #0
 2697 0072 04D0     		beq	.L123
1723:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1724:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1725:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
 2698              		.loc 1 1725 21
 2699 0074 7B6A     		ldr	r3, [r7, #36]
 2700 0076 43F40063 		orr	r3, r3, #2048
 2701 007a 7B62     		str	r3, [r7, #36]
 2702 007c 0CE0     		b	.L121
 2703              	.L123:
1726:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 2704              		.loc 1 1727 28
 2705 007e BB69     		ldr	r3, [r7, #24]
 2706 0080 03F00803 		and	r3, r3, #8
 2707              		.loc 1 1727 17
 2708 0084 002B     		cmp	r3, #0
 2709 0086 04D0     		beq	.L124
1728:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
ARM GAS  /tmp/cce3S0ea.s 			page 98


1729:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
 2710              		.loc 1 1730 21
 2711 0088 7B6A     		ldr	r3, [r7, #36]
 2712 008a 43F48053 		orr	r3, r3, #4096
 2713 008e 7B62     		str	r3, [r7, #36]
 2714 0090 02E0     		b	.L121
 2715              	.L124:
1731:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1733:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1734:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1736:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1737:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1738:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1739:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1740:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
 2716              		.loc 1 1740 11
 2717 0092 7868     		ldr	r0, [r7, #4]
 2718 0094 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2719              	.L121:
1741:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1742:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1743:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1744:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1746:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1747:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 2720              		.loc 1 1747 19
 2721 0098 BB69     		ldr	r3, [r7, #24]
 2722 009a 03F48073 		and	r3, r3, #256
 2723              		.loc 1 1747 8
 2724 009e 002B     		cmp	r3, #0
 2725 00a0 24D0     		beq	.L125
1748:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1749:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1750:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 2726              		.loc 1 1750 7
 2727 00a2 7B68     		ldr	r3, [r7, #4]
 2728 00a4 1B68     		ldr	r3, [r3]
 2729 00a6 4FF48072 		mov	r2, #256
 2730 00aa 9A60     		str	r2, [r3, #8]
1751:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 2731              		.loc 1 1752 21
 2732 00ac BB69     		ldr	r3, [r7, #24]
 2733 00ae 03F40073 		and	r3, r3, #512
 2734              		.loc 1 1752 10
 2735 00b2 002B     		cmp	r3, #0
 2736 00b4 03D0     		beq	.L126
1753:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1754:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1756:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1758:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
ARM GAS  /tmp/cce3S0ea.s 			page 99


1759:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1760:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
 2737              		.loc 1 1760 9
 2738 00b6 7868     		ldr	r0, [r7, #4]
 2739 00b8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2740 00bc 16E0     		b	.L125
 2741              	.L126:
1761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1762:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1763:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1764:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
 2742              		.loc 1 1765 23
 2743 00be BB69     		ldr	r3, [r7, #24]
 2744 00c0 03F48063 		and	r3, r3, #1024
 2745              		.loc 1 1765 12
 2746 00c4 002B     		cmp	r3, #0
 2747 00c6 04D0     		beq	.L127
1766:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1767:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1768:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
 2748              		.loc 1 1768 21
 2749 00c8 7B6A     		ldr	r3, [r7, #36]
 2750 00ca 43F40053 		orr	r3, r3, #8192
 2751 00ce 7B62     		str	r3, [r7, #36]
 2752 00d0 0CE0     		b	.L125
 2753              	.L127:
1769:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 2754              		.loc 1 1770 28
 2755 00d2 BB69     		ldr	r3, [r7, #24]
 2756 00d4 03F40063 		and	r3, r3, #2048
 2757              		.loc 1 1770 17
 2758 00d8 002B     		cmp	r3, #0
 2759 00da 04D0     		beq	.L128
1771:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1772:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
 2760              		.loc 1 1773 21
 2761 00dc 7B6A     		ldr	r3, [r7, #36]
 2762 00de 43F48043 		orr	r3, r3, #16384
 2763 00e2 7B62     		str	r3, [r7, #36]
 2764 00e4 02E0     		b	.L125
 2765              	.L128:
1774:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1776:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1779:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1780:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1781:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1782:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1783:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
 2766              		.loc 1 1783 11
 2767 00e6 7868     		ldr	r0, [r7, #4]
 2768 00e8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
ARM GAS  /tmp/cce3S0ea.s 			page 100


 2769              	.L125:
1784:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1785:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1786:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1787:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1789:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1790:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 2770              		.loc 1 1790 19
 2771 00ec BB69     		ldr	r3, [r7, #24]
 2772 00ee 03F48033 		and	r3, r3, #65536
 2773              		.loc 1 1790 8
 2774 00f2 002B     		cmp	r3, #0
 2775 00f4 24D0     		beq	.L120
1791:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1792:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1793:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 2776              		.loc 1 1793 7
 2777 00f6 7B68     		ldr	r3, [r7, #4]
 2778 00f8 1B68     		ldr	r3, [r3]
 2779 00fa 4FF48032 		mov	r2, #65536
 2780 00fe 9A60     		str	r2, [r3, #8]
1794:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 2781              		.loc 1 1795 21
 2782 0100 BB69     		ldr	r3, [r7, #24]
 2783 0102 03F40033 		and	r3, r3, #131072
 2784              		.loc 1 1795 10
 2785 0106 002B     		cmp	r3, #0
 2786 0108 03D0     		beq	.L129
1796:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1797:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1799:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1801:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1802:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1803:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
 2787              		.loc 1 1803 9
 2788 010a 7868     		ldr	r0, [r7, #4]
 2789 010c FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2790 0110 16E0     		b	.L120
 2791              	.L129:
1804:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1805:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1806:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1807:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
 2792              		.loc 1 1808 23
 2793 0112 BB69     		ldr	r3, [r7, #24]
 2794 0114 03F48023 		and	r3, r3, #262144
 2795              		.loc 1 1808 12
 2796 0118 002B     		cmp	r3, #0
 2797 011a 04D0     		beq	.L130
1809:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1810:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1811:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
ARM GAS  /tmp/cce3S0ea.s 			page 101


 2798              		.loc 1 1811 21
 2799 011c 7B6A     		ldr	r3, [r7, #36]
 2800 011e 43F40043 		orr	r3, r3, #32768
 2801 0122 7B62     		str	r3, [r7, #36]
 2802 0124 0CE0     		b	.L120
 2803              	.L130:
1812:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 2804              		.loc 1 1813 28
 2805 0126 BB69     		ldr	r3, [r7, #24]
 2806 0128 03F40023 		and	r3, r3, #524288
 2807              		.loc 1 1813 17
 2808 012c 002B     		cmp	r3, #0
 2809 012e 04D0     		beq	.L131
1814:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1815:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
 2810              		.loc 1 1816 21
 2811 0130 7B6A     		ldr	r3, [r7, #36]
 2812 0132 43F48033 		orr	r3, r3, #65536
 2813 0136 7B62     		str	r3, [r7, #36]
 2814 0138 02E0     		b	.L120
 2815              	.L131:
1817:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1819:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1820:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1822:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1823:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1824:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1825:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1826:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
 2816              		.loc 1 1826 11
 2817 013a 7868     		ldr	r0, [r7, #4]
 2818 013c FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2819              	.L120:
1827:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1828:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1829:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1830:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1832:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1833:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1834:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 2820              		.loc 1 1834 19
 2821 0140 3B6A     		ldr	r3, [r7, #32]
 2822 0142 03F00803 		and	r3, r3, #8
 2823              		.loc 1 1834 6
 2824 0146 002B     		cmp	r3, #0
 2825 0148 0CD0     		beq	.L132
1835:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1836:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 2826              		.loc 1 1836 20
 2827 014a 7B69     		ldr	r3, [r7, #20]
 2828 014c 03F01003 		and	r3, r3, #16
 2829              		.loc 1 1836 8
ARM GAS  /tmp/cce3S0ea.s 			page 102


 2830 0150 002B     		cmp	r3, #0
 2831 0152 07D0     		beq	.L132
1837:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1838:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
 2832              		.loc 1 1839 17
 2833 0154 7B6A     		ldr	r3, [r7, #36]
 2834 0156 43F40073 		orr	r3, r3, #512
 2835 015a 7B62     		str	r3, [r7, #36]
1840:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1842:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 2836              		.loc 1 1842 7
 2837 015c 7B68     		ldr	r3, [r7, #4]
 2838 015e 1B68     		ldr	r3, [r3]
 2839 0160 1022     		movs	r2, #16
 2840 0162 DA60     		str	r2, [r3, #12]
 2841              	.L132:
1843:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1845:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1846:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 2842              		.loc 1 1847 19
 2843 0164 3B6A     		ldr	r3, [r7, #32]
 2844 0166 03F00403 		and	r3, r3, #4
 2845              		.loc 1 1847 6
 2846 016a 002B     		cmp	r3, #0
 2847 016c 0BD0     		beq	.L133
1848:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1849:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 2848              		.loc 1 1849 20
 2849 016e 7B69     		ldr	r3, [r7, #20]
 2850 0170 03F00803 		and	r3, r3, #8
 2851              		.loc 1 1849 8
 2852 0174 002B     		cmp	r3, #0
 2853 0176 06D0     		beq	.L133
1850:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1851:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 2854              		.loc 1 1852 7
 2855 0178 7B68     		ldr	r3, [r7, #4]
 2856 017a 1B68     		ldr	r3, [r3]
 2857 017c 0822     		movs	r2, #8
 2858 017e DA60     		str	r2, [r3, #12]
1853:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1855:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1856:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1858:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1859:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1860:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
 2859              		.loc 1 1860 7
 2860 0180 7868     		ldr	r0, [r7, #4]
 2861 0182 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2862              	.L133:
ARM GAS  /tmp/cce3S0ea.s 			page 103


1861:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1862:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1863:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1864:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1866:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 2863              		.loc 1 1866 19
 2864 0186 3B6A     		ldr	r3, [r7, #32]
 2865 0188 03F00203 		and	r3, r3, #2
 2866              		.loc 1 1866 6
 2867 018c 002B     		cmp	r3, #0
 2868 018e 09D0     		beq	.L134
1867:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1868:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1869:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 2869              		.loc 1 1869 14
 2870 0190 7B68     		ldr	r3, [r7, #4]
 2871 0192 1B68     		ldr	r3, [r3]
 2872              		.loc 1 1869 24
 2873 0194 DB68     		ldr	r3, [r3, #12]
 2874              		.loc 1 1869 31
 2875 0196 03F00303 		and	r3, r3, #3
 2876              		.loc 1 1869 8
 2877 019a 002B     		cmp	r3, #0
 2878 019c 02D0     		beq	.L134
1870:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 message pending Callback */
1872:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1873:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1875:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1876:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1877:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 2879              		.loc 1 1877 7
 2880 019e 7868     		ldr	r0, [r7, #4]
 2881 01a0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2882              	.L134:
1878:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1879:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1880:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1881:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1883:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 2883              		.loc 1 1883 19
 2884 01a4 3B6A     		ldr	r3, [r7, #32]
 2885 01a6 03F04003 		and	r3, r3, #64
 2886              		.loc 1 1883 6
 2887 01aa 002B     		cmp	r3, #0
 2888 01ac 0CD0     		beq	.L135
1884:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1885:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 2889              		.loc 1 1885 20
 2890 01ae 3B69     		ldr	r3, [r7, #16]
 2891 01b0 03F01003 		and	r3, r3, #16
 2892              		.loc 1 1885 8
 2893 01b4 002B     		cmp	r3, #0
 2894 01b6 07D0     		beq	.L135
ARM GAS  /tmp/cce3S0ea.s 			page 104


1886:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1887:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
 2895              		.loc 1 1888 17
 2896 01b8 7B6A     		ldr	r3, [r7, #36]
 2897 01ba 43F48063 		orr	r3, r3, #1024
 2898 01be 7B62     		str	r3, [r7, #36]
1889:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1891:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 2899              		.loc 1 1891 7
 2900 01c0 7B68     		ldr	r3, [r7, #4]
 2901 01c2 1B68     		ldr	r3, [r3]
 2902 01c4 1022     		movs	r2, #16
 2903 01c6 1A61     		str	r2, [r3, #16]
 2904              	.L135:
1892:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1894:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 2905              		.loc 1 1896 19
 2906 01c8 3B6A     		ldr	r3, [r7, #32]
 2907 01ca 03F02003 		and	r3, r3, #32
 2908              		.loc 1 1896 6
 2909 01ce 002B     		cmp	r3, #0
 2910 01d0 0BD0     		beq	.L136
1897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1898:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 2911              		.loc 1 1898 20
 2912 01d2 3B69     		ldr	r3, [r7, #16]
 2913 01d4 03F00803 		and	r3, r3, #8
 2914              		.loc 1 1898 8
 2915 01d8 002B     		cmp	r3, #0
 2916 01da 06D0     		beq	.L136
1899:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1900:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 2917              		.loc 1 1901 7
 2918 01dc 7B68     		ldr	r3, [r7, #4]
 2919 01de 1B68     		ldr	r3, [r3]
 2920 01e0 0822     		movs	r2, #8
 2921 01e2 1A61     		str	r2, [r3, #16]
1902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1904:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1905:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1907:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1908:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1909:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
 2922              		.loc 1 1909 7
 2923 01e4 7868     		ldr	r0, [r7, #4]
 2924 01e6 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2925              	.L136:
1910:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1911:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/cce3S0ea.s 			page 105


1912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1915:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 2926              		.loc 1 1915 19
 2927 01ea 3B6A     		ldr	r3, [r7, #32]
 2928 01ec 03F01003 		and	r3, r3, #16
 2929              		.loc 1 1915 6
 2930 01f0 002B     		cmp	r3, #0
 2931 01f2 09D0     		beq	.L137
1916:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 2932              		.loc 1 1918 14
 2933 01f4 7B68     		ldr	r3, [r7, #4]
 2934 01f6 1B68     		ldr	r3, [r3]
 2935              		.loc 1 1918 24
 2936 01f8 1B69     		ldr	r3, [r3, #16]
 2937              		.loc 1 1918 31
 2938 01fa 03F00303 		and	r3, r3, #3
 2939              		.loc 1 1918 8
 2940 01fe 002B     		cmp	r3, #0
 2941 0200 02D0     		beq	.L137
1919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 message pending Callback */
1921:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1922:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1924:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1925:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1926:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 2942              		.loc 1 1926 7
 2943 0202 7868     		ldr	r0, [r7, #4]
 2944 0204 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2945              	.L137:
1927:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1928:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1929:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1930:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1932:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 2946              		.loc 1 1932 19
 2947 0208 3B6A     		ldr	r3, [r7, #32]
 2948 020a 03F40033 		and	r3, r3, #131072
 2949              		.loc 1 1932 6
 2950 020e 002B     		cmp	r3, #0
 2951 0210 0BD0     		beq	.L138
1933:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1934:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
 2952              		.loc 1 1934 19
 2953 0212 FB69     		ldr	r3, [r7, #28]
 2954 0214 03F01003 		and	r3, r3, #16
 2955              		.loc 1 1934 8
 2956 0218 002B     		cmp	r3, #0
 2957 021a 06D0     		beq	.L138
1935:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1936:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
ARM GAS  /tmp/cce3S0ea.s 			page 106


1937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 2958              		.loc 1 1937 7
 2959 021c 7B68     		ldr	r3, [r7, #4]
 2960 021e 1B68     		ldr	r3, [r3]
 2961 0220 1022     		movs	r2, #16
 2962 0222 5A60     		str	r2, [r3, #4]
1938:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep Callback */
1940:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->SleepCallback(hcan);
1943:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1944:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1945:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
 2963              		.loc 1 1945 7
 2964 0224 7868     		ldr	r0, [r7, #4]
 2965 0226 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2966              	.L138:
1946:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1947:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1948:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1949:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
 2967              		.loc 1 1951 19
 2968 022a 3B6A     		ldr	r3, [r7, #32]
 2969 022c 03F48033 		and	r3, r3, #65536
 2970              		.loc 1 1951 6
 2971 0230 002B     		cmp	r3, #0
 2972 0232 0BD0     		beq	.L139
1952:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1953:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
 2973              		.loc 1 1953 19
 2974 0234 FB69     		ldr	r3, [r7, #28]
 2975 0236 03F00803 		and	r3, r3, #8
 2976              		.loc 1 1953 8
 2977 023a 002B     		cmp	r3, #0
 2978 023c 06D0     		beq	.L139
1954:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1955:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear WakeUp Flag */
1956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 2979              		.loc 1 1956 7
 2980 023e 7B68     		ldr	r3, [r7, #4]
 2981 0240 1B68     		ldr	r3, [r3]
 2982 0242 0822     		movs	r2, #8
 2983 0244 5A60     		str	r2, [r3, #4]
1957:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* WakeUp Callback */
1959:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1960:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1962:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1963:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1964:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 2984              		.loc 1 1964 7
 2985 0246 7868     		ldr	r0, [r7, #4]
 2986 0248 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
ARM GAS  /tmp/cce3S0ea.s 			page 107


 2987              	.L139:
1965:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1966:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1967:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1968:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1970:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
 2988              		.loc 1 1970 19
 2989 024c 3B6A     		ldr	r3, [r7, #32]
 2990 024e 03F40043 		and	r3, r3, #32768
 2991              		.loc 1 1970 6
 2992 0252 002B     		cmp	r3, #0
 2993 0254 7BD0     		beq	.L140
1971:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1972:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
 2994              		.loc 1 1972 19
 2995 0256 FB69     		ldr	r3, [r7, #28]
 2996 0258 03F00403 		and	r3, r3, #4
 2997              		.loc 1 1972 8
 2998 025c 002B     		cmp	r3, #0
 2999 025e 72D0     		beq	.L141
1973:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1974:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Warning Flag */
1975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 3000              		.loc 1 1975 24
 3001 0260 3B6A     		ldr	r3, [r7, #32]
 3002 0262 03F48073 		and	r3, r3, #256
 3003              		.loc 1 1975 10
 3004 0266 002B     		cmp	r3, #0
 3005 0268 08D0     		beq	.L142
1976:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 3006              		.loc 1 1976 22 discriminator 1
 3007 026a FB68     		ldr	r3, [r7, #12]
 3008 026c 03F00103 		and	r3, r3, #1
1975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 3009              		.loc 1 1975 55 discriminator 1
 3010 0270 002B     		cmp	r3, #0
 3011 0272 03D0     		beq	.L142
1977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1978:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1979:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
 3012              		.loc 1 1979 19
 3013 0274 7B6A     		ldr	r3, [r7, #36]
 3014 0276 43F00103 		orr	r3, r3, #1
 3015 027a 7B62     		str	r3, [r7, #36]
 3016              	.L142:
1980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1981:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1982:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1983:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Passive Flag */
1985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 3017              		.loc 1 1985 24
 3018 027c 3B6A     		ldr	r3, [r7, #32]
 3019 027e 03F40073 		and	r3, r3, #512
 3020              		.loc 1 1985 10
 3021 0282 002B     		cmp	r3, #0
ARM GAS  /tmp/cce3S0ea.s 			page 108


 3022 0284 08D0     		beq	.L143
1986:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 3023              		.loc 1 1986 22 discriminator 1
 3024 0286 FB68     		ldr	r3, [r7, #12]
 3025 0288 03F00203 		and	r3, r3, #2
1985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 3026              		.loc 1 1985 55 discriminator 1
 3027 028c 002B     		cmp	r3, #0
 3028 028e 03D0     		beq	.L143
1987:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1988:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1989:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
 3029              		.loc 1 1989 19
 3030 0290 7B6A     		ldr	r3, [r7, #36]
 3031 0292 43F00203 		orr	r3, r3, #2
 3032 0296 7B62     		str	r3, [r7, #36]
 3033              	.L143:
1990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1991:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1992:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1993:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Bus-off Flag */
1995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 3034              		.loc 1 1995 24
 3035 0298 3B6A     		ldr	r3, [r7, #32]
 3036 029a 03F48063 		and	r3, r3, #1024
 3037              		.loc 1 1995 10
 3038 029e 002B     		cmp	r3, #0
 3039 02a0 08D0     		beq	.L144
1996:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 3040              		.loc 1 1996 22 discriminator 1
 3041 02a2 FB68     		ldr	r3, [r7, #12]
 3042 02a4 03F00403 		and	r3, r3, #4
1995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 3043              		.loc 1 1995 48 discriminator 1
 3044 02a8 002B     		cmp	r3, #0
 3045 02aa 03D0     		beq	.L144
1997:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1998:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1999:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
 3046              		.loc 1 1999 19
 3047 02ac 7B6A     		ldr	r3, [r7, #36]
 3048 02ae 43F00403 		orr	r3, r3, #4
 3049 02b2 7B62     		str	r3, [r7, #36]
 3050              	.L144:
2000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2001:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2002:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2003:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Last Error Code Flag */
2005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 3051              		.loc 1 2005 24
 3052 02b4 3B6A     		ldr	r3, [r7, #32]
 3053 02b6 03F40063 		and	r3, r3, #2048
 3054              		.loc 1 2005 10
 3055 02ba 002B     		cmp	r3, #0
 3056 02bc 43D0     		beq	.L141
ARM GAS  /tmp/cce3S0ea.s 			page 109


2006:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 3057              		.loc 1 2006 22 discriminator 1
 3058 02be FB68     		ldr	r3, [r7, #12]
 3059 02c0 03F07003 		and	r3, r3, #112
2005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 3060              		.loc 1 2005 57 discriminator 1
 3061 02c4 002B     		cmp	r3, #0
 3062 02c6 3ED0     		beq	.L141
2007:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
2008:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
 3063              		.loc 1 2008 26
 3064 02c8 FB68     		ldr	r3, [r7, #12]
 3065 02ca 03F07003 		and	r3, r3, #112
 3066              		.loc 1 2008 9
 3067 02ce 602B     		cmp	r3, #96
 3068 02d0 2BD0     		beq	.L145
 3069 02d2 602B     		cmp	r3, #96
 3070 02d4 2ED8     		bhi	.L154
 3071 02d6 502B     		cmp	r3, #80
 3072 02d8 22D0     		beq	.L147
 3073 02da 502B     		cmp	r3, #80
 3074 02dc 2AD8     		bhi	.L154
 3075 02de 402B     		cmp	r3, #64
 3076 02e0 19D0     		beq	.L148
 3077 02e2 402B     		cmp	r3, #64
 3078 02e4 26D8     		bhi	.L154
 3079 02e6 302B     		cmp	r3, #48
 3080 02e8 10D0     		beq	.L149
 3081 02ea 302B     		cmp	r3, #48
 3082 02ec 22D8     		bhi	.L154
 3083 02ee 102B     		cmp	r3, #16
 3084 02f0 02D0     		beq	.L150
 3085 02f2 202B     		cmp	r3, #32
 3086 02f4 05D0     		beq	.L151
2009:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
2010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2011:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2014:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2015:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Form error */
2016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2019:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2023:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2027:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2031:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to CRC error */
ARM GAS  /tmp/cce3S0ea.s 			page 110


2032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           default:
2035:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3087              		.loc 1 2035 13
 3088 02f6 1DE0     		b	.L154
 3089              	.L150:
2012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3090              		.loc 1 2012 23
 3091 02f8 7B6A     		ldr	r3, [r7, #36]
 3092 02fa 43F00803 		orr	r3, r3, #8
 3093 02fe 7B62     		str	r3, [r7, #36]
2013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 3094              		.loc 1 2013 13
 3095 0300 19E0     		b	.L152
 3096              	.L151:
2016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3097              		.loc 1 2016 23
 3098 0302 7B6A     		ldr	r3, [r7, #36]
 3099 0304 43F01003 		orr	r3, r3, #16
 3100 0308 7B62     		str	r3, [r7, #36]
2017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 3101              		.loc 1 2017 13
 3102 030a 14E0     		b	.L152
 3103              	.L149:
2020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3104              		.loc 1 2020 23
 3105 030c 7B6A     		ldr	r3, [r7, #36]
 3106 030e 43F02003 		orr	r3, r3, #32
 3107 0312 7B62     		str	r3, [r7, #36]
2021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 3108              		.loc 1 2021 13
 3109 0314 0FE0     		b	.L152
 3110              	.L148:
2024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3111              		.loc 1 2024 23
 3112 0316 7B6A     		ldr	r3, [r7, #36]
 3113 0318 43F04003 		orr	r3, r3, #64
 3114 031c 7B62     		str	r3, [r7, #36]
2025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 3115              		.loc 1 2025 13
 3116 031e 0AE0     		b	.L152
 3117              	.L147:
2028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3118              		.loc 1 2028 23
 3119 0320 7B6A     		ldr	r3, [r7, #36]
 3120 0322 43F08003 		orr	r3, r3, #128
 3121 0326 7B62     		str	r3, [r7, #36]
2029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 3122              		.loc 1 2029 13
 3123 0328 05E0     		b	.L152
 3124              	.L145:
2032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 3125              		.loc 1 2032 23
 3126 032a 7B6A     		ldr	r3, [r7, #36]
 3127 032c 43F48073 		orr	r3, r3, #256
 3128 0330 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cce3S0ea.s 			page 111


2033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           default:
 3129              		.loc 1 2033 13
 3130 0332 00E0     		b	.L152
 3131              	.L154:
 3132              		.loc 1 2035 13
 3133 0334 00BF     		nop
 3134              	.L152:
2036:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
2037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2038:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Clear Last error code Flag */
2039:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 3135              		.loc 1 2039 9
 3136 0336 7B68     		ldr	r3, [r7, #4]
 3137 0338 1B68     		ldr	r3, [r3]
 3138 033a 9A69     		ldr	r2, [r3, #24]
 3139 033c 7B68     		ldr	r3, [r7, #4]
 3140 033e 1B68     		ldr	r3, [r3]
 3141 0340 22F07002 		bic	r2, r2, #112
 3142 0344 9A61     		str	r2, [r3, #24]
 3143              	.L141:
2040:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2041:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2042:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2043:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Clear ERRI Flag */
2044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 3144              		.loc 1 2044 5
 3145 0346 7B68     		ldr	r3, [r7, #4]
 3146 0348 1B68     		ldr	r3, [r3]
 3147 034a 0422     		movs	r2, #4
 3148 034c 5A60     		str	r2, [r3, #4]
 3149              	.L140:
2045:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2046:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2047:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2048:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
 3150              		.loc 1 2048 6
 3151 034e 7B6A     		ldr	r3, [r7, #36]
 3152 0350 002B     		cmp	r3, #0
 3153 0352 08D0     		beq	.L155
2049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2050:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code in handle */
2051:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
 3154              		.loc 1 2051 21
 3155 0354 7B68     		ldr	r3, [r7, #4]
 3156 0356 5A6A     		ldr	r2, [r3, #36]
 3157 0358 7B6A     		ldr	r3, [r7, #36]
 3158 035a 1A43     		orrs	r2, r2, r3
 3159 035c 7B68     		ldr	r3, [r7, #4]
 3160 035e 5A62     		str	r2, [r3, #36]
2052:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call Error callback function */
2054:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2055:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call registered callback*/
2056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2057:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
2058:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call weak (surcharged) callback */
2059:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
ARM GAS  /tmp/cce3S0ea.s 			page 112


 3161              		.loc 1 2059 5
 3162 0360 7868     		ldr	r0, [r7, #4]
 3163 0362 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 3164              	.L155:
2060:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2061:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2062:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3165              		.loc 1 2062 1
 3166 0366 00BF     		nop
 3167 0368 2837     		adds	r7, r7, #40
 3168              	.LCFI113:
 3169              		.cfi_def_cfa_offset 8
 3170 036a BD46     		mov	sp, r7
 3171              	.LCFI114:
 3172              		.cfi_def_cfa_register 13
 3173              		@ sp needed
 3174 036c 80BD     		pop	{r7, pc}
 3175              		.cfi_endproc
 3176              	.LFE151:
 3178              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 3179              		.align	1
 3180              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 3181              		.syntax unified
 3182              		.thumb
 3183              		.thumb_func
 3185              	HAL_CAN_TxMailbox0CompleteCallback:
 3186              	.LFB152:
2063:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2065:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2066:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2067:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2068:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief   CAN Callback functions
2070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
2071:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2072:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2073:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                           ##### Callback functions #####
2074:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2075:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2076:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides the following callback functions:
2077:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2078:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2079:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2080:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2081:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2082:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2083:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2084:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2085:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2086:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2087:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2088:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2089:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2090:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2091:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
2092:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
ARM GAS  /tmp/cce3S0ea.s 			page 113


2093:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2094:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2095:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2096:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2097:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2098:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2099:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3187              		.loc 1 2102 1
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 8
 3190              		@ frame_needed = 1, uses_anonymous_args = 0
 3191              		@ link register save eliminated.
 3192 0000 80B4     		push	{r7}
 3193              	.LCFI115:
 3194              		.cfi_def_cfa_offset 4
 3195              		.cfi_offset 7, -4
 3196 0002 83B0     		sub	sp, sp, #12
 3197              	.LCFI116:
 3198              		.cfi_def_cfa_offset 16
 3199 0004 00AF     		add	r7, sp, #0
 3200              	.LCFI117:
 3201              		.cfi_def_cfa_register 7
 3202 0006 7860     		str	r0, [r7, #4]
2103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3203              		.loc 1 2110 1
 3204 0008 00BF     		nop
 3205 000a 0C37     		adds	r7, r7, #12
 3206              	.LCFI118:
 3207              		.cfi_def_cfa_offset 4
 3208 000c BD46     		mov	sp, r7
 3209              	.LCFI119:
 3210              		.cfi_def_cfa_register 13
 3211              		@ sp needed
 3212 000e 5DF8047B 		ldr	r7, [sp], #4
 3213              	.LCFI120:
 3214              		.cfi_restore 7
 3215              		.cfi_def_cfa_offset 0
 3216 0012 7047     		bx	lr
 3217              		.cfi_endproc
 3218              	.LFE152:
 3220              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 3221              		.align	1
 3222              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 3223              		.syntax unified
 3224              		.thumb
 3225              		.thumb_func
 3227              	HAL_CAN_TxMailbox1CompleteCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 114


 3228              	.LFB153:
2111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3229              		.loc 1 2119 1
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 8
 3232              		@ frame_needed = 1, uses_anonymous_args = 0
 3233              		@ link register save eliminated.
 3234 0000 80B4     		push	{r7}
 3235              	.LCFI121:
 3236              		.cfi_def_cfa_offset 4
 3237              		.cfi_offset 7, -4
 3238 0002 83B0     		sub	sp, sp, #12
 3239              	.LCFI122:
 3240              		.cfi_def_cfa_offset 16
 3241 0004 00AF     		add	r7, sp, #0
 3242              	.LCFI123:
 3243              		.cfi_def_cfa_register 7
 3244 0006 7860     		str	r0, [r7, #4]
2120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3245              		.loc 1 2127 1
 3246 0008 00BF     		nop
 3247 000a 0C37     		adds	r7, r7, #12
 3248              	.LCFI124:
 3249              		.cfi_def_cfa_offset 4
 3250 000c BD46     		mov	sp, r7
 3251              	.LCFI125:
 3252              		.cfi_def_cfa_register 13
 3253              		@ sp needed
 3254 000e 5DF8047B 		ldr	r7, [sp], #4
 3255              	.LCFI126:
 3256              		.cfi_restore 7
 3257              		.cfi_def_cfa_offset 0
 3258 0012 7047     		bx	lr
 3259              		.cfi_endproc
 3260              	.LFE153:
 3262              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 3263              		.align	1
 3264              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 3265              		.syntax unified
 3266              		.thumb
 3267              		.thumb_func
 3269              	HAL_CAN_TxMailbox2CompleteCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 115


 3270              	.LFB154:
2128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3271              		.loc 1 2136 1
 3272              		.cfi_startproc
 3273              		@ args = 0, pretend = 0, frame = 8
 3274              		@ frame_needed = 1, uses_anonymous_args = 0
 3275              		@ link register save eliminated.
 3276 0000 80B4     		push	{r7}
 3277              	.LCFI127:
 3278              		.cfi_def_cfa_offset 4
 3279              		.cfi_offset 7, -4
 3280 0002 83B0     		sub	sp, sp, #12
 3281              	.LCFI128:
 3282              		.cfi_def_cfa_offset 16
 3283 0004 00AF     		add	r7, sp, #0
 3284              	.LCFI129:
 3285              		.cfi_def_cfa_register 7
 3286 0006 7860     		str	r0, [r7, #4]
2137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3287              		.loc 1 2144 1
 3288 0008 00BF     		nop
 3289 000a 0C37     		adds	r7, r7, #12
 3290              	.LCFI130:
 3291              		.cfi_def_cfa_offset 4
 3292 000c BD46     		mov	sp, r7
 3293              	.LCFI131:
 3294              		.cfi_def_cfa_register 13
 3295              		@ sp needed
 3296 000e 5DF8047B 		ldr	r7, [sp], #4
 3297              	.LCFI132:
 3298              		.cfi_restore 7
 3299              		.cfi_def_cfa_offset 0
 3300 0012 7047     		bx	lr
 3301              		.cfi_endproc
 3302              	.LFE154:
 3304              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 3305              		.align	1
 3306              		.weak	HAL_CAN_TxMailbox0AbortCallback
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
 3311              	HAL_CAN_TxMailbox0AbortCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 116


 3312              	.LFB155:
2145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3313              		.loc 1 2153 1
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 8
 3316              		@ frame_needed = 1, uses_anonymous_args = 0
 3317              		@ link register save eliminated.
 3318 0000 80B4     		push	{r7}
 3319              	.LCFI133:
 3320              		.cfi_def_cfa_offset 4
 3321              		.cfi_offset 7, -4
 3322 0002 83B0     		sub	sp, sp, #12
 3323              	.LCFI134:
 3324              		.cfi_def_cfa_offset 16
 3325 0004 00AF     		add	r7, sp, #0
 3326              	.LCFI135:
 3327              		.cfi_def_cfa_register 7
 3328 0006 7860     		str	r0, [r7, #4]
2154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3329              		.loc 1 2161 1
 3330 0008 00BF     		nop
 3331 000a 0C37     		adds	r7, r7, #12
 3332              	.LCFI136:
 3333              		.cfi_def_cfa_offset 4
 3334 000c BD46     		mov	sp, r7
 3335              	.LCFI137:
 3336              		.cfi_def_cfa_register 13
 3337              		@ sp needed
 3338 000e 5DF8047B 		ldr	r7, [sp], #4
 3339              	.LCFI138:
 3340              		.cfi_restore 7
 3341              		.cfi_def_cfa_offset 0
 3342 0012 7047     		bx	lr
 3343              		.cfi_endproc
 3344              	.LFE155:
 3346              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 3347              		.align	1
 3348              		.weak	HAL_CAN_TxMailbox1AbortCallback
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3353              	HAL_CAN_TxMailbox1AbortCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 117


 3354              	.LFB156:
2162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3355              		.loc 1 2170 1
 3356              		.cfi_startproc
 3357              		@ args = 0, pretend = 0, frame = 8
 3358              		@ frame_needed = 1, uses_anonymous_args = 0
 3359              		@ link register save eliminated.
 3360 0000 80B4     		push	{r7}
 3361              	.LCFI139:
 3362              		.cfi_def_cfa_offset 4
 3363              		.cfi_offset 7, -4
 3364 0002 83B0     		sub	sp, sp, #12
 3365              	.LCFI140:
 3366              		.cfi_def_cfa_offset 16
 3367 0004 00AF     		add	r7, sp, #0
 3368              	.LCFI141:
 3369              		.cfi_def_cfa_register 7
 3370 0006 7860     		str	r0, [r7, #4]
2171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3371              		.loc 1 2178 1
 3372 0008 00BF     		nop
 3373 000a 0C37     		adds	r7, r7, #12
 3374              	.LCFI142:
 3375              		.cfi_def_cfa_offset 4
 3376 000c BD46     		mov	sp, r7
 3377              	.LCFI143:
 3378              		.cfi_def_cfa_register 13
 3379              		@ sp needed
 3380 000e 5DF8047B 		ldr	r7, [sp], #4
 3381              	.LCFI144:
 3382              		.cfi_restore 7
 3383              		.cfi_def_cfa_offset 0
 3384 0012 7047     		bx	lr
 3385              		.cfi_endproc
 3386              	.LFE156:
 3388              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 3389              		.align	1
 3390              		.weak	HAL_CAN_TxMailbox2AbortCallback
 3391              		.syntax unified
 3392              		.thumb
 3393              		.thumb_func
 3395              	HAL_CAN_TxMailbox2AbortCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 118


 3396              	.LFB157:
2179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3397              		.loc 1 2187 1
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 8
 3400              		@ frame_needed = 1, uses_anonymous_args = 0
 3401              		@ link register save eliminated.
 3402 0000 80B4     		push	{r7}
 3403              	.LCFI145:
 3404              		.cfi_def_cfa_offset 4
 3405              		.cfi_offset 7, -4
 3406 0002 83B0     		sub	sp, sp, #12
 3407              	.LCFI146:
 3408              		.cfi_def_cfa_offset 16
 3409 0004 00AF     		add	r7, sp, #0
 3410              	.LCFI147:
 3411              		.cfi_def_cfa_register 7
 3412 0006 7860     		str	r0, [r7, #4]
2188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3413              		.loc 1 2195 1
 3414 0008 00BF     		nop
 3415 000a 0C37     		adds	r7, r7, #12
 3416              	.LCFI148:
 3417              		.cfi_def_cfa_offset 4
 3418 000c BD46     		mov	sp, r7
 3419              	.LCFI149:
 3420              		.cfi_def_cfa_register 13
 3421              		@ sp needed
 3422 000e 5DF8047B 		ldr	r7, [sp], #4
 3423              	.LCFI150:
 3424              		.cfi_restore 7
 3425              		.cfi_def_cfa_offset 0
 3426 0012 7047     		bx	lr
 3427              		.cfi_endproc
 3428              	.LFE157:
 3430              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 3431              		.align	1
 3432              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 3433              		.syntax unified
 3434              		.thumb
 3435              		.thumb_func
 3437              	HAL_CAN_RxFifo0MsgPendingCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 119


 3438              	.LFB158:
2196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3439              		.loc 1 2204 1
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 8
 3442              		@ frame_needed = 1, uses_anonymous_args = 0
 3443              		@ link register save eliminated.
 3444 0000 80B4     		push	{r7}
 3445              	.LCFI151:
 3446              		.cfi_def_cfa_offset 4
 3447              		.cfi_offset 7, -4
 3448 0002 83B0     		sub	sp, sp, #12
 3449              	.LCFI152:
 3450              		.cfi_def_cfa_offset 16
 3451 0004 00AF     		add	r7, sp, #0
 3452              	.LCFI153:
 3453              		.cfi_def_cfa_register 7
 3454 0006 7860     		str	r0, [r7, #4]
2205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3455              		.loc 1 2212 1
 3456 0008 00BF     		nop
 3457 000a 0C37     		adds	r7, r7, #12
 3458              	.LCFI154:
 3459              		.cfi_def_cfa_offset 4
 3460 000c BD46     		mov	sp, r7
 3461              	.LCFI155:
 3462              		.cfi_def_cfa_register 13
 3463              		@ sp needed
 3464 000e 5DF8047B 		ldr	r7, [sp], #4
 3465              	.LCFI156:
 3466              		.cfi_restore 7
 3467              		.cfi_def_cfa_offset 0
 3468 0012 7047     		bx	lr
 3469              		.cfi_endproc
 3470              	.LFE158:
 3472              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 3473              		.align	1
 3474              		.weak	HAL_CAN_RxFifo0FullCallback
 3475              		.syntax unified
 3476              		.thumb
 3477              		.thumb_func
 3479              	HAL_CAN_RxFifo0FullCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 120


 3480              	.LFB159:
2213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3481              		.loc 1 2221 1
 3482              		.cfi_startproc
 3483              		@ args = 0, pretend = 0, frame = 8
 3484              		@ frame_needed = 1, uses_anonymous_args = 0
 3485              		@ link register save eliminated.
 3486 0000 80B4     		push	{r7}
 3487              	.LCFI157:
 3488              		.cfi_def_cfa_offset 4
 3489              		.cfi_offset 7, -4
 3490 0002 83B0     		sub	sp, sp, #12
 3491              	.LCFI158:
 3492              		.cfi_def_cfa_offset 16
 3493 0004 00AF     		add	r7, sp, #0
 3494              	.LCFI159:
 3495              		.cfi_def_cfa_register 7
 3496 0006 7860     		str	r0, [r7, #4]
2222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3497              		.loc 1 2229 1
 3498 0008 00BF     		nop
 3499 000a 0C37     		adds	r7, r7, #12
 3500              	.LCFI160:
 3501              		.cfi_def_cfa_offset 4
 3502 000c BD46     		mov	sp, r7
 3503              	.LCFI161:
 3504              		.cfi_def_cfa_register 13
 3505              		@ sp needed
 3506 000e 5DF8047B 		ldr	r7, [sp], #4
 3507              	.LCFI162:
 3508              		.cfi_restore 7
 3509              		.cfi_def_cfa_offset 0
 3510 0012 7047     		bx	lr
 3511              		.cfi_endproc
 3512              	.LFE159:
 3514              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 3515              		.align	1
 3516              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 3517              		.syntax unified
 3518              		.thumb
 3519              		.thumb_func
 3521              	HAL_CAN_RxFifo1MsgPendingCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 121


 3522              	.LFB160:
2230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3523              		.loc 1 2238 1
 3524              		.cfi_startproc
 3525              		@ args = 0, pretend = 0, frame = 8
 3526              		@ frame_needed = 1, uses_anonymous_args = 0
 3527              		@ link register save eliminated.
 3528 0000 80B4     		push	{r7}
 3529              	.LCFI163:
 3530              		.cfi_def_cfa_offset 4
 3531              		.cfi_offset 7, -4
 3532 0002 83B0     		sub	sp, sp, #12
 3533              	.LCFI164:
 3534              		.cfi_def_cfa_offset 16
 3535 0004 00AF     		add	r7, sp, #0
 3536              	.LCFI165:
 3537              		.cfi_def_cfa_register 7
 3538 0006 7860     		str	r0, [r7, #4]
2239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3539              		.loc 1 2246 1
 3540 0008 00BF     		nop
 3541 000a 0C37     		adds	r7, r7, #12
 3542              	.LCFI166:
 3543              		.cfi_def_cfa_offset 4
 3544 000c BD46     		mov	sp, r7
 3545              	.LCFI167:
 3546              		.cfi_def_cfa_register 13
 3547              		@ sp needed
 3548 000e 5DF8047B 		ldr	r7, [sp], #4
 3549              	.LCFI168:
 3550              		.cfi_restore 7
 3551              		.cfi_def_cfa_offset 0
 3552 0012 7047     		bx	lr
 3553              		.cfi_endproc
 3554              	.LFE160:
 3556              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 3557              		.align	1
 3558              		.weak	HAL_CAN_RxFifo1FullCallback
 3559              		.syntax unified
 3560              		.thumb
 3561              		.thumb_func
 3563              	HAL_CAN_RxFifo1FullCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 122


 3564              	.LFB161:
2247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3565              		.loc 1 2255 1
 3566              		.cfi_startproc
 3567              		@ args = 0, pretend = 0, frame = 8
 3568              		@ frame_needed = 1, uses_anonymous_args = 0
 3569              		@ link register save eliminated.
 3570 0000 80B4     		push	{r7}
 3571              	.LCFI169:
 3572              		.cfi_def_cfa_offset 4
 3573              		.cfi_offset 7, -4
 3574 0002 83B0     		sub	sp, sp, #12
 3575              	.LCFI170:
 3576              		.cfi_def_cfa_offset 16
 3577 0004 00AF     		add	r7, sp, #0
 3578              	.LCFI171:
 3579              		.cfi_def_cfa_register 7
 3580 0006 7860     		str	r0, [r7, #4]
2256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3581              		.loc 1 2263 1
 3582 0008 00BF     		nop
 3583 000a 0C37     		adds	r7, r7, #12
 3584              	.LCFI172:
 3585              		.cfi_def_cfa_offset 4
 3586 000c BD46     		mov	sp, r7
 3587              	.LCFI173:
 3588              		.cfi_def_cfa_register 13
 3589              		@ sp needed
 3590 000e 5DF8047B 		ldr	r7, [sp], #4
 3591              	.LCFI174:
 3592              		.cfi_restore 7
 3593              		.cfi_def_cfa_offset 0
 3594 0012 7047     		bx	lr
 3595              		.cfi_endproc
 3596              	.LFE161:
 3598              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 3599              		.align	1
 3600              		.weak	HAL_CAN_SleepCallback
 3601              		.syntax unified
 3602              		.thumb
 3603              		.thumb_func
 3605              	HAL_CAN_SleepCallback:
ARM GAS  /tmp/cce3S0ea.s 			page 123


 3606              	.LFB162:
2264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Sleep callback.
2267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3607              		.loc 1 2272 1
 3608              		.cfi_startproc
 3609              		@ args = 0, pretend = 0, frame = 8
 3610              		@ frame_needed = 1, uses_anonymous_args = 0
 3611              		@ link register save eliminated.
 3612 0000 80B4     		push	{r7}
 3613              	.LCFI175:
 3614              		.cfi_def_cfa_offset 4
 3615              		.cfi_offset 7, -4
 3616 0002 83B0     		sub	sp, sp, #12
 3617              	.LCFI176:
 3618              		.cfi_def_cfa_offset 16
 3619 0004 00AF     		add	r7, sp, #0
 3620              	.LCFI177:
 3621              		.cfi_def_cfa_register 7
 3622 0006 7860     		str	r0, [r7, #4]
2273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3623              		.loc 1 2279 1
 3624 0008 00BF     		nop
 3625 000a 0C37     		adds	r7, r7, #12
 3626              	.LCFI178:
 3627              		.cfi_def_cfa_offset 4
 3628 000c BD46     		mov	sp, r7
 3629              	.LCFI179:
 3630              		.cfi_def_cfa_register 13
 3631              		@ sp needed
 3632 000e 5DF8047B 		ldr	r7, [sp], #4
 3633              	.LCFI180:
 3634              		.cfi_restore 7
 3635              		.cfi_def_cfa_offset 0
 3636 0012 7047     		bx	lr
 3637              		.cfi_endproc
 3638              	.LFE162:
 3640              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 3641              		.align	1
 3642              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 3643              		.syntax unified
 3644              		.thumb
 3645              		.thumb_func
 3647              	HAL_CAN_WakeUpFromRxMsgCallback:
 3648              	.LFB163:
ARM GAS  /tmp/cce3S0ea.s 			page 124


2280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3649              		.loc 1 2288 1
 3650              		.cfi_startproc
 3651              		@ args = 0, pretend = 0, frame = 8
 3652              		@ frame_needed = 1, uses_anonymous_args = 0
 3653              		@ link register save eliminated.
 3654 0000 80B4     		push	{r7}
 3655              	.LCFI181:
 3656              		.cfi_def_cfa_offset 4
 3657              		.cfi_offset 7, -4
 3658 0002 83B0     		sub	sp, sp, #12
 3659              	.LCFI182:
 3660              		.cfi_def_cfa_offset 16
 3661 0004 00AF     		add	r7, sp, #0
 3662              	.LCFI183:
 3663              		.cfi_def_cfa_register 7
 3664 0006 7860     		str	r0, [r7, #4]
2289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3665              		.loc 1 2296 1
 3666 0008 00BF     		nop
 3667 000a 0C37     		adds	r7, r7, #12
 3668              	.LCFI184:
 3669              		.cfi_def_cfa_offset 4
 3670 000c BD46     		mov	sp, r7
 3671              	.LCFI185:
 3672              		.cfi_def_cfa_register 13
 3673              		@ sp needed
 3674 000e 5DF8047B 		ldr	r7, [sp], #4
 3675              	.LCFI186:
 3676              		.cfi_restore 7
 3677              		.cfi_def_cfa_offset 0
 3678 0012 7047     		bx	lr
 3679              		.cfi_endproc
 3680              	.LFE163:
 3682              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 3683              		.align	1
 3684              		.weak	HAL_CAN_ErrorCallback
 3685              		.syntax unified
 3686              		.thumb
 3687              		.thumb_func
 3689              	HAL_CAN_ErrorCallback:
 3690              	.LFB164:
ARM GAS  /tmp/cce3S0ea.s 			page 125


2297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Error CAN callback.
2300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3691              		.loc 1 2305 1
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 8
 3694              		@ frame_needed = 1, uses_anonymous_args = 0
 3695              		@ link register save eliminated.
 3696 0000 80B4     		push	{r7}
 3697              	.LCFI187:
 3698              		.cfi_def_cfa_offset 4
 3699              		.cfi_offset 7, -4
 3700 0002 83B0     		sub	sp, sp, #12
 3701              	.LCFI188:
 3702              		.cfi_def_cfa_offset 16
 3703 0004 00AF     		add	r7, sp, #0
 3704              	.LCFI189:
 3705              		.cfi_def_cfa_register 7
 3706 0006 7860     		str	r0, [r7, #4]
2306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3707              		.loc 1 2312 1
 3708 0008 00BF     		nop
 3709 000a 0C37     		adds	r7, r7, #12
 3710              	.LCFI190:
 3711              		.cfi_def_cfa_offset 4
 3712 000c BD46     		mov	sp, r7
 3713              	.LCFI191:
 3714              		.cfi_def_cfa_register 13
 3715              		@ sp needed
 3716 000e 5DF8047B 		ldr	r7, [sp], #4
 3717              	.LCFI192:
 3718              		.cfi_restore 7
 3719              		.cfi_def_cfa_offset 0
 3720 0012 7047     		bx	lr
 3721              		.cfi_endproc
 3722              	.LFE164:
 3724              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 3725              		.align	1
 3726              		.global	HAL_CAN_GetState
 3727              		.syntax unified
 3728              		.thumb
 3729              		.thumb_func
 3731              	HAL_CAN_GetState:
 3732              	.LFB165:
2313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cce3S0ea.s 			page 126


2314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
2321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides functions allowing to :
2327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
2332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
2333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN state.
2337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL state
2340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
2342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3733              		.loc 1 2342 1
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 16
 3736              		@ frame_needed = 1, uses_anonymous_args = 0
 3737              		@ link register save eliminated.
 3738 0000 80B4     		push	{r7}
 3739              	.LCFI193:
 3740              		.cfi_def_cfa_offset 4
 3741              		.cfi_offset 7, -4
 3742 0002 85B0     		sub	sp, sp, #20
 3743              	.LCFI194:
 3744              		.cfi_def_cfa_offset 24
 3745 0004 00AF     		add	r7, sp, #0
 3746              	.LCFI195:
 3747              		.cfi_def_cfa_register 7
 3748 0006 7860     		str	r0, [r7, #4]
2343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3749              		.loc 1 2343 24
 3750 0008 7B68     		ldr	r3, [r7, #4]
 3751 000a 93F82030 		ldrb	r3, [r3, #32]
 3752 000e FB73     		strb	r3, [r7, #15]
2344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 3753              		.loc 1 2345 6
 3754 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3755 0012 012B     		cmp	r3, #1
 3756 0014 02D0     		beq	.L170
 3757              		.loc 1 2345 38 discriminator 1
ARM GAS  /tmp/cce3S0ea.s 			page 127


 3758 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3759 0018 022B     		cmp	r3, #2
 3760 001a 12D1     		bne	.L171
 3761              	.L170:
2346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 3762              		.loc 1 2349 14
 3763 001c 7B68     		ldr	r3, [r7, #4]
 3764 001e 1B68     		ldr	r3, [r3]
 3765              		.loc 1 2349 24
 3766 0020 5B68     		ldr	r3, [r3, #4]
 3767              		.loc 1 2349 30
 3768 0022 03F00203 		and	r3, r3, #2
 3769              		.loc 1 2349 8
 3770 0026 002B     		cmp	r3, #0
 3771 0028 02D0     		beq	.L172
2350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode is active */
2352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
 3772              		.loc 1 2352 13
 3773 002a 0423     		movs	r3, #4
 3774 002c FB73     		strb	r3, [r7, #15]
 3775 002e 08E0     		b	.L171
 3776              	.L172:
2353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode request flag */
2355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 3777              		.loc 1 2355 19
 3778 0030 7B68     		ldr	r3, [r7, #4]
 3779 0032 1B68     		ldr	r3, [r3]
 3780              		.loc 1 2355 29
 3781 0034 1B68     		ldr	r3, [r3]
 3782              		.loc 1 2355 35
 3783 0036 03F00203 		and	r3, r3, #2
 3784              		.loc 1 2355 13
 3785 003a 002B     		cmp	r3, #0
 3786 003c 01D0     		beq	.L171
2356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode request is pending */
2358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 3787              		.loc 1 2358 13
 3788 003e 0323     		movs	r3, #3
 3789 0040 FB73     		strb	r3, [r7, #15]
 3790              	.L171:
2359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
2361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN state */
2367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return state;
 3791              		.loc 1 2367 10
 3792 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/cce3S0ea.s 			page 128


2368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3793              		.loc 1 2368 1
 3794 0044 1846     		mov	r0, r3
 3795 0046 1437     		adds	r7, r7, #20
 3796              	.LCFI196:
 3797              		.cfi_def_cfa_offset 4
 3798 0048 BD46     		mov	sp, r7
 3799              	.LCFI197:
 3800              		.cfi_def_cfa_register 13
 3801              		@ sp needed
 3802 004a 5DF8047B 		ldr	r7, [sp], #4
 3803              	.LCFI198:
 3804              		.cfi_restore 7
 3805              		.cfi_def_cfa_offset 0
 3806 004e 7047     		bx	lr
 3807              		.cfi_endproc
 3808              	.LFE165:
 3810              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 3811              		.align	1
 3812              		.global	HAL_CAN_GetError
 3813              		.syntax unified
 3814              		.thumb
 3815              		.thumb_func
 3817              	HAL_CAN_GetError:
 3818              	.LFB166:
2369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN error code.
2372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval CAN Error Code
2375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
2377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3819              		.loc 1 2377 1
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 8
 3822              		@ frame_needed = 1, uses_anonymous_args = 0
 3823              		@ link register save eliminated.
 3824 0000 80B4     		push	{r7}
 3825              	.LCFI199:
 3826              		.cfi_def_cfa_offset 4
 3827              		.cfi_offset 7, -4
 3828 0002 83B0     		sub	sp, sp, #12
 3829              	.LCFI200:
 3830              		.cfi_def_cfa_offset 16
 3831 0004 00AF     		add	r7, sp, #0
 3832              	.LCFI201:
 3833              		.cfi_def_cfa_register 7
 3834 0006 7860     		str	r0, [r7, #4]
2378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN error code */
2379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return hcan->ErrorCode;
 3835              		.loc 1 2379 14
 3836 0008 7B68     		ldr	r3, [r7, #4]
 3837 000a 5B6A     		ldr	r3, [r3, #36]
2380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3838              		.loc 1 2380 1
ARM GAS  /tmp/cce3S0ea.s 			page 129


 3839 000c 1846     		mov	r0, r3
 3840 000e 0C37     		adds	r7, r7, #12
 3841              	.LCFI202:
 3842              		.cfi_def_cfa_offset 4
 3843 0010 BD46     		mov	sp, r7
 3844              	.LCFI203:
 3845              		.cfi_def_cfa_register 13
 3846              		@ sp needed
 3847 0012 5DF8047B 		ldr	r7, [sp], #4
 3848              	.LCFI204:
 3849              		.cfi_restore 7
 3850              		.cfi_def_cfa_offset 0
 3851 0016 7047     		bx	lr
 3852              		.cfi_endproc
 3853              	.LFE166:
 3855              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 3856              		.align	1
 3857              		.global	HAL_CAN_ResetError
 3858              		.syntax unified
 3859              		.thumb
 3860              		.thumb_func
 3862              	HAL_CAN_ResetError:
 3863              	.LFB167:
2381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Reset the CAN error code.
2384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
2387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 3864              		.loc 1 2389 1
 3865              		.cfi_startproc
 3866              		@ args = 0, pretend = 0, frame = 16
 3867              		@ frame_needed = 1, uses_anonymous_args = 0
 3868              		@ link register save eliminated.
 3869 0000 80B4     		push	{r7}
 3870              	.LCFI205:
 3871              		.cfi_def_cfa_offset 4
 3872              		.cfi_offset 7, -4
 3873 0002 85B0     		sub	sp, sp, #20
 3874              	.LCFI206:
 3875              		.cfi_def_cfa_offset 24
 3876 0004 00AF     		add	r7, sp, #0
 3877              	.LCFI207:
 3878              		.cfi_def_cfa_register 7
 3879 0006 7860     		str	r0, [r7, #4]
2390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 3880              		.loc 1 2390 21
 3881 0008 0023     		movs	r3, #0
 3882 000a FB73     		strb	r3, [r7, #15]
2391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3883              		.loc 1 2391 24
 3884 000c 7B68     		ldr	r3, [r7, #4]
 3885 000e 93F82030 		ldrb	r3, [r3, #32]
 3886 0012 BB73     		strb	r3, [r7, #14]
ARM GAS  /tmp/cce3S0ea.s 			page 130


2392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 3887              		.loc 1 2393 6
 3888 0014 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3889 0016 012B     		cmp	r3, #1
 3890 0018 02D0     		beq	.L177
 3891              		.loc 1 2393 38 discriminator 1
 3892 001a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3893 001c 022B     		cmp	r3, #2
 3894 001e 03D1     		bne	.L178
 3895              	.L177:
2394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset CAN error code */
2397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = 0U;
 3896              		.loc 1 2397 21
 3897 0020 7B68     		ldr	r3, [r7, #4]
 3898 0022 0022     		movs	r2, #0
 3899 0024 5A62     		str	r2, [r3, #36]
 3900 0026 07E0     		b	.L179
 3901              	.L178:
2398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
2400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
2402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 3902              		.loc 1 2402 21
 3903 0028 7B68     		ldr	r3, [r7, #4]
 3904 002a 5B6A     		ldr	r3, [r3, #36]
 3905 002c 43F48022 		orr	r2, r3, #262144
 3906 0030 7B68     		ldr	r3, [r7, #4]
 3907 0032 5A62     		str	r2, [r3, #36]
2403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status = HAL_ERROR;
 3908              		.loc 1 2404 12
 3909 0034 0123     		movs	r3, #1
 3910 0036 FB73     		strb	r3, [r7, #15]
 3911              	.L179:
2405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the status */
2408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 3912              		.loc 1 2408 10
 3913 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 3914              		.loc 1 2409 1
 3915 003a 1846     		mov	r0, r3
 3916 003c 1437     		adds	r7, r7, #20
 3917              	.LCFI208:
 3918              		.cfi_def_cfa_offset 4
 3919 003e BD46     		mov	sp, r7
 3920              	.LCFI209:
 3921              		.cfi_def_cfa_register 13
 3922              		@ sp needed
 3923 0040 5DF8047B 		ldr	r7, [sp], #4
 3924              	.LCFI210:
 3925              		.cfi_restore 7
ARM GAS  /tmp/cce3S0ea.s 			page 131


 3926              		.cfi_def_cfa_offset 0
 3927 0044 7047     		bx	lr
 3928              		.cfi_endproc
 3929              	.LFE167:
 3931              		.text
 3932              	.Letext0:
 3933              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 3934              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 3935              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 3936              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 3937              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 3938              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
ARM GAS  /tmp/cce3S0ea.s 			page 132


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_can.c
     /tmp/cce3S0ea.s:20     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/cce3S0ea.s:26     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/cce3S0ea.s:429    .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/cce3S0ea.s:352    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/cce3S0ea.s:358    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/cce3S0ea.s:899    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/cce3S0ea.s:471    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/cce3S0ea.s:423    .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/cce3S0ea.s:465    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/cce3S0ea.s:507    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/cce3S0ea.s:513    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/cce3S0ea.s:780    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/cce3S0ea.s:786    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/cce3S0ea.s:893    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/cce3S0ea.s:1010   .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/cce3S0ea.s:1016   .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/cce3S0ea.s:1086   .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/cce3S0ea.s:1092   .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/cce3S0ea.s:1198   .text.HAL_CAN_WakeUp:0000000000000080 $d
     /tmp/cce3S0ea.s:1203   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/cce3S0ea.s:1209   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/cce3S0ea.s:1277   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/cce3S0ea.s:1283   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/cce3S0ea.s:1555   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/cce3S0ea.s:1561   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/cce3S0ea.s:1669   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/cce3S0ea.s:1675   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/cce3S0ea.s:1774   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/cce3S0ea.s:1780   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/cce3S0ea.s:1855   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/cce3S0ea.s:1861   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/cce3S0ea.s:1970   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/cce3S0ea.s:1976   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/cce3S0ea.s:2360   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/cce3S0ea.s:2366   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/cce3S0ea.s:2444   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/cce3S0ea.s:2450   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/cce3S0ea.s:2522   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/cce3S0ea.s:2528   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/cce3S0ea.s:2601   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/cce3S0ea.s:2607   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/cce3S0ea.s:3185   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cce3S0ea.s:3311   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/cce3S0ea.s:3227   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cce3S0ea.s:3353   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/cce3S0ea.s:3269   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cce3S0ea.s:3395   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/cce3S0ea.s:3479   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cce3S0ea.s:3437   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cce3S0ea.s:3563   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cce3S0ea.s:3521   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cce3S0ea.s:3605   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/cce3S0ea.s:3647   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/cce3S0ea.s:3689   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/cce3S0ea.s:3179   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
ARM GAS  /tmp/cce3S0ea.s 			page 133


     /tmp/cce3S0ea.s:3221   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3263   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3305   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3347   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3389   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3431   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3473   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3515   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3557   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3599   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3641   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3683   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/cce3S0ea.s:3725   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/cce3S0ea.s:3731   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/cce3S0ea.s:3811   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/cce3S0ea.s:3817   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/cce3S0ea.s:3856   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/cce3S0ea.s:3862   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
ARM GAS  /tmp/cce3S0ea.s 			page 134


                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39

UNDEFINED SYMBOLS
HAL_GetTick
